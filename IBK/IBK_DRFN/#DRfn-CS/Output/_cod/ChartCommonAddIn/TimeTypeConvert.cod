; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30145.0 

	TITLE	D:\git\src\IBK\IBK_DRFN\#DRfn-CS\_Obj\ChartCommonAddIn\TimeTypeConvert.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0CTimeTypeConvert@@QAE@XZ			; CTimeTypeConvert::CTimeTypeConvert
PUBLIC	??1CTimeTypeConvert@@UAE@XZ			; CTimeTypeConvert::~CTimeTypeConvert
PUBLIC	?SetPacketType@CTimeTypeConvert@@QAEXPBD@Z	; CTimeTypeConvert::SetPacketType
PUBLIC	?GetPacketTypeTime@CTimeTypeConvert@@QBE_J_JH@Z	; CTimeTypeConvert::GetPacketTypeTime
PUBLIC	??_GCTimeTypeConvert@@UAEPAXI@Z			; CTimeTypeConvert::`scalar deleting destructor'
PUBLIC	??_7CTimeTypeConvert@@6B@			; CTimeTypeConvert::`vftable'
PUBLIC	??_C@_06MAANBBPI@HHMMSS@			; `string'
PUBLIC	??_C@_04LCMPBGFC@YYYY@				; `string'
PUBLIC	??_C@_06EBMMBHJD@YYYYMM@			; `string'
PUBLIC	??_C@_04BDEGLLOH@MMDD@				; `string'
PUBLIC	??_C@_02ODDIIJPA@DD@				; `string'
PUBLIC	??_C@_02EGJHDPJI@HH@				; `string'
PUBLIC	??_C@_04DCGLEEGD@HHMM@				; `string'
PUBLIC	??_C@_04PKMIKIE@MMSS@				; `string'
PUBLIC	??_C@_02PPNCLIJD@SS@				; `string'
PUBLIC	??_R4CTimeTypeConvert@@6B@			; CTimeTypeConvert::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCTimeTypeConvert@@@8			; CTimeTypeConvert `RTTI Type Descriptor'
PUBLIC	??_R3CTimeTypeConvert@@8			; CTimeTypeConvert::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CTimeTypeConvert@@8			; CTimeTypeConvert::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CTimeTypeConvert@@8		; CTimeTypeConvert::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z:PROC
EXTRN	__imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBDH@Z:PROC
EXTRN	??_ECTimeTypeConvert@@UAEPAXI@Z:PROC		; CTimeTypeConvert::`vector deleting destructor'
EXTRN	?CalcTimeSum@CDataConversion@@SA_J_J0H@Z:PROC	; CDataConversion::CalcTimeSum
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__alldiv:PROC
EXTRN	__allrem:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R1A@?0A@EA@CTimeTypeConvert@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CTimeTypeConvert@@8 DD FLAT:??_R0?AVCTimeTypeConvert@@@8 ; CTimeTypeConvert::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CTimeTypeConvert@@8
rdata$r	ENDS
;	COMDAT ??_R2CTimeTypeConvert@@8
rdata$r	SEGMENT
??_R2CTimeTypeConvert@@8 DD FLAT:??_R1A@?0A@EA@CTimeTypeConvert@@8 ; CTimeTypeConvert::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CTimeTypeConvert@@8
rdata$r	SEGMENT
??_R3CTimeTypeConvert@@8 DD 00H				; CTimeTypeConvert::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CTimeTypeConvert@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCTimeTypeConvert@@@8
data$rs	SEGMENT
??_R0?AVCTimeTypeConvert@@@8 DD FLAT:??_7type_info@@6B@	; CTimeTypeConvert `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCTimeTypeConvert@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CTimeTypeConvert@@6B@
rdata$r	SEGMENT
??_R4CTimeTypeConvert@@6B@ DD 00H			; CTimeTypeConvert::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCTimeTypeConvert@@@8
	DD	FLAT:??_R3CTimeTypeConvert@@8
rdata$r	ENDS
;	COMDAT ??_C@_02PPNCLIJD@SS@
CONST	SEGMENT
??_C@_02PPNCLIJD@SS@ DB 'SS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PKMIKIE@MMSS@
CONST	SEGMENT
??_C@_04PKMIKIE@MMSS@ DB 'MMSS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04DCGLEEGD@HHMM@
CONST	SEGMENT
??_C@_04DCGLEEGD@HHMM@ DB 'HHMM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGJHDPJI@HH@
CONST	SEGMENT
??_C@_02EGJHDPJI@HH@ DB 'HH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02ODDIIJPA@DD@
CONST	SEGMENT
??_C@_02ODDIIJPA@DD@ DB 'DD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04BDEGLLOH@MMDD@
CONST	SEGMENT
??_C@_04BDEGLLOH@MMDD@ DB 'MMDD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBMMBHJD@YYYYMM@
CONST	SEGMENT
??_C@_06EBMMBHJD@YYYYMM@ DB 'YYYYMM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LCMPBGFC@YYYY@
CONST	SEGMENT
??_C@_04LCMPBGFC@YYYY@ DB 'YYYY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06MAANBBPI@HHMMSS@
CONST	SEGMENT
??_C@_06MAANBBPI@HHMMSS@ DB 'HHMMSS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CTimeTypeConvert@@6B@
CONST	SEGMENT
??_7CTimeTypeConvert@@6B@ DD FLAT:??_R4CTimeTypeConvert@@6B@ ; CTimeTypeConvert::`vftable'
	DD	FLAT:??_ECTimeTypeConvert@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CTimeTypeConvert@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CTimeTypeConvert@@QAE@XZ$0
__ehfuncinfo$??0CTimeTypeConvert@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CTimeTypeConvert@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\TimeTypeConvert.cpp
;	COMDAT ??_GCTimeTypeConvert@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCTimeTypeConvert@@UAEPAXI@Z PROC			; CTimeTypeConvert::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 20   : {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 21   : 
; 22   : }

  00006	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CTimeTypeConvert@@6B@
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00015	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00019	74 0b		 je	 SHORT $LN7@scalar
  0001b	6a 38		 push	 56			; 00000038H
  0001d	56		 push	 esi
  0001e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00023	83 c4 08	 add	 esp, 8
$LN7@scalar:
  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??_GCTimeTypeConvert@@UAEPAXI@Z ENDP			; CTimeTypeConvert::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\TimeTypeConvert.cpp
;	COMDAT ?GetPacketTypeTime@CTimeTypeConvert@@QBE_J_JH@Z
_TEXT	SEGMENT
_p_nTime$ = 8						; size = 8
$T1 = 12						; size = 4
$T2 = 16						; size = 4
_p_bCeil$ = 16						; size = 4
?GetPacketTypeTime@CTimeTypeConvert@@QBE_J_JH@Z PROC	; CTimeTypeConvert::GetPacketTypeTime, COMDAT
; _this$ = ecx

; 52   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 53   : 	if( !IsYearInPacketType()) p_nTime = p_nTime % GetRotationFullTime();

  00008	83 7e 0c 00	 cmp	 DWORD PTR [esi+12], 0
  0000c	75 17		 jne	 SHORT $LN6@GetPacketT
  0000e	ff 76 2c	 push	 DWORD PTR [esi+44]
  00011	ff 76 28	 push	 DWORD PTR [esi+40]
  00014	ff 75 0c	 push	 DWORD PTR _p_nTime$[ebp+4]
  00017	ff 75 08	 push	 DWORD PTR _p_nTime$[ebp]
  0001a	e8 00 00 00 00	 call	 __allrem
  0001f	8b f8		 mov	 edi, eax
  00021	8b da		 mov	 ebx, edx
  00023	eb 06		 jmp	 SHORT $LN2@GetPacketT
$LN6@GetPacketT:
  00025	8b 5d 0c	 mov	 ebx, DWORD PTR _p_nTime$[ebp+4]
  00028	8b 7d 08	 mov	 edi, DWORD PTR _p_nTime$[ebp]
$LN2@GetPacketT:

; 54   : 
; 55   : 	if( 1 == m_nMinimumUnitTime) return p_nTime;

  0002b	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  0002e	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00031	83 f9 01	 cmp	 ecx, 1
  00034	75 0f		 jne	 SHORT $LN3@GetPacketT
  00036	85 c0		 test	 eax, eax
  00038	75 0b		 jne	 SHORT $LN3@GetPacketT
  0003a	8b c7		 mov	 eax, edi
  0003c	8b d3		 mov	 edx, ebx
  0003e	5f		 pop	 edi

; 59   : }

  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	5d		 pop	 ebp
  00042	c2 0c 00	 ret	 12			; 0000000cH
$LN3@GetPacketT:

; 56   : 	if( p_bCeil && p_nTime % m_nMinimumUnitTime)

  00045	83 7d 10 00	 cmp	 DWORD PTR _p_bCeil$[ebp], 0
  00049	8b d1		 mov	 edx, ecx
  0004b	74 45		 je	 SHORT $LN4@GetPacketT
  0004d	50		 push	 eax
  0004e	51		 push	 ecx
  0004f	53		 push	 ebx
  00050	57		 push	 edi
  00051	89 4d 10	 mov	 DWORD PTR $T2[ebp], ecx
  00054	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
  00057	e8 00 00 00 00	 call	 __allrem
  0005c	0b c2		 or	 eax, edx
  0005e	74 2c		 je	 SHORT $LN7@GetPacketT

; 57   : 		p_nTime = CDataConversion::CalcTimeSum( p_nTime, m_nMinimumUnitTime);

  00060	6a 00		 push	 0
  00062	ff 76 34	 push	 DWORD PTR [esi+52]
  00065	ff 76 30	 push	 DWORD PTR [esi+48]
  00068	53		 push	 ebx
  00069	57		 push	 edi
  0006a	e8 00 00 00 00	 call	 ?CalcTimeSum@CDataConversion@@SA_J_J0H@Z ; CDataConversion::CalcTimeSum
  0006f	83 c4 14	 add	 esp, 20			; 00000014H
  00072	8b f8		 mov	 edi, eax
  00074	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00077	8b da		 mov	 ebx, edx
  00079	8b 56 30	 mov	 edx, DWORD PTR [esi+48]

; 58   : 	return p_nTime / m_nMinimumUnitTime;

  0007c	50		 push	 eax
  0007d	52		 push	 edx
  0007e	53		 push	 ebx
  0007f	57		 push	 edi
  00080	e8 00 00 00 00	 call	 __alldiv
  00085	5f		 pop	 edi

; 59   : }

  00086	5e		 pop	 esi
  00087	5b		 pop	 ebx
  00088	5d		 pop	 ebp
  00089	c2 0c 00	 ret	 12			; 0000000cH
$LN7@GetPacketT:

; 56   : 	if( p_bCeil && p_nTime % m_nMinimumUnitTime)

  0008c	8b 55 10	 mov	 edx, DWORD PTR $T2[ebp]
  0008f	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
$LN4@GetPacketT:

; 58   : 	return p_nTime / m_nMinimumUnitTime;

  00092	50		 push	 eax
  00093	52		 push	 edx
  00094	53		 push	 ebx
  00095	57		 push	 edi
  00096	e8 00 00 00 00	 call	 __alldiv
  0009b	5f		 pop	 edi

; 59   : }

  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx
  0009e	5d		 pop	 ebp
  0009f	c2 0c 00	 ret	 12			; 0000000cH
?GetPacketTypeTime@CTimeTypeConvert@@QBE_J_JH@Z ENDP	; CTimeTypeConvert::GetPacketTypeTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\TimeTypeConvert.cpp
;	COMDAT ?SetPacketType@CTimeTypeConvert@@QAEXPBD@Z
_TEXT	SEGMENT
_p_szPacketType$ = 8					; size = 4
?SetPacketType@CTimeTypeConvert@@QAEXPBD@Z PROC		; CTimeTypeConvert::SetPacketType, COMDAT
; _this$ = ecx

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 26   : 	m_strPacketType = p_szPacketType;

  00007	ff 75 08	 push	 DWORD PTR _p_szPacketType$[ebp]
  0000a	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 27   : 	m_bIsYearInPacketType	= ( 0 <= m_strPacketType.Find( "YYYY"));

  00013	6a 00		 push	 0
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_04LCMPBGFC@YYYY@
  0001a	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBDH@Z
  00023	33 c9		 xor	 ecx, ecx
  00025	85 c0		 test	 eax, eax

; 28   : 	m_bIsMonthInPacketType	= ( ( 0 <= m_strPacketType.Find( "YYYYMM")) || ( 0 <= m_strPacketType.Find( "MMDD")));

  00027	6a 00		 push	 0
  00029	0f 99 c1	 setns	 cl
  0002c	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  0002f	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_06EBMMBHJD@YYYYMM@
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBDH@Z
  0003d	85 c0		 test	 eax, eax
  0003f	79 18		 jns	 SHORT $LN13@SetPacketT
  00041	6a 00		 push	 0
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_04BDEGLLOH@MMDD@
  00048	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBDH@Z
  00051	85 c0		 test	 eax, eax
  00053	79 04		 jns	 SHORT $LN13@SetPacketT
  00055	33 c0		 xor	 eax, eax
  00057	eb 05		 jmp	 SHORT $LN14@SetPacketT
$LN13@SetPacketT:
  00059	b8 01 00 00 00	 mov	 eax, 1
$LN14@SetPacketT:

; 29   : 	m_bIsDayInPacketType	= ( 0 <= m_strPacketType.Find( "DD"));

  0005e	6a 00		 push	 0
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_02ODDIIJPA@DD@
  00065	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00068	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBDH@Z
  00071	33 c9		 xor	 ecx, ecx
  00073	85 c0		 test	 eax, eax

; 30   : 	m_bIsHourInPacketType	= ( 0 <= m_strPacketType.Find( "HH"));

  00075	6a 00		 push	 0
  00077	0f 99 c1	 setns	 cl
  0007a	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  0007d	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_02EGJHDPJI@HH@
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBDH@Z
  0008b	33 c9		 xor	 ecx, ecx
  0008d	85 c0		 test	 eax, eax

; 31   : 	m_bIsMinuteInPacketType	= ( ( 0 <= m_strPacketType.Find( "HHMM")) || ( 0 <= m_strPacketType.Find( "MMSS")));

  0008f	6a 00		 push	 0
  00091	0f 99 c1	 setns	 cl
  00094	89 4e 18	 mov	 DWORD PTR [esi+24], ecx
  00097	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0009a	68 00 00 00 00	 push	 OFFSET ??_C@_04DCGLEEGD@HHMM@
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBDH@Z
  000a5	85 c0		 test	 eax, eax
  000a7	79 18		 jns	 SHORT $LN15@SetPacketT
  000a9	6a 00		 push	 0
  000ab	68 00 00 00 00	 push	 OFFSET ??_C@_04PKMIKIE@MMSS@
  000b0	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  000b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBDH@Z
  000b9	85 c0		 test	 eax, eax
  000bb	79 04		 jns	 SHORT $LN15@SetPacketT
  000bd	33 c0		 xor	 eax, eax
  000bf	eb 05		 jmp	 SHORT $LN16@SetPacketT
$LN15@SetPacketT:
  000c1	b8 01 00 00 00	 mov	 eax, 1
$LN16@SetPacketT:

; 32   : 	m_bIsSecondInPacketType	= ( 0 <= m_strPacketType.Find( "SS"));

  000c6	6a 00		 push	 0
  000c8	68 00 00 00 00	 push	 OFFSET ??_C@_02PPNCLIJD@SS@
  000cd	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  000d0	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  000d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBDH@Z
  000d9	33 d2		 xor	 edx, edx

; 33   : 
; 34   : 	__int64 nMod = 100000000000000;

  000db	b9 f3 5a 00 00	 mov	 ecx, 23283		; 00005af3H
  000e0	85 c0		 test	 eax, eax
  000e2	b8 00 40 7a 10	 mov	 eax, 276447232		; 107a4000H
  000e7	0f 99 c2	 setns	 dl

; 35   : 	if( 100000000000000 == nMod && !IsYearInPacketType())	nMod = 10000000000;

  000ea	83 7e 0c 00	 cmp	 DWORD PTR [esi+12], 0
  000ee	89 56 20	 mov	 DWORD PTR [esi+32], edx
  000f1	75 35		 jne	 SHORT $LN6@SetPacketT

; 36   : 	if(     10000000000 == nMod && !IsMonthInPacketType())	nMod =   100000000;

  000f3	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  000f7	b8 00 e4 0b 54	 mov	 eax, 1410065408		; 540be400H
  000fc	b9 02 00 00 00	 mov	 ecx, 2
  00101	75 25		 jne	 SHORT $LN6@SetPacketT
  00103	33 c9		 xor	 ecx, ecx
  00105	b8 00 e1 f5 05	 mov	 eax, 100000000		; 05f5e100H

; 37   : 	if(       100000000 == nMod && !IsDayInPacketType())	nMod =     1000000;

  0010a	39 4e 14	 cmp	 DWORD PTR [esi+20], ecx
  0010d	75 19		 jne	 SHORT $LN6@SetPacketT
  0010f	b8 40 42 0f 00	 mov	 eax, 1000000		; 000f4240H

; 38   : 	if(         1000000 == nMod && !IsHourInPacketType())	nMod =       10000;

  00114	39 4e 18	 cmp	 DWORD PTR [esi+24], ecx
  00117	75 0f		 jne	 SHORT $LN6@SetPacketT
  00119	b8 10 27 00 00	 mov	 eax, 10000		; 00002710H

; 39   : 	if(           10000 == nMod && !IsMinuteInPacketType())	nMod =         100;

  0011e	39 4e 1c	 cmp	 DWORD PTR [esi+28], ecx
  00121	75 05		 jne	 SHORT $LN6@SetPacketT
  00123	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
$LN6@SetPacketT:

; 40   : 	m_nRotationFullTime = nMod;

  00128	89 4e 2c	 mov	 DWORD PTR [esi+44], ecx

; 41   : 
; 42   : 	nMod = 1;

  0012b	33 c9		 xor	 ecx, ecx
  0012d	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00130	b8 01 00 00 00	 mov	 eax, 1

; 43   : 	if(             1 == nMod && !IsSecondInPacketType())	nMod =           100;

  00135	85 d2		 test	 edx, edx
  00137	75 30		 jne	 SHORT $LN11@SetPacketT
  00139	8d 41 64	 lea	 eax, DWORD PTR [ecx+100]

; 44   : 	if(           100 == nMod && !IsMinuteInPacketType())	nMod =         10000;

  0013c	39 4e 1c	 cmp	 DWORD PTR [esi+28], ecx
  0013f	75 28		 jne	 SHORT $LN11@SetPacketT
  00141	b8 10 27 00 00	 mov	 eax, 10000		; 00002710H

; 45   : 	if(         10000 == nMod && !IsHourInPacketType())		nMod =       1000000;

  00146	39 4e 18	 cmp	 DWORD PTR [esi+24], ecx
  00149	75 1e		 jne	 SHORT $LN11@SetPacketT
  0014b	b8 40 42 0f 00	 mov	 eax, 1000000		; 000f4240H

; 46   : 	if(       1000000 == nMod && !IsDayInPacketType())		nMod =     100000000;

  00150	39 4e 14	 cmp	 DWORD PTR [esi+20], ecx
  00153	75 14		 jne	 SHORT $LN11@SetPacketT
  00155	b8 00 e1 f5 05	 mov	 eax, 100000000		; 05f5e100H

; 47   : 	if(     100000000 == nMod && !IsMonthInPacketType())	nMod =   10000000000;

  0015a	39 4e 10	 cmp	 DWORD PTR [esi+16], ecx
  0015d	75 0a		 jne	 SHORT $LN11@SetPacketT
  0015f	b8 00 e4 0b 54	 mov	 eax, 1410065408		; 540be400H
  00164	b9 02 00 00 00	 mov	 ecx, 2
$LN11@SetPacketT:

; 48   : 	m_nMinimumUnitTime = nMod;

  00169	5f		 pop	 edi
  0016a	89 46 30	 mov	 DWORD PTR [esi+48], eax
  0016d	89 4e 34	 mov	 DWORD PTR [esi+52], ecx
  00170	5e		 pop	 esi

; 49   : }

  00171	5d		 pop	 ebp
  00172	c2 04 00	 ret	 4
?SetPacketType@CTimeTypeConvert@@QAEXPBD@Z ENDP		; CTimeTypeConvert::SetPacketType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\TimeTypeConvert.cpp
;	COMDAT ??1CTimeTypeConvert@@UAE@XZ
_TEXT	SEGMENT
??1CTimeTypeConvert@@UAE@XZ PROC			; CTimeTypeConvert::~CTimeTypeConvert, COMDAT
; _this$ = ecx

; 20   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CTimeTypeConvert@@6B@

; 21   : 
; 22   : }

  00006	83 c1 08	 add	 ecx, 8
  00009	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
??1CTimeTypeConvert@@UAE@XZ ENDP			; CTimeTypeConvert::~CTimeTypeConvert
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\TimeTypeConvert.cpp
;	COMDAT ??0CTimeTypeConvert@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CTimeTypeConvert@@QAE@XZ PROC			; CTimeTypeConvert::CTimeTypeConvert, COMDAT
; _this$ = ecx

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CTimeTypeConvert@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CTimeTypeConvert@@6B@
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 16   : 	SetPacketType( "HHMMSS");

  00038	68 00 00 00 00	 push	 OFFSET ??_C@_06MAANBBPI@HHMMSS@
  0003d	8b ce		 mov	 ecx, esi
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	e8 00 00 00 00	 call	 ?SetPacketType@CTimeTypeConvert@@QAEXPBD@Z ; CTimeTypeConvert::SetPacketType

; 17   : }

  0004b	8b c6		 mov	 eax, esi
  0004d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00050	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00057	59		 pop	 ecx
  00058	5e		 pop	 esi
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CTimeTypeConvert@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$??0CTimeTypeConvert@@QAE@XZ:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CTimeTypeConvert@@QAE@XZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CTimeTypeConvert@@QAE@XZ ENDP			; CTimeTypeConvert::CTimeTypeConvert
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\TimeTypeConvert.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\TimeTypeConvert.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
