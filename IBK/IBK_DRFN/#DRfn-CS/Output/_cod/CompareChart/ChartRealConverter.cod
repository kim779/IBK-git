; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30145.0 

	TITLE	D:\git\src\IBK\IBK_DRFN\#DRfn-CS\_Obj\CompareChart\ChartRealConverter.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?Convert_KXS3@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z ; CChartRealConverter::Convert_KXS3
PUBLIC	?Convert_KXYS@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z ; CChartRealConverter::Convert_KXYS
PUBLIC	?Convert_EWs3@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z ; CChartRealConverter::Convert_EWs3
PUBLIC	?Convert_IXIJ@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z ; CChartRealConverter::Convert_IXIJ
PUBLIC	?Convert_FFC0@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z ; CChartRealConverter::Convert_FFC0
PUBLIC	?Convert_OOC0@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z ; CChartRealConverter::Convert_OOC0
PUBLIC	?Convert_JFC0@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z ; CChartRealConverter::Convert_JFC0
PUBLIC	?Convert_JOC0@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z ; CChartRealConverter::Convert_JOC0
PUBLIC	?Convert_HWFJ@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z ; CChartRealConverter::Convert_HWFJ
PUBLIC	?Convert_GTFJ@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z ; CChartRealConverter::Convert_GTFJ
PUBLIC	?Convert_FOJS@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z ; CChartRealConverter::Convert_FOJS
PUBLIC	??_C@_01GBGANLPD@0@				; `string'
PUBLIC	??_C@_03DLDNIBIK@?$CFlf@			; `string'
PUBLIC	??_C@_03JALODAI@?$CFld@				; `string'
PUBLIC	__real@4059000000000000
EXTRN	__imp__atof:PROC
EXTRN	__imp__atol:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z:PROC
EXTRN	__imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ:PROC
EXTRN	__imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ:PROC
EXTRN	__imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT ??_C@_03JALODAI@?$CFld@
CONST	SEGMENT
??_C@_03JALODAI@?$CFld@ DB '%ld', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03DLDNIBIK@?$CFlf@
CONST	SEGMENT
??_C@_03DLDNIBIK@?$CFlf@ DB '%lf', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0@
CONST	SEGMENT
??_C@_01GBGANLPD@0@ DB '0', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Convert_FOJS@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Convert_FOJS@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z$0
__ehfuncinfo$?Convert_FOJS@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Convert_FOJS@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Convert_GTFJ@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Convert_GTFJ@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z$0
__ehfuncinfo$?Convert_GTFJ@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Convert_GTFJ@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Convert_HWFJ@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Convert_HWFJ@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z$0
__ehfuncinfo$?Convert_HWFJ@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Convert_HWFJ@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\COMMONTR\ChartRealConverter.cpp
;	COMDAT ?Convert_FOJS@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z
_TEXT	SEGMENT
_pRealStruct$GSCopy$1$ = -52				; size = 4
_realData_Common$GSCopy$1$ = -48			; size = 4
_strTmp$ = -44						; size = 4
_sTmp$ = -40						; size = 21
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pRealStruct$ = 8					; size = 4
_realData_Common$ = 12					; size = 4
?Convert_FOJS@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z PROC ; CChartRealConverter::Convert_FOJS, COMDAT

; 667  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Convert_FOJS@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 5d 08	 mov	 ebx, DWORD PTR _pRealStruct$[ebp]

; 668  : 	LPFOJS_OutBlock pInput = (LPFOJS_OutBlock)pRealStruct;
; 669  : 	CString strTmp;

  0002e	8d 4d d4	 lea	 ecx, DWORD PTR _strTmp$[ebp]
  00031	8b 7d 0c	 mov	 edi, DWORD PTR _realData_Common$[ebp]
  00034	89 5d cc	 mov	 DWORD PTR _pRealStruct$GSCopy$1$[ebp], ebx
  00037	89 7d d0	 mov	 DWORD PTR _realData_Common$GSCopy$1$[ebp], edi
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 670  : 	char sTmp[20+1];
; 671  : 	
; 672  : 	memcpy(sTmp, pInput->symbol, sizeof(pInput->symbol));	/*  [심볼코드]				*/

  00040	0f b7 43 08	 movzx	 eax, WORD PTR [ebx+8]

; 673  : 	sTmp[sizeof(pInput->symbol)]=0;
; 674  : 	realData_Common.m_strCode = sTmp;

  00044	8b cf		 mov	 ecx, edi
  00046	f3 0f 7e 03	 movq	 xmm0, QWORD PTR [ebx]
  0004a	66 89 45 e0	 mov	 WORD PTR _sTmp$[ebp+8], ax
  0004e	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00051	50		 push	 eax
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00059	66 0f d6 45 d8	 movq	 QWORD PTR _sTmp$[ebp], xmm0
  0005e	c6 45 e2 00	 mov	 BYTE PTR _sTmp$[ebp+10], 0
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 675  : 	realData_Common.m_strCode.TrimLeft(); realData_Common.m_strCode.TrimRight();

  00068	8b cf		 mov	 ecx, edi
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00070	8b cf		 mov	 ecx, edi
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 676  : 	
; 677  : 	memcpy(sTmp, pInput->time, sizeof(pInput->time));	/*  [시간(현지시간)]				*/

  00078	0f b7 43 1c	 movzx	 eax, WORD PTR [ebx+28]

; 678  : 	sTmp[sizeof(pInput->time)]=0;
; 679  : 	realData_Common.m_strTime = sTmp;

  0007c	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  0007f	f3 0f 7e 43 14	 movq	 xmm0, QWORD PTR [ebx+20]
  00084	66 89 45 e0	 mov	 WORD PTR _sTmp$[ebp+8], ax
  00088	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  0008b	50		 push	 eax
  0008c	66 0f d6 45 d8	 movq	 QWORD PTR _sTmp$[ebp], xmm0
  00091	c6 45 e2 00	 mov	 BYTE PTR _sTmp$[ebp+10], 0
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 680  : 	realData_Common.m_strTime.TrimLeft(); realData_Common.m_strTime.TrimRight();

  0009b	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  000a4	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 681  : 	
; 682  : 	memcpy(sTmp, pInput->sign, sizeof(pInput->sign));		/*  [전일대비구분]				*/

  000ad	0f b6 43 57	 movzx	 eax, BYTE PTR [ebx+87]

; 683  : 	sTmp[sizeof(pInput->sign)]=0;
; 684  : 	realData_Common.m_strSign = sTmp;

  000b1	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  000b4	88 45 d8	 mov	 BYTE PTR _sTmp$[ebp], al
  000b7	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  000ba	50		 push	 eax
  000bb	c6 45 d9 00	 mov	 BYTE PTR _sTmp$[ebp+1], 0
  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 685  : 	realData_Common.m_strSign.TrimLeft(); realData_Common.m_strSign.TrimRight();

  000c5	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  000ce	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 686  : 	
; 687  : 	memcpy(sTmp, pInput->price, sizeof(pInput->price));		/*  [현재가]		*/

  000d7	8b 43 4e	 mov	 eax, DWORD PTR [ebx+78]
  000da	8b 4b 52	 mov	 ecx, DWORD PTR [ebx+82]
  000dd	89 45 d8	 mov	 DWORD PTR _sTmp$[ebp], eax

; 688  : 	sTmp[sizeof(pInput->price)]=0;
; 689  : 	strTmp.Format("%lf", atof(sTmp)*100.);

  000e0	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  000e3	50		 push	 eax
  000e4	89 4d dc	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  000e7	c6 45 e0 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atof
  000f1	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  000f7	8d 45 d4	 lea	 eax, DWORD PTR _strTmp$[ebp]
  000fa	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  00100	51		 push	 ecx
  00101	dd 1c 24	 fstp	 QWORD PTR [esp]
  00104	68 00 00 00 00	 push	 OFFSET ??_C@_03DLDNIBIK@?$CFlf@
  00109	50		 push	 eax
  0010a	ff d3		 call	 ebx

; 690  : 	realData_Common.m_strPrice.Format("%ld", atol(strTmp));

  0010c	ff 75 d4	 push	 DWORD PTR _strTmp$[ebp]
  0010f	8d 77 0c	 lea	 esi, DWORD PTR [edi+12]
  00112	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__atol
  00118	ff d7		 call	 edi
  0011a	50		 push	 eax
  0011b	68 00 00 00 00	 push	 OFFSET ??_C@_03JALODAI@?$CFld@
  00120	56		 push	 esi
  00121	ff d3		 call	 ebx
  00123	83 c4 20	 add	 esp, 32			; 00000020H

; 691  : 	realData_Common.m_strPrice.TrimLeft(); realData_Common.m_strPrice.TrimRight();

  00126	8b ce		 mov	 ecx, esi
  00128	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0012e	8b ce		 mov	 ecx, esi
  00130	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 692  : 	
; 693  : 	memcpy(sTmp, pInput->change, sizeof(pInput->change));	/*  [전일대비]		*/

  00136	8b 4d cc	 mov	 ecx, DWORD PTR _pRealStruct$GSCopy$1$[ebp]

; 694  : 	sTmp[sizeof(pInput->change)]=0;

  00139	c6 45 e0 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  0013d	8b 41 59	 mov	 eax, DWORD PTR [ecx+89]
  00140	8b 49 5d	 mov	 ecx, DWORD PTR [ecx+93]
  00143	89 45 d8	 mov	 DWORD PTR _sTmp$[ebp], eax

; 695  : 	strTmp.Format("%lf", atof(sTmp)*100.);

  00146	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00149	89 4d dc	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  0014c	50		 push	 eax
  0014d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atof
  00153	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  00159	8d 45 d4	 lea	 eax, DWORD PTR _strTmp$[ebp]
  0015c	51		 push	 ecx
  0015d	dd 1c 24	 fstp	 QWORD PTR [esp]
  00160	68 00 00 00 00	 push	 OFFSET ??_C@_03DLDNIBIK@?$CFlf@
  00165	50		 push	 eax
  00166	ff d3		 call	 ebx

; 696  : 	realData_Common.m_strChange.Format("%ld", atol(strTmp));

  00168	8b 75 d0	 mov	 esi, DWORD PTR _realData_Common$GSCopy$1$[ebp]
  0016b	ff 75 d4	 push	 DWORD PTR _strTmp$[ebp]
  0016e	83 c6 10	 add	 esi, 16			; 00000010H
  00171	ff d7		 call	 edi
  00173	50		 push	 eax
  00174	68 00 00 00 00	 push	 OFFSET ??_C@_03JALODAI@?$CFld@
  00179	56		 push	 esi
  0017a	ff d3		 call	 ebx
  0017c	83 c4 20	 add	 esp, 32			; 00000020H

; 697  : 	realData_Common.m_strChange.TrimLeft(); realData_Common.m_strChange.TrimRight();

  0017f	8b ce		 mov	 ecx, esi
  00181	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00187	8b ce		 mov	 ecx, esi
  00189	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 698  : 	
; 699  : 	memcpy(sTmp, pInput->drate, sizeof(pInput->drate));		/*  [등락율]				*/

  0018f	8b 4d cc	 mov	 ecx, DWORD PTR _pRealStruct$GSCopy$1$[ebp]

; 700  : 	sTmp[sizeof(pInput->drate)]=0;

  00192	c6 45 de 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  00196	8b 41 62	 mov	 eax, DWORD PTR [ecx+98]
  00199	89 45 d8	 mov	 DWORD PTR _sTmp$[ebp], eax
  0019c	0f b7 41 66	 movzx	 eax, WORD PTR [ecx+102]
  001a0	66 89 45 dc	 mov	 WORD PTR _sTmp$[ebp+4], ax

; 701  : 	strTmp.Format("%lf", atof(sTmp)*100.);

  001a4	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  001a7	50		 push	 eax
  001a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atof
  001ae	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  001b4	8d 45 d4	 lea	 eax, DWORD PTR _strTmp$[ebp]
  001b7	51		 push	 ecx
  001b8	dd 1c 24	 fstp	 QWORD PTR [esp]
  001bb	68 00 00 00 00	 push	 OFFSET ??_C@_03DLDNIBIK@?$CFlf@
  001c0	50		 push	 eax
  001c1	ff d3		 call	 ebx

; 702  : 	realData_Common.m_strChrate.Format("%ld", atol(strTmp));

  001c3	8b 75 d0	 mov	 esi, DWORD PTR _realData_Common$GSCopy$1$[ebp]
  001c6	ff 75 d4	 push	 DWORD PTR _strTmp$[ebp]
  001c9	83 c6 14	 add	 esi, 20			; 00000014H
  001cc	ff d7		 call	 edi
  001ce	50		 push	 eax
  001cf	68 00 00 00 00	 push	 OFFSET ??_C@_03JALODAI@?$CFld@
  001d4	56		 push	 esi
  001d5	ff d3		 call	 ebx
  001d7	83 c4 20	 add	 esp, 32			; 00000020H

; 703  : 	realData_Common.m_strChrate.TrimLeft(); realData_Common.m_strChrate.TrimRight();

  001da	8b ce		 mov	 ecx, esi
  001dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  001e2	8b ce		 mov	 ecx, esi
  001e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 704  : 	
; 705  : 	memcpy(sTmp, pInput->volume, sizeof(pInput->volume));	/*  [거래량]		*/

  001ea	8b 45 cc	 mov	 eax, DWORD PTR _pRealStruct$GSCopy$1$[ebp]

; 706  : 	sTmp[sizeof(pInput->volume)]=0;
; 707  : 	realData_Common.m_strVolume = sTmp;

  001ed	8b 75 d0	 mov	 esi, DWORD PTR _realData_Common$GSCopy$1$[ebp]
  001f0	83 c6 18	 add	 esi, 24			; 00000018H
  001f3	c6 45 e1 00	 mov	 BYTE PTR _sTmp$[ebp+9], 0
  001f7	8b ce		 mov	 ecx, esi
  001f9	f3 0f 7e 80 99
	00 00 00	 movq	 xmm0, QWORD PTR [eax+153]
  00201	0f b6 80 a1 00
	00 00		 movzx	 eax, BYTE PTR [eax+161]
  00208	88 45 e0	 mov	 BYTE PTR _sTmp$[ebp+8], al
  0020b	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  0020e	50		 push	 eax
  0020f	66 0f d6 45 d8	 movq	 QWORD PTR _sTmp$[ebp], xmm0
  00214	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 708  : 	realData_Common.m_strVolume.TrimLeft(); realData_Common.m_strVolume.TrimRight();

  0021a	8b ce		 mov	 ecx, esi
  0021c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00222	8b ce		 mov	 ecx, esi
  00224	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 709  : 	
; 710  : 	memcpy(sTmp, pInput->open, sizeof(pInput->open));		/*  [시가]		*/

  0022a	8b 4d cc	 mov	 ecx, DWORD PTR _pRealStruct$GSCopy$1$[ebp]

; 711  : 	sTmp[sizeof(pInput->open)]=0;

  0022d	c6 45 e0 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  00231	8b 41 33	 mov	 eax, DWORD PTR [ecx+51]
  00234	8b 49 37	 mov	 ecx, DWORD PTR [ecx+55]
  00237	89 45 d8	 mov	 DWORD PTR _sTmp$[ebp], eax

; 712  : 	strTmp.Format("%lf", atof(sTmp)*100.);

  0023a	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  0023d	50		 push	 eax
  0023e	89 4d dc	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  00241	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atof
  00247	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  0024d	8d 45 d4	 lea	 eax, DWORD PTR _strTmp$[ebp]
  00250	51		 push	 ecx
  00251	dd 1c 24	 fstp	 QWORD PTR [esp]
  00254	68 00 00 00 00	 push	 OFFSET ??_C@_03DLDNIBIK@?$CFlf@
  00259	50		 push	 eax
  0025a	ff d3		 call	 ebx

; 713  : 	realData_Common.m_strOpen.Format("%ld", atol(strTmp));

  0025c	8b 75 d0	 mov	 esi, DWORD PTR _realData_Common$GSCopy$1$[ebp]
  0025f	ff 75 d4	 push	 DWORD PTR _strTmp$[ebp]
  00262	83 c6 1c	 add	 esi, 28			; 0000001cH
  00265	ff d7		 call	 edi
  00267	50		 push	 eax
  00268	68 00 00 00 00	 push	 OFFSET ??_C@_03JALODAI@?$CFld@
  0026d	56		 push	 esi
  0026e	ff d3		 call	 ebx
  00270	83 c4 20	 add	 esp, 32			; 00000020H

; 714  : 	realData_Common.m_strOpen.TrimLeft(); realData_Common.m_strOpen.TrimRight();

  00273	8b ce		 mov	 ecx, esi
  00275	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0027b	8b ce		 mov	 ecx, esi
  0027d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 715  : 	
; 716  : 	memcpy(sTmp, pInput->high, sizeof(pInput->high));		/*  [고가]		*/

  00283	8b 4d cc	 mov	 ecx, DWORD PTR _pRealStruct$GSCopy$1$[ebp]

; 717  : 	sTmp[sizeof(pInput->high)]=0;

  00286	c6 45 e0 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  0028a	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  0028d	8b 49 40	 mov	 ecx, DWORD PTR [ecx+64]
  00290	89 45 d8	 mov	 DWORD PTR _sTmp$[ebp], eax

; 718  : 	strTmp.Format("%lf", atof(sTmp)*100.);

  00293	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00296	50		 push	 eax
  00297	89 4d dc	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  0029a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atof
  002a0	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  002a6	8d 45 d4	 lea	 eax, DWORD PTR _strTmp$[ebp]
  002a9	51		 push	 ecx
  002aa	dd 1c 24	 fstp	 QWORD PTR [esp]
  002ad	68 00 00 00 00	 push	 OFFSET ??_C@_03DLDNIBIK@?$CFlf@
  002b2	50		 push	 eax
  002b3	ff d3		 call	 ebx

; 719  : 	realData_Common.m_strHigh.Format("%ld", atol(strTmp));

  002b5	8b 75 d0	 mov	 esi, DWORD PTR _realData_Common$GSCopy$1$[ebp]
  002b8	ff 75 d4	 push	 DWORD PTR _strTmp$[ebp]
  002bb	83 c6 20	 add	 esi, 32			; 00000020H
  002be	ff d7		 call	 edi
  002c0	50		 push	 eax
  002c1	68 00 00 00 00	 push	 OFFSET ??_C@_03JALODAI@?$CFld@
  002c6	56		 push	 esi
  002c7	ff d3		 call	 ebx
  002c9	83 c4 20	 add	 esp, 32			; 00000020H

; 720  : 	realData_Common.m_strHigh.TrimLeft(); realData_Common.m_strHigh.TrimRight();

  002cc	8b ce		 mov	 ecx, esi
  002ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  002d4	8b ce		 mov	 ecx, esi
  002d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 721  : 	
; 722  : 	memcpy(sTmp, pInput->low, sizeof(pInput->low));			/*  [저가]		*/

  002dc	8b 4d cc	 mov	 ecx, DWORD PTR _pRealStruct$GSCopy$1$[ebp]

; 723  : 	sTmp[sizeof(pInput->low)]=0;

  002df	c6 45 e0 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  002e3	8b 41 45	 mov	 eax, DWORD PTR [ecx+69]
  002e6	8b 49 49	 mov	 ecx, DWORD PTR [ecx+73]
  002e9	89 45 d8	 mov	 DWORD PTR _sTmp$[ebp], eax

; 724  : 	strTmp.Format("%lf", atof(sTmp)*100.);

  002ec	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  002ef	50		 push	 eax
  002f0	89 4d dc	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  002f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atof
  002f9	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  002ff	8d 45 d4	 lea	 eax, DWORD PTR _strTmp$[ebp]
  00302	51		 push	 ecx
  00303	dd 1c 24	 fstp	 QWORD PTR [esp]
  00306	68 00 00 00 00	 push	 OFFSET ??_C@_03DLDNIBIK@?$CFlf@
  0030b	50		 push	 eax
  0030c	ff d3		 call	 ebx

; 725  : 	realData_Common.m_strLow.Format("%ld", atol(strTmp));

  0030e	8b 75 d0	 mov	 esi, DWORD PTR _realData_Common$GSCopy$1$[ebp]
  00311	ff 75 d4	 push	 DWORD PTR _strTmp$[ebp]
  00314	83 c6 24	 add	 esi, 36			; 00000024H
  00317	ff d7		 call	 edi
  00319	50		 push	 eax
  0031a	68 00 00 00 00	 push	 OFFSET ??_C@_03JALODAI@?$CFld@
  0031f	56		 push	 esi
  00320	ff d3		 call	 ebx
  00322	83 c4 20	 add	 esp, 32			; 00000020H

; 726  : 	realData_Common.m_strLow.TrimLeft(); realData_Common.m_strLow.TrimRight();

  00325	8b ce		 mov	 ecx, esi
  00327	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0032d	8b ce		 mov	 ecx, esi
  0032f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 727  : 	
; 728  : 	realData_Common.m_strValue = "0";

  00335	8b 5d d0	 mov	 ebx, DWORD PTR _realData_Common$GSCopy$1$[ebp]
  00338	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0@
  0033d	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
  00340	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 729  : 	
; 730  : 	realData_Common.m_nMarketType = CMasterTypeInfo::FOREIGN_CHART;
; 731  : 	return TRUE;

  00346	8d 4d d4	 lea	 ecx, DWORD PTR _strTmp$[ebp]
  00349	c7 43 2c 04 00
	00 00		 mov	 DWORD PTR [ebx+44], 4
  00350	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00356	b8 01 00 00 00	 mov	 eax, 1

; 732  : }

  0035b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0035e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00365	59		 pop	 ecx
  00366	5f		 pop	 edi
  00367	5e		 pop	 esi
  00368	5b		 pop	 ebx
  00369	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0036c	33 cd		 xor	 ecx, ebp
  0036e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00373	8b e5		 mov	 esp, ebp
  00375	5d		 pop	 ebp
  00376	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Convert_FOJS@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR _strTmp$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
__ehhandler$?Convert_FOJS@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z:
  0000e	90		 npad	 1
  0000f	90		 npad	 1
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Convert_FOJS@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Convert_FOJS@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z ENDP ; CChartRealConverter::Convert_FOJS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\COMMONTR\ChartRealConverter.cpp
;	COMDAT ?Convert_GTFJ@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z
_TEXT	SEGMENT
_pRealStruct$GSCopy$1$ = -52				; size = 4
_realData_Common$GSCopy$1$ = -48			; size = 4
_strTmp$ = -44						; size = 4
_sTmp$ = -40						; size = 21
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pRealStruct$ = 8					; size = 4
_realData_Common$ = 12					; size = 4
?Convert_GTFJ@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z PROC ; CChartRealConverter::Convert_GTFJ, COMDAT

; 596  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Convert_GTFJ@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 5d 08	 mov	 ebx, DWORD PTR _pRealStruct$[ebp]

; 597  : 	LPGTFJ_OutBlock pInput = (LPGTFJ_OutBlock)pRealStruct;
; 598  : 	CString strTmp;

  0002e	8d 4d d4	 lea	 ecx, DWORD PTR _strTmp$[ebp]
  00031	8b 7d 0c	 mov	 edi, DWORD PTR _realData_Common$[ebp]
  00034	89 5d cc	 mov	 DWORD PTR _pRealStruct$GSCopy$1$[ebp], ebx
  00037	89 7d d0	 mov	 DWORD PTR _realData_Common$GSCopy$1$[ebp], edi
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 599  : 	char sTmp[20+1];
; 600  : 	
; 601  : 	memcpy(sTmp, pInput->symbol, sizeof(pInput->symbol));	/*  [심볼코드]				*/

  00040	0f b7 43 08	 movzx	 eax, WORD PTR [ebx+8]

; 602  : 	sTmp[sizeof(pInput->symbol)]=0;
; 603  : 	realData_Common.m_strCode = sTmp;

  00044	8b cf		 mov	 ecx, edi
  00046	f3 0f 7e 03	 movq	 xmm0, QWORD PTR [ebx]
  0004a	66 89 45 e0	 mov	 WORD PTR _sTmp$[ebp+8], ax
  0004e	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00051	50		 push	 eax
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00059	66 0f d6 45 d8	 movq	 QWORD PTR _sTmp$[ebp], xmm0
  0005e	c6 45 e2 00	 mov	 BYTE PTR _sTmp$[ebp+10], 0
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 604  : 	realData_Common.m_strCode.TrimLeft(); realData_Common.m_strCode.TrimRight();

  00068	8b cf		 mov	 ecx, edi
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00070	8b cf		 mov	 ecx, edi
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 605  : 	
; 606  : 	memcpy(sTmp, pInput->time, sizeof(pInput->time));	/*  [시간(현지시간)]				*/

  00078	0f b7 43 1c	 movzx	 eax, WORD PTR [ebx+28]

; 607  : 	sTmp[sizeof(pInput->time)]=0;
; 608  : 	realData_Common.m_strTime = sTmp;

  0007c	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  0007f	f3 0f 7e 43 14	 movq	 xmm0, QWORD PTR [ebx+20]
  00084	66 89 45 e0	 mov	 WORD PTR _sTmp$[ebp+8], ax
  00088	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  0008b	50		 push	 eax
  0008c	66 0f d6 45 d8	 movq	 QWORD PTR _sTmp$[ebp], xmm0
  00091	c6 45 e2 00	 mov	 BYTE PTR _sTmp$[ebp+10], 0
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 609  : 	realData_Common.m_strTime.TrimLeft(); realData_Common.m_strTime.TrimRight();

  0009b	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  000a4	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 610  : 	
; 611  : 	memcpy(sTmp, pInput->sign, sizeof(pInput->sign));		/*  [전일대비구분]				*/

  000ad	0f b6 43 57	 movzx	 eax, BYTE PTR [ebx+87]

; 612  : 	sTmp[sizeof(pInput->sign)]=0;
; 613  : 	realData_Common.m_strSign = sTmp;

  000b1	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  000b4	88 45 d8	 mov	 BYTE PTR _sTmp$[ebp], al
  000b7	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  000ba	50		 push	 eax
  000bb	c6 45 d9 00	 mov	 BYTE PTR _sTmp$[ebp+1], 0
  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 614  : 	realData_Common.m_strSign.TrimLeft(); realData_Common.m_strSign.TrimRight();

  000c5	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  000ce	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 615  : 	
; 616  : 	memcpy(sTmp, pInput->price, sizeof(pInput->price));		/*  [현재가]		*/

  000d7	8b 43 4e	 mov	 eax, DWORD PTR [ebx+78]
  000da	8b 4b 52	 mov	 ecx, DWORD PTR [ebx+82]
  000dd	89 45 d8	 mov	 DWORD PTR _sTmp$[ebp], eax

; 617  : 	sTmp[sizeof(pInput->price)]=0;
; 618  : 	strTmp.Format("%lf", atof(sTmp)*100.);

  000e0	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  000e3	50		 push	 eax
  000e4	89 4d dc	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  000e7	c6 45 e0 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atof
  000f1	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  000f7	8d 45 d4	 lea	 eax, DWORD PTR _strTmp$[ebp]
  000fa	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  00100	51		 push	 ecx
  00101	dd 1c 24	 fstp	 QWORD PTR [esp]
  00104	68 00 00 00 00	 push	 OFFSET ??_C@_03DLDNIBIK@?$CFlf@
  00109	50		 push	 eax
  0010a	ff d3		 call	 ebx

; 619  : 	realData_Common.m_strPrice.Format("%ld", atol(strTmp));

  0010c	ff 75 d4	 push	 DWORD PTR _strTmp$[ebp]
  0010f	8d 77 0c	 lea	 esi, DWORD PTR [edi+12]
  00112	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__atol
  00118	ff d7		 call	 edi
  0011a	50		 push	 eax
  0011b	68 00 00 00 00	 push	 OFFSET ??_C@_03JALODAI@?$CFld@
  00120	56		 push	 esi
  00121	ff d3		 call	 ebx
  00123	83 c4 20	 add	 esp, 32			; 00000020H

; 620  : 	realData_Common.m_strPrice.TrimLeft(); realData_Common.m_strPrice.TrimRight();

  00126	8b ce		 mov	 ecx, esi
  00128	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0012e	8b ce		 mov	 ecx, esi
  00130	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 621  : 	
; 622  : 	memcpy(sTmp, pInput->change, sizeof(pInput->change));	/*  [전일대비]		*/

  00136	8b 4d cc	 mov	 ecx, DWORD PTR _pRealStruct$GSCopy$1$[ebp]

; 623  : 	sTmp[sizeof(pInput->change)]=0;

  00139	c6 45 e0 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  0013d	8b 41 59	 mov	 eax, DWORD PTR [ecx+89]
  00140	8b 49 5d	 mov	 ecx, DWORD PTR [ecx+93]
  00143	89 45 d8	 mov	 DWORD PTR _sTmp$[ebp], eax

; 624  : 	strTmp.Format("%lf", atof(sTmp)*100.);

  00146	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00149	89 4d dc	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  0014c	50		 push	 eax
  0014d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atof
  00153	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  00159	8d 45 d4	 lea	 eax, DWORD PTR _strTmp$[ebp]
  0015c	51		 push	 ecx
  0015d	dd 1c 24	 fstp	 QWORD PTR [esp]
  00160	68 00 00 00 00	 push	 OFFSET ??_C@_03DLDNIBIK@?$CFlf@
  00165	50		 push	 eax
  00166	ff d3		 call	 ebx

; 625  : 	realData_Common.m_strChange.Format("%ld", atol(strTmp));

  00168	8b 75 d0	 mov	 esi, DWORD PTR _realData_Common$GSCopy$1$[ebp]
  0016b	ff 75 d4	 push	 DWORD PTR _strTmp$[ebp]
  0016e	83 c6 10	 add	 esi, 16			; 00000010H
  00171	ff d7		 call	 edi
  00173	50		 push	 eax
  00174	68 00 00 00 00	 push	 OFFSET ??_C@_03JALODAI@?$CFld@
  00179	56		 push	 esi
  0017a	ff d3		 call	 ebx
  0017c	83 c4 20	 add	 esp, 32			; 00000020H

; 626  : 	realData_Common.m_strChange.TrimLeft(); realData_Common.m_strChange.TrimRight();

  0017f	8b ce		 mov	 ecx, esi
  00181	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00187	8b ce		 mov	 ecx, esi
  00189	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 627  : 	
; 628  : 	memcpy(sTmp, pInput->drate, sizeof(pInput->drate));		/*  [등락율]				*/

  0018f	8b 4d cc	 mov	 ecx, DWORD PTR _pRealStruct$GSCopy$1$[ebp]

; 629  : 	sTmp[sizeof(pInput->drate)]=0;

  00192	c6 45 de 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  00196	8b 41 62	 mov	 eax, DWORD PTR [ecx+98]
  00199	89 45 d8	 mov	 DWORD PTR _sTmp$[ebp], eax
  0019c	0f b7 41 66	 movzx	 eax, WORD PTR [ecx+102]
  001a0	66 89 45 dc	 mov	 WORD PTR _sTmp$[ebp+4], ax

; 630  : 	strTmp.Format("%lf", atof(sTmp)*100.);

  001a4	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  001a7	50		 push	 eax
  001a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atof
  001ae	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  001b4	8d 45 d4	 lea	 eax, DWORD PTR _strTmp$[ebp]
  001b7	51		 push	 ecx
  001b8	dd 1c 24	 fstp	 QWORD PTR [esp]
  001bb	68 00 00 00 00	 push	 OFFSET ??_C@_03DLDNIBIK@?$CFlf@
  001c0	50		 push	 eax
  001c1	ff d3		 call	 ebx

; 631  : 	realData_Common.m_strChrate.Format("%ld", atol(strTmp));

  001c3	8b 75 d0	 mov	 esi, DWORD PTR _realData_Common$GSCopy$1$[ebp]
  001c6	ff 75 d4	 push	 DWORD PTR _strTmp$[ebp]
  001c9	83 c6 14	 add	 esi, 20			; 00000014H
  001cc	ff d7		 call	 edi
  001ce	50		 push	 eax
  001cf	68 00 00 00 00	 push	 OFFSET ??_C@_03JALODAI@?$CFld@
  001d4	56		 push	 esi
  001d5	ff d3		 call	 ebx
  001d7	83 c4 20	 add	 esp, 32			; 00000020H

; 632  : 	realData_Common.m_strChrate.TrimLeft(); realData_Common.m_strChrate.TrimRight();

  001da	8b ce		 mov	 ecx, esi
  001dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  001e2	8b ce		 mov	 ecx, esi
  001e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 633  : 	
; 634  : 	memcpy(sTmp, pInput->volume, sizeof(pInput->volume));	/*  [거래량]		*/

  001ea	8b 45 cc	 mov	 eax, DWORD PTR _pRealStruct$GSCopy$1$[ebp]

; 635  : 	sTmp[sizeof(pInput->volume)]=0;
; 636  : 	realData_Common.m_strVolume = sTmp;

  001ed	8b 75 d0	 mov	 esi, DWORD PTR _realData_Common$GSCopy$1$[ebp]
  001f0	83 c6 18	 add	 esi, 24			; 00000018H
  001f3	c6 45 e1 00	 mov	 BYTE PTR _sTmp$[ebp+9], 0
  001f7	8b ce		 mov	 ecx, esi
  001f9	f3 0f 7e 80 99
	00 00 00	 movq	 xmm0, QWORD PTR [eax+153]
  00201	0f b6 80 a1 00
	00 00		 movzx	 eax, BYTE PTR [eax+161]
  00208	88 45 e0	 mov	 BYTE PTR _sTmp$[ebp+8], al
  0020b	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  0020e	50		 push	 eax
  0020f	66 0f d6 45 d8	 movq	 QWORD PTR _sTmp$[ebp], xmm0
  00214	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 637  : 	realData_Common.m_strVolume.TrimLeft(); realData_Common.m_strVolume.TrimRight();

  0021a	8b ce		 mov	 ecx, esi
  0021c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00222	8b ce		 mov	 ecx, esi
  00224	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 638  : 	
; 639  : 	memcpy(sTmp, pInput->open, sizeof(pInput->open));		/*  [시가]		*/

  0022a	8b 4d cc	 mov	 ecx, DWORD PTR _pRealStruct$GSCopy$1$[ebp]

; 640  : 	sTmp[sizeof(pInput->open)]=0;

  0022d	c6 45 e0 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  00231	8b 41 33	 mov	 eax, DWORD PTR [ecx+51]
  00234	8b 49 37	 mov	 ecx, DWORD PTR [ecx+55]
  00237	89 45 d8	 mov	 DWORD PTR _sTmp$[ebp], eax

; 641  : 	strTmp.Format("%lf", atof(sTmp)*100.);

  0023a	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  0023d	50		 push	 eax
  0023e	89 4d dc	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  00241	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atof
  00247	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  0024d	8d 45 d4	 lea	 eax, DWORD PTR _strTmp$[ebp]
  00250	51		 push	 ecx
  00251	dd 1c 24	 fstp	 QWORD PTR [esp]
  00254	68 00 00 00 00	 push	 OFFSET ??_C@_03DLDNIBIK@?$CFlf@
  00259	50		 push	 eax
  0025a	ff d3		 call	 ebx

; 642  : 	realData_Common.m_strOpen.Format("%ld", atol(strTmp));

  0025c	8b 75 d0	 mov	 esi, DWORD PTR _realData_Common$GSCopy$1$[ebp]
  0025f	ff 75 d4	 push	 DWORD PTR _strTmp$[ebp]
  00262	83 c6 1c	 add	 esi, 28			; 0000001cH
  00265	ff d7		 call	 edi
  00267	50		 push	 eax
  00268	68 00 00 00 00	 push	 OFFSET ??_C@_03JALODAI@?$CFld@
  0026d	56		 push	 esi
  0026e	ff d3		 call	 ebx
  00270	83 c4 20	 add	 esp, 32			; 00000020H

; 643  : 	realData_Common.m_strOpen.TrimLeft(); realData_Common.m_strOpen.TrimRight();

  00273	8b ce		 mov	 ecx, esi
  00275	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0027b	8b ce		 mov	 ecx, esi
  0027d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 644  : 	
; 645  : 	memcpy(sTmp, pInput->high, sizeof(pInput->high));		/*  [고가]		*/

  00283	8b 4d cc	 mov	 ecx, DWORD PTR _pRealStruct$GSCopy$1$[ebp]

; 646  : 	sTmp[sizeof(pInput->high)]=0;

  00286	c6 45 e0 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  0028a	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  0028d	8b 49 40	 mov	 ecx, DWORD PTR [ecx+64]
  00290	89 45 d8	 mov	 DWORD PTR _sTmp$[ebp], eax

; 647  : 	strTmp.Format("%lf", atof(sTmp)*100.);

  00293	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00296	50		 push	 eax
  00297	89 4d dc	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  0029a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atof
  002a0	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  002a6	8d 45 d4	 lea	 eax, DWORD PTR _strTmp$[ebp]
  002a9	51		 push	 ecx
  002aa	dd 1c 24	 fstp	 QWORD PTR [esp]
  002ad	68 00 00 00 00	 push	 OFFSET ??_C@_03DLDNIBIK@?$CFlf@
  002b2	50		 push	 eax
  002b3	ff d3		 call	 ebx

; 648  : 	realData_Common.m_strHigh.Format("%ld", atol(strTmp));

  002b5	8b 75 d0	 mov	 esi, DWORD PTR _realData_Common$GSCopy$1$[ebp]
  002b8	ff 75 d4	 push	 DWORD PTR _strTmp$[ebp]
  002bb	83 c6 20	 add	 esi, 32			; 00000020H
  002be	ff d7		 call	 edi
  002c0	50		 push	 eax
  002c1	68 00 00 00 00	 push	 OFFSET ??_C@_03JALODAI@?$CFld@
  002c6	56		 push	 esi
  002c7	ff d3		 call	 ebx
  002c9	83 c4 20	 add	 esp, 32			; 00000020H

; 649  : 	realData_Common.m_strHigh.TrimLeft(); realData_Common.m_strHigh.TrimRight();

  002cc	8b ce		 mov	 ecx, esi
  002ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  002d4	8b ce		 mov	 ecx, esi
  002d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 650  : 	
; 651  : 	memcpy(sTmp, pInput->low, sizeof(pInput->low));			/*  [저가]		*/

  002dc	8b 4d cc	 mov	 ecx, DWORD PTR _pRealStruct$GSCopy$1$[ebp]

; 652  : 	sTmp[sizeof(pInput->low)]=0;

  002df	c6 45 e0 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  002e3	8b 41 45	 mov	 eax, DWORD PTR [ecx+69]
  002e6	8b 49 49	 mov	 ecx, DWORD PTR [ecx+73]
  002e9	89 45 d8	 mov	 DWORD PTR _sTmp$[ebp], eax

; 653  : 	strTmp.Format("%lf", atof(sTmp)*100.);

  002ec	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  002ef	50		 push	 eax
  002f0	89 4d dc	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  002f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atof
  002f9	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  002ff	8d 45 d4	 lea	 eax, DWORD PTR _strTmp$[ebp]
  00302	51		 push	 ecx
  00303	dd 1c 24	 fstp	 QWORD PTR [esp]
  00306	68 00 00 00 00	 push	 OFFSET ??_C@_03DLDNIBIK@?$CFlf@
  0030b	50		 push	 eax
  0030c	ff d3		 call	 ebx

; 654  : 	realData_Common.m_strLow.Format("%ld", atol(strTmp));

  0030e	8b 75 d0	 mov	 esi, DWORD PTR _realData_Common$GSCopy$1$[ebp]
  00311	ff 75 d4	 push	 DWORD PTR _strTmp$[ebp]
  00314	83 c6 24	 add	 esi, 36			; 00000024H
  00317	ff d7		 call	 edi
  00319	50		 push	 eax
  0031a	68 00 00 00 00	 push	 OFFSET ??_C@_03JALODAI@?$CFld@
  0031f	56		 push	 esi
  00320	ff d3		 call	 ebx
  00322	83 c4 20	 add	 esp, 32			; 00000020H

; 655  : 	realData_Common.m_strLow.TrimLeft(); realData_Common.m_strLow.TrimRight();

  00325	8b ce		 mov	 ecx, esi
  00327	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0032d	8b ce		 mov	 ecx, esi
  0032f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 656  : 	
; 657  : 	realData_Common.m_strValue = "0";

  00335	8b 5d d0	 mov	 ebx, DWORD PTR _realData_Common$GSCopy$1$[ebp]
  00338	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0@
  0033d	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
  00340	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 658  : 	
; 659  : 	realData_Common.m_nMarketType = CMasterTypeInfo::FOREIGN_CHART;
; 660  : 	return TRUE;

  00346	8d 4d d4	 lea	 ecx, DWORD PTR _strTmp$[ebp]
  00349	c7 43 2c 04 00
	00 00		 mov	 DWORD PTR [ebx+44], 4
  00350	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00356	b8 01 00 00 00	 mov	 eax, 1

; 661  : }

  0035b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0035e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00365	59		 pop	 ecx
  00366	5f		 pop	 edi
  00367	5e		 pop	 esi
  00368	5b		 pop	 ebx
  00369	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0036c	33 cd		 xor	 ecx, ebp
  0036e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00373	8b e5		 mov	 esp, ebp
  00375	5d		 pop	 ebp
  00376	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Convert_GTFJ@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR _strTmp$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
__ehhandler$?Convert_GTFJ@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z:
  0000e	90		 npad	 1
  0000f	90		 npad	 1
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Convert_GTFJ@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Convert_GTFJ@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z ENDP ; CChartRealConverter::Convert_GTFJ
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\COMMONTR\ChartRealConverter.cpp
;	COMDAT ?Convert_HWFJ@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z
_TEXT	SEGMENT
_pRealStruct$GSCopy$1$ = -52				; size = 4
_realData_Common$GSCopy$1$ = -48			; size = 4
_strTmp$ = -44						; size = 4
_sTmp$ = -40						; size = 21
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pRealStruct$ = 8					; size = 4
_realData_Common$ = 12					; size = 4
?Convert_HWFJ@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z PROC ; CChartRealConverter::Convert_HWFJ, COMDAT

; 526  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Convert_HWFJ@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 5d 08	 mov	 ebx, DWORD PTR _pRealStruct$[ebp]

; 527  : 	LPHWFJ_OutBlock pInput = (LPHWFJ_OutBlock)pRealStruct;
; 528  : 	CString strTmp;

  0002e	8d 4d d4	 lea	 ecx, DWORD PTR _strTmp$[ebp]
  00031	8b 7d 0c	 mov	 edi, DWORD PTR _realData_Common$[ebp]
  00034	89 5d cc	 mov	 DWORD PTR _pRealStruct$GSCopy$1$[ebp], ebx
  00037	89 7d d0	 mov	 DWORD PTR _realData_Common$GSCopy$1$[ebp], edi
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 529  : 	char sTmp[20+1];
; 530  : 
; 531  : 	memcpy(sTmp, pInput->symbol, sizeof(pInput->symbol));	/*  [심볼코드]				*/

  00040	0f b7 43 08	 movzx	 eax, WORD PTR [ebx+8]

; 532  : 	sTmp[sizeof(pInput->symbol)]=0;
; 533  : 	realData_Common.m_strCode = sTmp;

  00044	8b cf		 mov	 ecx, edi
  00046	f3 0f 7e 03	 movq	 xmm0, QWORD PTR [ebx]
  0004a	66 89 45 e0	 mov	 WORD PTR _sTmp$[ebp+8], ax
  0004e	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00051	50		 push	 eax
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00059	66 0f d6 45 d8	 movq	 QWORD PTR _sTmp$[ebp], xmm0
  0005e	c6 45 e2 00	 mov	 BYTE PTR _sTmp$[ebp+10], 0
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 534  : 	realData_Common.m_strCode.TrimLeft(); realData_Common.m_strCode.TrimRight();

  00068	8b cf		 mov	 ecx, edi
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00070	8b cf		 mov	 ecx, edi
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 535  : 	
; 536  : 	memcpy(sTmp, pInput->time, sizeof(pInput->time));	/*  [시간(현지시간)]				*/

  00078	0f b7 43 1c	 movzx	 eax, WORD PTR [ebx+28]

; 537  : 	sTmp[sizeof(pInput->time)]=0;
; 538  : 	realData_Common.m_strTime = sTmp;

  0007c	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  0007f	f3 0f 7e 43 14	 movq	 xmm0, QWORD PTR [ebx+20]
  00084	66 89 45 e0	 mov	 WORD PTR _sTmp$[ebp+8], ax
  00088	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  0008b	50		 push	 eax
  0008c	66 0f d6 45 d8	 movq	 QWORD PTR _sTmp$[ebp], xmm0
  00091	c6 45 e2 00	 mov	 BYTE PTR _sTmp$[ebp+10], 0
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 539  : 	realData_Common.m_strTime.TrimLeft(); realData_Common.m_strTime.TrimRight();

  0009b	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  000a4	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 540  : 	
; 541  : 	memcpy(sTmp, pInput->sign, sizeof(pInput->sign));		/*  [전일대비구분]				*/

  000ad	0f b6 43 57	 movzx	 eax, BYTE PTR [ebx+87]

; 542  : 	sTmp[sizeof(pInput->sign)]=0;
; 543  : 	realData_Common.m_strSign = sTmp;

  000b1	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  000b4	88 45 d8	 mov	 BYTE PTR _sTmp$[ebp], al
  000b7	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  000ba	50		 push	 eax
  000bb	c6 45 d9 00	 mov	 BYTE PTR _sTmp$[ebp+1], 0
  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 544  : 	realData_Common.m_strSign.TrimLeft(); realData_Common.m_strSign.TrimRight();

  000c5	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  000ce	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 545  : 
; 546  : 	memcpy(sTmp, pInput->price, sizeof(pInput->price));		/*  [현재가]		*/

  000d7	8b 43 4e	 mov	 eax, DWORD PTR [ebx+78]
  000da	8b 4b 52	 mov	 ecx, DWORD PTR [ebx+82]
  000dd	89 45 d8	 mov	 DWORD PTR _sTmp$[ebp], eax

; 547  : 	sTmp[sizeof(pInput->price)]=0;
; 548  : 	strTmp.Format("%lf", atof(sTmp)*100.);

  000e0	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  000e3	50		 push	 eax
  000e4	89 4d dc	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  000e7	c6 45 e0 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atof
  000f1	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  000f7	8d 45 d4	 lea	 eax, DWORD PTR _strTmp$[ebp]
  000fa	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  00100	51		 push	 ecx
  00101	dd 1c 24	 fstp	 QWORD PTR [esp]
  00104	68 00 00 00 00	 push	 OFFSET ??_C@_03DLDNIBIK@?$CFlf@
  00109	50		 push	 eax
  0010a	ff d3		 call	 ebx

; 549  : 	realData_Common.m_strPrice.Format("%ld", atol(strTmp));

  0010c	ff 75 d4	 push	 DWORD PTR _strTmp$[ebp]
  0010f	8d 77 0c	 lea	 esi, DWORD PTR [edi+12]
  00112	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__atol
  00118	ff d7		 call	 edi
  0011a	50		 push	 eax
  0011b	68 00 00 00 00	 push	 OFFSET ??_C@_03JALODAI@?$CFld@
  00120	56		 push	 esi
  00121	ff d3		 call	 ebx
  00123	83 c4 20	 add	 esp, 32			; 00000020H

; 550  : 	realData_Common.m_strPrice.TrimLeft(); realData_Common.m_strPrice.TrimRight();

  00126	8b ce		 mov	 ecx, esi
  00128	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0012e	8b ce		 mov	 ecx, esi
  00130	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 551  : 
; 552  : 	memcpy(sTmp, pInput->change, sizeof(pInput->change));	/*  [전일대비]		*/

  00136	8b 4d cc	 mov	 ecx, DWORD PTR _pRealStruct$GSCopy$1$[ebp]

; 553  : 	sTmp[sizeof(pInput->change)]=0;

  00139	c6 45 e0 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  0013d	8b 41 59	 mov	 eax, DWORD PTR [ecx+89]
  00140	8b 49 5d	 mov	 ecx, DWORD PTR [ecx+93]
  00143	89 45 d8	 mov	 DWORD PTR _sTmp$[ebp], eax

; 554  : 	strTmp.Format("%lf", atof(sTmp)*100.);

  00146	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00149	89 4d dc	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  0014c	50		 push	 eax
  0014d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atof
  00153	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  00159	8d 45 d4	 lea	 eax, DWORD PTR _strTmp$[ebp]
  0015c	51		 push	 ecx
  0015d	dd 1c 24	 fstp	 QWORD PTR [esp]
  00160	68 00 00 00 00	 push	 OFFSET ??_C@_03DLDNIBIK@?$CFlf@
  00165	50		 push	 eax
  00166	ff d3		 call	 ebx

; 555  : 	realData_Common.m_strChange.Format("%ld", atol(strTmp));

  00168	8b 75 d0	 mov	 esi, DWORD PTR _realData_Common$GSCopy$1$[ebp]
  0016b	ff 75 d4	 push	 DWORD PTR _strTmp$[ebp]
  0016e	83 c6 10	 add	 esi, 16			; 00000010H
  00171	ff d7		 call	 edi
  00173	50		 push	 eax
  00174	68 00 00 00 00	 push	 OFFSET ??_C@_03JALODAI@?$CFld@
  00179	56		 push	 esi
  0017a	ff d3		 call	 ebx
  0017c	83 c4 20	 add	 esp, 32			; 00000020H

; 556  : 	realData_Common.m_strChange.TrimLeft(); realData_Common.m_strChange.TrimRight();

  0017f	8b ce		 mov	 ecx, esi
  00181	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00187	8b ce		 mov	 ecx, esi
  00189	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 557  : 
; 558  : 	memcpy(sTmp, pInput->drate, sizeof(pInput->drate));		/*  [등락율]				*/

  0018f	8b 4d cc	 mov	 ecx, DWORD PTR _pRealStruct$GSCopy$1$[ebp]

; 559  : 	sTmp[sizeof(pInput->drate)]=0;

  00192	c6 45 de 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  00196	8b 41 62	 mov	 eax, DWORD PTR [ecx+98]
  00199	89 45 d8	 mov	 DWORD PTR _sTmp$[ebp], eax
  0019c	0f b7 41 66	 movzx	 eax, WORD PTR [ecx+102]
  001a0	66 89 45 dc	 mov	 WORD PTR _sTmp$[ebp+4], ax

; 560  : 	strTmp.Format("%lf", atof(sTmp)*100.);

  001a4	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  001a7	50		 push	 eax
  001a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atof
  001ae	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  001b4	8d 45 d4	 lea	 eax, DWORD PTR _strTmp$[ebp]
  001b7	51		 push	 ecx
  001b8	dd 1c 24	 fstp	 QWORD PTR [esp]
  001bb	68 00 00 00 00	 push	 OFFSET ??_C@_03DLDNIBIK@?$CFlf@
  001c0	50		 push	 eax
  001c1	ff d3		 call	 ebx

; 561  : 	realData_Common.m_strChrate.Format("%ld", atol(strTmp));

  001c3	8b 75 d0	 mov	 esi, DWORD PTR _realData_Common$GSCopy$1$[ebp]
  001c6	ff 75 d4	 push	 DWORD PTR _strTmp$[ebp]
  001c9	83 c6 14	 add	 esi, 20			; 00000014H
  001cc	ff d7		 call	 edi
  001ce	50		 push	 eax
  001cf	68 00 00 00 00	 push	 OFFSET ??_C@_03JALODAI@?$CFld@
  001d4	56		 push	 esi
  001d5	ff d3		 call	 ebx
  001d7	83 c4 20	 add	 esp, 32			; 00000020H

; 562  : 	realData_Common.m_strChrate.TrimLeft(); realData_Common.m_strChrate.TrimRight();

  001da	8b ce		 mov	 ecx, esi
  001dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  001e2	8b ce		 mov	 ecx, esi
  001e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 563  : 
; 564  : 	memcpy(sTmp, pInput->volume, sizeof(pInput->volume));	/*  [거래량]		*/

  001ea	8b 45 cc	 mov	 eax, DWORD PTR _pRealStruct$GSCopy$1$[ebp]

; 565  : 	sTmp[sizeof(pInput->volume)]=0;
; 566  : 	realData_Common.m_strVolume = sTmp;

  001ed	8b 75 d0	 mov	 esi, DWORD PTR _realData_Common$GSCopy$1$[ebp]
  001f0	83 c6 18	 add	 esi, 24			; 00000018H
  001f3	c6 45 e1 00	 mov	 BYTE PTR _sTmp$[ebp+9], 0
  001f7	8b ce		 mov	 ecx, esi
  001f9	f3 0f 7e 80 99
	00 00 00	 movq	 xmm0, QWORD PTR [eax+153]
  00201	0f b6 80 a1 00
	00 00		 movzx	 eax, BYTE PTR [eax+161]
  00208	88 45 e0	 mov	 BYTE PTR _sTmp$[ebp+8], al
  0020b	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  0020e	50		 push	 eax
  0020f	66 0f d6 45 d8	 movq	 QWORD PTR _sTmp$[ebp], xmm0
  00214	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 567  : 	realData_Common.m_strVolume.TrimLeft(); realData_Common.m_strVolume.TrimRight();

  0021a	8b ce		 mov	 ecx, esi
  0021c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00222	8b ce		 mov	 ecx, esi
  00224	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 568  : 
; 569  : 	memcpy(sTmp, pInput->open, sizeof(pInput->open));		/*  [시가]		*/

  0022a	8b 4d cc	 mov	 ecx, DWORD PTR _pRealStruct$GSCopy$1$[ebp]

; 570  : 	sTmp[sizeof(pInput->open)]=0;

  0022d	c6 45 e0 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  00231	8b 41 33	 mov	 eax, DWORD PTR [ecx+51]
  00234	8b 49 37	 mov	 ecx, DWORD PTR [ecx+55]
  00237	89 45 d8	 mov	 DWORD PTR _sTmp$[ebp], eax

; 571  : 	strTmp.Format("%lf", atof(sTmp)*100.);

  0023a	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  0023d	50		 push	 eax
  0023e	89 4d dc	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  00241	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atof
  00247	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  0024d	8d 45 d4	 lea	 eax, DWORD PTR _strTmp$[ebp]
  00250	51		 push	 ecx
  00251	dd 1c 24	 fstp	 QWORD PTR [esp]
  00254	68 00 00 00 00	 push	 OFFSET ??_C@_03DLDNIBIK@?$CFlf@
  00259	50		 push	 eax
  0025a	ff d3		 call	 ebx

; 572  : 	realData_Common.m_strOpen.Format("%ld", atol(strTmp));

  0025c	8b 75 d0	 mov	 esi, DWORD PTR _realData_Common$GSCopy$1$[ebp]
  0025f	ff 75 d4	 push	 DWORD PTR _strTmp$[ebp]
  00262	83 c6 1c	 add	 esi, 28			; 0000001cH
  00265	ff d7		 call	 edi
  00267	50		 push	 eax
  00268	68 00 00 00 00	 push	 OFFSET ??_C@_03JALODAI@?$CFld@
  0026d	56		 push	 esi
  0026e	ff d3		 call	 ebx
  00270	83 c4 20	 add	 esp, 32			; 00000020H

; 573  : 	realData_Common.m_strOpen.TrimLeft(); realData_Common.m_strOpen.TrimRight();

  00273	8b ce		 mov	 ecx, esi
  00275	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0027b	8b ce		 mov	 ecx, esi
  0027d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 574  : 
; 575  : 	memcpy(sTmp, pInput->high, sizeof(pInput->high));		/*  [고가]		*/

  00283	8b 4d cc	 mov	 ecx, DWORD PTR _pRealStruct$GSCopy$1$[ebp]

; 576  : 	sTmp[sizeof(pInput->high)]=0;

  00286	c6 45 e0 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  0028a	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  0028d	8b 49 40	 mov	 ecx, DWORD PTR [ecx+64]
  00290	89 45 d8	 mov	 DWORD PTR _sTmp$[ebp], eax

; 577  : 	strTmp.Format("%lf", atof(sTmp)*100.);

  00293	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00296	50		 push	 eax
  00297	89 4d dc	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  0029a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atof
  002a0	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  002a6	8d 45 d4	 lea	 eax, DWORD PTR _strTmp$[ebp]
  002a9	51		 push	 ecx
  002aa	dd 1c 24	 fstp	 QWORD PTR [esp]
  002ad	68 00 00 00 00	 push	 OFFSET ??_C@_03DLDNIBIK@?$CFlf@
  002b2	50		 push	 eax
  002b3	ff d3		 call	 ebx

; 578  : 	realData_Common.m_strHigh.Format("%ld", atol(strTmp));

  002b5	8b 75 d0	 mov	 esi, DWORD PTR _realData_Common$GSCopy$1$[ebp]
  002b8	ff 75 d4	 push	 DWORD PTR _strTmp$[ebp]
  002bb	83 c6 20	 add	 esi, 32			; 00000020H
  002be	ff d7		 call	 edi
  002c0	50		 push	 eax
  002c1	68 00 00 00 00	 push	 OFFSET ??_C@_03JALODAI@?$CFld@
  002c6	56		 push	 esi
  002c7	ff d3		 call	 ebx
  002c9	83 c4 20	 add	 esp, 32			; 00000020H

; 579  : 	realData_Common.m_strHigh.TrimLeft(); realData_Common.m_strHigh.TrimRight();

  002cc	8b ce		 mov	 ecx, esi
  002ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  002d4	8b ce		 mov	 ecx, esi
  002d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 580  : 
; 581  : 	memcpy(sTmp, pInput->low, sizeof(pInput->low));			/*  [저가]		*/

  002dc	8b 4d cc	 mov	 ecx, DWORD PTR _pRealStruct$GSCopy$1$[ebp]

; 582  : 	sTmp[sizeof(pInput->low)]=0;

  002df	c6 45 e0 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  002e3	8b 41 45	 mov	 eax, DWORD PTR [ecx+69]
  002e6	8b 49 49	 mov	 ecx, DWORD PTR [ecx+73]
  002e9	89 45 d8	 mov	 DWORD PTR _sTmp$[ebp], eax

; 583  : 	strTmp.Format("%lf", atof(sTmp)*100.);

  002ec	8d 45 d8	 lea	 eax, DWORD PTR _sTmp$[ebp]
  002ef	50		 push	 eax
  002f0	89 4d dc	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  002f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atof
  002f9	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  002ff	8d 45 d4	 lea	 eax, DWORD PTR _strTmp$[ebp]
  00302	51		 push	 ecx
  00303	dd 1c 24	 fstp	 QWORD PTR [esp]
  00306	68 00 00 00 00	 push	 OFFSET ??_C@_03DLDNIBIK@?$CFlf@
  0030b	50		 push	 eax
  0030c	ff d3		 call	 ebx

; 584  : 	realData_Common.m_strLow.Format("%ld", atol(strTmp));

  0030e	8b 75 d0	 mov	 esi, DWORD PTR _realData_Common$GSCopy$1$[ebp]
  00311	ff 75 d4	 push	 DWORD PTR _strTmp$[ebp]
  00314	83 c6 24	 add	 esi, 36			; 00000024H
  00317	ff d7		 call	 edi
  00319	50		 push	 eax
  0031a	68 00 00 00 00	 push	 OFFSET ??_C@_03JALODAI@?$CFld@
  0031f	56		 push	 esi
  00320	ff d3		 call	 ebx
  00322	83 c4 20	 add	 esp, 32			; 00000020H

; 585  : 	realData_Common.m_strLow.TrimLeft(); realData_Common.m_strLow.TrimRight();

  00325	8b ce		 mov	 ecx, esi
  00327	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0032d	8b ce		 mov	 ecx, esi
  0032f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 586  : 	
; 587  : 	realData_Common.m_strValue = "0";

  00335	8b 5d d0	 mov	 ebx, DWORD PTR _realData_Common$GSCopy$1$[ebp]
  00338	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0@
  0033d	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
  00340	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 588  : 
; 589  : 	realData_Common.m_nMarketType = CMasterTypeInfo::FOREIGN_CHART;
; 590  : 	return TRUE;

  00346	8d 4d d4	 lea	 ecx, DWORD PTR _strTmp$[ebp]
  00349	c7 43 2c 04 00
	00 00		 mov	 DWORD PTR [ebx+44], 4
  00350	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00356	b8 01 00 00 00	 mov	 eax, 1

; 591  : }

  0035b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0035e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00365	59		 pop	 ecx
  00366	5f		 pop	 edi
  00367	5e		 pop	 esi
  00368	5b		 pop	 ebx
  00369	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0036c	33 cd		 xor	 ecx, ebp
  0036e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00373	8b e5		 mov	 esp, ebp
  00375	5d		 pop	 ebp
  00376	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Convert_HWFJ@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR _strTmp$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
__ehhandler$?Convert_HWFJ@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z:
  0000e	90		 npad	 1
  0000f	90		 npad	 1
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Convert_HWFJ@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Convert_HWFJ@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z ENDP ; CChartRealConverter::Convert_HWFJ
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\COMMONTR\ChartRealConverter.cpp
;	COMDAT ?Convert_JOC0@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z
_TEXT	SEGMENT
_sTmp$ = -28						; size = 21
__$ArrayPad$ = -4					; size = 4
_pRealStruct$ = 8					; size = 4
_realData_Common$ = 12					; size = 4
?Convert_JOC0@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z PROC ; CChartRealConverter::Convert_JOC0, COMDAT

; 462  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _realData_Common$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _pRealStruct$[ebp]

; 463  : 	LPJOC0_OutBlock pInput = (LPJOC0_OutBlock)pRealStruct;
; 464  : 	char sTmp[20+1];
; 465  : 
; 466  : 	memcpy(sTmp, pInput->koptcode, sizeof(pInput->koptcode));	/*  [종목코드]				*/
; 467  : 	sTmp[sizeof(pInput->koptcode)]=0;

  00019	c6 45 ec 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  0001d	8b 07		 mov	 eax, DWORD PTR [edi]
  0001f	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00022	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax

; 468  : 	realData_Common.m_strCode = sTmp;

  00025	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00028	89 4d e8	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  0002b	8b cb		 mov	 ecx, ebx
  0002d	50		 push	 eax
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 469  : 	realData_Common.m_strCode.TrimLeft(); realData_Common.m_strCode.TrimRight();

  00034	8b cb		 mov	 ecx, ebx
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0003c	8b cb		 mov	 ecx, ebx
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 470  : 	
; 471  : 	memcpy(sTmp, pInput->chetime, sizeof(pInput->chetime));	/*  [체결시간]				*/

  00044	8b 47 09	 mov	 eax, DWORD PTR [edi+9]

; 472  : 	sTmp[sizeof(pInput->chetime)]=0;
; 473  : 	realData_Common.m_strTime = sTmp;

  00047	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0004a	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  0004d	0f b7 47 0d	 movzx	 eax, WORD PTR [edi+13]
  00051	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  00055	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00058	50		 push	 eax
  00059	c6 45 ea 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 474  : 	realData_Common.m_strTime.TrimLeft(); realData_Common.m_strTime.TrimRight();

  00063	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0006c	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 475  : 	
; 476  : 	memcpy(sTmp, pInput->sign, sizeof(pInput->sign));		/*  [1:상한]				*/

  00075	0f b6 47 10	 movzx	 eax, BYTE PTR [edi+16]

; 477  : 	sTmp[sizeof(pInput->sign)]=0;
; 478  : 	realData_Common.m_strSign = sTmp;

  00079	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0007c	88 45 e4	 mov	 BYTE PTR _sTmp$[ebp], al
  0007f	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00082	50		 push	 eax
  00083	c6 45 e5 00	 mov	 BYTE PTR _sTmp$[ebp+1], 0
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 479  : 	realData_Common.m_strSign.TrimLeft(); realData_Common.m_strSign.TrimRight();

  0008d	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00096	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 480  : 
; 481  : 	memcpy(sTmp, pInput->price, sizeof(pInput->price));		/*  [현재가,     원]		*/

  0009f	8b 47 22	 mov	 eax, DWORD PTR [edi+34]

; 482  : 	sTmp[sizeof(pInput->price)]=0;
; 483  : 	realData_Common.m_strPrice = sTmp;

  000a2	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  000a5	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  000a8	0f b7 47 26	 movzx	 eax, WORD PTR [edi+38]
  000ac	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  000b0	0f b6 47 28	 movzx	 eax, BYTE PTR [edi+40]
  000b4	88 45 ea	 mov	 BYTE PTR _sTmp$[ebp+6], al
  000b7	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  000ba	50		 push	 eax
  000bb	c6 45 eb 00	 mov	 BYTE PTR _sTmp$[ebp+7], 0
  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 484  : 	realData_Common.m_strPrice.TrimLeft(); realData_Common.m_strPrice.TrimRight();

  000c5	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  000ce	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 485  : 
; 486  : 	memcpy(sTmp, pInput->change, sizeof(pInput->change));	/*  [전일대비,   원]		*/

  000d7	8b 47 12	 mov	 eax, DWORD PTR [edi+18]

; 487  : 	sTmp[sizeof(pInput->change)]=0;
; 488  : 	realData_Common.m_strChange = sTmp;

  000da	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  000dd	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  000e0	0f b7 47 16	 movzx	 eax, WORD PTR [edi+22]
  000e4	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  000e8	0f b6 47 18	 movzx	 eax, BYTE PTR [edi+24]
  000ec	88 45 ea	 mov	 BYTE PTR _sTmp$[ebp+6], al
  000ef	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  000f2	50		 push	 eax
  000f3	c6 45 eb 00	 mov	 BYTE PTR _sTmp$[ebp+7], 0
  000f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 489  : 	realData_Common.m_strChange.TrimLeft(); realData_Common.m_strChange.TrimRight();

  000fd	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  00100	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00106	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  00109	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 490  : 
; 491  : 	memcpy(sTmp, pInput->drate, sizeof(pInput->drate));		/*  [등락율]				*/

  0010f	8b 47 1a	 mov	 eax, DWORD PTR [edi+26]
  00112	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  00115	0f b7 47 1e	 movzx	 eax, WORD PTR [edi+30]
  00119	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  0011d	0f b6 47 20	 movzx	 eax, BYTE PTR [edi+32]
  00121	88 45 ea	 mov	 BYTE PTR _sTmp$[ebp+6], al

; 492  : 	sTmp[sizeof(pInput->drate)]=0;
; 493  : 	realData_Common.m_strChrate = sTmp;

  00124	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00127	c6 45 eb 00	 mov	 BYTE PTR _sTmp$[ebp+7], 0
  0012b	50		 push	 eax
  0012c	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  0012f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 494  : 	realData_Common.m_strChrate.TrimLeft(); realData_Common.m_strChrate.TrimRight();

  00135	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  00138	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0013e	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 495  : 
; 496  : 	memcpy(sTmp, pInput->volume, sizeof(pInput->volume));	/*  [누적거래량, 주]		*/

  00147	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]

; 497  : 	sTmp[sizeof(pInput->volume)]=0;
; 498  : 	realData_Common.m_strVolume = sTmp;

  0014a	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  0014d	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  00150	0f b7 47 50	 movzx	 eax, WORD PTR [edi+80]
  00154	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  00158	0f b6 47 52	 movzx	 eax, BYTE PTR [edi+82]
  0015c	88 45 ea	 mov	 BYTE PTR _sTmp$[ebp+6], al
  0015f	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00162	50		 push	 eax
  00163	c6 45 eb 00	 mov	 BYTE PTR _sTmp$[ebp+7], 0
  00167	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 499  : 	realData_Common.m_strVolume.TrimLeft(); realData_Common.m_strVolume.TrimRight();

  0016d	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  00170	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00176	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  00179	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 500  : 
; 501  : 	memcpy(sTmp, pInput->open, sizeof(pInput->open));		/*  [시가,       원]		*/

  0017f	8b 47 2a	 mov	 eax, DWORD PTR [edi+42]

; 502  : 	sTmp[sizeof(pInput->open)]=0;
; 503  : 	realData_Common.m_strOpen = sTmp;

  00182	8d 4b 1c	 lea	 ecx, DWORD PTR [ebx+28]
  00185	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  00188	0f b7 47 2e	 movzx	 eax, WORD PTR [edi+46]
  0018c	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  00190	0f b6 47 30	 movzx	 eax, BYTE PTR [edi+48]
  00194	88 45 ea	 mov	 BYTE PTR _sTmp$[ebp+6], al
  00197	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  0019a	50		 push	 eax
  0019b	c6 45 eb 00	 mov	 BYTE PTR _sTmp$[ebp+7], 0
  0019f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 504  : 	realData_Common.m_strOpen.TrimLeft(); realData_Common.m_strOpen.TrimRight();

  001a5	8d 4b 1c	 lea	 ecx, DWORD PTR [ebx+28]
  001a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  001ae	8d 4b 1c	 lea	 ecx, DWORD PTR [ebx+28]
  001b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 505  : 
; 506  : 	memcpy(sTmp, pInput->high, sizeof(pInput->high));		/*  [고가,       원]		*/

  001b7	8b 47 32	 mov	 eax, DWORD PTR [edi+50]

; 507  : 	sTmp[sizeof(pInput->high)]=0;
; 508  : 	realData_Common.m_strHigh = sTmp;

  001ba	8d 4b 20	 lea	 ecx, DWORD PTR [ebx+32]
  001bd	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  001c0	0f b7 47 36	 movzx	 eax, WORD PTR [edi+54]
  001c4	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  001c8	0f b6 47 38	 movzx	 eax, BYTE PTR [edi+56]
  001cc	88 45 ea	 mov	 BYTE PTR _sTmp$[ebp+6], al
  001cf	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  001d2	50		 push	 eax
  001d3	c6 45 eb 00	 mov	 BYTE PTR _sTmp$[ebp+7], 0
  001d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 509  : 	realData_Common.m_strHigh.TrimLeft(); realData_Common.m_strHigh.TrimRight();

  001dd	8d 4b 20	 lea	 ecx, DWORD PTR [ebx+32]
  001e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  001e6	8d 4b 20	 lea	 ecx, DWORD PTR [ebx+32]
  001e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 510  : 
; 511  : 	memcpy(sTmp, pInput->low, sizeof(pInput->low));			/*  [저가,       원]		*/

  001ef	8b 47 3a	 mov	 eax, DWORD PTR [edi+58]

; 512  : 	sTmp[sizeof(pInput->low)]=0;
; 513  : 	realData_Common.m_strLow = sTmp;

  001f2	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  001f5	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  001f8	0f b7 47 3e	 movzx	 eax, WORD PTR [edi+62]
  001fc	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  00200	0f b6 47 40	 movzx	 eax, BYTE PTR [edi+64]
  00204	88 45 ea	 mov	 BYTE PTR _sTmp$[ebp+6], al
  00207	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  0020a	50		 push	 eax
  0020b	c6 45 eb 00	 mov	 BYTE PTR _sTmp$[ebp+7], 0
  0020f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 514  : 	realData_Common.m_strLow.TrimLeft(); realData_Common.m_strLow.TrimRight();

  00215	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  00218	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0021e	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  00221	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 515  : 	
; 516  : 	memcpy(sTmp, pInput->value, sizeof(pInput->value));		/*  [거래대금,       원]	*/

  00227	8b 47 6d	 mov	 eax, DWORD PTR [edi+109]

; 517  : 	sTmp[sizeof(pInput->value)]=0;
; 518  : 	realData_Common.m_strValue.TrimLeft(); realData_Common.m_strValue.TrimRight();

  0022a	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
  0022d	f3 0f 7e 47 65	 movq	 xmm0, QWORD PTR [edi+101]
  00232	89 45 ec	 mov	 DWORD PTR _sTmp$[ebp+8], eax
  00235	0f b7 47 71	 movzx	 eax, WORD PTR [edi+113]
  00239	66 89 45 f0	 mov	 WORD PTR _sTmp$[ebp+12], ax
  0023d	0f b6 47 73	 movzx	 eax, BYTE PTR [edi+115]
  00241	66 0f d6 45 e4	 movq	 QWORD PTR _sTmp$[ebp], xmm0
  00246	88 45 f2	 mov	 BYTE PTR _sTmp$[ebp+14], al
  00249	c6 45 f3 00	 mov	 BYTE PTR _sTmp$[ebp+15], 0
  0024d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00253	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
  00256	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 519  : 
; 520  : 	realData_Common.m_nMarketType = CMasterTypeInfo::STOCKFUTOPT_CHART;

  0025c	c7 43 2c 03 00
	00 00		 mov	 DWORD PTR [ebx+44], 3

; 521  : 	return TRUE;

  00263	b8 01 00 00 00	 mov	 eax, 1

; 522  : }

  00268	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0026b	5f		 pop	 edi
  0026c	5e		 pop	 esi
  0026d	33 cd		 xor	 ecx, ebp
  0026f	5b		 pop	 ebx
  00270	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00275	8b e5		 mov	 esp, ebp
  00277	5d		 pop	 ebp
  00278	c3		 ret	 0
?Convert_JOC0@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z ENDP ; CChartRealConverter::Convert_JOC0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\COMMONTR\ChartRealConverter.cpp
;	COMDAT ?Convert_JFC0@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z
_TEXT	SEGMENT
_sTmp$ = -28						; size = 21
__$ArrayPad$ = -4					; size = 4
_pRealStruct$ = 8					; size = 4
_realData_Common$ = 12					; size = 4
?Convert_JFC0@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z PROC ; CChartRealConverter::Convert_JFC0, COMDAT

; 396  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _realData_Common$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _pRealStruct$[ebp]

; 397  : 	LPJFC0_OutBlock pInput = (LPJFC0_OutBlock)pRealStruct;
; 398  : 	char sTmp[20+1];
; 399  : 
; 400  : 	memcpy(sTmp, pInput->kfutcode, sizeof(pInput->kfutcode));	/*  [선물종목코드]				*/
; 401  : 	sTmp[sizeof(pInput->kfutcode)]=0;

  00019	c6 45 ec 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  0001d	8b 07		 mov	 eax, DWORD PTR [edi]
  0001f	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00022	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax

; 402  : 	realData_Common.m_strCode = sTmp;

  00025	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00028	89 4d e8	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  0002b	8b cb		 mov	 ecx, ebx
  0002d	50		 push	 eax
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 403  : 	realData_Common.m_strCode.TrimLeft(); realData_Common.m_strCode.TrimRight();

  00034	8b cb		 mov	 ecx, ebx
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0003c	8b cb		 mov	 ecx, ebx
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 404  : 	
; 405  : 	memcpy(sTmp, pInput->chetime, sizeof(pInput->chetime));	/*  [체결시간]				*/

  00044	8b 47 09	 mov	 eax, DWORD PTR [edi+9]

; 406  : 	sTmp[sizeof(pInput->chetime)]=0;
; 407  : 	realData_Common.m_strTime = sTmp;

  00047	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0004a	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  0004d	0f b7 47 0d	 movzx	 eax, WORD PTR [edi+13]
  00051	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  00055	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00058	50		 push	 eax
  00059	c6 45 ea 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 408  : 	realData_Common.m_strTime.TrimLeft(); realData_Common.m_strTime.TrimRight();

  00063	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0006c	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 409  : 	
; 410  : 	memcpy(sTmp, pInput->sign, sizeof(pInput->sign));		/*  [1:상한]				*/

  00075	0f b6 47 10	 movzx	 eax, BYTE PTR [edi+16]

; 411  : 	sTmp[sizeof(pInput->sign)]=0;
; 412  : 	realData_Common.m_strSign = sTmp;

  00079	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0007c	88 45 e4	 mov	 BYTE PTR _sTmp$[ebp], al
  0007f	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00082	50		 push	 eax
  00083	c6 45 e5 00	 mov	 BYTE PTR _sTmp$[ebp+1], 0
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 413  : 	realData_Common.m_strSign.TrimLeft(); realData_Common.m_strSign.TrimRight();

  0008d	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00096	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 414  : 
; 415  : 	memcpy(sTmp, pInput->price, sizeof(pInput->price));		/*  [현재가,     원]		*/

  0009f	8b 47 21	 mov	 eax, DWORD PTR [edi+33]

; 416  : 	sTmp[sizeof(pInput->price)]=0;
; 417  : 	realData_Common.m_strPrice = sTmp;

  000a2	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  000a5	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  000a8	0f b7 47 25	 movzx	 eax, WORD PTR [edi+37]
  000ac	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  000b0	0f b6 47 27	 movzx	 eax, BYTE PTR [edi+39]
  000b4	88 45 ea	 mov	 BYTE PTR _sTmp$[ebp+6], al
  000b7	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  000ba	50		 push	 eax
  000bb	c6 45 eb 00	 mov	 BYTE PTR _sTmp$[ebp+7], 0
  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 418  : 	realData_Common.m_strPrice.TrimLeft(); realData_Common.m_strPrice.TrimRight();

  000c5	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  000ce	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 419  : 
; 420  : 	memcpy(sTmp, pInput->change, sizeof(pInput->change));	/*  [전일대비,   원]		*/

  000d7	8b 47 12	 mov	 eax, DWORD PTR [edi+18]

; 421  : 	sTmp[sizeof(pInput->change)]=0;
; 422  : 	realData_Common.m_strChange = sTmp;

  000da	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  000dd	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  000e0	0f b7 47 16	 movzx	 eax, WORD PTR [edi+22]
  000e4	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  000e8	0f b6 47 18	 movzx	 eax, BYTE PTR [edi+24]
  000ec	88 45 ea	 mov	 BYTE PTR _sTmp$[ebp+6], al
  000ef	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  000f2	50		 push	 eax
  000f3	c6 45 eb 00	 mov	 BYTE PTR _sTmp$[ebp+7], 0
  000f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 423  : 	realData_Common.m_strChange.TrimLeft(); realData_Common.m_strChange.TrimRight();

  000fd	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  00100	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00106	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  00109	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 424  : 
; 425  : 	memcpy(sTmp, pInput->drate, sizeof(pInput->drate));		/*  [등락율]				*/

  0010f	8b 47 1a	 mov	 eax, DWORD PTR [edi+26]

; 426  : 	sTmp[sizeof(pInput->drate)]=0;
; 427  : 	realData_Common.m_strChrate = sTmp;

  00112	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  00115	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  00118	0f b7 47 1e	 movzx	 eax, WORD PTR [edi+30]
  0011c	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  00120	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00123	50		 push	 eax
  00124	c6 45 ea 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  00128	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 428  : 	realData_Common.m_strChrate.TrimLeft(); realData_Common.m_strChrate.TrimRight();

  0012e	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  00131	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00137	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  0013a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 429  : 
; 430  : 	memcpy(sTmp, pInput->volume, sizeof(pInput->volume));	/*  [누적거래량, 주]		*/

  00140	8b 47 4b	 mov	 eax, DWORD PTR [edi+75]

; 431  : 	sTmp[sizeof(pInput->volume)]=0;
; 432  : 	realData_Common.m_strVolume = sTmp;

  00143	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  00146	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  00149	0f b7 47 4f	 movzx	 eax, WORD PTR [edi+79]
  0014d	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  00151	0f b6 47 51	 movzx	 eax, BYTE PTR [edi+81]
  00155	88 45 ea	 mov	 BYTE PTR _sTmp$[ebp+6], al
  00158	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  0015b	50		 push	 eax
  0015c	c6 45 eb 00	 mov	 BYTE PTR _sTmp$[ebp+7], 0
  00160	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 433  : 	realData_Common.m_strVolume.TrimLeft(); realData_Common.m_strVolume.TrimRight();

  00166	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  00169	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0016f	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  00172	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 434  : 
; 435  : 	memcpy(sTmp, pInput->open, sizeof(pInput->open));		/*  [시가,       원]		*/

  00178	8b 47 29	 mov	 eax, DWORD PTR [edi+41]

; 436  : 	sTmp[sizeof(pInput->open)]=0;
; 437  : 	realData_Common.m_strOpen = sTmp;

  0017b	8d 4b 1c	 lea	 ecx, DWORD PTR [ebx+28]
  0017e	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  00181	0f b7 47 2d	 movzx	 eax, WORD PTR [edi+45]
  00185	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  00189	0f b6 47 2f	 movzx	 eax, BYTE PTR [edi+47]
  0018d	88 45 ea	 mov	 BYTE PTR _sTmp$[ebp+6], al
  00190	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00193	50		 push	 eax
  00194	c6 45 eb 00	 mov	 BYTE PTR _sTmp$[ebp+7], 0
  00198	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 438  : 	realData_Common.m_strOpen.TrimLeft(); realData_Common.m_strOpen.TrimRight();

  0019e	8d 4b 1c	 lea	 ecx, DWORD PTR [ebx+28]
  001a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  001a7	8d 4b 1c	 lea	 ecx, DWORD PTR [ebx+28]
  001aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 439  : 
; 440  : 	memcpy(sTmp, pInput->high, sizeof(pInput->high));		/*  [고가,       원]		*/

  001b0	8b 47 31	 mov	 eax, DWORD PTR [edi+49]

; 441  : 	sTmp[sizeof(pInput->high)]=0;
; 442  : 	realData_Common.m_strHigh = sTmp;

  001b3	8d 4b 20	 lea	 ecx, DWORD PTR [ebx+32]
  001b6	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  001b9	0f b7 47 35	 movzx	 eax, WORD PTR [edi+53]
  001bd	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  001c1	0f b6 47 37	 movzx	 eax, BYTE PTR [edi+55]
  001c5	88 45 ea	 mov	 BYTE PTR _sTmp$[ebp+6], al
  001c8	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  001cb	50		 push	 eax
  001cc	c6 45 eb 00	 mov	 BYTE PTR _sTmp$[ebp+7], 0
  001d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 443  : 	realData_Common.m_strHigh.TrimLeft(); realData_Common.m_strHigh.TrimRight();

  001d6	8d 4b 20	 lea	 ecx, DWORD PTR [ebx+32]
  001d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  001df	8d 4b 20	 lea	 ecx, DWORD PTR [ebx+32]
  001e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 444  : 
; 445  : 	memcpy(sTmp, pInput->low, sizeof(pInput->low));			/*  [저가,       원]		*/

  001e8	8b 47 39	 mov	 eax, DWORD PTR [edi+57]

; 446  : 	sTmp[sizeof(pInput->low)]=0;
; 447  : 	realData_Common.m_strLow = sTmp;

  001eb	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  001ee	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  001f1	0f b7 47 3d	 movzx	 eax, WORD PTR [edi+61]
  001f5	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  001f9	0f b6 47 3f	 movzx	 eax, BYTE PTR [edi+63]
  001fd	88 45 ea	 mov	 BYTE PTR _sTmp$[ebp+6], al
  00200	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00203	50		 push	 eax
  00204	c6 45 eb 00	 mov	 BYTE PTR _sTmp$[ebp+7], 0
  00208	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 448  : 	realData_Common.m_strLow.TrimLeft(); realData_Common.m_strLow.TrimRight();

  0020e	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  00211	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00217	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  0021a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 449  : 	
; 450  : 	memcpy(sTmp, pInput->value, sizeof(pInput->value));		/*  [거래대금,       원]	*/

  00220	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]

; 451  : 	sTmp[sizeof(pInput->value)]=0;
; 452  : 	realData_Common.m_strValue = sTmp;

  00223	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
  00226	f3 0f 7e 47 64	 movq	 xmm0, QWORD PTR [edi+100]
  0022b	89 45 ec	 mov	 DWORD PTR _sTmp$[ebp+8], eax
  0022e	0f b7 47 70	 movzx	 eax, WORD PTR [edi+112]
  00232	66 89 45 f0	 mov	 WORD PTR _sTmp$[ebp+12], ax
  00236	0f b6 47 72	 movzx	 eax, BYTE PTR [edi+114]
  0023a	88 45 f2	 mov	 BYTE PTR _sTmp$[ebp+14], al
  0023d	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00240	50		 push	 eax
  00241	66 0f d6 45 e4	 movq	 QWORD PTR _sTmp$[ebp], xmm0
  00246	c6 45 f3 00	 mov	 BYTE PTR _sTmp$[ebp+15], 0
  0024a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 453  : 	realData_Common.m_strValue.TrimLeft(); realData_Common.m_strValue.TrimRight();

  00250	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
  00253	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00259	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
  0025c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 454  : 
; 455  : 	realData_Common.m_nMarketType = CMasterTypeInfo::STOCKFUTOPT_CHART;
; 456  : 	return TRUE;
; 457  : }

  00262	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00265	b8 01 00 00 00	 mov	 eax, 1
  0026a	5f		 pop	 edi
  0026b	5e		 pop	 esi
  0026c	c7 43 2c 03 00
	00 00		 mov	 DWORD PTR [ebx+44], 3
  00273	33 cd		 xor	 ecx, ebp
  00275	5b		 pop	 ebx
  00276	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0027b	8b e5		 mov	 esp, ebp
  0027d	5d		 pop	 ebp
  0027e	c3		 ret	 0
?Convert_JFC0@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z ENDP ; CChartRealConverter::Convert_JFC0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\COMMONTR\ChartRealConverter.cpp
;	COMDAT ?Convert_OOC0@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z
_TEXT	SEGMENT
_sTmp$ = -28						; size = 21
__$ArrayPad$ = -4					; size = 4
_pRealStruct$ = 8					; size = 4
_realData_Common$ = 12					; size = 4
?Convert_OOC0@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z PROC ; CChartRealConverter::Convert_OOC0, COMDAT

; 330  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _realData_Common$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _pRealStruct$[ebp]

; 331  : 	LPOOC0_OutBlock pInput = (LPOOC0_OutBlock)pRealStruct;
; 332  : 	char sTmp[20+1];
; 333  : 
; 334  : 	memcpy(sTmp, pInput->koptcode, sizeof(pInput->koptcode));	/*  [종목코드]				*/
; 335  : 	sTmp[sizeof(pInput->koptcode)]=0;

  00019	c6 45 ec 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  0001d	8b 07		 mov	 eax, DWORD PTR [edi]
  0001f	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00022	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax

; 336  : 	realData_Common.m_strCode = sTmp;

  00025	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00028	89 4d e8	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  0002b	8b cb		 mov	 ecx, ebx
  0002d	50		 push	 eax
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 337  : 	realData_Common.m_strCode.TrimLeft(); realData_Common.m_strCode.TrimRight();

  00034	8b cb		 mov	 ecx, ebx
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0003c	8b cb		 mov	 ecx, ebx
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 338  : 	
; 339  : 	memcpy(sTmp, pInput->chetime, sizeof(pInput->chetime));	/*  [체결시간]				*/

  00044	8b 47 09	 mov	 eax, DWORD PTR [edi+9]

; 340  : 	sTmp[sizeof(pInput->chetime)]=0;
; 341  : 	realData_Common.m_strTime = sTmp;

  00047	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0004a	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  0004d	0f b7 47 0d	 movzx	 eax, WORD PTR [edi+13]
  00051	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  00055	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00058	50		 push	 eax
  00059	c6 45 ea 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 342  : 	realData_Common.m_strTime.TrimLeft(); realData_Common.m_strTime.TrimRight();

  00063	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0006c	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 343  : 	
; 344  : 	memcpy(sTmp, pInput->sign, sizeof(pInput->sign));		/*  [1:상한]				*/

  00075	8a 47 10	 mov	 al, BYTE PTR [edi+16]

; 345  : 	sTmp[sizeof(pInput->sign)]=0;
; 346  : 	realData_Common.m_strSign = sTmp;

  00078	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0007b	88 45 e4	 mov	 BYTE PTR _sTmp$[ebp], al
  0007e	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00081	50		 push	 eax
  00082	c6 45 e5 00	 mov	 BYTE PTR _sTmp$[ebp+1], 0
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 347  : 	realData_Common.m_strSign.TrimLeft(); realData_Common.m_strSign.TrimRight();

  0008c	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00095	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  00098	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 348  : 
; 349  : 	memcpy(sTmp, pInput->price, sizeof(pInput->price));		/*  [현재가,     원]		*/

  0009e	8b 47 20	 mov	 eax, DWORD PTR [edi+32]

; 350  : 	sTmp[sizeof(pInput->price)]=0;
; 351  : 	realData_Common.m_strPrice = sTmp;

  000a1	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  000a4	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  000a7	0f b7 47 24	 movzx	 eax, WORD PTR [edi+36]
  000ab	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  000af	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  000b2	50		 push	 eax
  000b3	c6 45 ea 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 352  : 	realData_Common.m_strPrice.TrimLeft(); realData_Common.m_strPrice.TrimRight();

  000bd	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  000c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  000c6	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  000c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 353  : 
; 354  : 	memcpy(sTmp, pInput->change, sizeof(pInput->change));	/*  [전일대비,   원]		*/

  000cf	8b 47 12	 mov	 eax, DWORD PTR [edi+18]

; 355  : 	sTmp[sizeof(pInput->change)]=0;
; 356  : 	realData_Common.m_strChange = sTmp;

  000d2	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  000d5	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  000d8	0f b7 47 16	 movzx	 eax, WORD PTR [edi+22]
  000dc	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  000e0	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  000e3	50		 push	 eax
  000e4	c6 45 ea 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 357  : 	realData_Common.m_strChange.TrimLeft(); realData_Common.m_strChange.TrimRight();

  000ee	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  000f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  000f7	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  000fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 358  : 
; 359  : 	memcpy(sTmp, pInput->drate, sizeof(pInput->drate));		/*  [등락율]				*/

  00100	8b 47 19	 mov	 eax, DWORD PTR [edi+25]

; 360  : 	sTmp[sizeof(pInput->drate)]=0;
; 361  : 	realData_Common.m_strChrate = sTmp;

  00103	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  00106	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  00109	0f b7 47 1d	 movzx	 eax, WORD PTR [edi+29]
  0010d	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  00111	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00114	50		 push	 eax
  00115	c6 45 ea 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  00119	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 362  : 	realData_Common.m_strChrate.TrimLeft(); realData_Common.m_strChrate.TrimRight();

  0011f	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  00122	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00128	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  0012b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 363  : 
; 364  : 	memcpy(sTmp, pInput->volume, sizeof(pInput->volume));	/*  [누적거래량, 주]		*/

  00131	8b 47 4d	 mov	 eax, DWORD PTR [edi+77]

; 365  : 	sTmp[sizeof(pInput->volume)]=0;
; 366  : 	realData_Common.m_strVolume = sTmp;

  00134	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  00137	f3 0f 7e 47 45	 movq	 xmm0, QWORD PTR [edi+69]
  0013c	89 45 ec	 mov	 DWORD PTR _sTmp$[ebp+8], eax
  0013f	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00142	50		 push	 eax
  00143	66 0f d6 45 e4	 movq	 QWORD PTR _sTmp$[ebp], xmm0
  00148	c6 45 f0 00	 mov	 BYTE PTR _sTmp$[ebp+12], 0
  0014c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 367  : 	realData_Common.m_strVolume.TrimLeft(); realData_Common.m_strVolume.TrimRight();

  00152	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  00155	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0015b	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  0015e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 368  : 
; 369  : 	memcpy(sTmp, pInput->open, sizeof(pInput->open));		/*  [시가,       원]		*/

  00164	8b 47 27	 mov	 eax, DWORD PTR [edi+39]

; 370  : 	sTmp[sizeof(pInput->open)]=0;
; 371  : 	realData_Common.m_strOpen = sTmp;

  00167	8d 4b 1c	 lea	 ecx, DWORD PTR [ebx+28]
  0016a	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  0016d	0f b7 47 2b	 movzx	 eax, WORD PTR [edi+43]
  00171	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  00175	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00178	50		 push	 eax
  00179	c6 45 ea 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  0017d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 372  : 	realData_Common.m_strOpen.TrimLeft(); realData_Common.m_strOpen.TrimRight();

  00183	8d 4b 1c	 lea	 ecx, DWORD PTR [ebx+28]
  00186	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0018c	8d 4b 1c	 lea	 ecx, DWORD PTR [ebx+28]
  0018f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 373  : 
; 374  : 	memcpy(sTmp, pInput->high, sizeof(pInput->high));		/*  [고가,       원]		*/

  00195	8b 47 2e	 mov	 eax, DWORD PTR [edi+46]

; 375  : 	sTmp[sizeof(pInput->high)]=0;
; 376  : 	realData_Common.m_strHigh = sTmp;

  00198	8d 4b 20	 lea	 ecx, DWORD PTR [ebx+32]
  0019b	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  0019e	0f b7 47 32	 movzx	 eax, WORD PTR [edi+50]
  001a2	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  001a6	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  001a9	50		 push	 eax
  001aa	c6 45 ea 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  001ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 377  : 	realData_Common.m_strHigh.TrimLeft(); realData_Common.m_strHigh.TrimRight();

  001b4	8d 4b 20	 lea	 ecx, DWORD PTR [ebx+32]
  001b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  001bd	8d 4b 20	 lea	 ecx, DWORD PTR [ebx+32]
  001c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 378  : 
; 379  : 	memcpy(sTmp, pInput->low, sizeof(pInput->low));			/*  [저가,       원]		*/

  001c6	8b 47 35	 mov	 eax, DWORD PTR [edi+53]

; 380  : 	sTmp[sizeof(pInput->low)]=0;
; 381  : 	realData_Common.m_strLow = sTmp;

  001c9	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  001cc	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  001cf	0f b7 47 39	 movzx	 eax, WORD PTR [edi+57]
  001d3	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  001d7	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  001da	50		 push	 eax
  001db	c6 45 ea 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  001df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 382  : 	realData_Common.m_strLow.TrimLeft(); realData_Common.m_strLow.TrimRight();

  001e5	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  001e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  001ee	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  001f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 383  : 	
; 384  : 	memcpy(sTmp, pInput->value, sizeof(pInput->value));		/*  [거래대금,       원]	*/

  001f7	8b 47 70	 mov	 eax, DWORD PTR [edi+112]

; 385  : 	sTmp[sizeof(pInput->value)]=0;
; 386  : 	realData_Common.m_strValue = sTmp;

  001fa	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
  001fd	f3 0f 7e 47 68	 movq	 xmm0, QWORD PTR [edi+104]
  00202	89 45 ec	 mov	 DWORD PTR _sTmp$[ebp+8], eax
  00205	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00208	50		 push	 eax
  00209	66 0f d6 45 e4	 movq	 QWORD PTR _sTmp$[ebp], xmm0
  0020e	c6 45 f0 00	 mov	 BYTE PTR _sTmp$[ebp+12], 0
  00212	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 387  : 	realData_Common.m_strValue.TrimLeft(); realData_Common.m_strValue.TrimRight();

  00218	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
  0021b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00221	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
  00224	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 388  : 
; 389  : 	realData_Common.m_nMarketType = CMasterTypeInfo::FUTOPT_CHART;
; 390  : 	return TRUE;
; 391  : }

  0022a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0022d	b8 01 00 00 00	 mov	 eax, 1
  00232	5f		 pop	 edi
  00233	5e		 pop	 esi
  00234	c7 43 2c 02 00
	00 00		 mov	 DWORD PTR [ebx+44], 2
  0023b	33 cd		 xor	 ecx, ebp
  0023d	5b		 pop	 ebx
  0023e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00243	8b e5		 mov	 esp, ebp
  00245	5d		 pop	 ebp
  00246	c3		 ret	 0
?Convert_OOC0@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z ENDP ; CChartRealConverter::Convert_OOC0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\COMMONTR\ChartRealConverter.cpp
;	COMDAT ?Convert_FFC0@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z
_TEXT	SEGMENT
_sTmp$ = -28						; size = 21
__$ArrayPad$ = -4					; size = 4
_pRealStruct$ = 8					; size = 4
_realData_Common$ = 12					; size = 4
?Convert_FFC0@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z PROC ; CChartRealConverter::Convert_FFC0, COMDAT

; 264  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _realData_Common$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _pRealStruct$[ebp]

; 265  : 	LPFFC0_OutBlock pInput = (LPFFC0_OutBlock)pRealStruct;
; 266  : 	char sTmp[20+1];
; 267  : 
; 268  : 	memcpy(sTmp, pInput->kfutcode, sizeof(pInput->kfutcode));	/*  [선물종목코드]				*/
; 269  : 	sTmp[sizeof(pInput->kfutcode)]=0;

  00019	c6 45 ec 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  0001d	8b 07		 mov	 eax, DWORD PTR [edi]
  0001f	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00022	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax

; 270  : 	realData_Common.m_strCode = sTmp;

  00025	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00028	89 4d e8	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  0002b	8b cb		 mov	 ecx, ebx
  0002d	50		 push	 eax
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 271  : 	realData_Common.m_strCode.TrimLeft(); realData_Common.m_strCode.TrimRight();

  00034	8b cb		 mov	 ecx, ebx
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0003c	8b cb		 mov	 ecx, ebx
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 272  : 	
; 273  : 	memcpy(sTmp, pInput->chetime, sizeof(pInput->chetime));	/*  [체결시간]				*/

  00044	8b 47 09	 mov	 eax, DWORD PTR [edi+9]

; 274  : 	sTmp[sizeof(pInput->chetime)]=0;
; 275  : 	realData_Common.m_strTime = sTmp;

  00047	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0004a	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  0004d	0f b7 47 0d	 movzx	 eax, WORD PTR [edi+13]
  00051	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  00055	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00058	50		 push	 eax
  00059	c6 45 ea 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 276  : 	realData_Common.m_strTime.TrimLeft(); realData_Common.m_strTime.TrimRight();

  00063	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0006c	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 277  : 	
; 278  : 	memcpy(sTmp, pInput->sign, sizeof(pInput->sign));		/*  [1:상한]				*/

  00075	8a 47 10	 mov	 al, BYTE PTR [edi+16]

; 279  : 	sTmp[sizeof(pInput->sign)]=0;
; 280  : 	realData_Common.m_strSign = sTmp;

  00078	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0007b	88 45 e4	 mov	 BYTE PTR _sTmp$[ebp], al
  0007e	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00081	50		 push	 eax
  00082	c6 45 e5 00	 mov	 BYTE PTR _sTmp$[ebp+1], 0
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 281  : 	realData_Common.m_strSign.TrimLeft(); realData_Common.m_strSign.TrimRight();

  0008c	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00095	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  00098	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 282  : 
; 283  : 	memcpy(sTmp, pInput->price, sizeof(pInput->price));		/*  [현재가,     원]		*/

  0009e	8b 47 20	 mov	 eax, DWORD PTR [edi+32]

; 284  : 	sTmp[sizeof(pInput->price)]=0;
; 285  : 	realData_Common.m_strPrice = sTmp;

  000a1	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  000a4	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  000a7	0f b7 47 24	 movzx	 eax, WORD PTR [edi+36]
  000ab	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  000af	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  000b2	50		 push	 eax
  000b3	c6 45 ea 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 286  : 	realData_Common.m_strPrice.TrimLeft(); realData_Common.m_strPrice.TrimRight();

  000bd	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  000c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  000c6	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  000c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 287  : 
; 288  : 	memcpy(sTmp, pInput->change, sizeof(pInput->change));	/*  [전일대비,   원]		*/

  000cf	8b 47 12	 mov	 eax, DWORD PTR [edi+18]

; 289  : 	sTmp[sizeof(pInput->change)]=0;
; 290  : 	realData_Common.m_strChange = sTmp;

  000d2	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  000d5	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  000d8	0f b7 47 16	 movzx	 eax, WORD PTR [edi+22]
  000dc	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  000e0	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  000e3	50		 push	 eax
  000e4	c6 45 ea 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 291  : 	realData_Common.m_strChange.TrimLeft(); realData_Common.m_strChange.TrimRight();

  000ee	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  000f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  000f7	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  000fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 292  : 
; 293  : 	memcpy(sTmp, pInput->drate, sizeof(pInput->drate));		/*  [등락율]				*/

  00100	8b 47 19	 mov	 eax, DWORD PTR [edi+25]

; 294  : 	sTmp[sizeof(pInput->drate)]=0;
; 295  : 	realData_Common.m_strChrate = sTmp;

  00103	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  00106	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  00109	0f b7 47 1d	 movzx	 eax, WORD PTR [edi+29]
  0010d	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  00111	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00114	50		 push	 eax
  00115	c6 45 ea 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  00119	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 296  : 	realData_Common.m_strChrate.TrimLeft(); realData_Common.m_strChrate.TrimRight();

  0011f	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  00122	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00128	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  0012b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 297  : 
; 298  : 	memcpy(sTmp, pInput->volume, sizeof(pInput->volume));	/*  [누적거래량, 주]		*/

  00131	8b 47 4d	 mov	 eax, DWORD PTR [edi+77]

; 299  : 	sTmp[sizeof(pInput->volume)]=0;
; 300  : 	realData_Common.m_strVolume = sTmp;

  00134	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  00137	f3 0f 7e 47 45	 movq	 xmm0, QWORD PTR [edi+69]
  0013c	89 45 ec	 mov	 DWORD PTR _sTmp$[ebp+8], eax
  0013f	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00142	50		 push	 eax
  00143	66 0f d6 45 e4	 movq	 QWORD PTR _sTmp$[ebp], xmm0
  00148	c6 45 f0 00	 mov	 BYTE PTR _sTmp$[ebp+12], 0
  0014c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 301  : 	realData_Common.m_strVolume.TrimLeft(); realData_Common.m_strVolume.TrimRight();

  00152	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  00155	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0015b	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  0015e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 302  : 
; 303  : 	memcpy(sTmp, pInput->open, sizeof(pInput->open));		/*  [시가,       원]		*/

  00164	8b 47 27	 mov	 eax, DWORD PTR [edi+39]

; 304  : 	sTmp[sizeof(pInput->open)]=0;
; 305  : 	realData_Common.m_strOpen = sTmp;

  00167	8d 4b 1c	 lea	 ecx, DWORD PTR [ebx+28]
  0016a	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  0016d	0f b7 47 2b	 movzx	 eax, WORD PTR [edi+43]
  00171	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  00175	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00178	50		 push	 eax
  00179	c6 45 ea 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  0017d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 306  : 	realData_Common.m_strOpen.TrimLeft(); realData_Common.m_strOpen.TrimRight();

  00183	8d 4b 1c	 lea	 ecx, DWORD PTR [ebx+28]
  00186	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0018c	8d 4b 1c	 lea	 ecx, DWORD PTR [ebx+28]
  0018f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 307  : 
; 308  : 	memcpy(sTmp, pInput->high, sizeof(pInput->high));		/*  [고가,       원]		*/

  00195	8b 47 2e	 mov	 eax, DWORD PTR [edi+46]

; 309  : 	sTmp[sizeof(pInput->high)]=0;
; 310  : 	realData_Common.m_strHigh = sTmp;

  00198	8d 4b 20	 lea	 ecx, DWORD PTR [ebx+32]
  0019b	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  0019e	0f b7 47 32	 movzx	 eax, WORD PTR [edi+50]
  001a2	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  001a6	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  001a9	50		 push	 eax
  001aa	c6 45 ea 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  001ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 311  : 	realData_Common.m_strHigh.TrimLeft(); realData_Common.m_strHigh.TrimRight();

  001b4	8d 4b 20	 lea	 ecx, DWORD PTR [ebx+32]
  001b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  001bd	8d 4b 20	 lea	 ecx, DWORD PTR [ebx+32]
  001c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 312  : 
; 313  : 	memcpy(sTmp, pInput->low, sizeof(pInput->low));			/*  [저가,       원]		*/

  001c6	8b 47 35	 mov	 eax, DWORD PTR [edi+53]

; 314  : 	sTmp[sizeof(pInput->low)]=0;
; 315  : 	realData_Common.m_strLow = sTmp;

  001c9	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  001cc	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  001cf	0f b7 47 39	 movzx	 eax, WORD PTR [edi+57]
  001d3	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  001d7	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  001da	50		 push	 eax
  001db	c6 45 ea 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  001df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 316  : 	realData_Common.m_strLow.TrimLeft(); realData_Common.m_strLow.TrimRight();

  001e5	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  001e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  001ee	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  001f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 317  : 	
; 318  : 	memcpy(sTmp, pInput->value, sizeof(pInput->value));		/*  [거래대금,       원]	*/

  001f7	8b 47 70	 mov	 eax, DWORD PTR [edi+112]

; 319  : 	sTmp[sizeof(pInput->value)]=0;
; 320  : 	realData_Common.m_strValue = sTmp;

  001fa	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
  001fd	f3 0f 7e 47 68	 movq	 xmm0, QWORD PTR [edi+104]
  00202	89 45 ec	 mov	 DWORD PTR _sTmp$[ebp+8], eax
  00205	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00208	50		 push	 eax
  00209	66 0f d6 45 e4	 movq	 QWORD PTR _sTmp$[ebp], xmm0
  0020e	c6 45 f0 00	 mov	 BYTE PTR _sTmp$[ebp+12], 0
  00212	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 321  : 	realData_Common.m_strValue.TrimLeft(); realData_Common.m_strValue.TrimRight();

  00218	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
  0021b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00221	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
  00224	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 322  : 
; 323  : 	realData_Common.m_nMarketType = CMasterTypeInfo::FUTOPT_CHART;
; 324  : 	return TRUE;
; 325  : }

  0022a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0022d	b8 01 00 00 00	 mov	 eax, 1
  00232	5f		 pop	 edi
  00233	5e		 pop	 esi
  00234	c7 43 2c 02 00
	00 00		 mov	 DWORD PTR [ebx+44], 2
  0023b	33 cd		 xor	 ecx, ebp
  0023d	5b		 pop	 ebx
  0023e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00243	8b e5		 mov	 esp, ebp
  00245	5d		 pop	 ebp
  00246	c3		 ret	 0
?Convert_FFC0@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z ENDP ; CChartRealConverter::Convert_FFC0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\COMMONTR\ChartRealConverter.cpp
;	COMDAT ?Convert_IXIJ@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z
_TEXT	SEGMENT
_sTmp$ = -28						; size = 21
__$ArrayPad$ = -4					; size = 4
_pRealStruct$ = 8					; size = 4
_realData_Common$ = 12					; size = 4
?Convert_IXIJ@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z PROC ; CChartRealConverter::Convert_IXIJ, COMDAT

; 198  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _realData_Common$[ebp]

; 199  : 	LPIXIJ_OutBlock pInput = (LPIXIJ_OutBlock)pRealStruct;
; 200  : 	char sTmp[20+1];
; 201  : 
; 202  : 	memcpy(sTmp, pInput->kupcode, sizeof(pInput->kupcode));		/*  [업종코드]			*/
; 203  : 	sTmp[sizeof(pInput->kupcode)]=0;
; 204  : 	realData_Common.m_strCode = sTmp;

  00014	8b cb		 mov	 ecx, ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR _pRealStruct$[ebp]
  0001b	c6 45 e7 00	 mov	 BYTE PTR _sTmp$[ebp+3], 0
  0001f	0f b7 07	 movzx	 eax, WORD PTR [edi]
  00022	66 89 45 e4	 mov	 WORD PTR _sTmp$[ebp], ax
  00026	0f b6 47 02	 movzx	 eax, BYTE PTR [edi+2]
  0002a	88 45 e6	 mov	 BYTE PTR _sTmp$[ebp+2], al
  0002d	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00030	50		 push	 eax
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 205  : 	realData_Common.m_strCode.TrimLeft(); realData_Common.m_strCode.TrimRight();

  00037	8b cb		 mov	 ecx, ebx
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0003f	8b cb		 mov	 ecx, ebx
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 206  : 	
; 207  : 	memcpy(sTmp, pInput->time, sizeof(pInput->time));			/*  [시간]				*/

  00047	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 208  : 	sTmp[sizeof(pInput->time)]=0;
; 209  : 	realData_Common.m_strTime = sTmp;

  0004a	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0004d	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  00050	0f b7 47 08	 movzx	 eax, WORD PTR [edi+8]
  00054	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  00058	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  0005b	50		 push	 eax
  0005c	c6 45 ea 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 210  : 	realData_Common.m_strTime.TrimLeft(); realData_Common.m_strTime.TrimRight();

  00066	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0006f	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 211  : 	
; 212  : 	memcpy(sTmp, pInput->sign, sizeof(pInput->sign));			/*  [2:상승 3:보합 5:하락]	*/

  00078	0f b6 47 14	 movzx	 eax, BYTE PTR [edi+20]

; 213  : 	sTmp[sizeof(pInput->sign)]=0;
; 214  : 	realData_Common.m_strSign = sTmp;

  0007c	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0007f	88 45 e4	 mov	 BYTE PTR _sTmp$[ebp], al
  00082	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00085	50		 push	 eax
  00086	c6 45 e5 00	 mov	 BYTE PTR _sTmp$[ebp+1], 0
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 215  : 	realData_Common.m_strSign.TrimLeft(); realData_Common.m_strSign.TrimRight();

  00090	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  00093	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00099	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 216  : 
; 217  : 	memcpy(sTmp, pInput->jisu, sizeof(pInput->jisu));			/*  [지수]				*/

  000a2	8b 47 0b	 mov	 eax, DWORD PTR [edi+11]
  000a5	8b 4f 0f	 mov	 ecx, DWORD PTR [edi+15]
  000a8	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax

; 218  : 	sTmp[sizeof(pInput->jisu)]=0;
; 219  : 	realData_Common.m_strPrice = sTmp;

  000ab	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  000ae	89 4d e8	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  000b1	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  000b4	50		 push	 eax
  000b5	c6 45 ec 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  000b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 220  : 	realData_Common.m_strPrice.TrimLeft(); realData_Common.m_strPrice.TrimRight();

  000bf	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  000c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  000c8	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 221  : 
; 222  : 	memcpy(sTmp, pInput->change, sizeof(pInput->change));		/*  [전일비]			*/

  000d1	8b 47 16	 mov	 eax, DWORD PTR [edi+22]
  000d4	8b 4f 1a	 mov	 ecx, DWORD PTR [edi+26]
  000d7	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax

; 223  : 	sTmp[sizeof(pInput->change)]=0;
; 224  : 	realData_Common.m_strChange = sTmp;

  000da	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  000dd	89 4d e8	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  000e0	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  000e3	50		 push	 eax
  000e4	c6 45 ec 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 225  : 	realData_Common.m_strChange.TrimLeft(); realData_Common.m_strChange.TrimRight();

  000ee	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  000f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  000f7	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  000fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 226  : 
; 227  : 	memcpy(sTmp, pInput->drate, sizeof(pInput->drate));			/*  [등락율]			*/

  00100	8b 47 1f	 mov	 eax, DWORD PTR [edi+31]

; 228  : 	sTmp[sizeof(pInput->drate)]=0;
; 229  : 	realData_Common.m_strChrate = sTmp;

  00103	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  00106	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  00109	0f b7 47 23	 movzx	 eax, WORD PTR [edi+35]
  0010d	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  00111	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00114	50		 push	 eax
  00115	c6 45 ea 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  00119	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 230  : 	realData_Common.m_strChrate.TrimLeft(); realData_Common.m_strChrate.TrimRight();

  0011f	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  00122	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00128	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  0012b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 231  : 
; 232  : 	memcpy(sTmp, pInput->volume, sizeof(pInput->volume));		/*  [거래량]			*/

  00131	8b 47 2f	 mov	 eax, DWORD PTR [edi+47]
  00134	8b 4f 33	 mov	 ecx, DWORD PTR [edi+51]
  00137	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax

; 233  : 	sTmp[sizeof(pInput->volume)]=0;
; 234  : 	realData_Common.m_strVolume = sTmp;

  0013a	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  0013d	89 4d e8	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  00140	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  00143	50		 push	 eax
  00144	c6 45 ec 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  00148	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 235  : 	realData_Common.m_strVolume.TrimLeft(); realData_Common.m_strVolume.TrimRight();

  0014e	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  00151	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00157	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  0015a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 236  : 
; 237  : 	memcpy(sTmp, pInput->openjisu, sizeof(pInput->openjisu));	/*  [시가지수]			*/

  00160	8b 47 73	 mov	 eax, DWORD PTR [edi+115]
  00163	8b 4f 77	 mov	 ecx, DWORD PTR [edi+119]
  00166	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax

; 238  : 	sTmp[sizeof(pInput->openjisu)]=0;
; 239  : 	realData_Common.m_strOpen = sTmp;

  00169	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  0016c	89 4d e8	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  0016f	8d 4b 1c	 lea	 ecx, DWORD PTR [ebx+28]
  00172	50		 push	 eax
  00173	c6 45 ec 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  00177	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 240  : 	realData_Common.m_strOpen.TrimLeft(); realData_Common.m_strOpen.TrimRight();

  0017d	8d 4b 1c	 lea	 ecx, DWORD PTR [ebx+28]
  00180	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00186	8d 4b 1c	 lea	 ecx, DWORD PTR [ebx+28]
  00189	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 241  : 
; 242  : 	memcpy(sTmp, pInput->highjisu, sizeof(pInput->highjisu));	/*  [고가지수]			*/

  0018f	8b 87 83 00 00
	00		 mov	 eax, DWORD PTR [edi+131]
  00195	8b 8f 87 00 00
	00		 mov	 ecx, DWORD PTR [edi+135]
  0019b	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax

; 243  : 	sTmp[sizeof(pInput->highjisu)]=0;
; 244  : 	realData_Common.m_strHigh = sTmp;

  0019e	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  001a1	89 4d e8	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  001a4	8d 4b 20	 lea	 ecx, DWORD PTR [ebx+32]
  001a7	50		 push	 eax
  001a8	c6 45 ec 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  001ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 245  : 	realData_Common.m_strHigh.TrimLeft(); realData_Common.m_strHigh.TrimRight();

  001b2	8d 4b 20	 lea	 ecx, DWORD PTR [ebx+32]
  001b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  001bb	8d 4b 20	 lea	 ecx, DWORD PTR [ebx+32]
  001be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 246  : 
; 247  : 	memcpy(sTmp, pInput->lowjisu, sizeof(pInput->lowjisu));		/*  [저가지수]			*/

  001c4	8b 87 93 00 00
	00		 mov	 eax, DWORD PTR [edi+147]
  001ca	8b 8f 97 00 00
	00		 mov	 ecx, DWORD PTR [edi+151]
  001d0	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax

; 248  : 	sTmp[sizeof(pInput->lowjisu)]=0;
; 249  : 	realData_Common.m_strLow = sTmp;

  001d3	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  001d6	89 4d e8	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  001d9	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  001dc	50		 push	 eax
  001dd	c6 45 ec 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  001e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 250  : 	realData_Common.m_strLow.TrimLeft(); realData_Common.m_strLow.TrimRight();

  001e7	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  001ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  001f0	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  001f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 251  : 	
; 252  : 	memcpy(sTmp, pInput->value, sizeof(pInput->value));		/*  [거래대금,       원]	*/

  001f9	8b 47 4a	 mov	 eax, DWORD PTR [edi+74]
  001fc	8b 4f 4e	 mov	 ecx, DWORD PTR [edi+78]
  001ff	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax

; 253  : 	sTmp[sizeof(pInput->value)]=0;
; 254  : 	realData_Common.m_strValue = sTmp;

  00202	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00205	89 4d e8	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  00208	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
  0020b	50		 push	 eax
  0020c	c6 45 ec 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  00210	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 255  : 	realData_Common.m_strValue.TrimLeft(); realData_Common.m_strValue.TrimRight();

  00216	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
  00219	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0021f	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
  00222	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 256  : 
; 257  : 	realData_Common.m_nMarketType = CMasterTypeInfo::UPJONG_CHART;
; 258  : 	return TRUE;
; 259  : }

  00228	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0022b	b8 01 00 00 00	 mov	 eax, 1
  00230	5f		 pop	 edi
  00231	5e		 pop	 esi
  00232	c7 43 2c 01 00
	00 00		 mov	 DWORD PTR [ebx+44], 1
  00239	33 cd		 xor	 ecx, ebp
  0023b	5b		 pop	 ebx
  0023c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00241	8b e5		 mov	 esp, ebp
  00243	5d		 pop	 ebp
  00244	c3		 ret	 0
?Convert_IXIJ@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z ENDP ; CChartRealConverter::Convert_IXIJ
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\COMMONTR\ChartRealConverter.cpp
;	COMDAT ?Convert_EWs3@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z
_TEXT	SEGMENT
_sTmp$ = -28						; size = 21
__$ArrayPad$ = -4					; size = 4
_pRealStruct$ = 8					; size = 4
_realData_Common$ = 12					; size = 4
?Convert_EWs3@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z PROC ; CChartRealConverter::Convert_EWs3, COMDAT

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _realData_Common$[ebp]

; 133  : 	LPEWs3_OutBlock pInput = (LPEWs3_OutBlock)pRealStruct;
; 134  : 	char sTmp[20+1];
; 135  : 
; 136  : 	memcpy(sTmp, pInput->kshcode, sizeof(pInput->kshcode));	/*  [종목코드]				*/
; 137  : 	sTmp[sizeof(pInput->kshcode)]=0;
; 138  : 	realData_Common.m_strCode = sTmp;

  00014	8b cb		 mov	 ecx, ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR _pRealStruct$[ebp]
  0001b	c6 45 ea 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  0001f	8b 07		 mov	 eax, DWORD PTR [edi]
  00021	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  00024	0f b7 47 04	 movzx	 eax, WORD PTR [edi+4]
  00028	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  0002c	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  0002f	50		 push	 eax
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 139  : 	realData_Common.m_strCode.TrimLeft(); realData_Common.m_strCode.TrimRight();

  00036	8b cb		 mov	 ecx, ebx
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0003e	8b cb		 mov	 ecx, ebx
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 140  : 	
; 141  : 	memcpy(sTmp, pInput->chetime, sizeof(pInput->chetime));	/*  [체결시간]				*/

  00046	8b 47 07	 mov	 eax, DWORD PTR [edi+7]

; 142  : 	sTmp[sizeof(pInput->chetime)]=0;
; 143  : 	realData_Common.m_strTime = sTmp;

  00049	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0004c	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  0004f	0f b7 47 0b	 movzx	 eax, WORD PTR [edi+11]
  00053	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  00057	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  0005a	50		 push	 eax
  0005b	c6 45 ea 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 144  : 	realData_Common.m_strTime.TrimLeft(); realData_Common.m_strTime.TrimRight();

  00065	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0006e	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 145  : 	
; 146  : 	memcpy(sTmp, pInput->sign, sizeof(pInput->sign));		/*  [1:상한]				*/

  00077	0f b6 47 0e	 movzx	 eax, BYTE PTR [edi+14]

; 147  : 	sTmp[sizeof(pInput->sign)]=0;
; 148  : 	realData_Common.m_strSign = sTmp;

  0007b	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0007e	88 45 e4	 mov	 BYTE PTR _sTmp$[ebp], al
  00081	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00084	50		 push	 eax
  00085	c6 45 e5 00	 mov	 BYTE PTR _sTmp$[ebp+1], 0
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 149  : 	realData_Common.m_strSign.TrimLeft(); realData_Common.m_strSign.TrimRight();

  0008f	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00098	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 150  : 
; 151  : 	memcpy(sTmp, pInput->price, sizeof(pInput->price));		/*  [현재가,     원]		*/

  000a1	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  000a4	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  000a7	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax

; 152  : 	sTmp[sizeof(pInput->price)]=0;
; 153  : 	realData_Common.m_strPrice = sTmp;

  000aa	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  000ad	89 4d e8	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  000b0	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  000b3	50		 push	 eax
  000b4	c6 45 ec 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  000b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 154  : 	realData_Common.m_strPrice.TrimLeft(); realData_Common.m_strPrice.TrimRight();

  000be	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  000c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  000c7	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 155  : 
; 156  : 	memcpy(sTmp, pInput->change, sizeof(pInput->change));	/*  [전일대비,   원]		*/

  000d0	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  000d3	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  000d6	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax

; 157  : 	sTmp[sizeof(pInput->change)]=0;
; 158  : 	realData_Common.m_strChange = sTmp;

  000d9	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  000dc	89 4d e8	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  000df	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  000e2	50		 push	 eax
  000e3	c6 45 ec 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  000e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 159  : 	realData_Common.m_strChange.TrimLeft(); realData_Common.m_strChange.TrimRight();

  000ed	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  000f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  000f6	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  000f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 160  : 
; 161  : 	memcpy(sTmp, pInput->drate, sizeof(pInput->drate));		/*  [등락율]				*/

  000ff	8b 47 19	 mov	 eax, DWORD PTR [edi+25]

; 162  : 	sTmp[sizeof(pInput->drate)]=0;
; 163  : 	realData_Common.m_strChrate = sTmp;

  00102	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  00105	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  00108	0f b7 47 1d	 movzx	 eax, WORD PTR [edi+29]
  0010c	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  00110	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00113	50		 push	 eax
  00114	c6 45 ea 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 164  : 	realData_Common.m_strChrate.TrimLeft(); realData_Common.m_strChrate.TrimRight();

  0011e	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  00121	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00127	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  0012a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 165  : 
; 166  : 	memcpy(sTmp, pInput->volume, sizeof(pInput->volume));	/*  [누적거래량, 주]		*/

  00130	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]

; 167  : 	sTmp[sizeof(pInput->volume)]=0;
; 168  : 	realData_Common.m_strVolume = sTmp;

  00133	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  00136	f3 0f 7e 47 64	 movq	 xmm0, QWORD PTR [edi+100]
  0013b	89 45 ec	 mov	 DWORD PTR _sTmp$[ebp+8], eax
  0013e	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00141	50		 push	 eax
  00142	66 0f d6 45 e4	 movq	 QWORD PTR _sTmp$[ebp], xmm0
  00147	c6 45 f0 00	 mov	 BYTE PTR _sTmp$[ebp+12], 0
  0014b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 169  : 	realData_Common.m_strVolume.TrimLeft(); realData_Common.m_strVolume.TrimRight();

  00151	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  00154	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0015a	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  0015d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 170  : 
; 171  : 	memcpy(sTmp, pInput->open, sizeof(pInput->open));		/*  [시가,       원]		*/

  00163	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  00166	8b 4f 34	 mov	 ecx, DWORD PTR [edi+52]
  00169	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax

; 172  : 	sTmp[sizeof(pInput->open)]=0;
; 173  : 	realData_Common.m_strOpen = sTmp;

  0016c	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  0016f	89 4d e8	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  00172	8d 4b 1c	 lea	 ecx, DWORD PTR [ebx+28]
  00175	50		 push	 eax
  00176	c6 45 ec 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  0017a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 174  : 	realData_Common.m_strOpen.TrimLeft(); realData_Common.m_strOpen.TrimRight();

  00180	8d 4b 1c	 lea	 ecx, DWORD PTR [ebx+28]
  00183	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00189	8d 4b 1c	 lea	 ecx, DWORD PTR [ebx+28]
  0018c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 175  : 
; 176  : 	memcpy(sTmp, pInput->high, sizeof(pInput->high));		/*  [고가,       원]		*/

  00192	8b 47 40	 mov	 eax, DWORD PTR [edi+64]
  00195	8b 4f 44	 mov	 ecx, DWORD PTR [edi+68]
  00198	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax

; 177  : 	sTmp[sizeof(pInput->high)]=0;
; 178  : 	realData_Common.m_strHigh = sTmp;

  0019b	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  0019e	89 4d e8	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  001a1	8d 4b 20	 lea	 ecx, DWORD PTR [ebx+32]
  001a4	50		 push	 eax
  001a5	c6 45 ec 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  001a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 179  : 	realData_Common.m_strHigh.TrimLeft(); realData_Common.m_strHigh.TrimRight();

  001af	8d 4b 20	 lea	 ecx, DWORD PTR [ebx+32]
  001b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  001b8	8d 4b 20	 lea	 ecx, DWORD PTR [ebx+32]
  001bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 180  : 
; 181  : 	memcpy(sTmp, pInput->low, sizeof(pInput->low));			/*  [저가,       원]		*/

  001c1	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
  001c4	8b 4f 54	 mov	 ecx, DWORD PTR [edi+84]
  001c7	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax

; 182  : 	sTmp[sizeof(pInput->low)]=0;
; 183  : 	realData_Common.m_strLow = sTmp;

  001ca	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  001cd	89 4d e8	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  001d0	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  001d3	50		 push	 eax
  001d4	c6 45 ec 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  001d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 184  : 	realData_Common.m_strLow.TrimLeft(); realData_Common.m_strLow.TrimRight();

  001de	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  001e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  001e7	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  001ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 185  : 	
; 186  : 	memcpy(sTmp, pInput->value, sizeof(pInput->value));		/*  [거래대금,       원]	*/

  001f0	8b 47 79	 mov	 eax, DWORD PTR [edi+121]

; 187  : 	sTmp[sizeof(pInput->value)]=0;
; 188  : 	realData_Common.m_strValue = sTmp;

  001f3	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
  001f6	f3 0f 7e 47 71	 movq	 xmm0, QWORD PTR [edi+113]
  001fb	89 45 ec	 mov	 DWORD PTR _sTmp$[ebp+8], eax
  001fe	0f b7 47 7d	 movzx	 eax, WORD PTR [edi+125]
  00202	66 89 45 f0	 mov	 WORD PTR _sTmp$[ebp+12], ax
  00206	0f b6 47 7f	 movzx	 eax, BYTE PTR [edi+127]
  0020a	88 45 f2	 mov	 BYTE PTR _sTmp$[ebp+14], al
  0020d	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00210	50		 push	 eax
  00211	66 0f d6 45 e4	 movq	 QWORD PTR _sTmp$[ebp], xmm0
  00216	c6 45 f3 00	 mov	 BYTE PTR _sTmp$[ebp+15], 0
  0021a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 189  : 	realData_Common.m_strValue.TrimLeft(); realData_Common.m_strValue.TrimRight();

  00220	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
  00223	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00229	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
  0022c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 190  : 
; 191  : 	realData_Common.m_nMarketType = CMasterTypeInfo::STOCK_CHART;
; 192  : 	return TRUE;
; 193  : }

  00232	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00235	b8 01 00 00 00	 mov	 eax, 1
  0023a	5f		 pop	 edi
  0023b	5e		 pop	 esi
  0023c	c7 43 2c 00 00
	00 00		 mov	 DWORD PTR [ebx+44], 0
  00243	33 cd		 xor	 ecx, ebp
  00245	5b		 pop	 ebx
  00246	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024b	8b e5		 mov	 esp, ebp
  0024d	5d		 pop	 ebp
  0024e	c3		 ret	 0
?Convert_EWs3@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z ENDP ; CChartRealConverter::Convert_EWs3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\COMMONTR\ChartRealConverter.cpp
;	COMDAT ?Convert_KXYS@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z
_TEXT	SEGMENT
_sTmp$ = -28						; size = 21
__$ArrayPad$ = -4					; size = 4
_pRealStruct$ = 8					; size = 4
_realData_Common$ = 12					; size = 4
?Convert_KXYS@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z PROC ; CChartRealConverter::Convert_KXYS, COMDAT

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _realData_Common$[ebp]

; 83   : 	LPKXYS_OutBlock pInput = (LPKXYS_OutBlock)pRealStruct;
; 84   : 	char sTmp[20+1];
; 85   : 
; 86   : 	memcpy(sTmp, pInput->kshcode, sizeof(pInput->kshcode));	/*  [종목코드]				*/
; 87   : 	sTmp[sizeof(pInput->kshcode)]=0;
; 88   : 	realData_Common.m_strCode = sTmp;

  00014	8b cb		 mov	 ecx, ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR _pRealStruct$[ebp]
  0001b	c6 45 ea 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  0001f	8b 07		 mov	 eax, DWORD PTR [edi]
  00021	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  00024	0f b7 47 04	 movzx	 eax, WORD PTR [edi+4]
  00028	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  0002c	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  0002f	50		 push	 eax
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 89   : 	realData_Common.m_strCode.TrimLeft(); realData_Common.m_strCode.TrimRight();

  00036	8b cb		 mov	 ecx, ebx
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0003e	8b cb		 mov	 ecx, ebx
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 90   : 	
; 91   : 	memcpy(sTmp, pInput->hotime, sizeof(pInput->hotime));	/*  [체결시간]				*/

  00046	8b 47 07	 mov	 eax, DWORD PTR [edi+7]

; 92   : 	sTmp[sizeof(pInput->hotime)]=0;
; 93   : 	realData_Common.m_strTime = sTmp;

  00049	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0004c	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  0004f	0f b7 47 0b	 movzx	 eax, WORD PTR [edi+11]
  00053	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  00057	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  0005a	50		 push	 eax
  0005b	c6 45 ea 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 94   : 	realData_Common.m_strTime.TrimLeft(); realData_Common.m_strTime.TrimRight();

  00065	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0006e	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 95   : 	
; 96   : 	memcpy(sTmp, pInput->jnilysign, sizeof(pInput->jnilysign));		/*  [1:상한]				*/

  00077	8a 47 29	 mov	 al, BYTE PTR [edi+41]

; 97   : 	sTmp[sizeof(pInput->jnilysign)]=0;
; 98   : 	realData_Common.m_strSign = sTmp;

  0007a	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0007d	88 45 e4	 mov	 BYTE PTR _sTmp$[ebp], al
  00080	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00083	50		 push	 eax
  00084	c6 45 e5 00	 mov	 BYTE PTR _sTmp$[ebp+1], 0
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 99   : 	realData_Common.m_strSign.TrimLeft(); realData_Common.m_strSign.TrimRight();

  0008e	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00097	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 100  : 
; 101  : 	memcpy(sTmp, pInput->yeprice, sizeof(pInput->yeprice));		/*  [현재가,     원]		*/

  000a0	8b 47 0e	 mov	 eax, DWORD PTR [edi+14]
  000a3	8b 4f 12	 mov	 ecx, DWORD PTR [edi+18]
  000a6	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax

; 102  : 	sTmp[sizeof(pInput->yeprice)]=0;
; 103  : 	realData_Common.m_strPrice = sTmp;

  000a9	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  000ac	89 4d e8	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  000af	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  000b2	50		 push	 eax
  000b3	c6 45 ec 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 104  : 	realData_Common.m_strPrice.TrimLeft(); realData_Common.m_strPrice.TrimRight();

  000bd	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  000c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  000c6	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  000c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 105  : 
; 106  : 	memcpy(sTmp, pInput->jnilychange, sizeof(pInput->jnilychange));	/*  [전일대비,   원]		*/

  000cf	8b 47 2b	 mov	 eax, DWORD PTR [edi+43]
  000d2	8b 4f 2f	 mov	 ecx, DWORD PTR [edi+47]
  000d5	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax

; 107  : 	sTmp[sizeof(pInput->jnilychange)]=0;
; 108  : 	realData_Common.m_strChange = sTmp;

  000d8	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  000db	89 4d e8	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  000de	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  000e1	50		 push	 eax
  000e2	c6 45 ec 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 109  : 	realData_Common.m_strChange.TrimLeft(); realData_Common.m_strChange.TrimRight();

  000ec	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  000ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  000f5	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  000f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 110  : 
; 111  : 	memcpy(sTmp, pInput->jnilydrate, sizeof(pInput->jnilydrate));		/*  [등락율]				*/

  000fe	8b 47 34	 mov	 eax, DWORD PTR [edi+52]

; 112  : 	sTmp[sizeof(pInput->jnilydrate)]=0;
; 113  : 	realData_Common.m_strChrate = sTmp;

  00101	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  00104	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  00107	0f b7 47 38	 movzx	 eax, WORD PTR [edi+56]
  0010b	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  0010f	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00112	50		 push	 eax
  00113	c6 45 ea 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  00117	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 114  : 	realData_Common.m_strChrate.TrimLeft(); realData_Common.m_strChrate.TrimRight();

  0011d	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  00120	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00126	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  00129	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 115  : 
; 116  : 	memcpy(sTmp, pInput->yevolume, sizeof(pInput->yevolume));	/*  [누적거래량, 주]		*/

  0012f	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]

; 117  : 	sTmp[sizeof(pInput->yevolume)]=0;
; 118  : 	realData_Common.m_strVolume = sTmp;

  00132	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  00135	f3 0f 7e 47 44	 movq	 xmm0, QWORD PTR [edi+68]
  0013a	89 45 ec	 mov	 DWORD PTR _sTmp$[ebp+8], eax
  0013d	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00140	50		 push	 eax
  00141	66 0f d6 45 e4	 movq	 QWORD PTR _sTmp$[ebp], xmm0
  00146	c6 45 f0 00	 mov	 BYTE PTR _sTmp$[ebp+12], 0
  0014a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 119  : 	realData_Common.m_strVolume.TrimLeft(); realData_Common.m_strVolume.TrimRight();

  00150	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  00153	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00159	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  0015c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 120  : 
; 121  : 	realData_Common.m_strOpen = _T("0");

  00162	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0@
  00167	8d 4b 1c	 lea	 ecx, DWORD PTR [ebx+28]
  0016a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 122  : 	realData_Common.m_strHigh = _T("0");

  00170	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0@
  00175	8d 4b 20	 lea	 ecx, DWORD PTR [ebx+32]
  00178	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 123  : 	realData_Common.m_strLow = _T("0");

  0017e	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0@
  00183	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  00186	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 124  : 	realData_Common.m_strValue = _T("0");

  0018c	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0@
  00191	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
  00194	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 125  : 
; 126  : 	realData_Common.m_nMarketType = CMasterTypeInfo::STOCK_CHART;
; 127  : 	return TRUE;
; 128  : }

  0019a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0019d	b8 01 00 00 00	 mov	 eax, 1
  001a2	5f		 pop	 edi
  001a3	5e		 pop	 esi
  001a4	c7 43 2c 00 00
	00 00		 mov	 DWORD PTR [ebx+44], 0
  001ab	33 cd		 xor	 ecx, ebp
  001ad	5b		 pop	 ebx
  001ae	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b3	8b e5		 mov	 esp, ebp
  001b5	5d		 pop	 ebp
  001b6	c3		 ret	 0
?Convert_KXYS@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z ENDP ; CChartRealConverter::Convert_KXYS
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\COMMONTR\ChartRealConverter.cpp
;	COMDAT ?Convert_KXS3@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z
_TEXT	SEGMENT
_sTmp$ = -28						; size = 21
__$ArrayPad$ = -4					; size = 4
_pRealStruct$ = 8					; size = 4
_realData_Common$ = 12					; size = 4
?Convert_KXS3@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z PROC ; CChartRealConverter::Convert_KXS3, COMDAT

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _realData_Common$[ebp]

; 19   : 	LPKXS3_OutBlock pInput = (LPKXS3_OutBlock)pRealStruct;
; 20   : 	char sTmp[20+1];
; 21   : 
; 22   : 	memcpy(sTmp, pInput->kshcode, sizeof(pInput->kshcode));	/*  [종목코드]				*/
; 23   : 	sTmp[sizeof(pInput->kshcode)]=0;
; 24   : 	realData_Common.m_strCode = sTmp;

  00014	8b cb		 mov	 ecx, ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR _pRealStruct$[ebp]
  0001b	c6 45 ea 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  0001f	8b 07		 mov	 eax, DWORD PTR [edi]
  00021	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  00024	0f b7 47 04	 movzx	 eax, WORD PTR [edi+4]
  00028	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  0002c	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  0002f	50		 push	 eax
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 25   : 	realData_Common.m_strCode.TrimLeft(); realData_Common.m_strCode.TrimRight();

  00036	8b cb		 mov	 ecx, ebx
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0003e	8b cb		 mov	 ecx, ebx
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 26   : 	
; 27   : 	memcpy(sTmp, pInput->chetime, sizeof(pInput->chetime));	/*  [체결시간]				*/

  00046	8b 47 07	 mov	 eax, DWORD PTR [edi+7]

; 28   : 	sTmp[sizeof(pInput->chetime)]=0;
; 29   : 	realData_Common.m_strTime = sTmp;

  00049	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0004c	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  0004f	0f b7 47 0b	 movzx	 eax, WORD PTR [edi+11]
  00053	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  00057	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  0005a	50		 push	 eax
  0005b	c6 45 ea 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 30   : 	realData_Common.m_strTime.TrimLeft(); realData_Common.m_strTime.TrimRight();

  00065	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0006e	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 31   : 	
; 32   : 	memcpy(sTmp, pInput->sign, sizeof(pInput->sign));		/*  [1:상한]				*/

  00077	0f b6 47 0e	 movzx	 eax, BYTE PTR [edi+14]

; 33   : 	sTmp[sizeof(pInput->sign)]=0;
; 34   : 	realData_Common.m_strSign = sTmp;

  0007b	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0007e	88 45 e4	 mov	 BYTE PTR _sTmp$[ebp], al
  00081	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00084	50		 push	 eax
  00085	c6 45 e5 00	 mov	 BYTE PTR _sTmp$[ebp+1], 0
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 35   : 	realData_Common.m_strSign.TrimLeft(); realData_Common.m_strSign.TrimRight();

  0008f	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00098	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 36   : 
; 37   : 	memcpy(sTmp, pInput->price, sizeof(pInput->price));		/*  [현재가,     원]		*/

  000a1	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  000a4	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  000a7	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax

; 38   : 	sTmp[sizeof(pInput->price)]=0;
; 39   : 	realData_Common.m_strPrice = sTmp;

  000aa	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  000ad	89 4d e8	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  000b0	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  000b3	50		 push	 eax
  000b4	c6 45 ec 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  000b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 40   : 	realData_Common.m_strPrice.TrimLeft(); realData_Common.m_strPrice.TrimRight();

  000be	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  000c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  000c7	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 41   : 
; 42   : 	memcpy(sTmp, pInput->change, sizeof(pInput->change));	/*  [전일대비,   원]		*/

  000d0	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  000d3	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  000d6	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax

; 43   : 	sTmp[sizeof(pInput->change)]=0;
; 44   : 	realData_Common.m_strChange = sTmp;

  000d9	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  000dc	89 4d e8	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  000df	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  000e2	50		 push	 eax
  000e3	c6 45 ec 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  000e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 45   : 	realData_Common.m_strChange.TrimLeft(); realData_Common.m_strChange.TrimRight();

  000ed	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  000f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  000f6	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  000f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 46   : 
; 47   : 	memcpy(sTmp, pInput->drate, sizeof(pInput->drate));		/*  [등락율]				*/

  000ff	8b 47 19	 mov	 eax, DWORD PTR [edi+25]

; 48   : 	sTmp[sizeof(pInput->drate)]=0;
; 49   : 	realData_Common.m_strChrate = sTmp;

  00102	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  00105	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax
  00108	0f b7 47 1d	 movzx	 eax, WORD PTR [edi+29]
  0010c	66 89 45 e8	 mov	 WORD PTR _sTmp$[ebp+4], ax
  00110	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00113	50		 push	 eax
  00114	c6 45 ea 00	 mov	 BYTE PTR _sTmp$[ebp+6], 0
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 50   : 	realData_Common.m_strChrate.TrimLeft(); realData_Common.m_strChrate.TrimRight();

  0011e	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  00121	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00127	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  0012a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 51   : 
; 52   : 	memcpy(sTmp, pInput->volume, sizeof(pInput->volume));	/*  [누적거래량, 주]		*/

  00130	8b 87 9c 00 00
	00		 mov	 eax, DWORD PTR [edi+156]

; 53   : 	sTmp[sizeof(pInput->volume)]=0;
; 54   : 	realData_Common.m_strVolume = sTmp;

  00136	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  00139	f3 0f 7e 87 94
	00 00 00	 movq	 xmm0, QWORD PTR [edi+148]
  00141	89 45 ec	 mov	 DWORD PTR _sTmp$[ebp+8], eax
  00144	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00147	50		 push	 eax
  00148	66 0f d6 45 e4	 movq	 QWORD PTR _sTmp$[ebp], xmm0
  0014d	c6 45 f0 00	 mov	 BYTE PTR _sTmp$[ebp+12], 0
  00151	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 55   : 	realData_Common.m_strVolume.TrimLeft(); realData_Common.m_strVolume.TrimRight();

  00157	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  0015a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  00160	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  00163	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 56   : 
; 57   : 	memcpy(sTmp, pInput->open, sizeof(pInput->open));		/*  [시가,       원]		*/

  00169	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  0016c	8b 4f 34	 mov	 ecx, DWORD PTR [edi+52]
  0016f	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax

; 58   : 	sTmp[sizeof(pInput->open)]=0;
; 59   : 	realData_Common.m_strOpen = sTmp;

  00172	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00175	89 4d e8	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  00178	8d 4b 1c	 lea	 ecx, DWORD PTR [ebx+28]
  0017b	50		 push	 eax
  0017c	c6 45 ec 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  00180	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 60   : 	realData_Common.m_strOpen.TrimLeft(); realData_Common.m_strOpen.TrimRight();

  00186	8d 4b 1c	 lea	 ecx, DWORD PTR [ebx+28]
  00189	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0018f	8d 4b 1c	 lea	 ecx, DWORD PTR [ebx+28]
  00192	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 61   : 
; 62   : 	memcpy(sTmp, pInput->high, sizeof(pInput->high));		/*  [고가,       원]		*/

  00198	8b 47 40	 mov	 eax, DWORD PTR [edi+64]
  0019b	8b 4f 44	 mov	 ecx, DWORD PTR [edi+68]
  0019e	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax

; 63   : 	sTmp[sizeof(pInput->high)]=0;
; 64   : 	realData_Common.m_strHigh = sTmp;

  001a1	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  001a4	89 4d e8	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  001a7	8d 4b 20	 lea	 ecx, DWORD PTR [ebx+32]
  001aa	50		 push	 eax
  001ab	c6 45 ec 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  001af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 65   : 	realData_Common.m_strHigh.TrimLeft(); realData_Common.m_strHigh.TrimRight();

  001b5	8d 4b 20	 lea	 ecx, DWORD PTR [ebx+32]
  001b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  001be	8d 4b 20	 lea	 ecx, DWORD PTR [ebx+32]
  001c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 66   : 
; 67   : 	memcpy(sTmp, pInput->low, sizeof(pInput->low));			/*  [저가,       원]		*/

  001c7	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
  001ca	8b 4f 54	 mov	 ecx, DWORD PTR [edi+84]
  001cd	89 45 e4	 mov	 DWORD PTR _sTmp$[ebp], eax

; 68   : 	sTmp[sizeof(pInput->low)]=0;
; 69   : 	realData_Common.m_strLow = sTmp;

  001d0	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  001d3	89 4d e8	 mov	 DWORD PTR _sTmp$[ebp+4], ecx
  001d6	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  001d9	50		 push	 eax
  001da	c6 45 ec 00	 mov	 BYTE PTR _sTmp$[ebp+8], 0
  001de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 70   : 	realData_Common.m_strLow.TrimLeft(); realData_Common.m_strLow.TrimRight();

  001e4	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  001e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  001ed	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  001f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 71   : 	
; 72   : 	memcpy(sTmp, pInput->value, sizeof(pInput->value));		/*  [거래대금,       원]	*/

  001f6	8b 87 c6 00 00
	00		 mov	 eax, DWORD PTR [edi+198]

; 73   : 	sTmp[sizeof(pInput->value)]=0;
; 74   : 	realData_Common.m_strValue = sTmp;

  001fc	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
  001ff	f3 0f 7e 87 be
	00 00 00	 movq	 xmm0, QWORD PTR [edi+190]
  00207	89 45 ec	 mov	 DWORD PTR _sTmp$[ebp+8], eax
  0020a	0f b7 87 ca 00
	00 00		 movzx	 eax, WORD PTR [edi+202]
  00211	66 89 45 f0	 mov	 WORD PTR _sTmp$[ebp+12], ax
  00215	0f b6 87 cc 00
	00 00		 movzx	 eax, BYTE PTR [edi+204]
  0021c	88 45 f2	 mov	 BYTE PTR _sTmp$[ebp+14], al
  0021f	8d 45 e4	 lea	 eax, DWORD PTR _sTmp$[ebp]
  00222	50		 push	 eax
  00223	66 0f d6 45 e4	 movq	 QWORD PTR _sTmp$[ebp], xmm0
  00228	c6 45 f3 00	 mov	 BYTE PTR _sTmp$[ebp+15], 0
  0022c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 75   : 	realData_Common.m_strValue.TrimLeft(); realData_Common.m_strValue.TrimRight();

  00232	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
  00235	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ
  0023b	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
  0023e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 76   : 
; 77   : 	realData_Common.m_nMarketType = CMasterTypeInfo::STOCK_CHART;
; 78   : 	return TRUE;
; 79   : }

  00244	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00247	b8 01 00 00 00	 mov	 eax, 1
  0024c	5f		 pop	 edi
  0024d	5e		 pop	 esi
  0024e	c7 43 2c 00 00
	00 00		 mov	 DWORD PTR [ebx+44], 0
  00255	33 cd		 xor	 ecx, ebp
  00257	5b		 pop	 ebx
  00258	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0025d	8b e5		 mov	 esp, ebp
  0025f	5d		 pop	 ebp
  00260	c3		 ret	 0
?Convert_KXS3@CChartRealConverter@@SAHPBDAAVCRealData_Common@@@Z ENDP ; CChartRealConverter::Convert_KXS3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\COMMONTR\ChartRealConverter.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\COMMONTR\ChartRealConverter.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
