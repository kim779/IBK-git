; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30145.0 

	TITLE	D:\git\src\IBK\IBK_DRFN\#DRfn-CS\_Obj\ChartFormulate\GetIndicatorInfo.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0N@FMCKNONO@SignalPacket@			; `string'
;	COMDAT ??_C@_0N@FMCKNONO@SignalPacket@
CONST	SEGMENT
??_C@_0N@FMCKNONO@SignalPacket@ DB 'SignalPacket', 00H	; `string'
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?GetSubGraphIndex@CGetIndicatorInfo@@SAHPAVCIndicatorInfo@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CGetIndicatorInfo::GetSubGraphIndex
PUBLIC	?AddCompareStringInOriginalString@CGetIndicatorInfo@@CAXAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@@Z ; CGetIndicatorInfo::AddCompareStringInOriginalString
PUBLIC	?GetSubGraphNameList@CGetIndicatorInfo@@CAXPAVCIndicatorInfo@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z ; CGetIndicatorInfo::GetSubGraphNameList
PUBLIC	?ChangeTypeFromCStringToCList@CGetIndicatorInfo@@CAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z ; CGetIndicatorInfo::ChangeTypeFromCStringToCList
PUBLIC	?GetConditionList@CGetIndicatorInfo@@CAXPAVCIndicatorInfo@@AAV?$CList@NN@@@Z ; CGetIndicatorInfo::GetConditionList
PUBLIC	?GetPacketNameList@CGetIndicatorInfo@@CAXPAVCIndicatorInfo@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z ; CGetIndicatorInfo::GetPacketNameList
PUBLIC	?AddTail@?$CList@NN@@QAEPAU__POSITION@@N@Z	; CList<double,double>::AddTail
PUBLIC	?NewNode@?$CList@NN@@IAEPAUCNode@1@PAU21@0@Z	; CList<double,double>::NewNode
PUBLIC	?AddTail@?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@QAEPAU__POSITION@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CList<ATL::CStringT<char,StrTraitMFC_DLL<char,ATL::ChTraitsCRT<char> > >,ATL::CStringT<char,StrTraitMFC_DLL<char,ATL::ChTraitsCRT<char> > > >::AddTail
PUBLIC	?NewNode@?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@IAEPAUCNode@1@PAU21@0@Z ; CList<ATL::CStringT<char,StrTraitMFC_DLL<char,ATL::ChTraitsCRT<char> > >,ATL::CStringT<char,StrTraitMFC_DLL<char,ATL::ChTraitsCRT<char> > > >::NewNode
PUBLIC	??_C@_01IHBHIGKO@?0@				; `string'
EXTRN	_atexit:PROC
EXTRN	?AfxThrowInvalidArgException@@YGXXZ:PROC	; AfxThrowInvalidArgException
EXTRN	__imp_?Empty@?$CSimpleStringT@D$00@ATL@@QAEXXZ:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z:PROC
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z:PROC
EXTRN	__imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV?$CSimpleStringT@D$00@1@@Z:PROC
EXTRN	__imp_?Compare@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z:PROC
EXTRN	__imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ:PROC
EXTRN	__imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ:PROC
EXTRN	__imp_?Right@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z:PROC
EXTRN	?Create@CPlex@@SGPAU1@AAPAU1@II@Z:PROC		; CPlex::Create
EXTRN	__imp_?GetCommonCalConditionList@CIndicatorInfo@@QAEPAV?$CList@NN@@XZ:PROC
EXTRN	__imp_?GetCommonPacketNames@CIndicatorInfo@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ:PROC
EXTRN	__imp_?GetSubGraphIndex@CIndicatorInfo@@QBEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z:PROC
EXTRN	__imp_?GetSubGraphNameList@CIndicatorInfo@@QBE_NAAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z:PROC
EXTRN	?GetStringData@CDataConversion@@SA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@AAV23@ABV23@_N@Z:PROC ; CDataConversion::GetStringData
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?SIGNAL_PACKET@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@B DD 01H DUP (?) ; SIGNAL_PACKET
_BSS	ENDS
CRT$XCU	SEGMENT
?SIGNAL_PACKET$initializer$@@3P6AXXZA DD FLAT:??__ESIGNAL_PACKET@@YAXXZ ; SIGNAL_PACKET$initializer$
CRT$XCU	ENDS
;	COMDAT ??_C@_01IHBHIGKO@?0@
CONST	SEGMENT
??_C@_01IHBHIGKO@?0@ DB ',', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddTail@?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@QAEPAU__POSITION@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddTail@?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@QAEPAU__POSITION@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z$0
__ehfuncinfo$?AddTail@?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@QAEPAU__POSITION@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddTail@?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@QAEPAU__POSITION@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetPacketNameList@CGetIndicatorInfo@@CAXPAVCIndicatorInfo@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetPacketNameList@CGetIndicatorInfo@@CAXPAVCIndicatorInfo@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetPacketNameList@CGetIndicatorInfo@@CAXPAVCIndicatorInfo@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetPacketNameList@CGetIndicatorInfo@@CAXPAVCIndicatorInfo@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?GetPacketNameList@CGetIndicatorInfo@@CAXPAVCIndicatorInfo@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z$2
__ehfuncinfo$?GetPacketNameList@CGetIndicatorInfo@@CAXPAVCIndicatorInfo@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?GetPacketNameList@CGetIndicatorInfo@@CAXPAVCIndicatorInfo@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?ChangeTypeFromCStringToCList@CGetIndicatorInfo@@CAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?ChangeTypeFromCStringToCList@CGetIndicatorInfo@@CAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ChangeTypeFromCStringToCList@CGetIndicatorInfo@@CAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ChangeTypeFromCStringToCList@CGetIndicatorInfo@@CAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ChangeTypeFromCStringToCList@CGetIndicatorInfo@@CAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?ChangeTypeFromCStringToCList@CGetIndicatorInfo@@CAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$?ChangeTypeFromCStringToCList@CGetIndicatorInfo@@CAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z$2
	DD	03H
	DD	FLAT:__unwindfunclet$?ChangeTypeFromCStringToCList@CGetIndicatorInfo@@CAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?ChangeTypeFromCStringToCList@CGetIndicatorInfo@@CAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z$3
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddCompareStringInOriginalString@CGetIndicatorInfo@@CAXAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddCompareStringInOriginalString@CGetIndicatorInfo@@CAXAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@@Z$0
__ehfuncinfo$?AddCompareStringInOriginalString@CGetIndicatorInfo@@CAXAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddCompareStringInOriginalString@CGetIndicatorInfo@@CAXAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?NewNode@?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@IAEPAUCNode@1@PAU21@0@Z
_TEXT	SEGMENT
_pPrev$ = 8						; size = 4
_pNext$ = 12						; size = 4
?NewNode@?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@IAEPAUCNode@1@PAU21@0@Z PROC ; CList<ATL::CStringT<char,StrTraitMFC_DLL<char,ATL::ChTraitsCRT<char> > >,ATL::CStringT<char,StrTraitMFC_DLL<char,ATL::ChTraitsCRT<char> > > >::NewNode, COMDAT
; _this$ = ecx

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 902  : 	if (m_pNodeFree == NULL)

  00007	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0000b	75 33		 jne	 SHORT $LN7@NewNode

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  0000d	6a 0c		 push	 12			; 0000000cH
  0000f	ff 76 18	 push	 DWORD PTR [esi+24]
  00012	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001b	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0001e	83 c0 08	 add	 eax, 8
  00021	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  00024	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00027	83 c0 f4	 add	 eax, -12		; fffffff4H

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  0002a	83 c2 ff	 add	 edx, -1
  0002d	78 11		 js	 SHORT $LN7@NewNode
  0002f	90		 npad	 1
$LL4@NewNode:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	89 08		 mov	 DWORD PTR [eax], ecx

; 915  : 			m_pNodeFree = pNode;

  00035	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00038	83 e8 0c	 sub	 eax, 12			; 0000000cH
  0003b	83 ea 01	 sub	 edx, 1
  0003e	79 f0		 jns	 SHORT $LL4@NewNode
$LN7@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00040	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  00043	85 ff		 test	 edi, edi
  00045	74 24		 je	 SHORT $LN17@NewNode

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00047	8b 07		 mov	 eax, DWORD PTR [edi]

; 922  : 	pNode->pPrev = pPrev;

  00049	8b 4d 08	 mov	 ecx, DWORD PTR _pPrev$[ebp]
  0004c	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0004f	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 923  : 	pNode->pNext = pNext;

  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _pNext$[ebp]
  00055	89 0f		 mov	 DWORD PTR [edi], ecx

; 924  : 	m_nCount++;
; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;

  00057	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0005a	ff 46 0c	 inc	 DWORD PTR [esi+12]
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 930  : #pragma pop_macro("new")
; 931  : 	return pNode;

  00063	8b c7		 mov	 eax, edi
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi

; 932  : }

  00067	5d		 pop	 ebp
  00068	c2 08 00	 ret	 8
$LN17@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  0006b	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN15@NewNode:
  00070	cc		 int	 3
?NewNode@?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@IAEPAUCNode@1@PAU21@0@Z ENDP ; CList<ATL::CStringT<char,StrTraitMFC_DLL<char,ATL::ChTraitsCRT<char> > >,ATL::CStringT<char,StrTraitMFC_DLL<char,ATL::ChTraitsCRT<char> > > >::NewNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?AddTail@?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@QAEPAU__POSITION@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_newElement$ = 8					; size = 4
?AddTail@?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@QAEPAU__POSITION@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC ; CList<ATL::CStringT<char,StrTraitMFC_DLL<char,ATL::ChTraitsCRT<char> > >,ATL::CStringT<char,StrTraitMFC_DLL<char,ATL::ChTraitsCRT<char> > > >::AddTail, COMDAT
; _this$ = ecx

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AddTail@?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@QAEPAU__POSITION@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx

; 902  : 	if (m_pNodeFree == NULL)

  00027	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0

; 966  : 	ASSERT_VALID(this);
; 967  : 
; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  0002b	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 902  : 	if (m_pNodeFree == NULL)

  00035	75 39		 jne	 SHORT $LN12@AddTail

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  00037	6a 0c		 push	 12			; 0000000cH
  00039	ff 76 18	 push	 DWORD PTR [esi+24]
  0003c	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  00045	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00048	83 c0 08	 add	 eax, 8
  0004b	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  0004e	83 c2 ff	 add	 edx, -1
  00051	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  00054	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  00057	78 17		 js	 SHORT $LN12@AddTail
  00059	0f 1f 80 00 00
	00 00		 npad	 7
$LL9@AddTail:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00060	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00063	89 01		 mov	 DWORD PTR [ecx], eax

; 915  : 			m_pNodeFree = pNode;

  00065	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00068	83 e9 0c	 sub	 ecx, 12			; 0000000cH
  0006b	83 ea 01	 sub	 edx, 1
  0006e	79 f0		 jns	 SHORT $LL9@AddTail
$LN12@AddTail:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00070	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00073	85 db		 test	 ebx, ebx
  00075	74 57		 je	 SHORT $LN24@AddTail

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00077	8b 03		 mov	 eax, DWORD PTR [ebx]

; 922  : 	pNode->pPrev = pPrev;
; 923  : 	pNode->pNext = pNext;
; 924  : 	m_nCount++;
; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;

  00079	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0007c	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0007f	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
  00082	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  00088	ff 46 0c	 inc	 DWORD PTR [esi+12]
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 969  : 	pNewNode->data = newElement;

  00091	8d 45 08	 lea	 eax, DWORD PTR _newElement$[ebp]
  00094	50		 push	 eax
  00095	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  00098	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z

; 970  : 	if (m_pNodeTail != NULL)

  0009e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000a1	85 c0		 test	 eax, eax
  000a3	74 04		 je	 SHORT $LN2@AddTail

; 971  : 		m_pNodeTail->pNext = pNewNode;

  000a5	89 18		 mov	 DWORD PTR [eax], ebx
  000a7	eb 03		 jmp	 SHORT $LN3@AddTail
$LN2@AddTail:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;

  000a9	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
$LN3@AddTail:

; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  000ac	8d 4d 08	 lea	 ecx, DWORD PTR _newElement$[ebp]
  000af	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000b8	8b c3		 mov	 eax, ebx

; 976  : }

  000ba	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c4	59		 pop	 ecx
  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
  000c7	5b		 pop	 ebx
  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c2 04 00	 ret	 4
$LN24@AddTail:

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  000ce	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN22@AddTail:
  000d3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddTail@?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@QAEPAU__POSITION@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _newElement$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
__ehhandler$?AddTail@?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@QAEPAU__POSITION@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z:
  0000e	90		 npad	 1
  0000f	90		 npad	 1
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddTail@?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@QAEPAU__POSITION@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddTail@?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@QAEPAU__POSITION@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CList<ATL::CStringT<char,StrTraitMFC_DLL<char,ATL::ChTraitsCRT<char> > >,ATL::CStringT<char,StrTraitMFC_DLL<char,ATL::ChTraitsCRT<char> > > >::AddTail
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?NewNode@?$CList@NN@@IAEPAUCNode@1@PAU21@0@Z
_TEXT	SEGMENT
_pPrev$ = 8						; size = 4
_pNext$ = 12						; size = 4
?NewNode@?$CList@NN@@IAEPAUCNode@1@PAU21@0@Z PROC	; CList<double,double>::NewNode, COMDAT
; _this$ = ecx

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 902  : 	if (m_pNodeFree == NULL)

  00006	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0000a	75 34		 jne	 SHORT $LN7@NewNode

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  0000c	6a 10		 push	 16			; 00000010H
  0000e	ff 76 18	 push	 DWORD PTR [esi+24]
  00011	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001a	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0001d	83 c0 08	 add	 eax, 8
  00020	8b ca		 mov	 ecx, edx
  00022	c1 e1 04	 shl	 ecx, 4
  00025	83 c1 f0	 add	 ecx, -16		; fffffff0H
  00028	03 c1		 add	 eax, ecx

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  0002a	83 c2 ff	 add	 edx, -1
  0002d	78 11		 js	 SHORT $LN7@NewNode
  0002f	90		 npad	 1
$LL4@NewNode:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	89 08		 mov	 DWORD PTR [eax], ecx

; 915  : 			m_pNodeFree = pNode;

  00035	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00038	83 e8 10	 sub	 eax, 16			; 00000010H
  0003b	83 ea 01	 sub	 edx, 1
  0003e	79 f0		 jns	 SHORT $LL4@NewNode
$LN7@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00040	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00043	85 c0		 test	 eax, eax
  00045	74 18		 je	 SHORT $LN17@NewNode

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00047	8b 08		 mov	 ecx, DWORD PTR [eax]
  00049	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 922  : 	pNode->pPrev = pPrev;

  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _pPrev$[ebp]
  0004f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 923  : 	pNode->pNext = pNext;

  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _pNext$[ebp]
  00055	89 08		 mov	 DWORD PTR [eax], ecx

; 924  : 	m_nCount++;

  00057	ff 46 0c	 inc	 DWORD PTR [esi+12]

; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;
; 930  : #pragma pop_macro("new")
; 931  : 	return pNode;

  0005a	5e		 pop	 esi

; 932  : }

  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
$LN17@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  0005f	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN15@NewNode:
  00064	cc		 int	 3
?NewNode@?$CList@NN@@IAEPAUCNode@1@PAU21@0@Z ENDP	; CList<double,double>::NewNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?AddTail@?$CList@NN@@QAEPAU__POSITION@@N@Z
_TEXT	SEGMENT
_newElement$ = 8					; size = 8
?AddTail@?$CList@NN@@QAEPAU__POSITION@@N@Z PROC		; CList<double,double>::AddTail, COMDAT
; _this$ = ecx

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 902  : 	if (m_pNodeFree == NULL)

  00007	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0

; 966  : 	ASSERT_VALID(this);
; 967  : 
; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  0000b	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 902  : 	if (m_pNodeFree == NULL)

  0000e	75 33		 jne	 SHORT $LN11@AddTail

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  00010	6a 10		 push	 16			; 00000010H
  00012	ff 76 18	 push	 DWORD PTR [esi+24]
  00015	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001e	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00021	83 c0 08	 add	 eax, 8
  00024	8b ca		 mov	 ecx, edx
  00026	c1 e1 04	 shl	 ecx, 4
  00029	83 c1 f0	 add	 ecx, -16		; fffffff0H
  0002c	03 c8		 add	 ecx, eax

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  0002e	83 c2 ff	 add	 edx, -1
  00031	78 10		 js	 SHORT $LN11@AddTail
$LL8@AddTail:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00033	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00036	89 01		 mov	 DWORD PTR [ecx], eax

; 915  : 			m_pNodeFree = pNode;

  00038	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0003b	83 e9 10	 sub	 ecx, 16			; 00000010H
  0003e	83 ea 01	 sub	 edx, 1
  00041	79 f0		 jns	 SHORT $LL8@AddTail
$LN11@AddTail:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00043	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00046	85 c9		 test	 ecx, ecx
  00048	74 3d		 je	 SHORT $LN22@AddTail

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  0004a	8b 01		 mov	 eax, DWORD PTR [ecx]

; 969  : 	pNewNode->data = newElement;

  0004c	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _newElement$[ebp]

; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00051	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 922  : 	pNode->pPrev = pPrev;

  00054	89 79 04	 mov	 DWORD PTR [ecx+4], edi

; 923  : 	pNode->pNext = pNext;

  00057	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 924  : 	m_nCount++;

  0005d	ff 46 0c	 inc	 DWORD PTR [esi+12]

; 969  : 	pNewNode->data = newElement;

  00060	f2 0f 11 41 08	 movsd	 QWORD PTR [ecx+8], xmm0

; 970  : 	if (m_pNodeTail != NULL)

  00065	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00068	85 c0		 test	 eax, eax
  0006a	74 0d		 je	 SHORT $LN2@AddTail

; 971  : 		m_pNodeTail->pNext = pNewNode;

  0006c	89 08		 mov	 DWORD PTR [eax], ecx

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  0006e	8b c1		 mov	 eax, ecx
  00070	5f		 pop	 edi
  00071	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00074	5e		 pop	 esi

; 976  : }

  00075	5d		 pop	 ebp
  00076	c2 08 00	 ret	 8
$LN2@AddTail:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00079	5f		 pop	 edi
  0007a	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0007d	8b c1		 mov	 eax, ecx
  0007f	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00082	5e		 pop	 esi

; 976  : }

  00083	5d		 pop	 ebp
  00084	c2 08 00	 ret	 8
$LN22@AddTail:

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00087	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN20@AddTail:
  0008c	cc		 int	 3
?AddTail@?$CList@NN@@QAEPAU__POSITION@@N@Z ENDP		; CList<double,double>::AddTail
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__FSIGNAL_PACKET@@YAXXZ
text$yd	SEGMENT
??__FSIGNAL_PACKET@@YAXXZ PROC				; `dynamic atexit destructor for 'SIGNAL_PACKET'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?SIGNAL_PACKET@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@B
  00005	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
??__FSIGNAL_PACKET@@YAXXZ ENDP				; `dynamic atexit destructor for 'SIGNAL_PACKET''
text$yd	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\ChartFormlateBaseData.h
;	COMDAT ??__ESIGNAL_PACKET@@YAXXZ
text$di	SEGMENT
??__ESIGNAL_PACKET@@YAXXZ PROC				; `dynamic initializer for 'SIGNAL_PACKET'', COMDAT

; 13   : static const CString SIGNAL_PACKET = "SignalPacket";

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FMCKNONO@SignalPacket@
  00005	b9 00 00 00 00	 mov	 ecx, OFFSET ?SIGNAL_PACKET@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@B
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  00010	68 00 00 00 00	 push	 OFFSET ??__FSIGNAL_PACKET@@YAXXZ ; `dynamic atexit destructor for 'SIGNAL_PACKET''
  00015	e8 00 00 00 00	 call	 _atexit
  0001a	59		 pop	 ecx
  0001b	c3		 ret	 0
??__ESIGNAL_PACKET@@YAXXZ ENDP				; `dynamic initializer for 'SIGNAL_PACKET''
text$di	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp
;	COMDAT ?GetPacketNameList@CGetIndicatorInfo@@CAXPAVCIndicatorInfo@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z
_TEXT	SEGMENT
$T2 = -24						; size = 4
_strData$3 = -20					; size = 4
_strPacketNames$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pIndicatorInfo$ = 8					; size = 4
_PacketNameList$ = 12					; size = 4
?GetPacketNameList@CGetIndicatorInfo@@CAXPAVCIndicatorInfo@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z PROC ; CGetIndicatorInfo::GetPacketNameList, COMDAT

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetPacketNameList@CGetIndicatorInfo@@CAXPAVCIndicatorInfo@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 62   : 	CString strPacketNames = pIndicatorInfo->GetCommonPacketNames();

  00026	8b 4d 08	 mov	 ecx, DWORD PTR _pIndicatorInfo$[ebp]
  00029	8d 45 f0	 lea	 eax, DWORD PTR _strPacketNames$[ebp]
  0002c	50		 push	 eax
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetCommonPacketNames@CIndicatorInfo@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 519  : 		return( GetData()->nDataLength );

  00033	8b 45 f0	 mov	 eax, DWORD PTR _strPacketNames$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp

; 62   : 	CString strPacketNames = pIndicatorInfo->GetCommonPacketNames();

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 533  : 		return( GetLength() == 0 );

  0003d	83 78 f4 00	 cmp	 DWORD PTR [eax-12], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp

; 63   : 	if(strPacketNames.IsEmpty())

  00041	0f 84 94 00 00
	00		 je	 $LN3@GetPacketN
  00047	8b 75 0c	 mov	 esi, DWORD PTR _PacketNameList$[ebp]
  0004a	66 0f 1f 44 00
	00		 npad	 6
$LL2@GetPacketN:

; 67   : 		CString strData = CDataConversion::GetStringData(strPacketNames, ",");

  00050	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0@
  00055	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp]
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  0005e	6a 01		 push	 1
  00060	8d 45 e8	 lea	 eax, DWORD PTR $T2[ebp]
  00063	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00067	50		 push	 eax
  00068	8d 45 f0	 lea	 eax, DWORD PTR _strPacketNames$[ebp]
  0006b	50		 push	 eax
  0006c	8d 45 ec	 lea	 eax, DWORD PTR _strData$3[ebp]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?GetStringData@CDataConversion@@SA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@AAV23@ABV23@_N@Z ; CDataConversion::GetStringData
  00075	83 c4 10	 add	 esp, 16			; 00000010H
  00078	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp]
  0007b	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 519  : 		return( GetData()->nDataLength );

  00085	8b 45 ec	 mov	 eax, DWORD PTR _strData$3[ebp]

; 533  : 		return( GetLength() == 0 );

  00088	83 78 f4 00	 cmp	 DWORD PTR [eax-12], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp

; 68   : 		if(strData.IsEmpty() && !strPacketNames.IsEmpty()){

  0008c	75 1f		 jne	 SHORT $LN5@GetPacketN
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 519  : 		return( GetData()->nDataLength );

  0008e	8b 45 f0	 mov	 eax, DWORD PTR _strPacketNames$[ebp]

; 533  : 		return( GetLength() == 0 );

  00091	83 78 f4 00	 cmp	 DWORD PTR [eax-12], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp

; 68   : 		if(strData.IsEmpty() && !strPacketNames.IsEmpty()){

  00095	74 16		 je	 SHORT $LN5@GetPacketN

; 69   : 			strData = strPacketNames;

  00097	8d 45 f0	 lea	 eax, DWORD PTR _strPacketNames$[ebp]
  0009a	50		 push	 eax
  0009b	8d 4d ec	 lea	 ecx, DWORD PTR _strData$3[ebp]
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z

; 70   : 			strPacketNames.Empty();

  000a4	8d 4d f0	 lea	 ecx, DWORD PTR _strPacketNames$[ebp]
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Empty@?$CSimpleStringT@D$00@ATL@@QAEXXZ
$LN5@GetPacketN:

; 71   : 		}
; 72   : 
; 73   : 		PacketNameList.AddTail(strData);

  000ad	51		 push	 ecx
  000ae	8d 45 ec	 lea	 eax, DWORD PTR _strData$3[ebp]
  000b1	8b cc		 mov	 ecx, esp
  000b3	50		 push	 eax
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  000ba	8b ce		 mov	 ecx, esi
  000bc	e8 00 00 00 00	 call	 ?AddTail@?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@QAEPAU__POSITION@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CList<ATL::CStringT<char,StrTraitMFC_DLL<char,ATL::ChTraitsCRT<char> > >,ATL::CStringT<char,StrTraitMFC_DLL<char,ATL::ChTraitsCRT<char> > > >::AddTail

; 74   : 	}

  000c1	8d 4d ec	 lea	 ecx, DWORD PTR _strData$3[ebp]
  000c4	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 533  : 		return( GetLength() == 0 );

  000ce	8b 45 f0	 mov	 eax, DWORD PTR _strPacketNames$[ebp]
  000d1	83 78 f4 00	 cmp	 DWORD PTR [eax-12], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp

; 66   : 	while(!strPacketNames.IsEmpty()) {

  000d5	0f 85 75 ff ff
	ff		 jne	 $LL2@GetPacketN
$LN3@GetPacketN:

; 75   : 
; 76   : }

  000db	8d 4d f0	 lea	 ecx, DWORD PTR _strPacketNames$[ebp]
  000de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000e4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ee	59		 pop	 ecx
  000ef	5e		 pop	 esi
  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetPacketNameList@CGetIndicatorInfo@@CAXPAVCIndicatorInfo@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z$0:
  00000	8d 4d f0	 lea	 ecx, DWORD PTR _strPacketNames$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?GetPacketNameList@CGetIndicatorInfo@@CAXPAVCIndicatorInfo@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z$1:
  00009	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp]
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?GetPacketNameList@CGetIndicatorInfo@@CAXPAVCIndicatorInfo@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z$2:
  00012	8d 4d ec	 lea	 ecx, DWORD PTR _strData$3[ebp]
  00015	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
  0001f	cc		 int	 3
__ehhandler$?GetPacketNameList@CGetIndicatorInfo@@CAXPAVCIndicatorInfo@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z:
  00020	90		 npad	 1
  00021	90		 npad	 1
  00022	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00026	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00029	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0002c	33 c8		 xor	 ecx, eax
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetPacketNameList@CGetIndicatorInfo@@CAXPAVCIndicatorInfo@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z
  00038	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetPacketNameList@CGetIndicatorInfo@@CAXPAVCIndicatorInfo@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z ENDP ; CGetIndicatorInfo::GetPacketNameList
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp
;	COMDAT ?GetConditionList@CGetIndicatorInfo@@CAXPAVCIndicatorInfo@@AAV?$CList@NN@@@Z
_TEXT	SEGMENT
_data$1$ = -12						; size = 8
$T1 = -4						; size = 4
_pIndicatorInfo$ = 8					; size = 4
_ConditionList$ = 12					; size = 4
?GetConditionList@CGetIndicatorInfo@@CAXPAVCIndicatorInfo@@AAV?$CList@NN@@@Z PROC ; CGetIndicatorInfo::GetConditionList, COMDAT

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 34   : 	CList<double, double>* pConditionList = pIndicatorInfo->GetCommonCalConditionList();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pIndicatorInfo$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetCommonCalConditionList@CIndicatorInfo@@QAEPAV?$CList@NN@@XZ

; 35   : 	if(pConditionList == NULL)

  0000f	85 c0		 test	 eax, eax
  00011	0f 84 b3 00 00
	00		 je	 $LN36@GetConditi

; 36   : 		return;
; 37   : 
; 38   : 	POSITION pos = pConditionList->GetHeadPosition();

  00017	53		 push	 ebx
  00018	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]

; 39   : 	while(pos) {

  0001b	85 db		 test	 ebx, ebx
  0001d	0f 84 a6 00 00
	00		 je	 $LN37@GetConditi
  00023	56		 push	 esi
  00024	8b 75 0c	 mov	 esi, DWORD PTR _ConditionList$[ebp]
  00027	57		 push	 edi
  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0002b	89 4d fc	 mov	 DWORD PTR $T1[ebp], ecx
  0002e	66 90		 npad	 2
$LL2@GetConditi:

; 40   : 		double data = pConditionList->GetNext(pos);

  00030	f2 0f 10 43 08	 movsd	 xmm0, QWORD PTR [ebx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 811  : 	{ CNode* pNode = (CNode*) rPosition;

  00035	8d 03		 lea	 eax, DWORD PTR [ebx]

; 902  : 	if (m_pNodeFree == NULL)

  00037	8b 56 10	 mov	 edx, DWORD PTR [esi+16]

; 813  : 		rPosition = (POSITION) pNode->pNext;

  0003a	8b 1b		 mov	 ebx, DWORD PTR [ebx]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp

; 40   : 		double data = pConditionList->GetNext(pos);

  0003c	f2 0f 11 45 f4	 movsd	 QWORD PTR _data$1$[ebp], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 902  : 	if (m_pNodeFree == NULL)

  00041	85 d2		 test	 edx, edx
  00043	75 4e		 jne	 SHORT $LN34@GetConditi

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  00045	6a 10		 push	 16			; 00000010H
  00047	ff 76 18	 push	 DWORD PTR [esi+24]
  0004a	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  00053	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00056	83 c0 08	 add	 eax, 8
  00059	8b ca		 mov	 ecx, edx
  0005b	c1 e1 04	 shl	 ecx, 4
  0005e	83 c1 f0	 add	 ecx, -16		; fffffff0H

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00061	8d 7a ff	 lea	 edi, DWORD PTR [edx-1]
  00064	03 c8		 add	 ecx, eax
  00066	85 ff		 test	 edi, edi
  00068	78 1a		 js	 SHORT $LN35@GetConditi
  0006a	66 0f 1f 44 00
	00		 npad	 6
$LL15@GetConditi:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00070	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00073	8b d1		 mov	 edx, ecx
  00075	89 01		 mov	 DWORD PTR [ecx], eax

; 915  : 			m_pNodeFree = pNode;

  00077	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0007a	83 e9 10	 sub	 ecx, 16			; 00000010H
  0007d	83 ef 01	 sub	 edi, 1
  00080	79 ee		 jns	 SHORT $LL15@GetConditi
  00082	eb 03		 jmp	 SHORT $LN18@GetConditi
$LN35@GetConditi:
  00084	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
$LN18@GetConditi:

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00087	85 d2		 test	 edx, edx
  00089	74 43		 je	 SHORT $LN26@GetConditi
  0008b	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _data$1$[ebp]
  00090	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
$LN34@GetConditi:

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00093	8b 02		 mov	 eax, DWORD PTR [edx]
  00095	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 922  : 	pNode->pPrev = pPrev;

  00098	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 923  : 	pNode->pNext = pNext;

  0009b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 924  : 	m_nCount++;

  000a1	ff 46 0c	 inc	 DWORD PTR [esi+12]

; 969  : 	pNewNode->data = newElement;

  000a4	f2 0f 11 42 08	 movsd	 QWORD PTR [edx+8], xmm0

; 970  : 	if (m_pNodeTail != NULL)

  000a9	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ac	85 c0		 test	 eax, eax
  000ae	74 04		 je	 SHORT $LN9@GetConditi

; 971  : 		m_pNodeTail->pNext = pNewNode;

  000b0	89 10		 mov	 DWORD PTR [eax], edx
  000b2	eb 03		 jmp	 SHORT $LN10@GetConditi
$LN9@GetConditi:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;

  000b4	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN10@GetConditi:

; 974  : 	m_pNodeTail = pNewNode;

  000b7	89 56 08	 mov	 DWORD PTR [esi+8], edx
  000ba	8b ca		 mov	 ecx, edx
  000bc	89 4d fc	 mov	 DWORD PTR $T1[ebp], ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp

; 39   : 	while(pos) {

  000bf	85 db		 test	 ebx, ebx
  000c1	0f 85 69 ff ff
	ff		 jne	 $LL2@GetConditi
  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
$LN37@GetConditi:
  000c9	5b		 pop	 ebx
$LN36@GetConditi:

; 43   : }

  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c3		 ret	 0
$LN26@GetConditi:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  000ce	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN40@GetConditi:
  000d3	cc		 int	 3
?GetConditionList@CGetIndicatorInfo@@CAXPAVCIndicatorInfo@@AAV?$CList@NN@@@Z ENDP ; CGetIndicatorInfo::GetConditionList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp
;	COMDAT ?ChangeTypeFromCStringToCList@CGetIndicatorInfo@@CAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z
_TEXT	SEGMENT
$T2 = -24						; size = 4
$T3 = -24						; size = 4
_orgStr$4 = -20						; size = 4
$T5 = -20						; size = 4
_packetname$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_strPacketName$ = 8					; size = 4
_PacketNameList$ = 12					; size = 4
?ChangeTypeFromCStringToCList@CGetIndicatorInfo@@CAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z PROC ; CGetIndicatorInfo::ChangeTypeFromCStringToCList, COMDAT

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ChangeTypeFromCStringToCList@CGetIndicatorInfo@@CAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 48   : 	CString packetname = strPacketName;

  00026	ff 75 08	 push	 DWORD PTR _strPacketName$[ebp]
  00029	8d 4d f0	 lea	 ecx, DWORD PTR _packetname$[ebp]
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z

; 49   : 	AddCompareStringInOriginalString(packetname, ",");

  00032	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0@
  00037	8d 4d ec	 lea	 ecx, DWORD PTR $T5[ebp]
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z

; 27   : 	if(strOriginal.Right(1) != strCompare) 

  00047	6a 01		 push	 1
  00049	8d 45 e8	 lea	 eax, DWORD PTR $T2[ebp]

; 49   : 	AddCompareStringInOriginalString(packetname, ",");

  0004c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 27   : 	if(strOriginal.Right(1) != strCompare) 

  00050	50		 push	 eax
  00051	8d 4d f0	 lea	 ecx, DWORD PTR _packetname$[ebp]
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Right@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h

; 2560 : 		return( str1.Compare( str2 ) != 0 );

  0005a	ff 75 ec	 push	 DWORD PTR $T5[ebp]
  0005d	8b c8		 mov	 ecx, eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp

; 27   : 	if(strOriginal.Right(1) != strCompare) 

  0005f	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h

; 2560 : 		return( str1.Compare( str2 ) != 0 );

  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Compare@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp

; 27   : 	if(strOriginal.Right(1) != strCompare) 

  00069	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp]
  0006c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h

; 2560 : 		return( str1.Compare( str2 ) != 0 );

  00070	8b f0		 mov	 esi, eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp

; 27   : 	if(strOriginal.Right(1) != strCompare) 

  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00078	85 f6		 test	 esi, esi
  0007a	74 0d		 je	 SHORT $LN11@ChangeType

; 28   : 		strOriginal += strCompare;

  0007c	8d 45 ec	 lea	 eax, DWORD PTR $T5[ebp]
  0007f	50		 push	 eax
  00080	8d 4d f0	 lea	 ecx, DWORD PTR _packetname$[ebp]
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV?$CSimpleStringT@D$00@1@@Z
$LN11@ChangeType:

; 49   : 	AddCompareStringInOriginalString(packetname, ",");

  00089	8d 4d ec	 lea	 ecx, DWORD PTR $T5[ebp]
  0008c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 519  : 		return( GetData()->nDataLength );

  00096	8b 45 f0	 mov	 eax, DWORD PTR _packetname$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp

; 50   : 	while(packetname.GetLength()) {

  00099	83 78 f4 00	 cmp	 DWORD PTR [eax-12], 0
  0009d	74 74		 je	 SHORT $LN3@ChangeType
  0009f	8b 75 0c	 mov	 esi, DWORD PTR _PacketNameList$[ebp]
$LL2@ChangeType:

; 51   : 		CString orgStr = CDataConversion::GetStringData(packetname, ",");

  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0@
  000a7	8d 4d e8	 lea	 ecx, DWORD PTR $T3[ebp]
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  000b0	6a 01		 push	 1
  000b2	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  000b5	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000b9	50		 push	 eax
  000ba	8d 45 f0	 lea	 eax, DWORD PTR _packetname$[ebp]
  000bd	50		 push	 eax
  000be	8d 45 ec	 lea	 eax, DWORD PTR _orgStr$4[ebp]
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ?GetStringData@CDataConversion@@SA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@AAV23@ABV23@_N@Z ; CDataConversion::GetStringData
  000c7	83 c4 10	 add	 esp, 16			; 00000010H
  000ca	8d 4d e8	 lea	 ecx, DWORD PTR $T3[ebp]
  000cd	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 52   : 		orgStr.TrimLeft();

  000d7	8d 4d ec	 lea	 ecx, DWORD PTR _orgStr$4[ebp]
  000da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 53   : 		orgStr.TrimRight();

  000e0	8d 4d ec	 lea	 ecx, DWORD PTR _orgStr$4[ebp]
  000e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@XZ

; 54   : 		PacketNameList.AddTail(orgStr);

  000e9	51		 push	 ecx
  000ea	8d 45 ec	 lea	 eax, DWORD PTR _orgStr$4[ebp]
  000ed	8b cc		 mov	 ecx, esp
  000ef	50		 push	 eax
  000f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  000f6	8b ce		 mov	 ecx, esi
  000f8	e8 00 00 00 00	 call	 ?AddTail@?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@QAEPAU__POSITION@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CList<ATL::CStringT<char,StrTraitMFC_DLL<char,ATL::ChTraitsCRT<char> > >,ATL::CStringT<char,StrTraitMFC_DLL<char,ATL::ChTraitsCRT<char> > > >::AddTail

; 55   : 	}

  000fd	8d 4d ec	 lea	 ecx, DWORD PTR _orgStr$4[ebp]
  00100	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00104	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0010a	8b 45 f0	 mov	 eax, DWORD PTR _packetname$[ebp]
  0010d	83 78 f4 00	 cmp	 DWORD PTR [eax-12], 0
  00111	75 8f		 jne	 SHORT $LL2@ChangeType
$LN3@ChangeType:

; 56   : }

  00113	8d 4d f0	 lea	 ecx, DWORD PTR _packetname$[ebp]
  00116	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0011c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0011f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00126	59		 pop	 ecx
  00127	5e		 pop	 esi
  00128	8b e5		 mov	 esp, ebp
  0012a	5d		 pop	 ebp
  0012b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ChangeTypeFromCStringToCList@CGetIndicatorInfo@@CAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z$0:
  00000	8d 4d f0	 lea	 ecx, DWORD PTR _packetname$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?ChangeTypeFromCStringToCList@CGetIndicatorInfo@@CAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z$1:
  00009	8d 4d ec	 lea	 ecx, DWORD PTR $T5[ebp]
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?ChangeTypeFromCStringToCList@CGetIndicatorInfo@@CAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z$5:
  00012	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp]
  00015	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?ChangeTypeFromCStringToCList@CGetIndicatorInfo@@CAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z$2:
  0001b	8d 4d e8	 lea	 ecx, DWORD PTR $T3[ebp]
  0001e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?ChangeTypeFromCStringToCList@CGetIndicatorInfo@@CAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z$3:
  00024	8d 4d ec	 lea	 ecx, DWORD PTR _orgStr$4[ebp]
  00027	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0002d	cc		 int	 3
  0002e	cc		 int	 3
  0002f	cc		 int	 3
  00030	cc		 int	 3
  00031	cc		 int	 3
__ehhandler$?ChangeTypeFromCStringToCList@CGetIndicatorInfo@@CAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z:
  00032	90		 npad	 1
  00033	90		 npad	 1
  00034	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00038	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003b	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ChangeTypeFromCStringToCList@CGetIndicatorInfo@@CAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ChangeTypeFromCStringToCList@CGetIndicatorInfo@@CAXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z ENDP ; CGetIndicatorInfo::ChangeTypeFromCStringToCList
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp
;	COMDAT ?GetSubGraphNameList@CGetIndicatorInfo@@CAXPAVCIndicatorInfo@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z
_TEXT	SEGMENT
_pIndicatorInfo$ = 8					; size = 4
_subGraphNameList$ = 12					; size = 4
?GetSubGraphNameList@CGetIndicatorInfo@@CAXPAVCIndicatorInfo@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z PROC ; CGetIndicatorInfo::GetSubGraphNameList, COMDAT

; 87   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 88   : 	if(pIndicatorInfo == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pIndicatorInfo$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 09		 je	 SHORT $LN1@GetSubGrap

; 89   : 		return;
; 90   : 
; 91   : 	pIndicatorInfo->GetSubGraphNameList(subGraphNameList);

  0000a	ff 75 0c	 push	 DWORD PTR _subGraphNameList$[ebp]
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSubGraphNameList@CIndicatorInfo@@QBE_NAAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z
$LN1@GetSubGrap:

; 92   : }

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?GetSubGraphNameList@CGetIndicatorInfo@@CAXPAVCIndicatorInfo@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z ENDP ; CGetIndicatorInfo::GetSubGraphNameList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp
;	COMDAT ?AddCompareStringInOriginalString@CGetIndicatorInfo@@CAXAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_strOriginal$ = 8					; size = 4
_strCompare$ = 12					; size = 4
?AddCompareStringInOriginalString@CGetIndicatorInfo@@CAXAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@@Z PROC ; CGetIndicatorInfo::AddCompareStringInOriginalString, COMDAT

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AddCompareStringInOriginalString@CGetIndicatorInfo@@CAXAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 27   : 	if(strOriginal.Right(1) != strCompare) 

  00025	8b 4d 08	 mov	 ecx, DWORD PTR _strOriginal$[ebp]
  00028	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  0002b	6a 01		 push	 1
  0002d	50		 push	 eax
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Right@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 377  : 		return( m_pszData );

  00034	8b 5d 0c	 mov	 ebx, DWORD PTR _strCompare$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h

; 2560 : 		return( str1.Compare( str2 ) != 0 );

  00037	8b c8		 mov	 ecx, eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp

; 27   : 	if(strOriginal.Right(1) != strCompare) 

  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h

; 2560 : 		return( str1.Compare( str2 ) != 0 );

  00040	ff 33		 push	 DWORD PTR [ebx]
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Compare@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp

; 27   : 	if(strOriginal.Right(1) != strCompare) 

  00048	8d 4d f0	 lea	 ecx, DWORD PTR $T2[ebp]
  0004b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h

; 2560 : 		return( str1.Compare( str2 ) != 0 );

  00052	8b f0		 mov	 esi, eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp

; 27   : 	if(strOriginal.Right(1) != strCompare) 

  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0005a	85 f6		 test	 esi, esi
  0005c	74 0a		 je	 SHORT $LN2@AddCompare

; 28   : 		strOriginal += strCompare;

  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _strOriginal$[ebp]
  00061	53		 push	 ebx
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV?$CSimpleStringT@D$00@1@@Z
$LN2@AddCompare:

; 29   : }

  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddCompareStringInOriginalString@CGetIndicatorInfo@@CAXAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@@Z$0:
  00000	8d 4d f0	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
__ehhandler$?AddCompareStringInOriginalString@CGetIndicatorInfo@@CAXAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@@Z:
  0000e	90		 npad	 1
  0000f	90		 npad	 1
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddCompareStringInOriginalString@CGetIndicatorInfo@@CAXAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddCompareStringInOriginalString@CGetIndicatorInfo@@CAXAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@@Z ENDP ; CGetIndicatorInfo::AddCompareStringInOriginalString
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp
;	COMDAT ?GetSubGraphIndex@CGetIndicatorInfo@@SAHPAVCIndicatorInfo@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
_TEXT	SEGMENT
_pIndicatorinfo$ = 8					; size = 4
_subgraphname$ = 12					; size = 4
?GetSubGraphIndex@CGetIndicatorInfo@@SAHPAVCIndicatorInfo@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC ; CGetIndicatorInfo::GetSubGraphIndex, COMDAT

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 80   : 	if(pIndicatorinfo == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pIndicatorinfo$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 05		 jne	 SHORT $LN2@GetSubGrap

; 81   : 		return -1;

  0000a	83 c8 ff	 or	 eax, -1

; 84   : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
$LN2@GetSubGrap:

; 82   : 
; 83   : 	return pIndicatorinfo->GetSubGraphIndex(subgraphname);

  0000f	ff 75 0c	 push	 DWORD PTR _subgraphname$[ebp]
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSubGraphIndex@CIndicatorInfo@@QBEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z

; 84   : }

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?GetSubGraphIndex@CGetIndicatorInfo@@SAHPAVCIndicatorInfo@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CGetIndicatorInfo::GetSubGraphIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartFormulate\GetIndicatorInfo.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
