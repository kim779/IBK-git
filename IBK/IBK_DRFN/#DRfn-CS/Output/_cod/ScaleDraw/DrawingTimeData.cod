; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30145.0 

	TITLE	D:\git\src\IBK\IBK_DRFN\#DRfn-CS\_Obj\ScaleDraw\DrawingTimeData.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1CObject@@UAE@XZ				; CObject::~CObject
PUBLIC	?Serialize@CObject@@UAEXAAVCArchive@@@Z		; CObject::Serialize
PUBLIC	?AssertValid@CObject@@UBEXXZ			; CObject::AssertValid
PUBLIC	?Dump@CObject@@UBEXAAVCDumpContext@@@Z		; CObject::Dump
PUBLIC	??4CDrawingTimeData@@QAEAAV0@ABV0@@Z		; CDrawingTimeData::operator=
PUBLIC	??0CDrawingTimeData@@QAE@ABV0@@Z		; CDrawingTimeData::CDrawingTimeData
PUBLIC	??0CDrawingTimeData@@QAE@HABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CDrawingTimeData::CDrawingTimeData
PUBLIC	??0CDrawingTimeData@@QAE@HHH@Z			; CDrawingTimeData::CDrawingTimeData
PUBLIC	?SetIndex@CDrawingTimeData@@QAEXH@Z		; CDrawingTimeData::SetIndex
PUBLIC	?SetTimeData@CDrawingTimeData@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CDrawingTimeData::SetTimeData
PUBLIC	?IsExactData@CDrawingTimeData@@QBE_NXZ		; CDrawingTimeData::IsExactData
PUBLIC	?GetIndex@CDrawingTimeData@@QBEHXZ		; CDrawingTimeData::GetIndex
PUBLIC	?GetTimeData@CDrawingTimeData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; CDrawingTimeData::GetTimeData
PUBLIC	??1CDrawingHourData@@QAE@XZ			; CDrawingHourData::~CDrawingHourData
PUBLIC	?AddDrawingTimeData@CDrawingHourData@@QAE_NABVCDrawingTimeData@@@Z ; CDrawingHourData::AddDrawingTimeData
PUBLIC	?AddDrawingTimeData@CDrawingHourData@@QAE_NHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CDrawingHourData::AddDrawingTimeData
PUBLIC	?AddDrawingTimeData@CDrawingHourData@@QAE_NHHH@Z ; CDrawingHourData::AddDrawingTimeData
PUBLIC	?DeleteAll@CDrawingHourData@@QAE_NXZ		; CDrawingHourData::DeleteAll
PUBLIC	?GetTimeDataList@CDrawingHourData@@QAEPAV?$CList@PAVCDrawingTimeData@@PAV1@@@XZ ; CDrawingHourData::GetTimeDataList
PUBLIC	?GetTimeDataCount@CDrawingHourData@@QBEHXZ	; CDrawingHourData::GetTimeDataCount
PUBLIC	?GetHeadTimeDataPosition@CDrawingHourData@@QBEPAU__POSITION@@XZ ; CDrawingHourData::GetHeadTimeDataPosition
PUBLIC	?GetTailTimeDataPosition@CDrawingHourData@@QBEPAU__POSITION@@XZ ; CDrawingHourData::GetTailTimeDataPosition
PUBLIC	?GetHeadTimeData@CDrawingHourData@@QBEPAVCDrawingTimeData@@XZ ; CDrawingHourData::GetHeadTimeData
PUBLIC	?GetTimeData@CDrawingHourData@@QBEPAVCDrawingTimeData@@H@Z ; CDrawingHourData::GetTimeData
PUBLIC	?GetTimeData@CDrawingHourData@@QBEPAVCDrawingTimeData@@ABQAU__POSITION@@@Z ; CDrawingHourData::GetTimeData
PUBLIC	?GetNext_TimeData@CDrawingHourData@@QBEPAVCDrawingTimeData@@AAPAU__POSITION@@@Z ; CDrawingHourData::GetNext_TimeData
PUBLIC	?GetHeadTimeData_Index@CDrawingHourData@@QBEHXZ	; CDrawingHourData::GetHeadTimeData_Index
PUBLIC	?GetHeadTimeData_Data@CDrawingHourData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; CDrawingHourData::GetHeadTimeData_Data
PUBLIC	??0?$CList@PAVCDrawingTimeData@@PAV1@@@QAE@H@Z	; CList<CDrawingTimeData *,CDrawingTimeData *>::CList<CDrawingTimeData *,CDrawingTimeData *>
PUBLIC	?AddTail@?$CList@PAVCDrawingTimeData@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingTimeData@@@Z ; CList<CDrawingTimeData *,CDrawingTimeData *>::AddTail
PUBLIC	?RemoveAll@?$CList@PAVCDrawingTimeData@@PAV1@@@QAEXXZ ; CList<CDrawingTimeData *,CDrawingTimeData *>::RemoveAll
PUBLIC	?FindIndex@?$CList@PAVCDrawingTimeData@@PAV1@@@QBEPAU__POSITION@@H@Z ; CList<CDrawingTimeData *,CDrawingTimeData *>::FindIndex
PUBLIC	?NewNode@?$CList@PAVCDrawingTimeData@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<CDrawingTimeData *,CDrawingTimeData *>::NewNode
PUBLIC	??1?$CList@PAVCDrawingTimeData@@PAV1@@@UAE@XZ	; CList<CDrawingTimeData *,CDrawingTimeData *>::~CList<CDrawingTimeData *,CDrawingTimeData *>
PUBLIC	?Serialize@?$CList@PAVCDrawingTimeData@@PAV1@@@UAEXAAVCArchive@@@Z ; CList<CDrawingTimeData *,CDrawingTimeData *>::Serialize
PUBLIC	??_G?$CList@PAVCDrawingTimeData@@PAV1@@@UAEPAXI@Z ; CList<CDrawingTimeData *,CDrawingTimeData *>::`scalar deleting destructor'
PUBLIC	??0CDrawingDateData@@QAE@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CDrawingDateData::CDrawingDateData
PUBLIC	??0CDrawingDateData@@QAE@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCDrawingTimeData@@@Z ; CDrawingDateData::CDrawingDateData
PUBLIC	??0CDrawingDateData@@QAE@HHABVCDrawingTimeData@@@Z ; CDrawingDateData::CDrawingDateData
PUBLIC	??1CDrawingDateData@@QAE@XZ			; CDrawingDateData::~CDrawingDateData
PUBLIC	?AddDrawingHourData@CDrawingDateData@@QAE_NABVCDrawingTimeData@@@Z ; CDrawingDateData::AddDrawingHourData
PUBLIC	?AddDrawingHourData@CDrawingDateData@@QAE_NHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CDrawingDateData::AddDrawingHourData
PUBLIC	?AddDrawingHourData@CDrawingDateData@@QAE_NHHH@Z ; CDrawingDateData::AddDrawingHourData
PUBLIC	?DeleteAll@CDrawingDateData@@QAE_NXZ		; CDrawingDateData::DeleteAll
PUBLIC	?SetDateData@CDrawingDateData@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CDrawingDateData::SetDateData
PUBLIC	?GetDateData@CDrawingDateData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; CDrawingDateData::GetDateData
PUBLIC	?GetHourDataList@CDrawingDateData@@QAEPAV?$CList@PAVCDrawingHourData@@PAV1@@@XZ ; CDrawingDateData::GetHourDataList
PUBLIC	?GetHourDataCount@CDrawingDateData@@QBEHXZ	; CDrawingDateData::GetHourDataCount
PUBLIC	?GetHeadHourDataPosition@CDrawingDateData@@QBEPAU__POSITION@@XZ ; CDrawingDateData::GetHeadHourDataPosition
PUBLIC	?GetTailHourDataPosition@CDrawingDateData@@QBEPAU__POSITION@@XZ ; CDrawingDateData::GetTailHourDataPosition
PUBLIC	?GetHourData@CDrawingDateData@@QBEPAVCDrawingHourData@@H@Z ; CDrawingDateData::GetHourData
PUBLIC	?GetHourData@CDrawingDateData@@QBEPAVCDrawingHourData@@ABQAU__POSITION@@@Z ; CDrawingDateData::GetHourData
PUBLIC	?GetNext_HourData@CDrawingDateData@@QBEPAVCDrawingHourData@@AAPAU__POSITION@@@Z ; CDrawingDateData::GetNext_HourData
PUBLIC	?GetTimeData@CDrawingDateData@@QBEPAVCDrawingTimeData@@HH@Z ; CDrawingDateData::GetTimeData
PUBLIC	?GetHeadTimeData_Index@CDrawingDateData@@QBEHXZ	; CDrawingDateData::GetHeadTimeData_Index
PUBLIC	?GetHeadTimeData_Data@CDrawingDateData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; CDrawingDateData::GetHeadTimeData_Data
PUBLIC	??0?$CList@PAVCDrawingHourData@@PAV1@@@QAE@H@Z	; CList<CDrawingHourData *,CDrawingHourData *>::CList<CDrawingHourData *,CDrawingHourData *>
PUBLIC	?AddTail@?$CList@PAVCDrawingHourData@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingHourData@@@Z ; CList<CDrawingHourData *,CDrawingHourData *>::AddTail
PUBLIC	?RemoveAll@?$CList@PAVCDrawingHourData@@PAV1@@@QAEXXZ ; CList<CDrawingHourData *,CDrawingHourData *>::RemoveAll
PUBLIC	?FindIndex@?$CList@PAVCDrawingHourData@@PAV1@@@QBEPAU__POSITION@@H@Z ; CList<CDrawingHourData *,CDrawingHourData *>::FindIndex
PUBLIC	?NewNode@?$CList@PAVCDrawingHourData@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<CDrawingHourData *,CDrawingHourData *>::NewNode
PUBLIC	??1?$CList@PAVCDrawingHourData@@PAV1@@@UAE@XZ	; CList<CDrawingHourData *,CDrawingHourData *>::~CList<CDrawingHourData *,CDrawingHourData *>
PUBLIC	?Serialize@?$CList@PAVCDrawingHourData@@PAV1@@@UAEXAAVCArchive@@@Z ; CList<CDrawingHourData *,CDrawingHourData *>::Serialize
PUBLIC	??_G?$CList@PAVCDrawingHourData@@PAV1@@@UAEPAXI@Z ; CList<CDrawingHourData *,CDrawingHourData *>::`scalar deleting destructor'
PUBLIC	??0CDrawingDateDataList@@QAE@XZ			; CDrawingDateDataList::CDrawingDateDataList
PUBLIC	??1CDrawingDateDataList@@QAE@XZ			; CDrawingDateDataList::~CDrawingDateDataList
PUBLIC	?AddDrawingDateData@CDrawingDateDataList@@QAE_NPAVCDrawingDateData@@@Z ; CDrawingDateDataList::AddDrawingDateData
PUBLIC	?DeleteAll@CDrawingDateDataList@@QAE_NXZ	; CDrawingDateDataList::DeleteAll
PUBLIC	?SetDailyDrawing@CDrawingDateDataList@@QAEX_N@Z	; CDrawingDateDataList::SetDailyDrawing
PUBLIC	?IsDailyDrawing@CDrawingDateDataList@@QBE_NXZ	; CDrawingDateDataList::IsDailyDrawing
PUBLIC	?GetDrawingDateDataList@CDrawingDateDataList@@QAEPAV?$CList@PAVCDrawingDateData@@PAV1@@@XZ ; CDrawingDateDataList::GetDrawingDateDataList
PUBLIC	?GetDateDataCount@CDrawingDateDataList@@QBEHXZ	; CDrawingDateDataList::GetDateDataCount
PUBLIC	?GetHeadDateDataPosition@CDrawingDateDataList@@QBEPAU__POSITION@@XZ ; CDrawingDateDataList::GetHeadDateDataPosition
PUBLIC	?GetTailDateDataPosition@CDrawingDateDataList@@QBEPAU__POSITION@@XZ ; CDrawingDateDataList::GetTailDateDataPosition
PUBLIC	?GetDateData@CDrawingDateDataList@@QBEPAVCDrawingDateData@@H@Z ; CDrawingDateDataList::GetDateData
PUBLIC	?GetDateData@CDrawingDateDataList@@QBEPAVCDrawingDateData@@ABQAU__POSITION@@@Z ; CDrawingDateDataList::GetDateData
PUBLIC	?GetNext_DateData@CDrawingDateDataList@@QBEPAVCDrawingDateData@@AAPAU__POSITION@@@Z ; CDrawingDateDataList::GetNext_DateData
PUBLIC	??0?$CList@PAVCDrawingDateData@@PAV1@@@QAE@H@Z	; CList<CDrawingDateData *,CDrawingDateData *>::CList<CDrawingDateData *,CDrawingDateData *>
PUBLIC	?AddTail@?$CList@PAVCDrawingDateData@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingDateData@@@Z ; CList<CDrawingDateData *,CDrawingDateData *>::AddTail
PUBLIC	?RemoveAll@?$CList@PAVCDrawingDateData@@PAV1@@@QAEXXZ ; CList<CDrawingDateData *,CDrawingDateData *>::RemoveAll
PUBLIC	?FindIndex@?$CList@PAVCDrawingDateData@@PAV1@@@QBEPAU__POSITION@@H@Z ; CList<CDrawingDateData *,CDrawingDateData *>::FindIndex
PUBLIC	?NewNode@?$CList@PAVCDrawingDateData@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<CDrawingDateData *,CDrawingDateData *>::NewNode
PUBLIC	??1?$CList@PAVCDrawingDateData@@PAV1@@@UAE@XZ	; CList<CDrawingDateData *,CDrawingDateData *>::~CList<CDrawingDateData *,CDrawingDateData *>
PUBLIC	?Serialize@?$CList@PAVCDrawingDateData@@PAV1@@@UAEXAAVCArchive@@@Z ; CList<CDrawingDateData *,CDrawingDateData *>::Serialize
PUBLIC	??_G?$CList@PAVCDrawingDateData@@PAV1@@@UAEPAXI@Z ; CList<CDrawingDateData *,CDrawingDateData *>::`scalar deleting destructor'
PUBLIC	??$SerializeElements@PAVCDrawingTimeData@@@@YGXAAVCArchive@@PAPAVCDrawingTimeData@@H@Z ; SerializeElements<CDrawingTimeData *>
PUBLIC	??$SerializeElements@PAVCDrawingHourData@@@@YGXAAVCArchive@@PAPAVCDrawingHourData@@H@Z ; SerializeElements<CDrawingHourData *>
PUBLIC	??$SerializeElements@PAVCDrawingDateData@@@@YGXAAVCArchive@@PAPAVCDrawingDateData@@H@Z ; SerializeElements<CDrawingDateData *>
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R3CObject@@8					; CObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObject@@8					; CObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CObject@@8			; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$CList@PAVCDrawingTimeData@@PAV1@@@6B@	; CList<CDrawingTimeData *,CDrawingTimeData *>::`vftable'
PUBLIC	??_7?$CList@PAVCDrawingHourData@@PAV1@@@6B@	; CList<CDrawingHourData *,CDrawingHourData *>::`vftable'
PUBLIC	??_7?$CList@PAVCDrawingDateData@@PAV1@@@6B@	; CList<CDrawingDateData *,CDrawingDateData *>::`vftable'
PUBLIC	??_C@_02PGHGPEOM@?91@				; `string'
PUBLIC	??_R4?$CList@PAVCDrawingTimeData@@PAV1@@@6B@	; CList<CDrawingTimeData *,CDrawingTimeData *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CList@PAVCDrawingTimeData@@PAV1@@@@8	; CList<CDrawingTimeData *,CDrawingTimeData *> `RTTI Type Descriptor'
PUBLIC	??_R3?$CList@PAVCDrawingTimeData@@PAV1@@@8	; CList<CDrawingTimeData *,CDrawingTimeData *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CList@PAVCDrawingTimeData@@PAV1@@@8	; CList<CDrawingTimeData *,CDrawingTimeData *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CList@PAVCDrawingTimeData@@PAV1@@@8 ; CList<CDrawingTimeData *,CDrawingTimeData *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CList@PAVCDrawingHourData@@PAV1@@@6B@	; CList<CDrawingHourData *,CDrawingHourData *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CList@PAVCDrawingHourData@@PAV1@@@@8	; CList<CDrawingHourData *,CDrawingHourData *> `RTTI Type Descriptor'
PUBLIC	??_R3?$CList@PAVCDrawingHourData@@PAV1@@@8	; CList<CDrawingHourData *,CDrawingHourData *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CList@PAVCDrawingHourData@@PAV1@@@8	; CList<CDrawingHourData *,CDrawingHourData *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CList@PAVCDrawingHourData@@PAV1@@@8 ; CList<CDrawingHourData *,CDrawingHourData *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CList@PAVCDrawingDateData@@PAV1@@@6B@	; CList<CDrawingDateData *,CDrawingDateData *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CList@PAVCDrawingDateData@@PAV1@@@@8	; CList<CDrawingDateData *,CDrawingDateData *> `RTTI Type Descriptor'
PUBLIC	??_R3?$CList@PAVCDrawingDateData@@PAV1@@@8	; CList<CDrawingDateData *,CDrawingDateData *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CList@PAVCDrawingDateData@@PAV1@@@8	; CList<CDrawingDateData *,CDrawingDateData *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CList@PAVCDrawingDateData@@PAV1@@@8 ; CList<CDrawingDateData *,CDrawingDateData *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	?__global_delete@@YAXPAXI@Z:PROC		; __global_delete
EXTRN	___std_terminate:PROC
EXTRN	?AfxThrowInvalidArgException@@YGXXZ:PROC	; AfxThrowInvalidArgException
EXTRN	?AfxThrowArchiveException@@YGXHPBD@Z:PROC	; AfxThrowArchiveException
EXTRN	?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ:PROC ; CObject::GetRuntimeClass
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z:PROC
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z:PROC
EXTRN	?Read@CArchive@@QAEIPAXI@Z:PROC			; CArchive::Read
EXTRN	?Write@CArchive@@QAEXPBXI@Z:PROC		; CArchive::Write
EXTRN	?ReadCount@CArchive@@QAEKXZ:PROC		; CArchive::ReadCount
EXTRN	?WriteCount@CArchive@@QAEXK@Z:PROC		; CArchive::WriteCount
EXTRN	?Create@CPlex@@SGPAU1@AAPAU1@II@Z:PROC		; CPlex::Create
EXTRN	?FreeDataChain@CPlex@@QAEXXZ:PROC		; CPlex::FreeDataChain
EXTRN	??_E?$CList@PAVCDrawingTimeData@@PAV1@@@UAEPAXI@Z:PROC ; CList<CDrawingTimeData *,CDrawingTimeData *>::`vector deleting destructor'
EXTRN	??_E?$CList@PAVCDrawingHourData@@PAV1@@@UAEPAXI@Z:PROC ; CList<CDrawingHourData *,CDrawingHourData *>::`vector deleting destructor'
EXTRN	??_E?$CList@PAVCDrawingDateData@@PAV1@@@UAEPAXI@Z:PROC ; CList<CDrawingDateData *,CDrawingDateData *>::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R1A@?0A@EA@?$CList@PAVCDrawingDateData@@PAV1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CList@PAVCDrawingDateData@@PAV1@@@8 DD FLAT:??_R0?AV?$CList@PAVCDrawingDateData@@PAV1@@@@8 ; CList<CDrawingDateData *,CDrawingDateData *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CList@PAVCDrawingDateData@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CList@PAVCDrawingDateData@@PAV1@@@8
rdata$r	SEGMENT
??_R2?$CList@PAVCDrawingDateData@@PAV1@@@8 DD FLAT:??_R1A@?0A@EA@?$CList@PAVCDrawingDateData@@PAV1@@@8 ; CList<CDrawingDateData *,CDrawingDateData *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CList@PAVCDrawingDateData@@PAV1@@@8
rdata$r	SEGMENT
??_R3?$CList@PAVCDrawingDateData@@PAV1@@@8 DD 00H	; CList<CDrawingDateData *,CDrawingDateData *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CList@PAVCDrawingDateData@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CList@PAVCDrawingDateData@@PAV1@@@@8
data$rs	SEGMENT
??_R0?AV?$CList@PAVCDrawingDateData@@PAV1@@@@8 DD FLAT:??_7type_info@@6B@ ; CList<CDrawingDateData *,CDrawingDateData *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CList@PAVCDrawingDateData@@PAV1@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CList@PAVCDrawingDateData@@PAV1@@@6B@
rdata$r	SEGMENT
??_R4?$CList@PAVCDrawingDateData@@PAV1@@@6B@ DD 00H	; CList<CDrawingDateData *,CDrawingDateData *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CList@PAVCDrawingDateData@@PAV1@@@@8
	DD	FLAT:??_R3?$CList@PAVCDrawingDateData@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CList@PAVCDrawingHourData@@PAV1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CList@PAVCDrawingHourData@@PAV1@@@8 DD FLAT:??_R0?AV?$CList@PAVCDrawingHourData@@PAV1@@@@8 ; CList<CDrawingHourData *,CDrawingHourData *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CList@PAVCDrawingHourData@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CList@PAVCDrawingHourData@@PAV1@@@8
rdata$r	SEGMENT
??_R2?$CList@PAVCDrawingHourData@@PAV1@@@8 DD FLAT:??_R1A@?0A@EA@?$CList@PAVCDrawingHourData@@PAV1@@@8 ; CList<CDrawingHourData *,CDrawingHourData *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CList@PAVCDrawingHourData@@PAV1@@@8
rdata$r	SEGMENT
??_R3?$CList@PAVCDrawingHourData@@PAV1@@@8 DD 00H	; CList<CDrawingHourData *,CDrawingHourData *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CList@PAVCDrawingHourData@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CList@PAVCDrawingHourData@@PAV1@@@@8
data$rs	SEGMENT
??_R0?AV?$CList@PAVCDrawingHourData@@PAV1@@@@8 DD FLAT:??_7type_info@@6B@ ; CList<CDrawingHourData *,CDrawingHourData *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CList@PAVCDrawingHourData@@PAV1@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CList@PAVCDrawingHourData@@PAV1@@@6B@
rdata$r	SEGMENT
??_R4?$CList@PAVCDrawingHourData@@PAV1@@@6B@ DD 00H	; CList<CDrawingHourData *,CDrawingHourData *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CList@PAVCDrawingHourData@@PAV1@@@@8
	DD	FLAT:??_R3?$CList@PAVCDrawingHourData@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CList@PAVCDrawingTimeData@@PAV1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CList@PAVCDrawingTimeData@@PAV1@@@8 DD FLAT:??_R0?AV?$CList@PAVCDrawingTimeData@@PAV1@@@@8 ; CList<CDrawingTimeData *,CDrawingTimeData *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CList@PAVCDrawingTimeData@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CList@PAVCDrawingTimeData@@PAV1@@@8
rdata$r	SEGMENT
??_R2?$CList@PAVCDrawingTimeData@@PAV1@@@8 DD FLAT:??_R1A@?0A@EA@?$CList@PAVCDrawingTimeData@@PAV1@@@8 ; CList<CDrawingTimeData *,CDrawingTimeData *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CList@PAVCDrawingTimeData@@PAV1@@@8
rdata$r	SEGMENT
??_R3?$CList@PAVCDrawingTimeData@@PAV1@@@8 DD 00H	; CList<CDrawingTimeData *,CDrawingTimeData *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CList@PAVCDrawingTimeData@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CList@PAVCDrawingTimeData@@PAV1@@@@8
data$rs	SEGMENT
??_R0?AV?$CList@PAVCDrawingTimeData@@PAV1@@@@8 DD FLAT:??_7type_info@@6B@ ; CList<CDrawingTimeData *,CDrawingTimeData *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CList@PAVCDrawingTimeData@@PAV1@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CList@PAVCDrawingTimeData@@PAV1@@@6B@
rdata$r	SEGMENT
??_R4?$CList@PAVCDrawingTimeData@@PAV1@@@6B@ DD 00H	; CList<CDrawingTimeData *,CDrawingTimeData *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CList@PAVCDrawingTimeData@@PAV1@@@@8
	DD	FLAT:??_R3?$CList@PAVCDrawingTimeData@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_C@_02PGHGPEOM@?91@
CONST	SEGMENT
??_C@_02PGHGPEOM@?91@ DB '-1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7?$CList@PAVCDrawingDateData@@PAV1@@@6B@
CONST	SEGMENT
??_7?$CList@PAVCDrawingDateData@@PAV1@@@6B@ DD FLAT:??_R4?$CList@PAVCDrawingDateData@@PAV1@@@6B@ ; CList<CDrawingDateData *,CDrawingDateData *>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CList@PAVCDrawingDateData@@PAV1@@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CList@PAVCDrawingDateData@@PAV1@@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_7?$CList@PAVCDrawingHourData@@PAV1@@@6B@
CONST	SEGMENT
??_7?$CList@PAVCDrawingHourData@@PAV1@@@6B@ DD FLAT:??_R4?$CList@PAVCDrawingHourData@@PAV1@@@6B@ ; CList<CDrawingHourData *,CDrawingHourData *>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CList@PAVCDrawingHourData@@PAV1@@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CList@PAVCDrawingHourData@@PAV1@@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_7?$CList@PAVCDrawingTimeData@@PAV1@@@6B@
CONST	SEGMENT
??_7?$CList@PAVCDrawingTimeData@@PAV1@@@6B@ DD FLAT:??_R4?$CList@PAVCDrawingTimeData@@PAV1@@@6B@ ; CList<CDrawingTimeData *,CDrawingTimeData *>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CList@PAVCDrawingTimeData@@PAV1@@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CList@PAVCDrawingTimeData@@PAV1@@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CObject@@8
rdata$r	SEGMENT
??_R2CObject@@8 DD FLAT:??_R1A@?0A@EA@CObject@@8	; CObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObject@@8
rdata$r	SEGMENT
??_R3CObject@@8 DD 00H					; CObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
data$rs	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
data$rs	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$CList@PAVCDrawingDateData@@PAV1@@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_G?$CList@PAVCDrawingDateData@@PAV1@@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$CList@PAVCDrawingDateData@@PAV1@@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CList@PAVCDrawingDateData@@PAV1@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?DeleteAll@CDrawingDateDataList@@QAE_NXZ DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:___std_terminate
	DD	01H
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:___std_terminate
__ehfuncinfo$?DeleteAll@CDrawingDateDataList@@QAE_NXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?DeleteAll@CDrawingDateDataList@@QAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CDrawingDateDataList@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1CDrawingDateDataList@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CDrawingDateDataList@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GCDrawingDateData@@QAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:___std_terminate
	DD	01H
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:___std_terminate
__ehfuncinfo$??_GCDrawingDateData@@QAEPAXI@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??_GCDrawingDateData@@QAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$CList@PAVCDrawingHourData@@PAV1@@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_G?$CList@PAVCDrawingHourData@@PAV1@@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$CList@PAVCDrawingHourData@@PAV1@@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CList@PAVCDrawingHourData@@PAV1@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?DeleteAll@CDrawingDateData@@QAE_NXZ DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:___std_terminate
__ehfuncinfo$?DeleteAll@CDrawingDateData@@QAE_NXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?DeleteAll@CDrawingDateData@@QAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddDrawingHourData@CDrawingDateData@@QAE_NHHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddDrawingHourData@CDrawingDateData@@QAE_NHHH@Z$1
__ehfuncinfo$?AddDrawingHourData@CDrawingDateData@@QAE_NHHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddDrawingHourData@CDrawingDateData@@QAE_NHHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddDrawingHourData@CDrawingDateData@@QAE_NHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddDrawingHourData@CDrawingDateData@@QAE_NHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z$1
__ehfuncinfo$?AddDrawingHourData@CDrawingDateData@@QAE_NHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddDrawingHourData@CDrawingDateData@@QAE_NHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddDrawingHourData@CDrawingDateData@@QAE_NABVCDrawingTimeData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddDrawingHourData@CDrawingDateData@@QAE_NABVCDrawingTimeData@@@Z$1
__ehfuncinfo$?AddDrawingHourData@CDrawingDateData@@QAE_NABVCDrawingTimeData@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddDrawingHourData@CDrawingDateData@@QAE_NABVCDrawingTimeData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CDrawingDateData@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1CDrawingDateData@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CDrawingDateData@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CDrawingDateData@@QAE@HHABVCDrawingTimeData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CDrawingDateData@@QAE@HHABVCDrawingTimeData@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CDrawingDateData@@QAE@HHABVCDrawingTimeData@@@Z$1
__ehfuncinfo$??0CDrawingDateData@@QAE@HHABVCDrawingTimeData@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CDrawingDateData@@QAE@HHABVCDrawingTimeData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CDrawingDateData@@QAE@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCDrawingTimeData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CDrawingDateData@@QAE@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCDrawingTimeData@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CDrawingDateData@@QAE@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCDrawingTimeData@@@Z$1
__ehfuncinfo$??0CDrawingDateData@@QAE@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCDrawingTimeData@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CDrawingDateData@@QAE@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCDrawingTimeData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GCDrawingHourData@@QAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:___std_terminate
__ehfuncinfo$??_GCDrawingHourData@@QAEPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_GCDrawingHourData@@QAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$CList@PAVCDrawingTimeData@@PAV1@@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_G?$CList@PAVCDrawingTimeData@@PAV1@@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$CList@PAVCDrawingTimeData@@PAV1@@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CList@PAVCDrawingTimeData@@PAV1@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddDrawingTimeData@CDrawingHourData@@QAE_NHHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddDrawingTimeData@CDrawingHourData@@QAE_NHHH@Z$0
__ehfuncinfo$?AddDrawingTimeData@CDrawingHourData@@QAE_NHHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddDrawingTimeData@CDrawingHourData@@QAE_NHHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddDrawingTimeData@CDrawingHourData@@QAE_NHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddDrawingTimeData@CDrawingHourData@@QAE_NHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z$0
__ehfuncinfo$?AddDrawingTimeData@CDrawingHourData@@QAE_NHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddDrawingTimeData@CDrawingHourData@@QAE_NHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddDrawingTimeData@CDrawingHourData@@QAE_NABVCDrawingTimeData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddDrawingTimeData@CDrawingHourData@@QAE_NABVCDrawingTimeData@@@Z$0
__ehfuncinfo$?AddDrawingTimeData@CDrawingHourData@@QAE_NABVCDrawingTimeData@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddDrawingTimeData@CDrawingHourData@@QAE_NABVCDrawingTimeData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CDrawingHourData@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1CDrawingHourData@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CDrawingHourData@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4CDrawingTimeData@@QAEAAV0@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4CDrawingTimeData@@QAEAAV0@ABV0@@Z$0
__ehfuncinfo$??4CDrawingTimeData@@QAEAAV0@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4CDrawingTimeData@@QAEAAV0@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@PAVCDrawingDateData@@@@YGXAAVCArchive@@PAPAVCDrawingDateData@@H@Z
_TEXT	SEGMENT
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@PAVCDrawingDateData@@@@YGXAAVCArchive@@PAPAVCDrawingDateData@@H@Z PROC ; SerializeElements<CDrawingDateData *>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR _nCount$[ebp]
  0000b	57		 push	 edi
  0000c	85 f6		 test	 esi, esi
  0000e	74 08		 je	 SHORT $LN2@SerializeE
  00010	85 c9		 test	 ecx, ecx
  00012	0f 84 89 00 00
	00		 je	 $LN34@SerializeE
$LN2@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00018	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  0001b	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0001e	f7 d0		 not	 eax
  00020	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00022	74 3c		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;
; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )

  00024	85 f6		 test	 esi, esi
  00026	74 31		 je	 SHORT $LN8@SerializeE
  00028	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL5@SerializeE:

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00030	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00035	3b f3		 cmp	 esi, ebx
  00037	0f 42 de	 cmovb	 ebx, esi

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0003a	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
  00041	57		 push	 edi
  00042	51		 push	 ecx
  00043	8b ca		 mov	 ecx, edx
  00045	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;
; 87   : 			pData += nElementsToWrite;

  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  00050	03 cf		 add	 ecx, edi
  00052	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  00055	2b f3		 sub	 esi, ebx
  00057	75 d7		 jne	 SHORT $LL5@SerializeE
$LN8@SerializeE:
  00059	5f		 pop	 edi

; 105  : 		}
; 106  : 	}
; 107  : }

  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	5d		 pop	 ebp
  0005d	c2 0c 00	 ret	 12			; 0000000cH
$LN10@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  00060	85 f6		 test	 esi, esi
  00062	74 f5		 je	 SHORT $LN8@SerializeE
$LL7@SerializeE:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00064	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00069	3b f7		 cmp	 esi, edi
  0006b	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0006e	8d 1c bd 00 00
	00 00		 lea	 ebx, DWORD PTR [edi*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00075	53		 push	 ebx
  00076	51		 push	 ecx
  00077	8b ca		 mov	 ecx, edx
  00079	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0007e	3b c3		 cmp	 eax, ebx
  00080	75 16		 jne	 SHORT $LN23@SerializeE
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  00082	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00085	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;
; 104  : 			pData += nElementsToRead;

  00088	03 cb		 add	 ecx, ebx
  0008a	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  0008d	2b f7		 sub	 esi, edi
  0008f	75 d3		 jne	 SHORT $LL7@SerializeE

; 105  : 		}
; 106  : 	}
; 107  : }

  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	5d		 pop	 ebp
  00095	c2 0c 00	 ret	 12			; 0000000cH
$LN23@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 402  : 		AfxThrowArchiveException(CArchiveException::endOfFile);

  00098	6a 00		 push	 0
  0009a	6a 03		 push	 3
  0009c	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN34@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  000a1	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN32@SerializeE:
  000a6	cc		 int	 3
??$SerializeElements@PAVCDrawingDateData@@@@YGXAAVCArchive@@PAPAVCDrawingDateData@@H@Z ENDP ; SerializeElements<CDrawingDateData *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@PAVCDrawingHourData@@@@YGXAAVCArchive@@PAPAVCDrawingHourData@@H@Z
_TEXT	SEGMENT
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@PAVCDrawingHourData@@@@YGXAAVCArchive@@PAPAVCDrawingHourData@@H@Z PROC ; SerializeElements<CDrawingHourData *>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR _nCount$[ebp]
  0000b	57		 push	 edi
  0000c	85 f6		 test	 esi, esi
  0000e	74 08		 je	 SHORT $LN2@SerializeE
  00010	85 c9		 test	 ecx, ecx
  00012	0f 84 89 00 00
	00		 je	 $LN34@SerializeE
$LN2@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00018	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  0001b	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0001e	f7 d0		 not	 eax
  00020	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00022	74 3c		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;
; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )

  00024	85 f6		 test	 esi, esi
  00026	74 31		 je	 SHORT $LN8@SerializeE
  00028	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL5@SerializeE:

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00030	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00035	3b f3		 cmp	 esi, ebx
  00037	0f 42 de	 cmovb	 ebx, esi

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0003a	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
  00041	57		 push	 edi
  00042	51		 push	 ecx
  00043	8b ca		 mov	 ecx, edx
  00045	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;
; 87   : 			pData += nElementsToWrite;

  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  00050	03 cf		 add	 ecx, edi
  00052	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  00055	2b f3		 sub	 esi, ebx
  00057	75 d7		 jne	 SHORT $LL5@SerializeE
$LN8@SerializeE:
  00059	5f		 pop	 edi

; 105  : 		}
; 106  : 	}
; 107  : }

  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	5d		 pop	 ebp
  0005d	c2 0c 00	 ret	 12			; 0000000cH
$LN10@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  00060	85 f6		 test	 esi, esi
  00062	74 f5		 je	 SHORT $LN8@SerializeE
$LL7@SerializeE:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00064	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00069	3b f7		 cmp	 esi, edi
  0006b	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0006e	8d 1c bd 00 00
	00 00		 lea	 ebx, DWORD PTR [edi*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00075	53		 push	 ebx
  00076	51		 push	 ecx
  00077	8b ca		 mov	 ecx, edx
  00079	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0007e	3b c3		 cmp	 eax, ebx
  00080	75 16		 jne	 SHORT $LN23@SerializeE
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  00082	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00085	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;
; 104  : 			pData += nElementsToRead;

  00088	03 cb		 add	 ecx, ebx
  0008a	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  0008d	2b f7		 sub	 esi, edi
  0008f	75 d3		 jne	 SHORT $LL7@SerializeE

; 105  : 		}
; 106  : 	}
; 107  : }

  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	5d		 pop	 ebp
  00095	c2 0c 00	 ret	 12			; 0000000cH
$LN23@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 402  : 		AfxThrowArchiveException(CArchiveException::endOfFile);

  00098	6a 00		 push	 0
  0009a	6a 03		 push	 3
  0009c	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN34@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  000a1	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN32@SerializeE:
  000a6	cc		 int	 3
??$SerializeElements@PAVCDrawingHourData@@@@YGXAAVCArchive@@PAPAVCDrawingHourData@@H@Z ENDP ; SerializeElements<CDrawingHourData *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@PAVCDrawingTimeData@@@@YGXAAVCArchive@@PAPAVCDrawingTimeData@@H@Z
_TEXT	SEGMENT
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@PAVCDrawingTimeData@@@@YGXAAVCArchive@@PAPAVCDrawingTimeData@@H@Z PROC ; SerializeElements<CDrawingTimeData *>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR _nCount$[ebp]
  0000b	57		 push	 edi
  0000c	85 f6		 test	 esi, esi
  0000e	74 08		 je	 SHORT $LN2@SerializeE
  00010	85 c9		 test	 ecx, ecx
  00012	0f 84 89 00 00
	00		 je	 $LN34@SerializeE
$LN2@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00018	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  0001b	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0001e	f7 d0		 not	 eax
  00020	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00022	74 3c		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;
; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )

  00024	85 f6		 test	 esi, esi
  00026	74 31		 je	 SHORT $LN8@SerializeE
  00028	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL5@SerializeE:

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00030	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00035	3b f3		 cmp	 esi, ebx
  00037	0f 42 de	 cmovb	 ebx, esi

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0003a	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
  00041	57		 push	 edi
  00042	51		 push	 ecx
  00043	8b ca		 mov	 ecx, edx
  00045	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;
; 87   : 			pData += nElementsToWrite;

  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  00050	03 cf		 add	 ecx, edi
  00052	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  00055	2b f3		 sub	 esi, ebx
  00057	75 d7		 jne	 SHORT $LL5@SerializeE
$LN8@SerializeE:
  00059	5f		 pop	 edi

; 105  : 		}
; 106  : 	}
; 107  : }

  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	5d		 pop	 ebp
  0005d	c2 0c 00	 ret	 12			; 0000000cH
$LN10@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  00060	85 f6		 test	 esi, esi
  00062	74 f5		 je	 SHORT $LN8@SerializeE
$LL7@SerializeE:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00064	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00069	3b f7		 cmp	 esi, edi
  0006b	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0006e	8d 1c bd 00 00
	00 00		 lea	 ebx, DWORD PTR [edi*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00075	53		 push	 ebx
  00076	51		 push	 ecx
  00077	8b ca		 mov	 ecx, edx
  00079	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0007e	3b c3		 cmp	 eax, ebx
  00080	75 16		 jne	 SHORT $LN23@SerializeE
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  00082	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00085	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;
; 104  : 			pData += nElementsToRead;

  00088	03 cb		 add	 ecx, ebx
  0008a	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  0008d	2b f7		 sub	 esi, edi
  0008f	75 d3		 jne	 SHORT $LL7@SerializeE

; 105  : 		}
; 106  : 	}
; 107  : }

  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	5d		 pop	 ebp
  00095	c2 0c 00	 ret	 12			; 0000000cH
$LN23@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 402  : 		AfxThrowArchiveException(CArchiveException::endOfFile);

  00098	6a 00		 push	 0
  0009a	6a 03		 push	 3
  0009c	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN34@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  000a1	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN32@SerializeE:
  000a6	cc		 int	 3
??$SerializeElements@PAVCDrawingTimeData@@@@YGXAAVCArchive@@PAPAVCDrawingTimeData@@H@Z ENDP ; SerializeElements<CDrawingTimeData *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_G?$CList@PAVCDrawingDateData@@PAV1@@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$CList@PAVCDrawingDateData@@PAV1@@@UAEPAXI@Z PROC	; CList<CDrawingDateData *,CDrawingDateData *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$CList@PAVCDrawingDateData@@PAV1@@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00025	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 878  : {

  00028	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@PAVCDrawingDateData@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  00035	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  0003c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00043	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0004a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 872  : 	m_pBlocks->FreeDataChain();

  00051	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00056	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00059	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00060	a8 01		 test	 al, 1
  00062	74 2c		 je	 SHORT $LN22@scalar
  00064	a8 04		 test	 al, 4
  00066	75 1d		 jne	 SHORT $LN3@scalar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 112  : 	{ ::operator delete(p); }

  00068	56		 push	 esi
  00069	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006e	83 c4 04	 add	 esp, 4
  00071	8b c6		 mov	 eax, esi
  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007d	59		 pop	 ecx
  0007e	5e		 pop	 esi
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
$LN3@scalar:
  00085	6a 1c		 push	 28			; 0000001cH
  00087	56		 push	 esi
  00088	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0008d	83 c4 08	 add	 esp, 8
$LN22@scalar:
  00090	8b c6		 mov	 eax, esi
  00092	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00095	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009c	59		 pop	 ecx
  0009d	5e		 pop	 esi
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 04 00	 ret	 4
  000a4	cc		 int	 3
  000a5	cc		 int	 3
  000a6	cc		 int	 3
  000a7	cc		 int	 3
  000a8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_G?$CList@PAVCDrawingDateData@@PAV1@@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$CList@PAVCDrawingDateData@@PAV1@@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$CList@PAVCDrawingDateData@@PAV1@@@UAEPAXI@Z ENDP	; CList<CDrawingDateData *,CDrawingDateData *>::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CList@PAVCDrawingDateData@@PAV1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_nNewCount$1$ = -16					; size = 4
_newData$1 = -12					; size = 4
_pData$1$ = -8						; size = 4
_pNode$1$ = -8						; size = 4
_nElementsLeft$1$ = -4					; size = 4
_this$1$ = -4						; size = 4
_ar$ = 8						; size = 4
?Serialize@?$CList@PAVCDrawingDateData@@PAV1@@@UAEXAAVCArchive@@@Z PROC ; CList<CDrawingDateData *,CDrawingDateData *>::Serialize, COMDAT
; _this$ = ecx

; 1169 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00009	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1169 : {

  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00011	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00014	f7 d0		 not	 eax
  00016	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1174 : 	if (ar.IsStoring())

  00018	0f 84 ae 00 00
	00		 je	 $LN7@Serialize

; 1175 : 	{
; 1176 : 		ar.WriteCount(m_nCount);

  0001e	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00021	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00026	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00029	89 45 f8	 mov	 DWORD PTR _pNode$1$[ebp], eax
  0002c	85 c0		 test	 eax, eax
  0002e	0f 84 43 01 00
	00		 je	 $LN68@Serialize
$LL4@Serialize:

; 1178 : 		{
; 1179 : 			ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1180 : 			TYPE* pData;
; 1181 : 			/*
; 1182 : 			 * in some cases the & operator might be overloaded, and we cannot use it to obtain
; 1183 : 			 * the address of a given object.  We then use the following trick to get the address
; 1184 : 			 */
; 1185 : 			pData = reinterpret_cast< TYPE* >( &reinterpret_cast< int& >( static_cast< TYPE& >( pNode->data ) ) );

  00034	8d 70 08	 lea	 esi, DWORD PTR [eax+8]

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00037	85 f6		 test	 esi, esi
  00039	0f 84 4a 01 00
	00		 je	 $LN60@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00042	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00045	f7 d0		 not	 eax
  00047	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00049	74 33		 je	 SHORT $LN21@Serialize

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0004b	b8 01 00 00 00	 mov	 eax, 1
  00050	89 45 fc	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
$LL16@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00053	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00058	3b c3		 cmp	 eax, ebx
  0005a	0f 42 d8	 cmovb	 ebx, eax

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0005d	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
  00064	57		 push	 edi
  00065	56		 push	 esi
  00066	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _nElementsLeft$1$[ebp]

; 87   : 			pData += nElementsToWrite;

  0006e	03 f7		 add	 esi, edi
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00073	2b c3		 sub	 eax, ebx
  00075	89 45 fc	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
  00078	85 c0		 test	 eax, eax
  0007a	75 d7		 jne	 SHORT $LL16@Serialize

; 88   : 		}
; 89   : 	}

  0007c	eb 35		 jmp	 SHORT $LN2@Serialize
$LN21@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  0007e	bf 01 00 00 00	 mov	 edi, 1
$LL18@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00083	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00088	3b fb		 cmp	 edi, ebx
  0008a	0f 42 df	 cmovb	 ebx, edi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0008d	8d 04 9d 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00094	50		 push	 eax
  00095	56		 push	 esi
  00096	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0009b	8d 0c 9d 00 00
	00 00		 lea	 ecx, DWORD PTR [ebx*4]
  000a2	3b c1		 cmp	 eax, ecx
  000a4	0f 85 d6 00 00
	00		 jne	 $LN59@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  000aa	03 f1		 add	 esi, ecx
  000ac	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;

  000af	2b fb		 sub	 edi, ebx
  000b1	75 d0		 jne	 SHORT $LL18@Serialize
$LN2@Serialize:

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  000b3	8b 45 f8	 mov	 eax, DWORD PTR _pNode$1$[ebp]
  000b6	8b 00		 mov	 eax, DWORD PTR [eax]
  000b8	89 45 f8	 mov	 DWORD PTR _pNode$1$[ebp], eax
  000bb	85 c0		 test	 eax, eax
  000bd	0f 85 71 ff ff
	ff		 jne	 $LL4@Serialize

; 1197 : 		}
; 1198 : 	}
; 1199 : }

  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 04 00	 ret	 4
$LN7@Serialize:

; 1186 : 			SerializeElements<TYPE>(ar, pData, 1);
; 1187 : 		}
; 1188 : 	}
; 1189 : 	else
; 1190 : 	{
; 1191 : 		DWORD_PTR nNewCount = ar.ReadCount();

  000cc	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount

; 1192 : 		while (nNewCount--)

  000d1	85 c0		 test	 eax, eax
  000d3	0f 84 9e 00 00
	00		 je	 $LN68@Serialize
  000d9	0f 1f 80 00 00
	00 00		 npad	 7
$LL5@Serialize:
  000e0	48		 dec	 eax
  000e1	89 45 f0	 mov	 DWORD PTR _nNewCount$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  000e4	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  000e7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000ea	f7 d1		 not	 ecx
  000ec	f6 c1 01	 test	 cl, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  000ef	74 3a		 je	 SHORT $LN42@Serialize

; 79   : 		pData = pElements;

  000f1	8d 4d f4	 lea	 ecx, DWORD PTR _newData$1[ebp]
  000f4	bb 01 00 00 00	 mov	 ebx, 1
  000f9	89 4d f8	 mov	 DWORD PTR _pData$1$[ebp], ecx
  000fc	0f 1f 40 00	 npad	 4
$LL37@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00100	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00105	3b df		 cmp	 ebx, edi
  00107	0f 42 fb	 cmovb	 edi, ebx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0010a	8d 34 bd 00 00
	00 00		 lea	 esi, DWORD PTR [edi*4]
  00111	56		 push	 esi
  00112	51		 push	 ecx
  00113	8b c8		 mov	 ecx, eax
  00115	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 87   : 			pData += nElementsToWrite;

  0011a	8b 4d f8	 mov	 ecx, DWORD PTR _pData$1$[ebp]
  0011d	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  00120	03 ce		 add	 ecx, esi
  00122	89 4d f8	 mov	 DWORD PTR _pData$1$[ebp], ecx
  00125	2b df		 sub	 ebx, edi
  00127	75 d7		 jne	 SHORT $LL37@Serialize

; 88   : 		}
; 89   : 	}

  00129	eb 36		 jmp	 SHORT $LN40@Serialize
$LN42@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  0012b	be 01 00 00 00	 mov	 esi, 1

; 96   : 		pData = pElements;

  00130	8d 5d f4	 lea	 ebx, DWORD PTR _newData$1[ebp]
$LL39@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00133	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00138	3b f7		 cmp	 esi, edi
  0013a	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0013d	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00144	51		 push	 ecx
  00145	53		 push	 ebx
  00146	8b c8		 mov	 ecx, eax
  00148	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0014d	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
  00154	3b c1		 cmp	 eax, ecx
  00156	75 28		 jne	 SHORT $LN59@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 104  : 			pData += nElementsToRead;

  00158	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  0015b	03 d9		 add	 ebx, ecx
  0015d	2b f7		 sub	 esi, edi
  0015f	75 d2		 jne	 SHORT $LL39@Serialize
$LN40@Serialize:

; 1193 : 		{
; 1194 : 			TYPE newData[1];
; 1195 : 			SerializeElements<TYPE>(ar, newData, 1);
; 1196 : 			AddTail(newData[0]);

  00161	ff 75 f4	 push	 DWORD PTR _newData$1[ebp]
  00164	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00167	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCDrawingDateData@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingDateData@@@Z ; CList<CDrawingDateData *,CDrawingDateData *>::AddTail
  0016c	8b 45 f0	 mov	 eax, DWORD PTR _nNewCount$1$[ebp]
  0016f	85 c0		 test	 eax, eax
  00171	0f 85 69 ff ff
	ff		 jne	 $LL5@Serialize
$LN68@Serialize:
  00177	5f		 pop	 edi

; 1197 : 		}
; 1198 : 	}
; 1199 : }

  00178	5e		 pop	 esi
  00179	5b		 pop	 ebx
  0017a	8b e5		 mov	 esp, ebp
  0017c	5d		 pop	 ebp
  0017d	c2 04 00	 ret	 4
$LN59@Serialize:
  00180	6a 00		 push	 0
  00182	6a 03		 push	 3
  00184	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN60@Serialize:

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00189	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN85@Serialize:
  0018e	cc		 int	 3
?Serialize@?$CList@PAVCDrawingDateData@@PAV1@@@UAEXAAVCArchive@@@Z ENDP ; CList<CDrawingDateData *,CDrawingDateData *>::Serialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??1?$CList@PAVCDrawingDateData@@PAV1@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CList@PAVCDrawingDateData@@PAV1@@@UAE@XZ PROC	; CList<CDrawingDateData *,CDrawingDateData *>::~CList<CDrawingDateData *,CDrawingDateData *>, COMDAT
; _this$ = ecx

; 878  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CList@PAVCDrawingDateData@@PAV1@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 872  : 	m_pBlocks->FreeDataChain();

  00025	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 878  : {

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@PAVCDrawingDateData@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  0002e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00035	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0003c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00043	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 872  : 	m_pBlocks->FreeDataChain();

  0004a	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0004f	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 879  : 	RemoveAll();
; 880  : 	ASSERT(m_nCount == 0);
; 881  : }

  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	5e		 pop	 esi
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
  00066	cc		 int	 3
  00067	cc		 int	 3
  00068	cc		 int	 3
  00069	cc		 int	 3
  0006a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CList@PAVCDrawingDateData@@PAV1@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CList@PAVCDrawingDateData@@PAV1@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CList@PAVCDrawingDateData@@PAV1@@@UAE@XZ ENDP	; CList<CDrawingDateData *,CDrawingDateData *>::~CList<CDrawingDateData *,CDrawingDateData *>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?NewNode@?$CList@PAVCDrawingDateData@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z
_TEXT	SEGMENT
_pPrev$ = 8						; size = 4
_pNext$ = 12						; size = 4
?NewNode@?$CList@PAVCDrawingDateData@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z PROC ; CList<CDrawingDateData *,CDrawingDateData *>::NewNode, COMDAT
; _this$ = ecx

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 902  : 	if (m_pNodeFree == NULL)

  00006	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0000a	75 34		 jne	 SHORT $LN7@NewNode

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  0000c	6a 0c		 push	 12			; 0000000cH
  0000e	ff 76 18	 push	 DWORD PTR [esi+24]
  00011	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001a	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0001d	83 c0 08	 add	 eax, 8
  00020	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  00023	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00026	83 c0 f4	 add	 eax, -12		; fffffff4H

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00029	83 c2 ff	 add	 edx, -1
  0002c	78 12		 js	 SHORT $LN7@NewNode
  0002e	66 90		 npad	 2
$LL4@NewNode:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	89 08		 mov	 DWORD PTR [eax], ecx

; 915  : 			m_pNodeFree = pNode;

  00035	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00038	83 e8 0c	 sub	 eax, 12			; 0000000cH
  0003b	83 ea 01	 sub	 edx, 1
  0003e	79 f0		 jns	 SHORT $LL4@NewNode
$LN7@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00040	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00043	85 c0		 test	 eax, eax
  00045	74 18		 je	 SHORT $LN17@NewNode

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00047	8b 08		 mov	 ecx, DWORD PTR [eax]
  00049	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 922  : 	pNode->pPrev = pPrev;

  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _pPrev$[ebp]
  0004f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 923  : 	pNode->pNext = pNext;

  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _pNext$[ebp]
  00055	89 08		 mov	 DWORD PTR [eax], ecx

; 924  : 	m_nCount++;

  00057	ff 46 0c	 inc	 DWORD PTR [esi+12]

; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;
; 930  : #pragma pop_macro("new")
; 931  : 	return pNode;

  0005a	5e		 pop	 esi

; 932  : }

  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
$LN17@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  0005f	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN15@NewNode:
  00064	cc		 int	 3
?NewNode@?$CList@PAVCDrawingDateData@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z ENDP ; CList<CDrawingDateData *,CDrawingDateData *>::NewNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?FindIndex@?$CList@PAVCDrawingDateData@@PAV1@@@QBEPAU__POSITION@@H@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?FindIndex@?$CList@PAVCDrawingDateData@@PAV1@@@QBEPAU__POSITION@@H@Z PROC ; CList<CDrawingDateData *,CDrawingDateData *>::FindIndex, COMDAT
; _this$ = ecx

; 1130 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1131 : 	ASSERT_VALID(this);
; 1132 : 
; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00003	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00006	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00009	7d 14		 jge	 SHORT $LN5@FindIndex
  0000b	85 d2		 test	 edx, edx
  0000d	78 10		 js	 SHORT $LN5@FindIndex

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0000f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1137 : 	while (nIndex--)

  00012	74 0d		 je	 SHORT $LN1@FindIndex
$LL2@FindIndex:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	83 ea 01	 sub	 edx, 1
  00019	75 f9		 jne	 SHORT $LL2@FindIndex

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;
; 1143 : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
$LN5@FindIndex:

; 1134 : 		return NULL;  // went too far

  0001f	33 c0		 xor	 eax, eax
$LN1@FindIndex:

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;
; 1143 : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?FindIndex@?$CList@PAVCDrawingDateData@@PAV1@@@QBEPAU__POSITION@@H@Z ENDP ; CList<CDrawingDateData *,CDrawingDateData *>::FindIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAll@?$CList@PAVCDrawingDateData@@PAV1@@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@?$CList@PAVCDrawingDateData@@PAV1@@@QAEXXZ PROC ; CList<CDrawingDateData *,CDrawingDateData *>::RemoveAll, COMDAT
; _this$ = ecx

; 862  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 863  : 	ASSERT_VALID(this);
; 864  : 
; 865  : 	// destroy elements
; 866  : 	CNode* pNode;
; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)
; 868  : 		pNode->data.~TYPE();
; 869  : 
; 870  : 	m_nCount = 0;
; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 872  : 	m_pBlocks->FreeDataChain();

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0000d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00014	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0001b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00022	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00027	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0002e	5e		 pop	 esi

; 874  : }

  0002f	c3		 ret	 0
?RemoveAll@?$CList@PAVCDrawingDateData@@PAV1@@@QAEXXZ ENDP ; CList<CDrawingDateData *,CDrawingDateData *>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?AddTail@?$CList@PAVCDrawingDateData@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingDateData@@@Z
_TEXT	SEGMENT
_newElement$ = 8					; size = 4
?AddTail@?$CList@PAVCDrawingDateData@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingDateData@@@Z PROC ; CList<CDrawingDateData *,CDrawingDateData *>::AddTail, COMDAT
; _this$ = ecx

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 902  : 	if (m_pNodeFree == NULL)

  00007	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0

; 966  : 	ASSERT_VALID(this);
; 967  : 
; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  0000b	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 902  : 	if (m_pNodeFree == NULL)

  0000e	75 32		 jne	 SHORT $LN11@AddTail

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  00010	6a 0c		 push	 12			; 0000000cH
  00012	ff 76 18	 push	 DWORD PTR [esi+24]
  00015	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001e	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00021	83 c0 08	 add	 eax, 8
  00024	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00027	83 c2 ff	 add	 edx, -1
  0002a	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  0002d	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  00030	78 10		 js	 SHORT $LN11@AddTail
$LL8@AddTail:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00032	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00035	89 01		 mov	 DWORD PTR [ecx], eax

; 915  : 			m_pNodeFree = pNode;

  00037	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0003a	83 e9 0c	 sub	 ecx, 12			; 0000000cH
  0003d	83 ea 01	 sub	 edx, 1
  00040	79 f0		 jns	 SHORT $LL8@AddTail
$LN11@AddTail:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00042	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00045	85 c9		 test	 ecx, ecx
  00047	74 39		 je	 SHORT $LN22@AddTail

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00049	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004b	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 969  : 	pNewNode->data = newElement;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]

; 922  : 	pNode->pPrev = pPrev;

  00051	89 79 04	 mov	 DWORD PTR [ecx+4], edi

; 923  : 	pNode->pNext = pNext;

  00054	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 924  : 	m_nCount++;

  0005a	ff 46 0c	 inc	 DWORD PTR [esi+12]

; 969  : 	pNewNode->data = newElement;

  0005d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 970  : 	if (m_pNodeTail != NULL)

  00060	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00063	85 c0		 test	 eax, eax
  00065	74 0d		 je	 SHORT $LN2@AddTail

; 971  : 		m_pNodeTail->pNext = pNewNode;

  00067	89 08		 mov	 DWORD PTR [eax], ecx

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00069	8b c1		 mov	 eax, ecx
  0006b	5f		 pop	 edi
  0006c	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0006f	5e		 pop	 esi

; 976  : }

  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
$LN2@AddTail:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00074	5f		 pop	 edi
  00075	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00078	8b c1		 mov	 eax, ecx
  0007a	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0007d	5e		 pop	 esi

; 976  : }

  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
$LN22@AddTail:

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00082	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN20@AddTail:
  00087	cc		 int	 3
?AddTail@?$CList@PAVCDrawingDateData@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingDateData@@@Z ENDP ; CList<CDrawingDateData *,CDrawingDateData *>::AddTail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??0?$CList@PAVCDrawingDateData@@PAV1@@@QAE@H@Z
_TEXT	SEGMENT
_nBlockSize$ = 8					; size = 4
??0?$CList@PAVCDrawingDateData@@PAV1@@@QAE@H@Z PROC	; CList<CDrawingDateData *,CDrawingDateData *>::CList<CDrawingDateData *,CDrawingDateData *>, COMDAT
; _this$ = ecx

; 851  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;
; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 856  : 	m_pBlocks = NULL;
; 857  : 	m_nBlockSize = nBlockSize;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nBlockSize$[ebp]
  00006	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 858  : }

  00009	8b c1		 mov	 eax, ecx
  0000b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CList@PAVCDrawingDateData@@PAV1@@@6B@
  00011	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00018	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0001f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00026	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0002d	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??0?$CList@PAVCDrawingDateData@@PAV1@@@QAE@H@Z ENDP	; CList<CDrawingDateData *,CDrawingDateData *>::CList<CDrawingDateData *,CDrawingDateData *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetNext_DateData@CDrawingDateDataList@@QBEPAVCDrawingDateData@@AAPAU__POSITION@@@Z
_TEXT	SEGMENT
_pos$ = 8						; size = 4
?GetNext_DateData@CDrawingDateDataList@@QBEPAVCDrawingDateData@@AAPAU__POSITION@@@Z PROC ; CDrawingDateDataList::GetNext_DateData, COMDAT
; _this$ = ecx

; 427  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 428  : 	if(pos == NULL)

  00003	8b 55 08	 mov	 edx, DWORD PTR _pos$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	85 c0		 test	 eax, eax
  0000a	75 04		 jne	 SHORT $LN2@GetNext_Da

; 431  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
$LN2@GetNext_Da:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 819  : 		rPosition = (POSITION) pNode->pNext;

  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	89 0a		 mov	 DWORD PTR [edx], ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 430  : 	return m_drawingDateDataList.GetNext(pos);

  00014	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 431  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?GetNext_DateData@CDrawingDateDataList@@QBEPAVCDrawingDateData@@AAPAU__POSITION@@@Z ENDP ; CDrawingDateDataList::GetNext_DateData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetDateData@CDrawingDateDataList@@QBEPAVCDrawingDateData@@ABQAU__POSITION@@@Z
_TEXT	SEGMENT
_pos$ = 8						; size = 4
?GetDateData@CDrawingDateDataList@@QBEPAVCDrawingDateData@@ABQAU__POSITION@@@Z PROC ; CDrawingDateDataList::GetDateData, COMDAT
; _this$ = ecx

; 420  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 421  : 	if(pos == NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _pos$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	85 c0		 test	 eax, eax
  0000a	75 04		 jne	 SHORT $LN2@GetDateDat

; 424  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
$LN2@GetDateDat:

; 422  : 		return NULL;
; 423  : 	return m_drawingDateDataList.GetAt(pos);

  00010	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 424  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?GetDateData@CDrawingDateDataList@@QBEPAVCDrawingDateData@@ABQAU__POSITION@@@Z ENDP ; CDrawingDateDataList::GetDateData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetDateData@CDrawingDateDataList@@QBEPAVCDrawingDateData@@H@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?GetDateData@CDrawingDateDataList@@QBEPAVCDrawingDateData@@H@Z PROC ; CDrawingDateDataList::GetDateData, COMDAT
; _this$ = ecx

; 415  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 416  : 	return GetDateData(m_drawingDateDataList.FindIndex(nIndex));

  00003	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00006	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  00009	7d 1b		 jge	 SHORT $LN17@GetDateDat
  0000b	85 c0		 test	 eax, eax
  0000d	78 17		 js	 SHORT $LN17@GetDateDat

; 1134 : 		return NULL;  // went too far
; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0000f	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 1137 : 	while (nIndex--)

  00012	74 07		 je	 SHORT $LN13@GetDateDat
$LL4@GetDateDat:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00014	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00016	83 e8 01	 sub	 eax, 1
  00019	75 f9		 jne	 SHORT $LL4@GetDateDat
$LN13@GetDateDat:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 421  : 	if(pos == NULL)

  0001b	85 c9		 test	 ecx, ecx
  0001d	74 07		 je	 SHORT $LN17@GetDateDat

; 416  : 	return GetDateData(m_drawingDateDataList.FindIndex(nIndex));

  0001f	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 417  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN17@GetDateDat:

; 416  : 	return GetDateData(m_drawingDateDataList.FindIndex(nIndex));

  00026	33 c0		 xor	 eax, eax

; 417  : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?GetDateData@CDrawingDateDataList@@QBEPAVCDrawingDateData@@H@Z ENDP ; CDrawingDateDataList::GetDateData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetTailDateDataPosition@CDrawingDateDataList@@QBEPAU__POSITION@@XZ
_TEXT	SEGMENT
?GetTailDateDataPosition@CDrawingDateDataList@@QBEPAU__POSITION@@XZ PROC ; CDrawingDateDataList::GetTailDateDataPosition, COMDAT
; _this$ = ecx

; 411  : 	return m_drawingDateDataList.GetTailPosition();

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 412  : }

  00003	c3		 ret	 0
?GetTailDateDataPosition@CDrawingDateDataList@@QBEPAU__POSITION@@XZ ENDP ; CDrawingDateDataList::GetTailDateDataPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetHeadDateDataPosition@CDrawingDateDataList@@QBEPAU__POSITION@@XZ
_TEXT	SEGMENT
?GetHeadDateDataPosition@CDrawingDateDataList@@QBEPAU__POSITION@@XZ PROC ; CDrawingDateDataList::GetHeadDateDataPosition, COMDAT
; _this$ = ecx

; 406  : 	return m_drawingDateDataList.GetHeadPosition();

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 407  : }

  00003	c3		 ret	 0
?GetHeadDateDataPosition@CDrawingDateDataList@@QBEPAU__POSITION@@XZ ENDP ; CDrawingDateDataList::GetHeadDateDataPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetDateDataCount@CDrawingDateDataList@@QBEHXZ
_TEXT	SEGMENT
?GetDateDataCount@CDrawingDateDataList@@QBEHXZ PROC	; CDrawingDateDataList::GetDateDataCount, COMDAT
; _this$ = ecx

; 401  : 	return m_drawingDateDataList.GetCount();

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 402  : }

  00003	c3		 ret	 0
?GetDateDataCount@CDrawingDateDataList@@QBEHXZ ENDP	; CDrawingDateDataList::GetDateDataCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetDrawingDateDataList@CDrawingDateDataList@@QAEPAV?$CList@PAVCDrawingDateData@@PAV1@@@XZ
_TEXT	SEGMENT
?GetDrawingDateDataList@CDrawingDateDataList@@QAEPAV?$CList@PAVCDrawingDateData@@PAV1@@@XZ PROC ; CDrawingDateDataList::GetDrawingDateDataList, COMDAT
; _this$ = ecx

; 396  : 	return &m_drawingDateDataList;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 397  : }

  00003	c3		 ret	 0
?GetDrawingDateDataList@CDrawingDateDataList@@QAEPAV?$CList@PAVCDrawingDateData@@PAV1@@@XZ ENDP ; CDrawingDateDataList::GetDrawingDateDataList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?IsDailyDrawing@CDrawingDateDataList@@QBE_NXZ
_TEXT	SEGMENT
?IsDailyDrawing@CDrawingDateDataList@@QBE_NXZ PROC	; CDrawingDateDataList::IsDailyDrawing, COMDAT
; _this$ = ecx

; 391  : 	return m_bIsDailyDrawing;

  00000	8a 01		 mov	 al, BYTE PTR [ecx]

; 392  : }

  00002	c3		 ret	 0
?IsDailyDrawing@CDrawingDateDataList@@QBE_NXZ ENDP	; CDrawingDateDataList::IsDailyDrawing
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?SetDailyDrawing@CDrawingDateDataList@@QAEX_N@Z
_TEXT	SEGMENT
_bIsDailyDrawing$ = 8					; size = 1
?SetDailyDrawing@CDrawingDateDataList@@QAEX_N@Z PROC	; CDrawingDateDataList::SetDailyDrawing, COMDAT
; _this$ = ecx

; 384  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 385  : 	m_bIsDailyDrawing = bIsDailyDrawing;

  00003	8a 45 08	 mov	 al, BYTE PTR _bIsDailyDrawing$[ebp]
  00006	88 01		 mov	 BYTE PTR [ecx], al

; 386  : }

  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
?SetDailyDrawing@CDrawingDateDataList@@QAEX_N@Z ENDP	; CDrawingDateDataList::SetDailyDrawing
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?DeleteAll@CDrawingDateDataList@@QAE_NXZ
_TEXT	SEGMENT
_this$1$ = -28						; size = 4
_pos$1$ = -24						; size = 4
$T2 = -20						; size = 4
_pos$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?DeleteAll@CDrawingDateDataList@@QAE_NXZ PROC		; CDrawingDateDataList::DeleteAll, COMDAT
; _this$ = ecx

; 370  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?DeleteAll@CDrawingDateDataList@@QAE_NXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	89 75 e4	 mov	 DWORD PTR _this$1$[ebp], esi

; 371  : 	if(m_drawingDateDataList.GetCount() <= 0)

  0002d	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  00031	7f 14		 jg	 SHORT $LN4@DeleteAll

; 372  : 		return false;

  00033	32 c0		 xor	 al, al

; 380  : }

  00035	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00038	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003f	59		 pop	 ecx
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
$LN4@DeleteAll:

; 373  : 
; 374  : 	POSITION pos = m_drawingDateDataList.GetHeadPosition();

  00047	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]

; 375  : 	while(pos != NULL){

  0004a	85 db		 test	 ebx, ebx
  0004c	0f 84 78 01 00
	00		 je	 $LN74@DeleteAll
$LL2@DeleteAll:

; 376  : 		delete m_drawingDateDataList.GetNext(pos);

  00052	8b 73 08	 mov	 esi, DWORD PTR [ebx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00055	8b 1b		 mov	 ebx, DWORD PTR [ebx]
  00057	89 5d e8	 mov	 DWORD PTR _pos$1$[ebp], ebx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 376  : 		delete m_drawingDateDataList.GetNext(pos);

  0005a	89 75 ec	 mov	 DWORD PTR $T2[ebp], esi
  0005d	85 f6		 test	 esi, esi
  0005f	0f 84 5a 01 00
	00		 je	 $LN11@DeleteAll

; 257  : 	if(m_hourDataList.GetCount() <= 0)

  00065	83 7e 18 00	 cmp	 DWORD PTR [esi+24], 0

; 218  : {

  00069	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 257  : 	if(m_hourDataList.GetCount() <= 0)

  00070	0f 8e f8 00 00
	00		 jle	 $LN99@DeleteAll

; 258  : 		return false;
; 259  : 
; 260  : 	POSITION pos = m_hourDataList.GetHeadPosition();

  00076	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]

; 261  : 	while(pos != NULL){

  00079	85 db		 test	 ebx, ebx
  0007b	0f 84 bf 00 00
	00		 je	 $LN61@DeleteAll
$LL17@DeleteAll:

; 262  : 		delete m_hourDataList.GetNext(pos);

  00081	8b 73 08	 mov	 esi, DWORD PTR [ebx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00084	8b 1b		 mov	 ebx, DWORD PTR [ebx]
  00086	89 5d f0	 mov	 DWORD PTR _pos$1$[ebp], ebx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 262  : 		delete m_hourDataList.GetNext(pos);

  00089	85 f6		 test	 esi, esi
  0008b	0f 84 a4 00 00
	00		 je	 $LN26@DeleteAll

; 117  : 	if(m_timeDataList.GetCount() <= 0)

  00091	83 7e 0c 00	 cmp	 DWORD PTR [esi+12], 0

; 84   : {

  00095	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 117  : 	if(m_timeDataList.GetCount() <= 0)

  00099	7e 56		 jle	 SHORT $LN108@DeleteAll

; 118  : 		return false;
; 119  : 
; 120  : 	POSITION pos = m_timeDataList.GetHeadPosition();

  0009b	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]

; 121  : 	while(pos != NULL){

  0009e	85 ff		 test	 edi, edi
  000a0	74 24		 je	 SHORT $LN48@DeleteAll
$LL32@DeleteAll:

; 122  : 		delete m_timeDataList.GetNext(pos);

  000a2	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  000a5	8b 3f		 mov	 edi, DWORD PTR [edi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 122  : 		delete m_timeDataList.GetNext(pos);

  000a7	85 db		 test	 ebx, ebx
  000a9	74 14		 je	 SHORT $LN41@DeleteAll
  000ab	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000b4	6a 10		 push	 16			; 00000010H
  000b6	53		 push	 ebx
  000b7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000bc	83 c4 08	 add	 esp, 8
$LN41@DeleteAll:

; 121  : 	while(pos != NULL){

  000bf	85 ff		 test	 edi, edi
  000c1	75 df		 jne	 SHORT $LL32@DeleteAll
  000c3	8b 5d f0	 mov	 ebx, DWORD PTR _pos$1$[ebp]
$LN48@DeleteAll:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  000c6	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000c9	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  000d0	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  000d7	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  000de	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  000e5	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  000ea	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
$LN108@DeleteAll:

; 872  : 	m_pBlocks->FreeDataChain();

  000f1	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 878  : {

  000f4	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000f8	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@PAVCDrawingTimeData@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  000fe	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00105	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0010c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00113	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 872  : 	m_pBlocks->FreeDataChain();

  0011a	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain
  0011f	6a 1c		 push	 28			; 0000001cH
  00121	56		 push	 esi

; 873  : 	m_pBlocks = NULL;

  00122	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 86   : }

  00129	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0012d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00132	83 c4 08	 add	 esp, 8
$LN26@DeleteAll:

; 261  : 	while(pos != NULL){

  00135	85 db		 test	 ebx, ebx
  00137	0f 85 44 ff ff
	ff		 jne	 $LL17@DeleteAll
  0013d	8b 75 ec	 mov	 esi, DWORD PTR $T2[ebp]
$LN61@DeleteAll:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00140	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00143	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  0014a	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00151	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00158	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0015f	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain
  00164	8b 5d e8	 mov	 ebx, DWORD PTR _pos$1$[ebp]

; 873  : 	m_pBlocks = NULL;

  00167	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
$LN99@DeleteAll:

; 872  : 	m_pBlocks->FreeDataChain();

  0016e	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]

; 878  : {

  00171	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00175	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], OFFSET ??_7?$CList@PAVCDrawingHourData@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  0017c	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00183	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  0018a	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00191	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 872  : 	m_pBlocks->FreeDataChain();

  00198	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 220  : }

  0019d	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 873  : 	m_pBlocks = NULL;

  001a0	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 220  : }

  001a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  001ad	6a 28		 push	 40			; 00000028H
  001af	56		 push	 esi
  001b0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001b7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001bc	83 c4 08	 add	 esp, 8
$LN11@DeleteAll:

; 375  : 	while(pos != NULL){

  001bf	85 db		 test	 ebx, ebx
  001c1	0f 85 8b fe ff
	ff		 jne	 $LL2@DeleteAll
  001c7	8b 75 e4	 mov	 esi, DWORD PTR _this$1$[ebp]
$LN74@DeleteAll:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  001ca	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  001cd	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  001d4	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  001db	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  001e2	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  001e9	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  001ee	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 379  : 	return true;

  001f5	b0 01		 mov	 al, 1

; 380  : }

  001f7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001fa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00201	59		 pop	 ecx
  00202	5f		 pop	 edi
  00203	5e		 pop	 esi
  00204	5b		 pop	 ebx
  00205	8b e5		 mov	 esp, ebp
  00207	5d		 pop	 ebp
  00208	c3		 ret	 0
  00209	cc		 int	 3
  0020a	cc		 int	 3
  0020b	cc		 int	 3
  0020c	cc		 int	 3
  0020d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?DeleteAll@CDrawingDateDataList@@QAE_NXZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?DeleteAll@CDrawingDateDataList@@QAE_NXZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?DeleteAll@CDrawingDateDataList@@QAE_NXZ ENDP		; CDrawingDateDataList::DeleteAll
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?AddDrawingDateData@CDrawingDateDataList@@QAE_NPAVCDrawingDateData@@@Z
_TEXT	SEGMENT
_pDrawingDateData$ = 8					; size = 4
?AddDrawingDateData@CDrawingDateDataList@@QAE_NPAVCDrawingDateData@@@Z PROC ; CDrawingDateDataList::AddDrawingDateData, COMDAT
; _this$ = ecx

; 361  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 362  : 	if(pDrawingDateData == NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _pDrawingDateData$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 06		 jne	 SHORT $LN2@AddDrawing

; 363  : 		return false;

  0000a	32 c0		 xor	 al, al

; 367  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
$LN2@AddDrawing:

; 364  : 
; 365  : 	m_drawingDateDataList.AddTail(pDrawingDateData);

  00010	50		 push	 eax
  00011	83 c1 04	 add	 ecx, 4
  00014	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCDrawingDateData@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingDateData@@@Z ; CList<CDrawingDateData *,CDrawingDateData *>::AddTail

; 366  : 	return true;

  00019	b0 01		 mov	 al, 1

; 367  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?AddDrawingDateData@CDrawingDateDataList@@QAE_NPAVCDrawingDateData@@@Z ENDP ; CDrawingDateDataList::AddDrawingDateData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ??1CDrawingDateDataList@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CDrawingDateDataList@@QAE@XZ PROC			; CDrawingDateDataList::~CDrawingDateDataList, COMDAT
; _this$ = ecx

; 355  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CDrawingDateDataList@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 356  : 	DeleteAll();

  00025	e8 00 00 00 00	 call	 ?DeleteAll@CDrawingDateDataList@@QAE_NXZ ; CDrawingDateDataList::DeleteAll
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  0002a	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]

; 878  : {

  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$CList@PAVCDrawingDateData@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  0003b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00042	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00049	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00050	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 872  : 	m_pBlocks->FreeDataChain();

  00057	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0005c	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 357  : }

  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	5e		 pop	 esi
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
  00073	cc		 int	 3
  00074	cc		 int	 3
  00075	cc		 int	 3
  00076	cc		 int	 3
  00077	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CDrawingDateDataList@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CDrawingDateDataList@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CDrawingDateDataList@@QAE@XZ ENDP			; CDrawingDateDataList::~CDrawingDateDataList
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ??0CDrawingDateDataList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CDrawingDateDataList@@QAE@XZ PROC			; CDrawingDateDataList::CDrawingDateDataList, COMDAT
; _this$ = ecx

; 351  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 350  : 	m_bIsDailyDrawing(true)

  00004	c6 01 01	 mov	 BYTE PTR [ecx], 1

; 352  : }

  00007	8b c1		 mov	 eax, ecx
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 851  : {

  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_7?$CList@PAVCDrawingDateData@@PAV1@@@6B@

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;

  00013	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  0001a	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00021	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00028	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 856  : 	m_pBlocks = NULL;

  0002f	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 857  : 	m_nBlockSize = nBlockSize;

  00036	c7 41 1c 0a 00
	00 00		 mov	 DWORD PTR [ecx+28], 10	; 0000000aH
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 352  : }

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??0CDrawingDateDataList@@QAE@XZ ENDP			; CDrawingDateDataList::CDrawingDateDataList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_G?$CList@PAVCDrawingHourData@@PAV1@@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$CList@PAVCDrawingHourData@@PAV1@@@UAEPAXI@Z PROC	; CList<CDrawingHourData *,CDrawingHourData *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$CList@PAVCDrawingHourData@@PAV1@@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00025	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 878  : {

  00028	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@PAVCDrawingHourData@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  00035	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  0003c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00043	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0004a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 872  : 	m_pBlocks->FreeDataChain();

  00051	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00056	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00059	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00060	a8 01		 test	 al, 1
  00062	74 2c		 je	 SHORT $LN22@scalar
  00064	a8 04		 test	 al, 4
  00066	75 1d		 jne	 SHORT $LN3@scalar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 112  : 	{ ::operator delete(p); }

  00068	56		 push	 esi
  00069	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006e	83 c4 04	 add	 esp, 4
  00071	8b c6		 mov	 eax, esi
  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007d	59		 pop	 ecx
  0007e	5e		 pop	 esi
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
$LN3@scalar:
  00085	6a 1c		 push	 28			; 0000001cH
  00087	56		 push	 esi
  00088	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0008d	83 c4 08	 add	 esp, 8
$LN22@scalar:
  00090	8b c6		 mov	 eax, esi
  00092	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00095	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009c	59		 pop	 ecx
  0009d	5e		 pop	 esi
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 04 00	 ret	 4
  000a4	cc		 int	 3
  000a5	cc		 int	 3
  000a6	cc		 int	 3
  000a7	cc		 int	 3
  000a8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_G?$CList@PAVCDrawingHourData@@PAV1@@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$CList@PAVCDrawingHourData@@PAV1@@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$CList@PAVCDrawingHourData@@PAV1@@@UAEPAXI@Z ENDP	; CList<CDrawingHourData *,CDrawingHourData *>::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CList@PAVCDrawingHourData@@PAV1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_nNewCount$1$ = -16					; size = 4
_newData$1 = -12					; size = 4
_pData$1$ = -8						; size = 4
_pNode$1$ = -8						; size = 4
_nElementsLeft$1$ = -4					; size = 4
_this$1$ = -4						; size = 4
_ar$ = 8						; size = 4
?Serialize@?$CList@PAVCDrawingHourData@@PAV1@@@UAEXAAVCArchive@@@Z PROC ; CList<CDrawingHourData *,CDrawingHourData *>::Serialize, COMDAT
; _this$ = ecx

; 1169 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00009	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1169 : {

  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00011	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00014	f7 d0		 not	 eax
  00016	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1174 : 	if (ar.IsStoring())

  00018	0f 84 ae 00 00
	00		 je	 $LN7@Serialize

; 1175 : 	{
; 1176 : 		ar.WriteCount(m_nCount);

  0001e	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00021	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00026	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00029	89 45 f8	 mov	 DWORD PTR _pNode$1$[ebp], eax
  0002c	85 c0		 test	 eax, eax
  0002e	0f 84 43 01 00
	00		 je	 $LN68@Serialize
$LL4@Serialize:

; 1178 : 		{
; 1179 : 			ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1180 : 			TYPE* pData;
; 1181 : 			/*
; 1182 : 			 * in some cases the & operator might be overloaded, and we cannot use it to obtain
; 1183 : 			 * the address of a given object.  We then use the following trick to get the address
; 1184 : 			 */
; 1185 : 			pData = reinterpret_cast< TYPE* >( &reinterpret_cast< int& >( static_cast< TYPE& >( pNode->data ) ) );

  00034	8d 70 08	 lea	 esi, DWORD PTR [eax+8]

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00037	85 f6		 test	 esi, esi
  00039	0f 84 4a 01 00
	00		 je	 $LN60@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00042	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00045	f7 d0		 not	 eax
  00047	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00049	74 33		 je	 SHORT $LN21@Serialize

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0004b	b8 01 00 00 00	 mov	 eax, 1
  00050	89 45 fc	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
$LL16@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00053	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00058	3b c3		 cmp	 eax, ebx
  0005a	0f 42 d8	 cmovb	 ebx, eax

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0005d	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
  00064	57		 push	 edi
  00065	56		 push	 esi
  00066	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _nElementsLeft$1$[ebp]

; 87   : 			pData += nElementsToWrite;

  0006e	03 f7		 add	 esi, edi
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00073	2b c3		 sub	 eax, ebx
  00075	89 45 fc	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
  00078	85 c0		 test	 eax, eax
  0007a	75 d7		 jne	 SHORT $LL16@Serialize

; 88   : 		}
; 89   : 	}

  0007c	eb 35		 jmp	 SHORT $LN2@Serialize
$LN21@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  0007e	bf 01 00 00 00	 mov	 edi, 1
$LL18@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00083	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00088	3b fb		 cmp	 edi, ebx
  0008a	0f 42 df	 cmovb	 ebx, edi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0008d	8d 04 9d 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00094	50		 push	 eax
  00095	56		 push	 esi
  00096	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0009b	8d 0c 9d 00 00
	00 00		 lea	 ecx, DWORD PTR [ebx*4]
  000a2	3b c1		 cmp	 eax, ecx
  000a4	0f 85 d6 00 00
	00		 jne	 $LN59@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  000aa	03 f1		 add	 esi, ecx
  000ac	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;

  000af	2b fb		 sub	 edi, ebx
  000b1	75 d0		 jne	 SHORT $LL18@Serialize
$LN2@Serialize:

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  000b3	8b 45 f8	 mov	 eax, DWORD PTR _pNode$1$[ebp]
  000b6	8b 00		 mov	 eax, DWORD PTR [eax]
  000b8	89 45 f8	 mov	 DWORD PTR _pNode$1$[ebp], eax
  000bb	85 c0		 test	 eax, eax
  000bd	0f 85 71 ff ff
	ff		 jne	 $LL4@Serialize

; 1197 : 		}
; 1198 : 	}
; 1199 : }

  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 04 00	 ret	 4
$LN7@Serialize:

; 1186 : 			SerializeElements<TYPE>(ar, pData, 1);
; 1187 : 		}
; 1188 : 	}
; 1189 : 	else
; 1190 : 	{
; 1191 : 		DWORD_PTR nNewCount = ar.ReadCount();

  000cc	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount

; 1192 : 		while (nNewCount--)

  000d1	85 c0		 test	 eax, eax
  000d3	0f 84 9e 00 00
	00		 je	 $LN68@Serialize
  000d9	0f 1f 80 00 00
	00 00		 npad	 7
$LL5@Serialize:
  000e0	48		 dec	 eax
  000e1	89 45 f0	 mov	 DWORD PTR _nNewCount$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  000e4	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  000e7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000ea	f7 d1		 not	 ecx
  000ec	f6 c1 01	 test	 cl, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  000ef	74 3a		 je	 SHORT $LN42@Serialize

; 79   : 		pData = pElements;

  000f1	8d 4d f4	 lea	 ecx, DWORD PTR _newData$1[ebp]
  000f4	bb 01 00 00 00	 mov	 ebx, 1
  000f9	89 4d f8	 mov	 DWORD PTR _pData$1$[ebp], ecx
  000fc	0f 1f 40 00	 npad	 4
$LL37@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00100	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00105	3b df		 cmp	 ebx, edi
  00107	0f 42 fb	 cmovb	 edi, ebx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0010a	8d 34 bd 00 00
	00 00		 lea	 esi, DWORD PTR [edi*4]
  00111	56		 push	 esi
  00112	51		 push	 ecx
  00113	8b c8		 mov	 ecx, eax
  00115	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 87   : 			pData += nElementsToWrite;

  0011a	8b 4d f8	 mov	 ecx, DWORD PTR _pData$1$[ebp]
  0011d	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  00120	03 ce		 add	 ecx, esi
  00122	89 4d f8	 mov	 DWORD PTR _pData$1$[ebp], ecx
  00125	2b df		 sub	 ebx, edi
  00127	75 d7		 jne	 SHORT $LL37@Serialize

; 88   : 		}
; 89   : 	}

  00129	eb 36		 jmp	 SHORT $LN40@Serialize
$LN42@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  0012b	be 01 00 00 00	 mov	 esi, 1

; 96   : 		pData = pElements;

  00130	8d 5d f4	 lea	 ebx, DWORD PTR _newData$1[ebp]
$LL39@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00133	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00138	3b f7		 cmp	 esi, edi
  0013a	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0013d	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00144	51		 push	 ecx
  00145	53		 push	 ebx
  00146	8b c8		 mov	 ecx, eax
  00148	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0014d	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
  00154	3b c1		 cmp	 eax, ecx
  00156	75 28		 jne	 SHORT $LN59@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 104  : 			pData += nElementsToRead;

  00158	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  0015b	03 d9		 add	 ebx, ecx
  0015d	2b f7		 sub	 esi, edi
  0015f	75 d2		 jne	 SHORT $LL39@Serialize
$LN40@Serialize:

; 1193 : 		{
; 1194 : 			TYPE newData[1];
; 1195 : 			SerializeElements<TYPE>(ar, newData, 1);
; 1196 : 			AddTail(newData[0]);

  00161	ff 75 f4	 push	 DWORD PTR _newData$1[ebp]
  00164	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00167	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCDrawingHourData@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingHourData@@@Z ; CList<CDrawingHourData *,CDrawingHourData *>::AddTail
  0016c	8b 45 f0	 mov	 eax, DWORD PTR _nNewCount$1$[ebp]
  0016f	85 c0		 test	 eax, eax
  00171	0f 85 69 ff ff
	ff		 jne	 $LL5@Serialize
$LN68@Serialize:
  00177	5f		 pop	 edi

; 1197 : 		}
; 1198 : 	}
; 1199 : }

  00178	5e		 pop	 esi
  00179	5b		 pop	 ebx
  0017a	8b e5		 mov	 esp, ebp
  0017c	5d		 pop	 ebp
  0017d	c2 04 00	 ret	 4
$LN59@Serialize:
  00180	6a 00		 push	 0
  00182	6a 03		 push	 3
  00184	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN60@Serialize:

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00189	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN85@Serialize:
  0018e	cc		 int	 3
?Serialize@?$CList@PAVCDrawingHourData@@PAV1@@@UAEXAAVCArchive@@@Z ENDP ; CList<CDrawingHourData *,CDrawingHourData *>::Serialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??1?$CList@PAVCDrawingHourData@@PAV1@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CList@PAVCDrawingHourData@@PAV1@@@UAE@XZ PROC	; CList<CDrawingHourData *,CDrawingHourData *>::~CList<CDrawingHourData *,CDrawingHourData *>, COMDAT
; _this$ = ecx

; 878  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CList@PAVCDrawingHourData@@PAV1@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 872  : 	m_pBlocks->FreeDataChain();

  00025	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 878  : {

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@PAVCDrawingHourData@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  0002e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00035	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0003c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00043	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 872  : 	m_pBlocks->FreeDataChain();

  0004a	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0004f	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 879  : 	RemoveAll();
; 880  : 	ASSERT(m_nCount == 0);
; 881  : }

  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	5e		 pop	 esi
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
  00066	cc		 int	 3
  00067	cc		 int	 3
  00068	cc		 int	 3
  00069	cc		 int	 3
  0006a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CList@PAVCDrawingHourData@@PAV1@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CList@PAVCDrawingHourData@@PAV1@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CList@PAVCDrawingHourData@@PAV1@@@UAE@XZ ENDP	; CList<CDrawingHourData *,CDrawingHourData *>::~CList<CDrawingHourData *,CDrawingHourData *>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?NewNode@?$CList@PAVCDrawingHourData@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z
_TEXT	SEGMENT
_pPrev$ = 8						; size = 4
_pNext$ = 12						; size = 4
?NewNode@?$CList@PAVCDrawingHourData@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z PROC ; CList<CDrawingHourData *,CDrawingHourData *>::NewNode, COMDAT
; _this$ = ecx

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 902  : 	if (m_pNodeFree == NULL)

  00006	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0000a	75 34		 jne	 SHORT $LN7@NewNode

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  0000c	6a 0c		 push	 12			; 0000000cH
  0000e	ff 76 18	 push	 DWORD PTR [esi+24]
  00011	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001a	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0001d	83 c0 08	 add	 eax, 8
  00020	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  00023	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00026	83 c0 f4	 add	 eax, -12		; fffffff4H

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00029	83 c2 ff	 add	 edx, -1
  0002c	78 12		 js	 SHORT $LN7@NewNode
  0002e	66 90		 npad	 2
$LL4@NewNode:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	89 08		 mov	 DWORD PTR [eax], ecx

; 915  : 			m_pNodeFree = pNode;

  00035	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00038	83 e8 0c	 sub	 eax, 12			; 0000000cH
  0003b	83 ea 01	 sub	 edx, 1
  0003e	79 f0		 jns	 SHORT $LL4@NewNode
$LN7@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00040	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00043	85 c0		 test	 eax, eax
  00045	74 18		 je	 SHORT $LN17@NewNode

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00047	8b 08		 mov	 ecx, DWORD PTR [eax]
  00049	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 922  : 	pNode->pPrev = pPrev;

  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _pPrev$[ebp]
  0004f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 923  : 	pNode->pNext = pNext;

  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _pNext$[ebp]
  00055	89 08		 mov	 DWORD PTR [eax], ecx

; 924  : 	m_nCount++;

  00057	ff 46 0c	 inc	 DWORD PTR [esi+12]

; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;
; 930  : #pragma pop_macro("new")
; 931  : 	return pNode;

  0005a	5e		 pop	 esi

; 932  : }

  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
$LN17@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  0005f	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN15@NewNode:
  00064	cc		 int	 3
?NewNode@?$CList@PAVCDrawingHourData@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z ENDP ; CList<CDrawingHourData *,CDrawingHourData *>::NewNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?FindIndex@?$CList@PAVCDrawingHourData@@PAV1@@@QBEPAU__POSITION@@H@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?FindIndex@?$CList@PAVCDrawingHourData@@PAV1@@@QBEPAU__POSITION@@H@Z PROC ; CList<CDrawingHourData *,CDrawingHourData *>::FindIndex, COMDAT
; _this$ = ecx

; 1130 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1131 : 	ASSERT_VALID(this);
; 1132 : 
; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00003	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00006	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00009	7d 14		 jge	 SHORT $LN5@FindIndex
  0000b	85 d2		 test	 edx, edx
  0000d	78 10		 js	 SHORT $LN5@FindIndex

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0000f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1137 : 	while (nIndex--)

  00012	74 0d		 je	 SHORT $LN1@FindIndex
$LL2@FindIndex:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	83 ea 01	 sub	 edx, 1
  00019	75 f9		 jne	 SHORT $LL2@FindIndex

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;
; 1143 : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
$LN5@FindIndex:

; 1134 : 		return NULL;  // went too far

  0001f	33 c0		 xor	 eax, eax
$LN1@FindIndex:

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;
; 1143 : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?FindIndex@?$CList@PAVCDrawingHourData@@PAV1@@@QBEPAU__POSITION@@H@Z ENDP ; CList<CDrawingHourData *,CDrawingHourData *>::FindIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAll@?$CList@PAVCDrawingHourData@@PAV1@@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@?$CList@PAVCDrawingHourData@@PAV1@@@QAEXXZ PROC ; CList<CDrawingHourData *,CDrawingHourData *>::RemoveAll, COMDAT
; _this$ = ecx

; 862  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 863  : 	ASSERT_VALID(this);
; 864  : 
; 865  : 	// destroy elements
; 866  : 	CNode* pNode;
; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)
; 868  : 		pNode->data.~TYPE();
; 869  : 
; 870  : 	m_nCount = 0;
; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 872  : 	m_pBlocks->FreeDataChain();

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0000d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00014	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0001b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00022	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00027	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0002e	5e		 pop	 esi

; 874  : }

  0002f	c3		 ret	 0
?RemoveAll@?$CList@PAVCDrawingHourData@@PAV1@@@QAEXXZ ENDP ; CList<CDrawingHourData *,CDrawingHourData *>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?AddTail@?$CList@PAVCDrawingHourData@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingHourData@@@Z
_TEXT	SEGMENT
_newElement$ = 8					; size = 4
?AddTail@?$CList@PAVCDrawingHourData@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingHourData@@@Z PROC ; CList<CDrawingHourData *,CDrawingHourData *>::AddTail, COMDAT
; _this$ = ecx

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 902  : 	if (m_pNodeFree == NULL)

  00007	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0

; 966  : 	ASSERT_VALID(this);
; 967  : 
; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  0000b	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 902  : 	if (m_pNodeFree == NULL)

  0000e	75 32		 jne	 SHORT $LN11@AddTail

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  00010	6a 0c		 push	 12			; 0000000cH
  00012	ff 76 18	 push	 DWORD PTR [esi+24]
  00015	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001e	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00021	83 c0 08	 add	 eax, 8
  00024	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00027	83 c2 ff	 add	 edx, -1
  0002a	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  0002d	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  00030	78 10		 js	 SHORT $LN11@AddTail
$LL8@AddTail:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00032	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00035	89 01		 mov	 DWORD PTR [ecx], eax

; 915  : 			m_pNodeFree = pNode;

  00037	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0003a	83 e9 0c	 sub	 ecx, 12			; 0000000cH
  0003d	83 ea 01	 sub	 edx, 1
  00040	79 f0		 jns	 SHORT $LL8@AddTail
$LN11@AddTail:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00042	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00045	85 c9		 test	 ecx, ecx
  00047	74 39		 je	 SHORT $LN22@AddTail

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00049	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004b	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 969  : 	pNewNode->data = newElement;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]

; 922  : 	pNode->pPrev = pPrev;

  00051	89 79 04	 mov	 DWORD PTR [ecx+4], edi

; 923  : 	pNode->pNext = pNext;

  00054	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 924  : 	m_nCount++;

  0005a	ff 46 0c	 inc	 DWORD PTR [esi+12]

; 969  : 	pNewNode->data = newElement;

  0005d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 970  : 	if (m_pNodeTail != NULL)

  00060	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00063	85 c0		 test	 eax, eax
  00065	74 0d		 je	 SHORT $LN2@AddTail

; 971  : 		m_pNodeTail->pNext = pNewNode;

  00067	89 08		 mov	 DWORD PTR [eax], ecx

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00069	8b c1		 mov	 eax, ecx
  0006b	5f		 pop	 edi
  0006c	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0006f	5e		 pop	 esi

; 976  : }

  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
$LN2@AddTail:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00074	5f		 pop	 edi
  00075	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00078	8b c1		 mov	 eax, ecx
  0007a	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0007d	5e		 pop	 esi

; 976  : }

  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
$LN22@AddTail:

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00082	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN20@AddTail:
  00087	cc		 int	 3
?AddTail@?$CList@PAVCDrawingHourData@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingHourData@@@Z ENDP ; CList<CDrawingHourData *,CDrawingHourData *>::AddTail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??0?$CList@PAVCDrawingHourData@@PAV1@@@QAE@H@Z
_TEXT	SEGMENT
_nBlockSize$ = 8					; size = 4
??0?$CList@PAVCDrawingHourData@@PAV1@@@QAE@H@Z PROC	; CList<CDrawingHourData *,CDrawingHourData *>::CList<CDrawingHourData *,CDrawingHourData *>, COMDAT
; _this$ = ecx

; 851  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;
; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 856  : 	m_pBlocks = NULL;
; 857  : 	m_nBlockSize = nBlockSize;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nBlockSize$[ebp]
  00006	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 858  : }

  00009	8b c1		 mov	 eax, ecx
  0000b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CList@PAVCDrawingHourData@@PAV1@@@6B@
  00011	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00018	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0001f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00026	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0002d	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??0?$CList@PAVCDrawingHourData@@PAV1@@@QAE@H@Z ENDP	; CList<CDrawingHourData *,CDrawingHourData *>::CList<CDrawingHourData *,CDrawingHourData *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetHeadTimeData_Data@CDrawingDateData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetHeadTimeData_Data@CDrawingDateData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ PROC ; CDrawingDateData::GetHeadTimeData_Data, COMDAT
; _this$ = ecx

; 337  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00003	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 337  : {

  00007	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00008	7e 4f		 jle	 SHORT $LN48@GetHeadTim

; 1134 : 		return NULL;  // went too far
; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;
; 1137 : 	while (nIndex--)
; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;
; 1141 : 	}
; 1142 : 	return (POSITION) pNode;

  0000a	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 307  : 	if(pos == NULL)

  0000d	85 c0		 test	 eax, eax
  0000f	74 48		 je	 SHORT $LN48@GetHeadTim

; 308  : 		return NULL;
; 309  : 	return m_hourDataList.GetAt(pos);

  00011	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 338  : 	CDrawingHourData* pDrawingHourData = GetHourData(0);
; 339  : 	if(pDrawingHourData == NULL)

  00014	85 c0		 test	 eax, eax
  00016	74 41		 je	 SHORT $LN48@GetHeadTim
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00018	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0001c	7e 24		 jle	 SHORT $LN50@GetHeadTim

; 1134 : 		return NULL;  // went too far
; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;
; 1137 : 	while (nIndex--)
; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;
; 1141 : 	}
; 1142 : 	return (POSITION) pNode;

  0001e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 161  : 	if(pos == NULL)

  00021	85 c0		 test	 eax, eax
  00023	74 1d		 je	 SHORT $LN50@GetHeadTim

; 162  : 		return NULL;
; 163  : 	return m_timeDataList.GetAt(pos);

  00025	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 185  : 	if(pDrawingTimeData == NULL)

  00028	85 c0		 test	 eax, eax
  0002a	74 16		 je	 SHORT $LN50@GetHeadTim

; 77   : 	return m_strTimeData;

  0002c	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0002f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00032	50		 push	 eax
  00033	8b ce		 mov	 ecx, esi
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z

; 341  : 
; 342  : 	return pDrawingHourData->GetHeadTimeData_Data();

  0003b	8b c6		 mov	 eax, esi
  0003d	5e		 pop	 esi

; 343  : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN50@GetHeadTim:

; 186  : 		return "-1";//tour2k

  00042	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00045	8b ce		 mov	 ecx, esi
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_02PGHGPEOM@?91@
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z

; 341  : 
; 342  : 	return pDrawingHourData->GetHeadTimeData_Data();

  00052	8b c6		 mov	 eax, esi
  00054	5e		 pop	 esi

; 343  : }

  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
$LN48@GetHeadTim:

; 340  : 		return "-1";//tour2k

  00059	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_02PGHGPEOM@?91@
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  00067	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0006a	5e		 pop	 esi

; 343  : }

  0006b	5d		 pop	 ebp
  0006c	c2 04 00	 ret	 4
?GetHeadTimeData_Data@CDrawingDateData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ENDP ; CDrawingDateData::GetHeadTimeData_Data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetHeadTimeData_Index@CDrawingDateData@@QBEHXZ
_TEXT	SEGMENT
?GetHeadTimeData_Index@CDrawingDateData@@QBEHXZ PROC	; CDrawingDateData::GetHeadTimeData_Index, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00000	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  00004	7e 26		 jle	 SHORT $LN40@GetHeadTim

; 1134 : 		return NULL;  // went too far
; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;
; 1137 : 	while (nIndex--)
; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;
; 1141 : 	}
; 1142 : 	return (POSITION) pNode;

  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 307  : 	if(pos == NULL)

  00009	85 c0		 test	 eax, eax
  0000b	74 1f		 je	 SHORT $LN40@GetHeadTim

; 308  : 		return NULL;
; 309  : 	return m_hourDataList.GetAt(pos);

  0000d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 329  : 	CDrawingHourData* pDrawingHourData = GetHourData(0);
; 330  : 	if(pDrawingHourData == NULL)

  00010	85 c0		 test	 eax, eax
  00012	74 18		 je	 SHORT $LN40@GetHeadTim
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00014	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00018	7e 12		 jle	 SHORT $LN40@GetHeadTim

; 1134 : 		return NULL;  // went too far
; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;
; 1137 : 	while (nIndex--)
; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;
; 1141 : 	}
; 1142 : 	return (POSITION) pNode;

  0001a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 161  : 	if(pos == NULL)

  0001d	85 c0		 test	 eax, eax
  0001f	74 0b		 je	 SHORT $LN40@GetHeadTim

; 162  : 		return NULL;
; 163  : 	return m_timeDataList.GetAt(pos);

  00021	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 176  : 	if(pDrawingTimeData == NULL)

  00024	85 c0		 test	 eax, eax
  00026	74 04		 je	 SHORT $LN40@GetHeadTim

; 177  : 		return -1;
; 178  : 
; 179  : 	return pDrawingTimeData->GetIndex();

  00028	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 331  : 		return -1;
; 332  : 
; 333  : 	return pDrawingHourData->GetHeadTimeData_Index();
; 334  : }

  0002b	c3		 ret	 0
$LN40@GetHeadTim:
  0002c	83 c8 ff	 or	 eax, -1
  0002f	c3		 ret	 0
?GetHeadTimeData_Index@CDrawingDateData@@QBEHXZ ENDP	; CDrawingDateData::GetHeadTimeData_Index
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetTimeData@CDrawingDateData@@QBEPAVCDrawingTimeData@@HH@Z
_TEXT	SEGMENT
_nHourIndex$ = 8					; size = 4
_nTimeIndex$ = 12					; size = 4
?GetTimeData@CDrawingDateData@@QBEPAVCDrawingTimeData@@HH@Z PROC ; CDrawingDateData::GetTimeData, COMDAT
; _this$ = ecx

; 320  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 302  : 	return GetHourData(m_hourDataList.FindIndex(nIndex));

  00003	8b 45 08	 mov	 eax, DWORD PTR _nHourIndex$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00006	3b 41 18	 cmp	 eax, DWORD PTR [ecx+24]
  00009	7d 3e		 jge	 SHORT $LN37@GetTimeDat
  0000b	85 c0		 test	 eax, eax
  0000d	78 3a		 js	 SHORT $LN37@GetTimeDat

; 1134 : 		return NULL;  // went too far
; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0000f	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]

; 1137 : 	while (nIndex--)

  00012	74 07		 je	 SHORT $LN28@GetTimeDat
$LL7@GetTimeDat:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00014	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00016	83 e8 01	 sub	 eax, 1
  00019	75 f9		 jne	 SHORT $LL7@GetTimeDat
$LN28@GetTimeDat:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 307  : 	if(pos == NULL)

  0001b	85 c9		 test	 ecx, ecx
  0001d	74 2a		 je	 SHORT $LN37@GetTimeDat

; 308  : 		return NULL;
; 309  : 	return m_hourDataList.GetAt(pos);

  0001f	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 321  : 	CDrawingHourData* pDrawingHourData = GetHourData(nHourIndex);
; 322  : 	if(pDrawingHourData == NULL)

  00022	85 c9		 test	 ecx, ecx
  00024	74 23		 je	 SHORT $LN37@GetTimeDat

; 156  : 	return GetTimeData(m_timeDataList.FindIndex(nIndex));

  00026	8b 45 0c	 mov	 eax, DWORD PTR _nTimeIndex$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00029	3b 41 0c	 cmp	 eax, DWORD PTR [ecx+12]
  0002c	7d 1b		 jge	 SHORT $LN37@GetTimeDat
  0002e	85 c0		 test	 eax, eax
  00030	78 17		 js	 SHORT $LN37@GetTimeDat

; 1134 : 		return NULL;  // went too far
; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  00032	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 1137 : 	while (nIndex--)

  00035	74 07		 je	 SHORT $LN30@GetTimeDat
$LL18@GetTimeDat:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00037	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00039	83 e8 01	 sub	 eax, 1
  0003c	75 f9		 jne	 SHORT $LL18@GetTimeDat
$LN30@GetTimeDat:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 161  : 	if(pos == NULL)

  0003e	85 c9		 test	 ecx, ecx
  00040	74 07		 je	 SHORT $LN37@GetTimeDat

; 162  : 		return NULL;
; 163  : 	return m_timeDataList.GetAt(pos);

  00042	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 323  : 		return NULL;
; 324  : 	return pDrawingHourData->GetTimeData(nTimeIndex);
; 325  : }

  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
$LN37@GetTimeDat:
  00049	33 c0		 xor	 eax, eax
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
?GetTimeData@CDrawingDateData@@QBEPAVCDrawingTimeData@@HH@Z ENDP ; CDrawingDateData::GetTimeData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetNext_HourData@CDrawingDateData@@QBEPAVCDrawingHourData@@AAPAU__POSITION@@@Z
_TEXT	SEGMENT
_pos$ = 8						; size = 4
?GetNext_HourData@CDrawingDateData@@QBEPAVCDrawingHourData@@AAPAU__POSITION@@@Z PROC ; CDrawingDateData::GetNext_HourData, COMDAT
; _this$ = ecx

; 313  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 314  : 	if(pos == NULL)

  00003	8b 55 08	 mov	 edx, DWORD PTR _pos$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	85 c0		 test	 eax, eax
  0000a	75 04		 jne	 SHORT $LN2@GetNext_Ho

; 317  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
$LN2@GetNext_Ho:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 819  : 		rPosition = (POSITION) pNode->pNext;

  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	89 0a		 mov	 DWORD PTR [edx], ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 316  : 	return m_hourDataList.GetNext(pos);

  00014	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 317  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?GetNext_HourData@CDrawingDateData@@QBEPAVCDrawingHourData@@AAPAU__POSITION@@@Z ENDP ; CDrawingDateData::GetNext_HourData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetHourData@CDrawingDateData@@QBEPAVCDrawingHourData@@ABQAU__POSITION@@@Z
_TEXT	SEGMENT
_pos$ = 8						; size = 4
?GetHourData@CDrawingDateData@@QBEPAVCDrawingHourData@@ABQAU__POSITION@@@Z PROC ; CDrawingDateData::GetHourData, COMDAT
; _this$ = ecx

; 306  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 307  : 	if(pos == NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _pos$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	85 c0		 test	 eax, eax
  0000a	75 04		 jne	 SHORT $LN2@GetHourDat

; 310  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
$LN2@GetHourDat:

; 308  : 		return NULL;
; 309  : 	return m_hourDataList.GetAt(pos);

  00010	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 310  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?GetHourData@CDrawingDateData@@QBEPAVCDrawingHourData@@ABQAU__POSITION@@@Z ENDP ; CDrawingDateData::GetHourData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetHourData@CDrawingDateData@@QBEPAVCDrawingHourData@@H@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?GetHourData@CDrawingDateData@@QBEPAVCDrawingHourData@@H@Z PROC ; CDrawingDateData::GetHourData, COMDAT
; _this$ = ecx

; 301  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 302  : 	return GetHourData(m_hourDataList.FindIndex(nIndex));

  00003	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00006	3b 41 18	 cmp	 eax, DWORD PTR [ecx+24]
  00009	7d 1b		 jge	 SHORT $LN17@GetHourDat
  0000b	85 c0		 test	 eax, eax
  0000d	78 17		 js	 SHORT $LN17@GetHourDat

; 1134 : 		return NULL;  // went too far
; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0000f	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]

; 1137 : 	while (nIndex--)

  00012	74 07		 je	 SHORT $LN13@GetHourDat
$LL4@GetHourDat:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00014	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00016	83 e8 01	 sub	 eax, 1
  00019	75 f9		 jne	 SHORT $LL4@GetHourDat
$LN13@GetHourDat:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 307  : 	if(pos == NULL)

  0001b	85 c9		 test	 ecx, ecx
  0001d	74 07		 je	 SHORT $LN17@GetHourDat

; 302  : 	return GetHourData(m_hourDataList.FindIndex(nIndex));

  0001f	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 303  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN17@GetHourDat:

; 302  : 	return GetHourData(m_hourDataList.FindIndex(nIndex));

  00026	33 c0		 xor	 eax, eax

; 303  : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?GetHourData@CDrawingDateData@@QBEPAVCDrawingHourData@@H@Z ENDP ; CDrawingDateData::GetHourData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetTailHourDataPosition@CDrawingDateData@@QBEPAU__POSITION@@XZ
_TEXT	SEGMENT
?GetTailHourDataPosition@CDrawingDateData@@QBEPAU__POSITION@@XZ PROC ; CDrawingDateData::GetTailHourDataPosition, COMDAT
; _this$ = ecx

; 297  : 	return m_hourDataList.GetTailPosition();

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 298  : }

  00003	c3		 ret	 0
?GetTailHourDataPosition@CDrawingDateData@@QBEPAU__POSITION@@XZ ENDP ; CDrawingDateData::GetTailHourDataPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetHeadHourDataPosition@CDrawingDateData@@QBEPAU__POSITION@@XZ
_TEXT	SEGMENT
?GetHeadHourDataPosition@CDrawingDateData@@QBEPAU__POSITION@@XZ PROC ; CDrawingDateData::GetHeadHourDataPosition, COMDAT
; _this$ = ecx

; 292  : 	return m_hourDataList.GetHeadPosition();

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 293  : }

  00003	c3		 ret	 0
?GetHeadHourDataPosition@CDrawingDateData@@QBEPAU__POSITION@@XZ ENDP ; CDrawingDateData::GetHeadHourDataPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetHourDataCount@CDrawingDateData@@QBEHXZ
_TEXT	SEGMENT
?GetHourDataCount@CDrawingDateData@@QBEHXZ PROC		; CDrawingDateData::GetHourDataCount, COMDAT
; _this$ = ecx

; 287  : 	return m_hourDataList.GetCount();

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]

; 288  : }

  00003	c3		 ret	 0
?GetHourDataCount@CDrawingDateData@@QBEHXZ ENDP		; CDrawingDateData::GetHourDataCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetHourDataList@CDrawingDateData@@QAEPAV?$CList@PAVCDrawingHourData@@PAV1@@@XZ
_TEXT	SEGMENT
?GetHourDataList@CDrawingDateData@@QAEPAV?$CList@PAVCDrawingHourData@@PAV1@@@XZ PROC ; CDrawingDateData::GetHourDataList, COMDAT
; _this$ = ecx

; 282  : 	return &m_hourDataList;

  00000	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]

; 283  : }

  00003	c3		 ret	 0
?GetHourDataList@CDrawingDateData@@QAEPAV?$CList@PAVCDrawingHourData@@PAV1@@@XZ ENDP ; CDrawingDateData::GetHourDataList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetDateData@CDrawingDateData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetDateData@CDrawingDateData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ PROC ; CDrawingDateData::GetDateData, COMDAT
; _this$ = ecx

; 276  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 277  : 	return m_strDateData;

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00010	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 278  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?GetDateData@CDrawingDateData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ENDP ; CDrawingDateData::GetDateData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?SetDateData@CDrawingDateData@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
_TEXT	SEGMENT
_strDateData$ = 8					; size = 4
?SetDateData@CDrawingDateData@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC ; CDrawingDateData::SetDateData, COMDAT
; _this$ = ecx

; 270  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 271  : 	m_strDateData = strDateData;

  00003	83 c1 08	 add	 ecx, 8

; 272  : }

  00006	5d		 pop	 ebp

; 271  : 	m_strDateData = strDateData;

  00007	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
?SetDateData@CDrawingDateData@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CDrawingDateData::SetDateData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?DeleteAll@CDrawingDateData@@QAE_NXZ
_TEXT	SEGMENT
_this$1$ = -20						; size = 4
_pos$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?DeleteAll@CDrawingDateData@@QAE_NXZ PROC		; CDrawingDateData::DeleteAll, COMDAT
; _this$ = ecx

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?DeleteAll@CDrawingDateData@@QAE_NXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	89 75 ec	 mov	 DWORD PTR _this$1$[ebp], esi

; 257  : 	if(m_hourDataList.GetCount() <= 0)

  0002d	83 7e 18 00	 cmp	 DWORD PTR [esi+24], 0
  00031	7f 14		 jg	 SHORT $LN4@DeleteAll

; 258  : 		return false;

  00033	32 c0		 xor	 al, al

; 266  : }

  00035	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00038	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003f	59		 pop	 ecx
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
$LN4@DeleteAll:

; 259  : 
; 260  : 	POSITION pos = m_hourDataList.GetHeadPosition();

  00047	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]

; 261  : 	while(pos != NULL){

  0004a	85 db		 test	 ebx, ebx
  0004c	0f 84 c5 00 00
	00		 je	 $LN46@DeleteAll
$LL2@DeleteAll:

; 262  : 		delete m_hourDataList.GetNext(pos);

  00052	8b 73 08	 mov	 esi, DWORD PTR [ebx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00055	8b 1b		 mov	 ebx, DWORD PTR [ebx]
  00057	89 5d f0	 mov	 DWORD PTR _pos$1$[ebp], ebx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 262  : 		delete m_hourDataList.GetNext(pos);

  0005a	85 f6		 test	 esi, esi
  0005c	0f 84 aa 00 00
	00		 je	 $LN11@DeleteAll

; 117  : 	if(m_timeDataList.GetCount() <= 0)

  00062	83 7e 0c 00	 cmp	 DWORD PTR [esi+12], 0

; 84   : {

  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 117  : 	if(m_timeDataList.GetCount() <= 0)

  0006d	7e 56		 jle	 SHORT $LN68@DeleteAll

; 118  : 		return false;
; 119  : 
; 120  : 	POSITION pos = m_timeDataList.GetHeadPosition();

  0006f	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]

; 121  : 	while(pos != NULL){

  00072	85 ff		 test	 edi, edi
  00074	74 24		 je	 SHORT $LN33@DeleteAll
$LL17@DeleteAll:

; 122  : 		delete m_timeDataList.GetNext(pos);

  00076	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00079	8b 3f		 mov	 edi, DWORD PTR [edi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 122  : 		delete m_timeDataList.GetNext(pos);

  0007b	85 db		 test	 ebx, ebx
  0007d	74 14		 je	 SHORT $LN26@DeleteAll
  0007f	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00088	6a 10		 push	 16			; 00000010H
  0008a	53		 push	 ebx
  0008b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00090	83 c4 08	 add	 esp, 8
$LN26@DeleteAll:

; 121  : 	while(pos != NULL){

  00093	85 ff		 test	 edi, edi
  00095	75 df		 jne	 SHORT $LL17@DeleteAll
  00097	8b 5d f0	 mov	 ebx, DWORD PTR _pos$1$[ebp]
$LN33@DeleteAll:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  0009a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0009d	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  000a4	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  000ab	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  000b2	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  000b9	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  000be	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
$LN68@DeleteAll:

; 872  : 	m_pBlocks->FreeDataChain();

  000c5	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 878  : {

  000c8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000cc	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@PAVCDrawingTimeData@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  000d2	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  000d9	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  000e0	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  000e7	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 872  : 	m_pBlocks->FreeDataChain();

  000ee	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain
  000f3	6a 1c		 push	 28			; 0000001cH
  000f5	56		 push	 esi

; 873  : 	m_pBlocks = NULL;

  000f6	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 86   : }

  000fd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00104	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00109	83 c4 08	 add	 esp, 8
$LN11@DeleteAll:

; 261  : 	while(pos != NULL){

  0010c	85 db		 test	 ebx, ebx
  0010e	0f 85 3e ff ff
	ff		 jne	 $LL2@DeleteAll
  00114	8b 75 ec	 mov	 esi, DWORD PTR _this$1$[ebp]
$LN46@DeleteAll:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00117	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0011a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00121	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00128	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0012f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00136	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0013b	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 265  : 	return true;

  00142	b0 01		 mov	 al, 1

; 266  : }

  00144	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00147	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0014e	59		 pop	 ecx
  0014f	5f		 pop	 edi
  00150	5e		 pop	 esi
  00151	5b		 pop	 ebx
  00152	8b e5		 mov	 esp, ebp
  00154	5d		 pop	 ebp
  00155	c3		 ret	 0
  00156	cc		 int	 3
  00157	cc		 int	 3
  00158	cc		 int	 3
  00159	cc		 int	 3
  0015a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?DeleteAll@CDrawingDateData@@QAE_NXZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?DeleteAll@CDrawingDateData@@QAE_NXZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?DeleteAll@CDrawingDateData@@QAE_NXZ ENDP		; CDrawingDateData::DeleteAll
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?AddDrawingHourData@CDrawingDateData@@QAE_NHHH@Z
_TEXT	SEGMENT
$T2 = -20						; size = 4
$T3 = -20						; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nIndex$ = 8						; size = 4
_nDate$ = 12						; size = 4
_nTime$ = 16						; size = 4
?AddDrawingHourData@CDrawingDateData@@QAE_NHHH@Z PROC	; CDrawingDateData::AddDrawingHourData, COMDAT
; _this$ = ecx

; 246  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AddDrawingHourData@CDrawingDateData@@QAE_NHHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	89 4d f0	 mov	 DWORD PTR _this$1$[ebp], ecx

; 247  : 	if(nIndex < 0 || nTime < 0) return false;

  0002a	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  0002e	0f 8c d0 00 00
	00		 jl	 $LN3@AddDrawing
  00034	83 7d 10 00	 cmp	 DWORD PTR _nTime$[ebp], 0
  00038	0f 8c c6 00 00
	00		 jl	 $LN3@AddDrawing

; 249  : 	CDrawingHourData* pDrawingHourData = new CDrawingHourData();

  0003e	6a 1c		 push	 28			; 0000001cH
  00040	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00045	8b f0		 mov	 esi, eax
  00047	83 c4 04	 add	 esp, 4
  0004a	89 75 ec	 mov	 DWORD PTR $T3[ebp], esi
  0004d	85 f6		 test	 esi, esi
  0004f	74 44		 je	 SHORT $LN5@AddDrawing
  00051	0f 57 c0	 xorps	 xmm0, xmm0
  00054	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00057	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
  0005c	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 851  : {

  00063	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@PAVCDrawingTimeData@@PAV1@@@6B@

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;

  00069	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00070	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00077	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0007e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 856  : 	m_pBlocks = NULL;

  00085	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 857  : 	m_nBlockSize = nBlockSize;

  0008c	c7 46 18 0a 00
	00 00		 mov	 DWORD PTR [esi+24], 10	; 0000000aH
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 249  : 	CDrawingHourData* pDrawingHourData = new CDrawingHourData();

  00093	eb 02		 jmp	 SHORT $LN6@AddDrawing
$LN5@AddDrawing:
  00095	33 f6		 xor	 esi, esi
$LN6@AddDrawing:

; 111  : 	m_timeDataList.AddTail(new CDrawingTimeData(nIndex, nDate, nTime));

  00097	6a 10		 push	 16			; 00000010H
  00099	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0009e	8b f8		 mov	 edi, eax
  000a0	83 c4 04	 add	 esp, 4
  000a3	89 7d ec	 mov	 DWORD PTR $T2[ebp], edi
  000a6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000ad	85 ff		 test	 edi, edi
  000af	74 21		 je	 SHORT $LN16@AddDrawing

; 45   : 	m_nDate(nDate),

  000b1	8b 4d 0c	 mov	 ecx, DWORD PTR _nDate$[ebp]

; 46   : 	m_nTime(nTime)

  000b4	8b 45 10	 mov	 eax, DWORD PTR _nTime$[ebp]
  000b7	89 0f		 mov	 DWORD PTR [edi], ecx

; 44   : 	m_strTimeData(""),

  000b9	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  000bc	89 47 04	 mov	 DWORD PTR [edi+4], eax
  000bf	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  000c7	89 47 08	 mov	 DWORD PTR [edi+8], eax
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z

; 111  : 	m_timeDataList.AddTail(new CDrawingTimeData(nIndex, nDate, nTime));

  000d0	eb 02		 jmp	 SHORT $LN17@AddDrawing
$LN16@AddDrawing:
  000d2	33 ff		 xor	 edi, edi
$LN17@AddDrawing:
  000d4	57		 push	 edi
  000d5	8b ce		 mov	 ecx, esi
  000d7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000de	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCDrawingTimeData@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingTimeData@@@Z ; CList<CDrawingTimeData *,CDrawingTimeData *>::AddTail

; 250  : 	pDrawingHourData->AddDrawingTimeData(nIndex, nDate, nTime);
; 251  : 	m_hourDataList.AddTail(pDrawingHourData);

  000e3	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000e6	56		 push	 esi
  000e7	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000ea	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCDrawingHourData@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingHourData@@@Z ; CList<CDrawingHourData *,CDrawingHourData *>::AddTail

; 252  : 	return true;

  000ef	b0 01		 mov	 al, 1

; 253  : }

  000f1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fb	59		 pop	 ecx
  000fc	5f		 pop	 edi
  000fd	5e		 pop	 esi
  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c2 0c 00	 ret	 12			; 0000000cH
$LN3@AddDrawing:

; 247  : 	if(nIndex < 0 || nTime < 0) return false;

  00104	32 c0		 xor	 al, al

; 253  : }

  00106	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00109	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00110	59		 pop	 ecx
  00111	5f		 pop	 edi
  00112	5e		 pop	 esi
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddDrawingHourData@CDrawingDateData@@QAE_NHHH@Z$1:
  00000	6a 10		 push	 16			; 00000010H
  00002	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?AddDrawingHourData@CDrawingDateData@@QAE_NHHH@Z:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddDrawingHourData@CDrawingDateData@@QAE_NHHH@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddDrawingHourData@CDrawingDateData@@QAE_NHHH@Z ENDP	; CDrawingDateData::AddDrawingHourData
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?AddDrawingHourData@CDrawingDateData@@QAE_NHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
_TEXT	SEGMENT
$T2 = -20						; size = 4
$T3 = -20						; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nIndex$ = 8						; size = 4
_strTimeData$ = 12					; size = 4
?AddDrawingHourData@CDrawingDateData@@QAE_NHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC ; CDrawingDateData::AddDrawingHourData, COMDAT
; _this$ = ecx

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AddDrawingHourData@CDrawingDateData@@QAE_NHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	89 4d f0	 mov	 DWORD PTR _this$1$[ebp], ecx

; 236  : 	if(nIndex < 0 || strTimeData.IsEmpty())

  0002a	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  0002e	0f 8c dd 00 00
	00		 jl	 $LN3@AddDrawing
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 519  : 		return( GetData()->nDataLength );

  00034	8b 7d 0c	 mov	 edi, DWORD PTR _strTimeData$[ebp]
  00037	8b 07		 mov	 eax, DWORD PTR [edi]

; 533  : 		return( GetLength() == 0 );

  00039	83 78 f4 00	 cmp	 DWORD PTR [eax-12], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 236  : 	if(nIndex < 0 || strTimeData.IsEmpty())

  0003d	0f 84 ce 00 00
	00		 je	 $LN3@AddDrawing

; 239  : 	CDrawingHourData* pDrawingHourData = new CDrawingHourData();

  00043	6a 1c		 push	 28			; 0000001cH
  00045	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004a	8b f0		 mov	 esi, eax
  0004c	83 c4 04	 add	 esp, 4
  0004f	89 75 ec	 mov	 DWORD PTR $T3[ebp], esi
  00052	85 f6		 test	 esi, esi
  00054	74 44		 je	 SHORT $LN5@AddDrawing
  00056	0f 57 c0	 xorps	 xmm0, xmm0
  00059	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0005c	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
  00061	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 851  : {

  00068	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@PAVCDrawingTimeData@@PAV1@@@6B@

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;

  0006e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00075	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0007c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00083	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 856  : 	m_pBlocks = NULL;

  0008a	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 857  : 	m_nBlockSize = nBlockSize;

  00091	c7 46 18 0a 00
	00 00		 mov	 DWORD PTR [esi+24], 10	; 0000000aH
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 239  : 	CDrawingHourData* pDrawingHourData = new CDrawingHourData();

  00098	eb 02		 jmp	 SHORT $LN6@AddDrawing
$LN5@AddDrawing:
  0009a	33 f6		 xor	 esi, esi
$LN6@AddDrawing:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 519  : 		return( GetData()->nDataLength );

  0009c	8b 07		 mov	 eax, DWORD PTR [edi]

; 533  : 		return( GetLength() == 0 );

  0009e	83 78 f4 00	 cmp	 DWORD PTR [eax-12], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 100  : 	if(nIndex < 0 || strTimeData.IsEmpty())

  000a2	74 4c		 je	 SHORT $LN20@AddDrawing

; 101  : 		return false;
; 102  : 
; 103  : 	m_timeDataList.AddTail(new CDrawingTimeData(nIndex, strTimeData));

  000a4	6a 10		 push	 16			; 00000010H
  000a6	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ab	8b f8		 mov	 edi, eax
  000ad	83 c4 04	 add	 esp, 4
  000b0	89 7d ec	 mov	 DWORD PTR $T2[ebp], edi
  000b3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000ba	85 ff		 test	 edi, edi
  000bc	74 21		 je	 SHORT $LN22@AddDrawing

; 35   : 	m_nIndex(nIndex),

  000be	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]

; 36   : 	m_strTimeData(strTimeData),

  000c1	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  000c4	ff 75 0c	 push	 DWORD PTR _strTimeData$[ebp]
  000c7	c7 07 ff ff ff
	ff		 mov	 DWORD PTR [edi], -1
  000cd	c7 47 04 ff ff
	ff ff		 mov	 DWORD PTR [edi+4], -1
  000d4	89 47 08	 mov	 DWORD PTR [edi+8], eax
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z

; 103  : 	m_timeDataList.AddTail(new CDrawingTimeData(nIndex, strTimeData));

  000dd	eb 02		 jmp	 SHORT $LN23@AddDrawing
$LN22@AddDrawing:
  000df	33 ff		 xor	 edi, edi
$LN23@AddDrawing:
  000e1	57		 push	 edi
  000e2	8b ce		 mov	 ecx, esi
  000e4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000eb	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCDrawingTimeData@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingTimeData@@@Z ; CList<CDrawingTimeData *,CDrawingTimeData *>::AddTail
$LN20@AddDrawing:

; 240  : 	pDrawingHourData->AddDrawingTimeData(nIndex, strTimeData);
; 241  : 	m_hourDataList.AddTail(pDrawingHourData);

  000f0	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000f3	56		 push	 esi
  000f4	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000f7	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCDrawingHourData@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingHourData@@@Z ; CList<CDrawingHourData *,CDrawingHourData *>::AddTail

; 242  : 	return true;

  000fc	b0 01		 mov	 al, 1

; 243  : }

  000fe	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00101	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00108	59		 pop	 ecx
  00109	5f		 pop	 edi
  0010a	5e		 pop	 esi
  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	c2 08 00	 ret	 8
$LN3@AddDrawing:

; 237  : 		return false;

  00111	32 c0		 xor	 al, al

; 243  : }

  00113	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00116	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011d	59		 pop	 ecx
  0011e	5f		 pop	 edi
  0011f	5e		 pop	 esi
  00120	8b e5		 mov	 esp, ebp
  00122	5d		 pop	 ebp
  00123	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddDrawingHourData@CDrawingDateData@@QAE_NHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z$1:
  00000	6a 10		 push	 16			; 00000010H
  00002	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?AddDrawingHourData@CDrawingDateData@@QAE_NHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddDrawingHourData@CDrawingDateData@@QAE_NHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddDrawingHourData@CDrawingDateData@@QAE_NHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CDrawingDateData::AddDrawingHourData
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?AddDrawingHourData@CDrawingDateData@@QAE_NABVCDrawingTimeData@@@Z
_TEXT	SEGMENT
___$ReturnUdt$2 = -20					; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T3 = 8							; size = 4
$T4 = 8							; size = 4
_drawingTimeData$ = 8					; size = 4
?AddDrawingHourData@CDrawingDateData@@QAE_NABVCDrawingTimeData@@@Z PROC ; CDrawingDateData::AddDrawingHourData, COMDAT
; _this$ = ecx

; 224  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AddDrawingHourData@CDrawingDateData@@QAE_NABVCDrawingTimeData@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	89 4d f0	 mov	 DWORD PTR _this$1$[ebp], ecx

; 64   : 	if(m_nIndex < 0)

  0002a	8b 7d 08	 mov	 edi, DWORD PTR _drawingTimeData$[ebp]
  0002d	83 7f 08 00	 cmp	 DWORD PTR [edi+8], 0
  00031	0f 8c f2 00 00
	00		 jl	 $LN48@AddDrawing
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 519  : 		return( GetData()->nDataLength );

  00037	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 533  : 		return( GetLength() == 0 );

  0003a	83 78 f4 00	 cmp	 DWORD PTR [eax-12], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 67   : 	return (!m_strTimeData.IsEmpty() || m_nTime != -1);

  0003e	75 0a		 jne	 SHORT $LN2@AddDrawing
  00040	83 7f 04 ff	 cmp	 DWORD PTR [edi+4], -1
  00044	0f 84 df 00 00
	00		 je	 $LN48@AddDrawing
$LN2@AddDrawing:

; 228  : 	CDrawingHourData* pDrawingHourData = new CDrawingHourData();

  0004a	6a 1c		 push	 28			; 0000001cH
  0004c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00051	8b f0		 mov	 esi, eax
  00053	83 c4 04	 add	 esp, 4
  00056	89 75 08	 mov	 DWORD PTR $T4[ebp], esi
  00059	85 f6		 test	 esi, esi
  0005b	74 44		 je	 SHORT $LN4@AddDrawing
  0005d	0f 57 c0	 xorps	 xmm0, xmm0
  00060	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00063	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
  00068	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 851  : {

  0006f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@PAVCDrawingTimeData@@PAV1@@@6B@

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;

  00075	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  0007c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00083	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0008a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 856  : 	m_pBlocks = NULL;

  00091	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 857  : 	m_nBlockSize = nBlockSize;

  00098	c7 46 18 0a 00
	00 00		 mov	 DWORD PTR [esi+24], 10	; 0000000aH
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 228  : 	CDrawingHourData* pDrawingHourData = new CDrawingHourData();

  0009f	eb 02		 jmp	 SHORT $LN5@AddDrawing
$LN4@AddDrawing:
  000a1	33 f6		 xor	 esi, esi
$LN5@AddDrawing:

; 64   : 	if(m_nIndex < 0)

  000a3	83 7f 08 00	 cmp	 DWORD PTR [edi+8], 0
  000a7	7c 5f		 jl	 SHORT $LN22@AddDrawing
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 519  : 		return( GetData()->nDataLength );

  000a9	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 533  : 		return( GetLength() == 0 );

  000ac	83 78 f4 00	 cmp	 DWORD PTR [eax-12], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 67   : 	return (!m_strTimeData.IsEmpty() || m_nTime != -1);

  000b0	75 06		 jne	 SHORT $LN51@AddDrawing
  000b2	83 7f 04 ff	 cmp	 DWORD PTR [edi+4], -1
  000b6	74 50		 je	 SHORT $LN22@AddDrawing
$LN51@AddDrawing:

; 94   : 	m_timeDataList.AddTail(new CDrawingTimeData(drawingTimeData));

  000b8	6a 10		 push	 16			; 00000010H
  000ba	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000bf	8b d0		 mov	 edx, eax
  000c1	83 c4 04	 add	 esp, 4
  000c4	89 55 08	 mov	 DWORD PTR $T3[ebp], edx
  000c7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000ce	85 d2		 test	 edx, edx
  000d0	74 25		 je	 SHORT $LN25@AddDrawing

; 29   : 	m_nDate(data.m_nDate),

  000d2	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000d4	89 0a		 mov	 DWORD PTR [edx], ecx

; 30   : 	m_nTime(data.m_nTime)

  000d6	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000d9	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 28   : 	m_strTimeData(data.GetTimeData()),

  000dc	8d 4a 0c	 lea	 ecx, DWORD PTR [edx+12]
  000df	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000e2	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 77   : 	return m_strTimeData;

  000e5	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  000e8	50		 push	 eax

; 28   : 	m_strTimeData(data.GetTimeData()),

  000e9	89 4d ec	 mov	 DWORD PTR ___$ReturnUdt$2[ebp], ecx

; 77   : 	return m_strTimeData;

  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z

; 94   : 	m_timeDataList.AddTail(new CDrawingTimeData(drawingTimeData));

  000f2	8b 45 08	 mov	 eax, DWORD PTR $T3[ebp]
  000f5	eb 02		 jmp	 SHORT $LN26@AddDrawing
$LN25@AddDrawing:
  000f7	33 c0		 xor	 eax, eax
$LN26@AddDrawing:
  000f9	50		 push	 eax
  000fa	8b ce		 mov	 ecx, esi
  000fc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00103	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCDrawingTimeData@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingTimeData@@@Z ; CList<CDrawingTimeData *,CDrawingTimeData *>::AddTail
$LN22@AddDrawing:

; 229  : 	pDrawingHourData->AddDrawingTimeData(drawingTimeData);
; 230  : 	m_hourDataList.AddTail(pDrawingHourData);

  00108	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0010b	56		 push	 esi
  0010c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0010f	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCDrawingHourData@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingHourData@@@Z ; CList<CDrawingHourData *,CDrawingHourData *>::AddTail

; 231  : 	return true;

  00114	b0 01		 mov	 al, 1

; 232  : }

  00116	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00119	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00120	59		 pop	 ecx
  00121	5f		 pop	 edi
  00122	5e		 pop	 esi
  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	c2 04 00	 ret	 4
$LN48@AddDrawing:

; 225  : 	if(!drawingTimeData.IsExactData())
; 226  : 		return false;

  00129	32 c0		 xor	 al, al

; 232  : }

  0012b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0012e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00135	59		 pop	 ecx
  00136	5f		 pop	 edi
  00137	5e		 pop	 esi
  00138	8b e5		 mov	 esp, ebp
  0013a	5d		 pop	 ebp
  0013b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddDrawingHourData@CDrawingDateData@@QAE_NABVCDrawingTimeData@@@Z$1:
  00000	6a 10		 push	 16			; 00000010H
  00002	8b 45 08	 mov	 eax, DWORD PTR $T3[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?AddDrawingHourData@CDrawingDateData@@QAE_NABVCDrawingTimeData@@@Z:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddDrawingHourData@CDrawingDateData@@QAE_NABVCDrawingTimeData@@@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddDrawingHourData@CDrawingDateData@@QAE_NABVCDrawingTimeData@@@Z ENDP ; CDrawingDateData::AddDrawingHourData
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ??1CDrawingDateData@@QAE@XZ
_TEXT	SEGMENT
_this$1$ = -20						; size = 4
_pos$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CDrawingDateData@@QAE@XZ PROC			; CDrawingDateData::~CDrawingDateData, COMDAT
; _this$ = ecx

; 218  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CDrawingDateData@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	89 75 ec	 mov	 DWORD PTR _this$1$[ebp], esi

; 257  : 	if(m_hourDataList.GetCount() <= 0)

  0002d	83 7e 18 00	 cmp	 DWORD PTR [esi+24], 0
  00031	0f 8e fb 00 00
	00		 jle	 $LN76@CDrawingDa

; 258  : 		return false;
; 259  : 
; 260  : 	POSITION pos = m_hourDataList.GetHeadPosition();

  00037	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]

; 261  : 	while(pos != NULL){

  0003a	85 db		 test	 ebx, ebx
  0003c	0f 84 c5 00 00
	00		 je	 $LN48@CDrawingDa
$LL4@CDrawingDa:

; 262  : 		delete m_hourDataList.GetNext(pos);

  00042	8b 73 08	 mov	 esi, DWORD PTR [ebx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00045	8b 1b		 mov	 ebx, DWORD PTR [ebx]
  00047	89 5d f0	 mov	 DWORD PTR _pos$1$[ebp], ebx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 262  : 		delete m_hourDataList.GetNext(pos);

  0004a	85 f6		 test	 esi, esi
  0004c	0f 84 aa 00 00
	00		 je	 $LN13@CDrawingDa

; 117  : 	if(m_timeDataList.GetCount() <= 0)

  00052	83 7e 0c 00	 cmp	 DWORD PTR [esi+12], 0

; 84   : {

  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 117  : 	if(m_timeDataList.GetCount() <= 0)

  0005d	7e 56		 jle	 SHORT $LN83@CDrawingDa

; 118  : 		return false;
; 119  : 
; 120  : 	POSITION pos = m_timeDataList.GetHeadPosition();

  0005f	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]

; 121  : 	while(pos != NULL){

  00062	85 ff		 test	 edi, edi
  00064	74 24		 je	 SHORT $LN35@CDrawingDa
$LL19@CDrawingDa:

; 122  : 		delete m_timeDataList.GetNext(pos);

  00066	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00069	8b 3f		 mov	 edi, DWORD PTR [edi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 122  : 		delete m_timeDataList.GetNext(pos);

  0006b	85 db		 test	 ebx, ebx
  0006d	74 14		 je	 SHORT $LN28@CDrawingDa
  0006f	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00078	6a 10		 push	 16			; 00000010H
  0007a	53		 push	 ebx
  0007b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00080	83 c4 08	 add	 esp, 8
$LN28@CDrawingDa:

; 121  : 	while(pos != NULL){

  00083	85 ff		 test	 edi, edi
  00085	75 df		 jne	 SHORT $LL19@CDrawingDa
  00087	8b 5d f0	 mov	 ebx, DWORD PTR _pos$1$[ebp]
$LN35@CDrawingDa:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  0008a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0008d	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00094	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0009b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  000a2	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  000a9	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  000ae	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
$LN83@CDrawingDa:

; 872  : 	m_pBlocks->FreeDataChain();

  000b5	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 878  : {

  000b8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000bc	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@PAVCDrawingTimeData@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  000c2	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  000c9	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  000d0	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  000d7	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 872  : 	m_pBlocks->FreeDataChain();

  000de	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain
  000e3	6a 1c		 push	 28			; 0000001cH
  000e5	56		 push	 esi

; 873  : 	m_pBlocks = NULL;

  000e6	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 86   : }

  000ed	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f4	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000f9	83 c4 08	 add	 esp, 8
$LN13@CDrawingDa:

; 261  : 	while(pos != NULL){

  000fc	85 db		 test	 ebx, ebx
  000fe	0f 85 3e ff ff
	ff		 jne	 $LL4@CDrawingDa
  00104	8b 75 ec	 mov	 esi, DWORD PTR _this$1$[ebp]
$LN48@CDrawingDa:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00107	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0010a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00111	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00118	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0011f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00126	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0012b	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
$LN76@CDrawingDa:

; 872  : 	m_pBlocks->FreeDataChain();

  00132	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]

; 878  : {

  00135	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0013c	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], OFFSET ??_7?$CList@PAVCDrawingHourData@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  00143	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  0014a	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00151	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00158	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 872  : 	m_pBlocks->FreeDataChain();

  0015f	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 220  : }

  00164	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 873  : 	m_pBlocks = NULL;

  00167	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 220  : }

  0016e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00174	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00177	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0017e	59		 pop	 ecx
  0017f	5f		 pop	 edi
  00180	5e		 pop	 esi
  00181	5b		 pop	 ebx
  00182	8b e5		 mov	 esp, ebp
  00184	5d		 pop	 ebp
  00185	c3		 ret	 0
  00186	cc		 int	 3
  00187	cc		 int	 3
  00188	cc		 int	 3
  00189	cc		 int	 3
  0018a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CDrawingDateData@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CDrawingDateData@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CDrawingDateData@@QAE@XZ ENDP			; CDrawingDateData::~CDrawingDateData
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ??0CDrawingDateData@@QAE@HHABVCDrawingTimeData@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nDate$ = 8						; size = 4
_nDay$ = 12						; size = 4
_drawingTimeData$ = 16					; size = 4
??0CDrawingDateData@@QAE@HHABVCDrawingTimeData@@@Z PROC	; CDrawingDateData::CDrawingDateData, COMDAT
; _this$ = ecx

; 213  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CDrawingDateData@@QAE@HHABVCDrawingTimeData@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 211  : 	m_nDate(nDate),

  00029	8b 45 08	 mov	 eax, DWORD PTR _nDate$[ebp]

; 213  : {

  0002c	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0002f	89 06		 mov	 DWORD PTR [esi], eax
  00031	8b 45 0c	 mov	 eax, DWORD PTR _nDay$[ebp]
  00034	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 851  : {

  00044	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], OFFSET ??_7?$CList@PAVCDrawingHourData@@PAV1@@@6B@

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;

  0004b	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00052	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00059	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00060	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 856  : 	m_pBlocks = NULL;

  00067	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 857  : 	m_nBlockSize = nBlockSize;

  0006e	c7 46 24 0a 00
	00 00		 mov	 DWORD PTR [esi+36], 10	; 0000000aH
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 214  : 	AddDrawingHourData(drawingTimeData);

  00075	ff 75 10	 push	 DWORD PTR _drawingTimeData$[ebp]
  00078	8b ce		 mov	 ecx, esi
  0007a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0007e	e8 00 00 00 00	 call	 ?AddDrawingHourData@CDrawingDateData@@QAE_NABVCDrawingTimeData@@@Z ; CDrawingDateData::AddDrawingHourData

; 215  : }

  00083	8b c6		 mov	 eax, esi
  00085	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00088	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008f	59		 pop	 ecx
  00090	5e		 pop	 esi
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CDrawingDateData@@QAE@HHABVCDrawingTimeData@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$??0CDrawingDateData@@QAE@HHABVCDrawingTimeData@@@Z$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	e9 00 00 00 00	 jmp	 ??1?$CList@PAVCDrawingHourData@@PAV1@@@UAE@XZ ; CList<CDrawingHourData *,CDrawingHourData *>::~CList<CDrawingHourData *,CDrawingHourData *>
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
__ehhandler$??0CDrawingDateData@@QAE@HHABVCDrawingTimeData@@@Z:
  0001c	90		 npad	 1
  0001d	90		 npad	 1
  0001e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00022	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00025	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CDrawingDateData@@QAE@HHABVCDrawingTimeData@@@Z
  00034	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CDrawingDateData@@QAE@HHABVCDrawingTimeData@@@Z ENDP	; CDrawingDateData::CDrawingDateData
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ??0CDrawingDateData@@QAE@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCDrawingTimeData@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_strDateData$ = 8					; size = 4
_drawingTimeData$ = 12					; size = 4
??0CDrawingDateData@@QAE@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCDrawingTimeData@@@Z PROC ; CDrawingDateData::CDrawingDateData, COMDAT
; _this$ = ecx

; 206  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CDrawingDateData@@QAE@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCDrawingTimeData@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 203  : 	m_strDateData(strDateData),

  00029	ff 75 08	 push	 DWORD PTR _strDateData$[ebp]
  0002c	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0002f	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1
  00035	c7 46 04 ff ff
	ff ff		 mov	 DWORD PTR [esi+4], -1
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 851  : {

  00049	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], OFFSET ??_7?$CList@PAVCDrawingHourData@@PAV1@@@6B@

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;

  00050	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00057	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  0005e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00065	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 856  : 	m_pBlocks = NULL;

  0006c	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 857  : 	m_nBlockSize = nBlockSize;

  00073	c7 46 24 0a 00
	00 00		 mov	 DWORD PTR [esi+36], 10	; 0000000aH
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 207  : 	AddDrawingHourData(drawingTimeData);

  0007a	ff 75 0c	 push	 DWORD PTR _drawingTimeData$[ebp]
  0007d	8b ce		 mov	 ecx, esi
  0007f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00083	e8 00 00 00 00	 call	 ?AddDrawingHourData@CDrawingDateData@@QAE_NABVCDrawingTimeData@@@Z ; CDrawingDateData::AddDrawingHourData

; 208  : }

  00088	8b c6		 mov	 eax, esi
  0008a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00094	59		 pop	 ecx
  00095	5e		 pop	 esi
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CDrawingDateData@@QAE@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCDrawingTimeData@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$??0CDrawingDateData@@QAE@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCDrawingTimeData@@@Z$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	e9 00 00 00 00	 jmp	 ??1?$CList@PAVCDrawingHourData@@PAV1@@@UAE@XZ ; CList<CDrawingHourData *,CDrawingHourData *>::~CList<CDrawingHourData *,CDrawingHourData *>
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
__ehhandler$??0CDrawingDateData@@QAE@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCDrawingTimeData@@@Z:
  0001c	90		 npad	 1
  0001d	90		 npad	 1
  0001e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00022	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00025	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CDrawingDateData@@QAE@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCDrawingTimeData@@@Z
  00034	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CDrawingDateData@@QAE@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCDrawingTimeData@@@Z ENDP ; CDrawingDateData::CDrawingDateData
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ??0CDrawingDateData@@QAE@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_strDateData$ = 8					; size = 4
??0CDrawingDateData@@QAE@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC ; CDrawingDateData::CDrawingDateData, COMDAT
; _this$ = ecx

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 196  : 	m_strDateData(strDateData),

  00005	ff 75 08	 push	 DWORD PTR _strDateData$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000d	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00010	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1
  00016	c7 46 04 ff ff
	ff ff		 mov	 DWORD PTR [esi+4], -1
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 851  : {

  00023	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], OFFSET ??_7?$CList@PAVCDrawingHourData@@PAV1@@@6B@
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 200  : }

  0002a	8b c6		 mov	 eax, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 854  : 	m_nCount = 0;

  0002c	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00033	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  0003a	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00041	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 856  : 	m_pBlocks = NULL;

  00048	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 857  : 	m_nBlockSize = nBlockSize;

  0004f	c7 46 24 0a 00
	00 00		 mov	 DWORD PTR [esi+36], 10	; 0000000aH
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 200  : }

  00056	5e		 pop	 esi
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
??0CDrawingDateData@@QAE@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CDrawingDateData::CDrawingDateData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_G?$CList@PAVCDrawingTimeData@@PAV1@@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$CList@PAVCDrawingTimeData@@PAV1@@@UAEPAXI@Z PROC	; CList<CDrawingTimeData *,CDrawingTimeData *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$CList@PAVCDrawingTimeData@@PAV1@@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00025	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 878  : {

  00028	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@PAVCDrawingTimeData@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  00035	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  0003c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00043	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0004a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 872  : 	m_pBlocks->FreeDataChain();

  00051	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00056	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00059	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00060	a8 01		 test	 al, 1
  00062	74 2c		 je	 SHORT $LN22@scalar
  00064	a8 04		 test	 al, 4
  00066	75 1d		 jne	 SHORT $LN3@scalar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 112  : 	{ ::operator delete(p); }

  00068	56		 push	 esi
  00069	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006e	83 c4 04	 add	 esp, 4
  00071	8b c6		 mov	 eax, esi
  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007d	59		 pop	 ecx
  0007e	5e		 pop	 esi
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
$LN3@scalar:
  00085	6a 1c		 push	 28			; 0000001cH
  00087	56		 push	 esi
  00088	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0008d	83 c4 08	 add	 esp, 8
$LN22@scalar:
  00090	8b c6		 mov	 eax, esi
  00092	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00095	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009c	59		 pop	 ecx
  0009d	5e		 pop	 esi
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 04 00	 ret	 4
  000a4	cc		 int	 3
  000a5	cc		 int	 3
  000a6	cc		 int	 3
  000a7	cc		 int	 3
  000a8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_G?$CList@PAVCDrawingTimeData@@PAV1@@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$CList@PAVCDrawingTimeData@@PAV1@@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$CList@PAVCDrawingTimeData@@PAV1@@@UAEPAXI@Z ENDP	; CList<CDrawingTimeData *,CDrawingTimeData *>::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CList@PAVCDrawingTimeData@@PAV1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_nNewCount$1$ = -16					; size = 4
_newData$1 = -12					; size = 4
_pData$1$ = -8						; size = 4
_pNode$1$ = -8						; size = 4
_nElementsLeft$1$ = -4					; size = 4
_this$1$ = -4						; size = 4
_ar$ = 8						; size = 4
?Serialize@?$CList@PAVCDrawingTimeData@@PAV1@@@UAEXAAVCArchive@@@Z PROC ; CList<CDrawingTimeData *,CDrawingTimeData *>::Serialize, COMDAT
; _this$ = ecx

; 1169 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00009	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1169 : {

  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00011	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00014	f7 d0		 not	 eax
  00016	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1174 : 	if (ar.IsStoring())

  00018	0f 84 ae 00 00
	00		 je	 $LN7@Serialize

; 1175 : 	{
; 1176 : 		ar.WriteCount(m_nCount);

  0001e	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00021	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00026	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00029	89 45 f8	 mov	 DWORD PTR _pNode$1$[ebp], eax
  0002c	85 c0		 test	 eax, eax
  0002e	0f 84 43 01 00
	00		 je	 $LN68@Serialize
$LL4@Serialize:

; 1178 : 		{
; 1179 : 			ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1180 : 			TYPE* pData;
; 1181 : 			/*
; 1182 : 			 * in some cases the & operator might be overloaded, and we cannot use it to obtain
; 1183 : 			 * the address of a given object.  We then use the following trick to get the address
; 1184 : 			 */
; 1185 : 			pData = reinterpret_cast< TYPE* >( &reinterpret_cast< int& >( static_cast< TYPE& >( pNode->data ) ) );

  00034	8d 70 08	 lea	 esi, DWORD PTR [eax+8]

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00037	85 f6		 test	 esi, esi
  00039	0f 84 4a 01 00
	00		 je	 $LN60@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00042	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00045	f7 d0		 not	 eax
  00047	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00049	74 33		 je	 SHORT $LN21@Serialize

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0004b	b8 01 00 00 00	 mov	 eax, 1
  00050	89 45 fc	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
$LL16@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00053	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00058	3b c3		 cmp	 eax, ebx
  0005a	0f 42 d8	 cmovb	 ebx, eax

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0005d	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
  00064	57		 push	 edi
  00065	56		 push	 esi
  00066	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _nElementsLeft$1$[ebp]

; 87   : 			pData += nElementsToWrite;

  0006e	03 f7		 add	 esi, edi
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00073	2b c3		 sub	 eax, ebx
  00075	89 45 fc	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
  00078	85 c0		 test	 eax, eax
  0007a	75 d7		 jne	 SHORT $LL16@Serialize

; 88   : 		}
; 89   : 	}

  0007c	eb 35		 jmp	 SHORT $LN2@Serialize
$LN21@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  0007e	bf 01 00 00 00	 mov	 edi, 1
$LL18@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00083	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00088	3b fb		 cmp	 edi, ebx
  0008a	0f 42 df	 cmovb	 ebx, edi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0008d	8d 04 9d 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00094	50		 push	 eax
  00095	56		 push	 esi
  00096	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0009b	8d 0c 9d 00 00
	00 00		 lea	 ecx, DWORD PTR [ebx*4]
  000a2	3b c1		 cmp	 eax, ecx
  000a4	0f 85 d6 00 00
	00		 jne	 $LN59@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  000aa	03 f1		 add	 esi, ecx
  000ac	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;

  000af	2b fb		 sub	 edi, ebx
  000b1	75 d0		 jne	 SHORT $LL18@Serialize
$LN2@Serialize:

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  000b3	8b 45 f8	 mov	 eax, DWORD PTR _pNode$1$[ebp]
  000b6	8b 00		 mov	 eax, DWORD PTR [eax]
  000b8	89 45 f8	 mov	 DWORD PTR _pNode$1$[ebp], eax
  000bb	85 c0		 test	 eax, eax
  000bd	0f 85 71 ff ff
	ff		 jne	 $LL4@Serialize

; 1197 : 		}
; 1198 : 	}
; 1199 : }

  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 04 00	 ret	 4
$LN7@Serialize:

; 1186 : 			SerializeElements<TYPE>(ar, pData, 1);
; 1187 : 		}
; 1188 : 	}
; 1189 : 	else
; 1190 : 	{
; 1191 : 		DWORD_PTR nNewCount = ar.ReadCount();

  000cc	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount

; 1192 : 		while (nNewCount--)

  000d1	85 c0		 test	 eax, eax
  000d3	0f 84 9e 00 00
	00		 je	 $LN68@Serialize
  000d9	0f 1f 80 00 00
	00 00		 npad	 7
$LL5@Serialize:
  000e0	48		 dec	 eax
  000e1	89 45 f0	 mov	 DWORD PTR _nNewCount$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  000e4	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  000e7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000ea	f7 d1		 not	 ecx
  000ec	f6 c1 01	 test	 cl, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  000ef	74 3a		 je	 SHORT $LN42@Serialize

; 79   : 		pData = pElements;

  000f1	8d 4d f4	 lea	 ecx, DWORD PTR _newData$1[ebp]
  000f4	bb 01 00 00 00	 mov	 ebx, 1
  000f9	89 4d f8	 mov	 DWORD PTR _pData$1$[ebp], ecx
  000fc	0f 1f 40 00	 npad	 4
$LL37@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00100	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00105	3b df		 cmp	 ebx, edi
  00107	0f 42 fb	 cmovb	 edi, ebx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0010a	8d 34 bd 00 00
	00 00		 lea	 esi, DWORD PTR [edi*4]
  00111	56		 push	 esi
  00112	51		 push	 ecx
  00113	8b c8		 mov	 ecx, eax
  00115	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 87   : 			pData += nElementsToWrite;

  0011a	8b 4d f8	 mov	 ecx, DWORD PTR _pData$1$[ebp]
  0011d	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  00120	03 ce		 add	 ecx, esi
  00122	89 4d f8	 mov	 DWORD PTR _pData$1$[ebp], ecx
  00125	2b df		 sub	 ebx, edi
  00127	75 d7		 jne	 SHORT $LL37@Serialize

; 88   : 		}
; 89   : 	}

  00129	eb 36		 jmp	 SHORT $LN40@Serialize
$LN42@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  0012b	be 01 00 00 00	 mov	 esi, 1

; 96   : 		pData = pElements;

  00130	8d 5d f4	 lea	 ebx, DWORD PTR _newData$1[ebp]
$LL39@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00133	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00138	3b f7		 cmp	 esi, edi
  0013a	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0013d	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00144	51		 push	 ecx
  00145	53		 push	 ebx
  00146	8b c8		 mov	 ecx, eax
  00148	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0014d	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
  00154	3b c1		 cmp	 eax, ecx
  00156	75 28		 jne	 SHORT $LN59@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 104  : 			pData += nElementsToRead;

  00158	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  0015b	03 d9		 add	 ebx, ecx
  0015d	2b f7		 sub	 esi, edi
  0015f	75 d2		 jne	 SHORT $LL39@Serialize
$LN40@Serialize:

; 1193 : 		{
; 1194 : 			TYPE newData[1];
; 1195 : 			SerializeElements<TYPE>(ar, newData, 1);
; 1196 : 			AddTail(newData[0]);

  00161	ff 75 f4	 push	 DWORD PTR _newData$1[ebp]
  00164	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00167	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCDrawingTimeData@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingTimeData@@@Z ; CList<CDrawingTimeData *,CDrawingTimeData *>::AddTail
  0016c	8b 45 f0	 mov	 eax, DWORD PTR _nNewCount$1$[ebp]
  0016f	85 c0		 test	 eax, eax
  00171	0f 85 69 ff ff
	ff		 jne	 $LL5@Serialize
$LN68@Serialize:
  00177	5f		 pop	 edi

; 1197 : 		}
; 1198 : 	}
; 1199 : }

  00178	5e		 pop	 esi
  00179	5b		 pop	 ebx
  0017a	8b e5		 mov	 esp, ebp
  0017c	5d		 pop	 ebp
  0017d	c2 04 00	 ret	 4
$LN59@Serialize:
  00180	6a 00		 push	 0
  00182	6a 03		 push	 3
  00184	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN60@Serialize:

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00189	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN85@Serialize:
  0018e	cc		 int	 3
?Serialize@?$CList@PAVCDrawingTimeData@@PAV1@@@UAEXAAVCArchive@@@Z ENDP ; CList<CDrawingTimeData *,CDrawingTimeData *>::Serialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??1?$CList@PAVCDrawingTimeData@@PAV1@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CList@PAVCDrawingTimeData@@PAV1@@@UAE@XZ PROC	; CList<CDrawingTimeData *,CDrawingTimeData *>::~CList<CDrawingTimeData *,CDrawingTimeData *>, COMDAT
; _this$ = ecx

; 878  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CList@PAVCDrawingTimeData@@PAV1@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 872  : 	m_pBlocks->FreeDataChain();

  00025	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 878  : {

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@PAVCDrawingTimeData@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  0002e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00035	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0003c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00043	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 872  : 	m_pBlocks->FreeDataChain();

  0004a	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0004f	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 879  : 	RemoveAll();
; 880  : 	ASSERT(m_nCount == 0);
; 881  : }

  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	5e		 pop	 esi
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
  00066	cc		 int	 3
  00067	cc		 int	 3
  00068	cc		 int	 3
  00069	cc		 int	 3
  0006a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CList@PAVCDrawingTimeData@@PAV1@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CList@PAVCDrawingTimeData@@PAV1@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CList@PAVCDrawingTimeData@@PAV1@@@UAE@XZ ENDP	; CList<CDrawingTimeData *,CDrawingTimeData *>::~CList<CDrawingTimeData *,CDrawingTimeData *>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?NewNode@?$CList@PAVCDrawingTimeData@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z
_TEXT	SEGMENT
_pPrev$ = 8						; size = 4
_pNext$ = 12						; size = 4
?NewNode@?$CList@PAVCDrawingTimeData@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z PROC ; CList<CDrawingTimeData *,CDrawingTimeData *>::NewNode, COMDAT
; _this$ = ecx

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 902  : 	if (m_pNodeFree == NULL)

  00006	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0000a	75 34		 jne	 SHORT $LN7@NewNode

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  0000c	6a 0c		 push	 12			; 0000000cH
  0000e	ff 76 18	 push	 DWORD PTR [esi+24]
  00011	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001a	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0001d	83 c0 08	 add	 eax, 8
  00020	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  00023	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00026	83 c0 f4	 add	 eax, -12		; fffffff4H

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00029	83 c2 ff	 add	 edx, -1
  0002c	78 12		 js	 SHORT $LN7@NewNode
  0002e	66 90		 npad	 2
$LL4@NewNode:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	89 08		 mov	 DWORD PTR [eax], ecx

; 915  : 			m_pNodeFree = pNode;

  00035	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00038	83 e8 0c	 sub	 eax, 12			; 0000000cH
  0003b	83 ea 01	 sub	 edx, 1
  0003e	79 f0		 jns	 SHORT $LL4@NewNode
$LN7@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00040	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00043	85 c0		 test	 eax, eax
  00045	74 18		 je	 SHORT $LN17@NewNode

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00047	8b 08		 mov	 ecx, DWORD PTR [eax]
  00049	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 922  : 	pNode->pPrev = pPrev;

  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _pPrev$[ebp]
  0004f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 923  : 	pNode->pNext = pNext;

  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _pNext$[ebp]
  00055	89 08		 mov	 DWORD PTR [eax], ecx

; 924  : 	m_nCount++;

  00057	ff 46 0c	 inc	 DWORD PTR [esi+12]

; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;
; 930  : #pragma pop_macro("new")
; 931  : 	return pNode;

  0005a	5e		 pop	 esi

; 932  : }

  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
$LN17@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  0005f	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN15@NewNode:
  00064	cc		 int	 3
?NewNode@?$CList@PAVCDrawingTimeData@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z ENDP ; CList<CDrawingTimeData *,CDrawingTimeData *>::NewNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?FindIndex@?$CList@PAVCDrawingTimeData@@PAV1@@@QBEPAU__POSITION@@H@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?FindIndex@?$CList@PAVCDrawingTimeData@@PAV1@@@QBEPAU__POSITION@@H@Z PROC ; CList<CDrawingTimeData *,CDrawingTimeData *>::FindIndex, COMDAT
; _this$ = ecx

; 1130 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1131 : 	ASSERT_VALID(this);
; 1132 : 
; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00003	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00006	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00009	7d 14		 jge	 SHORT $LN5@FindIndex
  0000b	85 d2		 test	 edx, edx
  0000d	78 10		 js	 SHORT $LN5@FindIndex

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0000f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1137 : 	while (nIndex--)

  00012	74 0d		 je	 SHORT $LN1@FindIndex
$LL2@FindIndex:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	83 ea 01	 sub	 edx, 1
  00019	75 f9		 jne	 SHORT $LL2@FindIndex

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;
; 1143 : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
$LN5@FindIndex:

; 1134 : 		return NULL;  // went too far

  0001f	33 c0		 xor	 eax, eax
$LN1@FindIndex:

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;
; 1143 : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?FindIndex@?$CList@PAVCDrawingTimeData@@PAV1@@@QBEPAU__POSITION@@H@Z ENDP ; CList<CDrawingTimeData *,CDrawingTimeData *>::FindIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAll@?$CList@PAVCDrawingTimeData@@PAV1@@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@?$CList@PAVCDrawingTimeData@@PAV1@@@QAEXXZ PROC ; CList<CDrawingTimeData *,CDrawingTimeData *>::RemoveAll, COMDAT
; _this$ = ecx

; 862  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 863  : 	ASSERT_VALID(this);
; 864  : 
; 865  : 	// destroy elements
; 866  : 	CNode* pNode;
; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)
; 868  : 		pNode->data.~TYPE();
; 869  : 
; 870  : 	m_nCount = 0;
; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 872  : 	m_pBlocks->FreeDataChain();

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0000d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00014	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0001b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00022	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00027	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0002e	5e		 pop	 esi

; 874  : }

  0002f	c3		 ret	 0
?RemoveAll@?$CList@PAVCDrawingTimeData@@PAV1@@@QAEXXZ ENDP ; CList<CDrawingTimeData *,CDrawingTimeData *>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?AddTail@?$CList@PAVCDrawingTimeData@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingTimeData@@@Z
_TEXT	SEGMENT
_newElement$ = 8					; size = 4
?AddTail@?$CList@PAVCDrawingTimeData@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingTimeData@@@Z PROC ; CList<CDrawingTimeData *,CDrawingTimeData *>::AddTail, COMDAT
; _this$ = ecx

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 902  : 	if (m_pNodeFree == NULL)

  00007	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0

; 966  : 	ASSERT_VALID(this);
; 967  : 
; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  0000b	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 902  : 	if (m_pNodeFree == NULL)

  0000e	75 32		 jne	 SHORT $LN11@AddTail

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  00010	6a 0c		 push	 12			; 0000000cH
  00012	ff 76 18	 push	 DWORD PTR [esi+24]
  00015	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001e	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00021	83 c0 08	 add	 eax, 8
  00024	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00027	83 c2 ff	 add	 edx, -1
  0002a	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  0002d	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  00030	78 10		 js	 SHORT $LN11@AddTail
$LL8@AddTail:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00032	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00035	89 01		 mov	 DWORD PTR [ecx], eax

; 915  : 			m_pNodeFree = pNode;

  00037	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0003a	83 e9 0c	 sub	 ecx, 12			; 0000000cH
  0003d	83 ea 01	 sub	 edx, 1
  00040	79 f0		 jns	 SHORT $LL8@AddTail
$LN11@AddTail:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00042	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00045	85 c9		 test	 ecx, ecx
  00047	74 39		 je	 SHORT $LN22@AddTail

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00049	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004b	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 969  : 	pNewNode->data = newElement;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]

; 922  : 	pNode->pPrev = pPrev;

  00051	89 79 04	 mov	 DWORD PTR [ecx+4], edi

; 923  : 	pNode->pNext = pNext;

  00054	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 924  : 	m_nCount++;

  0005a	ff 46 0c	 inc	 DWORD PTR [esi+12]

; 969  : 	pNewNode->data = newElement;

  0005d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 970  : 	if (m_pNodeTail != NULL)

  00060	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00063	85 c0		 test	 eax, eax
  00065	74 0d		 je	 SHORT $LN2@AddTail

; 971  : 		m_pNodeTail->pNext = pNewNode;

  00067	89 08		 mov	 DWORD PTR [eax], ecx

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00069	8b c1		 mov	 eax, ecx
  0006b	5f		 pop	 edi
  0006c	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0006f	5e		 pop	 esi

; 976  : }

  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
$LN2@AddTail:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00074	5f		 pop	 edi
  00075	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00078	8b c1		 mov	 eax, ecx
  0007a	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0007d	5e		 pop	 esi

; 976  : }

  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
$LN22@AddTail:

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00082	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN20@AddTail:
  00087	cc		 int	 3
?AddTail@?$CList@PAVCDrawingTimeData@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingTimeData@@@Z ENDP ; CList<CDrawingTimeData *,CDrawingTimeData *>::AddTail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??0?$CList@PAVCDrawingTimeData@@PAV1@@@QAE@H@Z
_TEXT	SEGMENT
_nBlockSize$ = 8					; size = 4
??0?$CList@PAVCDrawingTimeData@@PAV1@@@QAE@H@Z PROC	; CList<CDrawingTimeData *,CDrawingTimeData *>::CList<CDrawingTimeData *,CDrawingTimeData *>, COMDAT
; _this$ = ecx

; 851  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;
; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 856  : 	m_pBlocks = NULL;
; 857  : 	m_nBlockSize = nBlockSize;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nBlockSize$[ebp]
  00006	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 858  : }

  00009	8b c1		 mov	 eax, ecx
  0000b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CList@PAVCDrawingTimeData@@PAV1@@@6B@
  00011	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00018	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0001f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00026	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0002d	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??0?$CList@PAVCDrawingTimeData@@PAV1@@@QAE@H@Z ENDP	; CList<CDrawingTimeData *,CDrawingTimeData *>::CList<CDrawingTimeData *,CDrawingTimeData *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetHeadTimeData_Data@CDrawingHourData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetHeadTimeData_Data@CDrawingHourData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ PROC ; CDrawingHourData::GetHeadTimeData_Data, COMDAT
; _this$ = ecx

; 183  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00003	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 183  : {

  00007	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00008	7e 23		 jle	 SHORT $LN27@GetHeadTim

; 1134 : 		return NULL;  // went too far
; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;
; 1137 : 	while (nIndex--)
; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;
; 1141 : 	}
; 1142 : 	return (POSITION) pNode;

  0000a	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 161  : 	if(pos == NULL)

  0000d	85 c0		 test	 eax, eax
  0000f	74 1c		 je	 SHORT $LN27@GetHeadTim

; 162  : 		return NULL;
; 163  : 	return m_timeDataList.GetAt(pos);

  00011	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 184  : 	CDrawingTimeData* pDrawingTimeData = GetTimeData(0);
; 185  : 	if(pDrawingTimeData == NULL)

  00014	85 c0		 test	 eax, eax
  00016	74 15		 je	 SHORT $LN27@GetHeadTim

; 77   : 	return m_strTimeData;

  00018	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001b	83 c0 0c	 add	 eax, 12			; 0000000cH
  0001e	50		 push	 eax
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z

; 187  : 
; 188  : 	return pDrawingTimeData->GetTimeData();
; 189  : }

  00025	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
$LN27@GetHeadTim:

; 186  : 		return "-1";//tour2k

  0002d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_02PGHGPEOM@?91@
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z

; 187  : 
; 188  : 	return pDrawingTimeData->GetTimeData();
; 189  : }

  0003b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003e	5e		 pop	 esi
  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?GetHeadTimeData_Data@CDrawingHourData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ENDP ; CDrawingHourData::GetHeadTimeData_Data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetHeadTimeData_Index@CDrawingHourData@@QBEHXZ
_TEXT	SEGMENT
?GetHeadTimeData_Index@CDrawingHourData@@QBEHXZ PROC	; CDrawingHourData::GetHeadTimeData_Index, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00000	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00004	7e 12		 jle	 SHORT $LN21@GetHeadTim

; 1134 : 		return NULL;  // went too far
; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;
; 1137 : 	while (nIndex--)
; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;
; 1141 : 	}
; 1142 : 	return (POSITION) pNode;

  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 161  : 	if(pos == NULL)

  00009	85 c0		 test	 eax, eax
  0000b	74 0b		 je	 SHORT $LN21@GetHeadTim

; 162  : 		return NULL;
; 163  : 	return m_timeDataList.GetAt(pos);

  0000d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 175  : 	CDrawingTimeData* pDrawingTimeData = GetTimeData(0);
; 176  : 	if(pDrawingTimeData == NULL)

  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN21@GetHeadTim

; 178  : 
; 179  : 	return pDrawingTimeData->GetIndex();

  00014	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 180  : }

  00017	c3		 ret	 0
$LN21@GetHeadTim:

; 177  : 		return -1;

  00018	83 c8 ff	 or	 eax, -1

; 180  : }

  0001b	c3		 ret	 0
?GetHeadTimeData_Index@CDrawingHourData@@QBEHXZ ENDP	; CDrawingHourData::GetHeadTimeData_Index
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetNext_TimeData@CDrawingHourData@@QBEPAVCDrawingTimeData@@AAPAU__POSITION@@@Z
_TEXT	SEGMENT
_pos$ = 8						; size = 4
?GetNext_TimeData@CDrawingHourData@@QBEPAVCDrawingTimeData@@AAPAU__POSITION@@@Z PROC ; CDrawingHourData::GetNext_TimeData, COMDAT
; _this$ = ecx

; 167  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 168  : 	if(pos == NULL)

  00003	8b 55 08	 mov	 edx, DWORD PTR _pos$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	85 c0		 test	 eax, eax
  0000a	75 04		 jne	 SHORT $LN2@GetNext_Ti

; 171  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
$LN2@GetNext_Ti:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 819  : 		rPosition = (POSITION) pNode->pNext;

  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	89 0a		 mov	 DWORD PTR [edx], ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 170  : 	return m_timeDataList.GetNext(pos);

  00014	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 171  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?GetNext_TimeData@CDrawingHourData@@QBEPAVCDrawingTimeData@@AAPAU__POSITION@@@Z ENDP ; CDrawingHourData::GetNext_TimeData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetTimeData@CDrawingHourData@@QBEPAVCDrawingTimeData@@ABQAU__POSITION@@@Z
_TEXT	SEGMENT
_pos$ = 8						; size = 4
?GetTimeData@CDrawingHourData@@QBEPAVCDrawingTimeData@@ABQAU__POSITION@@@Z PROC ; CDrawingHourData::GetTimeData, COMDAT
; _this$ = ecx

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 161  : 	if(pos == NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _pos$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	85 c0		 test	 eax, eax
  0000a	75 04		 jne	 SHORT $LN2@GetTimeDat

; 164  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
$LN2@GetTimeDat:

; 162  : 		return NULL;
; 163  : 	return m_timeDataList.GetAt(pos);

  00010	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 164  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?GetTimeData@CDrawingHourData@@QBEPAVCDrawingTimeData@@ABQAU__POSITION@@@Z ENDP ; CDrawingHourData::GetTimeData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetTimeData@CDrawingHourData@@QBEPAVCDrawingTimeData@@H@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?GetTimeData@CDrawingHourData@@QBEPAVCDrawingTimeData@@H@Z PROC ; CDrawingHourData::GetTimeData, COMDAT
; _this$ = ecx

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 156  : 	return GetTimeData(m_timeDataList.FindIndex(nIndex));

  00003	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00006	3b 41 0c	 cmp	 eax, DWORD PTR [ecx+12]
  00009	7d 1b		 jge	 SHORT $LN17@GetTimeDat
  0000b	85 c0		 test	 eax, eax
  0000d	78 17		 js	 SHORT $LN17@GetTimeDat

; 1134 : 		return NULL;  // went too far
; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0000f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 1137 : 	while (nIndex--)

  00012	74 07		 je	 SHORT $LN13@GetTimeDat
$LL4@GetTimeDat:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00014	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00016	83 e8 01	 sub	 eax, 1
  00019	75 f9		 jne	 SHORT $LL4@GetTimeDat
$LN13@GetTimeDat:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 161  : 	if(pos == NULL)

  0001b	85 c9		 test	 ecx, ecx
  0001d	74 07		 je	 SHORT $LN17@GetTimeDat

; 156  : 	return GetTimeData(m_timeDataList.FindIndex(nIndex));

  0001f	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 157  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN17@GetTimeDat:

; 156  : 	return GetTimeData(m_timeDataList.FindIndex(nIndex));

  00026	33 c0		 xor	 eax, eax

; 157  : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?GetTimeData@CDrawingHourData@@QBEPAVCDrawingTimeData@@H@Z ENDP ; CDrawingHourData::GetTimeData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetHeadTimeData@CDrawingHourData@@QBEPAVCDrawingTimeData@@XZ
_TEXT	SEGMENT
?GetHeadTimeData@CDrawingHourData@@QBEPAVCDrawingTimeData@@XZ PROC ; CDrawingHourData::GetHeadTimeData, COMDAT
; _this$ = ecx

; 151  : 	return GetTimeData(m_timeDataList.GetHeadPosition());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 161  : 	if(pos == NULL)

  00003	85 c0		 test	 eax, eax
  00005	75 01		 jne	 SHORT $LN4@GetHeadTim

; 152  : }

  00007	c3		 ret	 0
$LN4@GetHeadTim:

; 151  : 	return GetTimeData(m_timeDataList.GetHeadPosition());

  00008	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 152  : }

  0000b	c3		 ret	 0
?GetHeadTimeData@CDrawingHourData@@QBEPAVCDrawingTimeData@@XZ ENDP ; CDrawingHourData::GetHeadTimeData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetTailTimeDataPosition@CDrawingHourData@@QBEPAU__POSITION@@XZ
_TEXT	SEGMENT
?GetTailTimeDataPosition@CDrawingHourData@@QBEPAU__POSITION@@XZ PROC ; CDrawingHourData::GetTailTimeDataPosition, COMDAT
; _this$ = ecx

; 146  : 	return m_timeDataList.GetTailPosition();

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 147  : }

  00003	c3		 ret	 0
?GetTailTimeDataPosition@CDrawingHourData@@QBEPAU__POSITION@@XZ ENDP ; CDrawingHourData::GetTailTimeDataPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetHeadTimeDataPosition@CDrawingHourData@@QBEPAU__POSITION@@XZ
_TEXT	SEGMENT
?GetHeadTimeDataPosition@CDrawingHourData@@QBEPAU__POSITION@@XZ PROC ; CDrawingHourData::GetHeadTimeDataPosition, COMDAT
; _this$ = ecx

; 141  : 	return m_timeDataList.GetHeadPosition();

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 142  : }

  00003	c3		 ret	 0
?GetHeadTimeDataPosition@CDrawingHourData@@QBEPAU__POSITION@@XZ ENDP ; CDrawingHourData::GetHeadTimeDataPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetTimeDataCount@CDrawingHourData@@QBEHXZ
_TEXT	SEGMENT
?GetTimeDataCount@CDrawingHourData@@QBEHXZ PROC		; CDrawingHourData::GetTimeDataCount, COMDAT
; _this$ = ecx

; 136  : 	return m_timeDataList.GetCount();

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 137  : }

  00003	c3		 ret	 0
?GetTimeDataCount@CDrawingHourData@@QBEHXZ ENDP		; CDrawingHourData::GetTimeDataCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetTimeDataList@CDrawingHourData@@QAEPAV?$CList@PAVCDrawingTimeData@@PAV1@@@XZ
_TEXT	SEGMENT
?GetTimeDataList@CDrawingHourData@@QAEPAV?$CList@PAVCDrawingTimeData@@PAV1@@@XZ PROC ; CDrawingHourData::GetTimeDataList, COMDAT
; _this$ = ecx

; 131  : 	return &m_timeDataList;

  00000	8b c1		 mov	 eax, ecx

; 132  : }

  00002	c3		 ret	 0
?GetTimeDataList@CDrawingHourData@@QAEPAV?$CList@PAVCDrawingTimeData@@PAV1@@@XZ ENDP ; CDrawingHourData::GetTimeDataList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?DeleteAll@CDrawingHourData@@QAE_NXZ
_TEXT	SEGMENT
?DeleteAll@CDrawingHourData@@QAE_NXZ PROC		; CDrawingHourData::DeleteAll, COMDAT
; _this$ = ecx

; 116  : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 117  : 	if(m_timeDataList.GetCount() <= 0)

  00003	83 7b 0c 00	 cmp	 DWORD PTR [ebx+12], 0
  00007	7f 04		 jg	 SHORT $LN4@DeleteAll

; 118  : 		return false;

  00009	32 c0		 xor	 al, al
  0000b	5b		 pop	 ebx

; 126  : }

  0000c	c3		 ret	 0
$LN4@DeleteAll:
  0000d	56		 push	 esi

; 119  : 
; 120  : 	POSITION pos = m_timeDataList.GetHeadPosition();

  0000e	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]

; 121  : 	while(pos != NULL){

  00011	85 f6		 test	 esi, esi
  00013	74 23		 je	 SHORT $LN18@DeleteAll
  00015	57		 push	 edi
$LL2@DeleteAll:

; 122  : 		delete m_timeDataList.GetNext(pos);

  00016	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00019	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 122  : 		delete m_timeDataList.GetNext(pos);

  0001b	85 ff		 test	 edi, edi
  0001d	74 14		 je	 SHORT $LN11@DeleteAll
  0001f	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00028	6a 10		 push	 16			; 00000010H
  0002a	57		 push	 edi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00030	83 c4 08	 add	 esp, 8
$LN11@DeleteAll:

; 121  : 	while(pos != NULL){

  00033	85 f6		 test	 esi, esi
  00035	75 df		 jne	 SHORT $LL2@DeleteAll
  00037	5f		 pop	 edi
$LN18@DeleteAll:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00038	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  0003b	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0
  00042	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  00049	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
  00050	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  00057	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 125  : 	return true;

  0005c	5e		 pop	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 873  : 	m_pBlocks = NULL;

  0005d	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 125  : 	return true;

  00064	b0 01		 mov	 al, 1
  00066	5b		 pop	 ebx

; 126  : }

  00067	c3		 ret	 0
?DeleteAll@CDrawingHourData@@QAE_NXZ ENDP		; CDrawingHourData::DeleteAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?AddDrawingTimeData@CDrawingHourData@@QAE_NHHH@Z
_TEXT	SEGMENT
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T2 = 8							; size = 4
_nIndex$ = 8						; size = 4
_nDate$ = 12						; size = 4
_nTime$ = 16						; size = 4
?AddDrawingTimeData@CDrawingHourData@@QAE_NHHH@Z PROC	; CDrawingHourData::AddDrawingTimeData, COMDAT
; _this$ = ecx

; 108  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AddDrawingTimeData@CDrawingHourData@@QAE_NHHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	89 4d f0	 mov	 DWORD PTR _this$1$[ebp], ecx

; 109  : 	if(nIndex < 0 || nTime < 0) return false;

  00029	8b 5d 08	 mov	 ebx, DWORD PTR _nIndex$[ebp]
  0002c	85 db		 test	 ebx, ebx
  0002e	78 64		 js	 SHORT $LN3@AddDrawing
  00030	8b 7d 10	 mov	 edi, DWORD PTR _nTime$[ebp]
  00033	85 ff		 test	 edi, edi
  00035	78 5d		 js	 SHORT $LN3@AddDrawing

; 110  : 
; 111  : 	m_timeDataList.AddTail(new CDrawingTimeData(nIndex, nDate, nTime));

  00037	6a 10		 push	 16			; 00000010H
  00039	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003e	8b f0		 mov	 esi, eax
  00040	83 c4 04	 add	 esp, 4
  00043	89 75 08	 mov	 DWORD PTR $T2[ebp], esi
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 f6		 test	 esi, esi
  0004f	74 1b		 je	 SHORT $LN5@AddDrawing

; 45   : 	m_nDate(nDate),

  00051	8b 4d 0c	 mov	 ecx, DWORD PTR _nDate$[ebp]
  00054	89 0e		 mov	 DWORD PTR [esi], ecx

; 44   : 	m_strTimeData(""),

  00056	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0005e	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  00061	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z

; 110  : 
; 111  : 	m_timeDataList.AddTail(new CDrawingTimeData(nIndex, nDate, nTime));

  0006a	eb 02		 jmp	 SHORT $LN6@AddDrawing
$LN5@AddDrawing:
  0006c	33 f6		 xor	 esi, esi
$LN6@AddDrawing:
  0006e	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00071	56		 push	 esi
  00072	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00079	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCDrawingTimeData@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingTimeData@@@Z ; CList<CDrawingTimeData *,CDrawingTimeData *>::AddTail

; 112  : 	return true;

  0007e	b0 01		 mov	 al, 1

; 113  : }

  00080	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00083	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008a	59		 pop	 ecx
  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 0c 00	 ret	 12			; 0000000cH
$LN3@AddDrawing:

; 109  : 	if(nIndex < 0 || nTime < 0) return false;

  00094	32 c0		 xor	 al, al

; 113  : }

  00096	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00099	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a0	59		 pop	 ecx
  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddDrawingTimeData@CDrawingHourData@@QAE_NHHH@Z$0:
  00000	6a 10		 push	 16			; 00000010H
  00002	8b 45 08	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?AddDrawingTimeData@CDrawingHourData@@QAE_NHHH@Z:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddDrawingTimeData@CDrawingHourData@@QAE_NHHH@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddDrawingTimeData@CDrawingHourData@@QAE_NHHH@Z ENDP	; CDrawingHourData::AddDrawingTimeData
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?AddDrawingTimeData@CDrawingHourData@@QAE_NHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
_TEXT	SEGMENT
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T2 = 8							; size = 4
_nIndex$ = 8						; size = 4
_strTimeData$ = 12					; size = 4
?AddDrawingTimeData@CDrawingHourData@@QAE_NHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC ; CDrawingHourData::AddDrawingTimeData, COMDAT
; _this$ = ecx

; 99   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AddDrawingTimeData@CDrawingHourData@@QAE_NHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	89 4d f0	 mov	 DWORD PTR _this$1$[ebp], ecx

; 100  : 	if(nIndex < 0 || strTimeData.IsEmpty())

  00029	8b 7d 08	 mov	 edi, DWORD PTR _nIndex$[ebp]
  0002c	85 ff		 test	 edi, edi
  0002e	78 69		 js	 SHORT $LN3@AddDrawing
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 519  : 		return( GetData()->nDataLength );

  00030	8b 5d 0c	 mov	 ebx, DWORD PTR _strTimeData$[ebp]
  00033	8b 03		 mov	 eax, DWORD PTR [ebx]

; 533  : 		return( GetLength() == 0 );

  00035	83 78 f4 00	 cmp	 DWORD PTR [eax-12], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 100  : 	if(nIndex < 0 || strTimeData.IsEmpty())

  00039	74 5e		 je	 SHORT $LN3@AddDrawing

; 102  : 
; 103  : 	m_timeDataList.AddTail(new CDrawingTimeData(nIndex, strTimeData));

  0003b	6a 10		 push	 16			; 00000010H
  0003d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00042	8b f0		 mov	 esi, eax
  00044	83 c4 04	 add	 esp, 4
  00047	89 75 08	 mov	 DWORD PTR $T2[ebp], esi
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00051	85 f6		 test	 esi, esi
  00053	74 1c		 je	 SHORT $LN5@AddDrawing

; 36   : 	m_strTimeData(strTimeData),

  00055	53		 push	 ebx
  00056	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00059	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1
  0005f	c7 46 04 ff ff
	ff ff		 mov	 DWORD PTR [esi+4], -1
  00066	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z

; 102  : 
; 103  : 	m_timeDataList.AddTail(new CDrawingTimeData(nIndex, strTimeData));

  0006f	eb 02		 jmp	 SHORT $LN6@AddDrawing
$LN5@AddDrawing:
  00071	33 f6		 xor	 esi, esi
$LN6@AddDrawing:
  00073	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00076	56		 push	 esi
  00077	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0007e	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCDrawingTimeData@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingTimeData@@@Z ; CList<CDrawingTimeData *,CDrawingTimeData *>::AddTail

; 104  : 	return true;

  00083	b0 01		 mov	 al, 1

; 105  : }

  00085	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00088	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008f	59		 pop	 ecx
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 08 00	 ret	 8
$LN3@AddDrawing:

; 101  : 		return false;

  00099	32 c0		 xor	 al, al

; 105  : }

  0009b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a5	59		 pop	 ecx
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddDrawingTimeData@CDrawingHourData@@QAE_NHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z$0:
  00000	6a 10		 push	 16			; 00000010H
  00002	8b 45 08	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?AddDrawingTimeData@CDrawingHourData@@QAE_NHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddDrawingTimeData@CDrawingHourData@@QAE_NHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddDrawingTimeData@CDrawingHourData@@QAE_NHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CDrawingHourData::AddDrawingTimeData
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?AddDrawingTimeData@CDrawingHourData@@QAE_NABVCDrawingTimeData@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = -20					; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T2 = 8							; size = 4
_drawingTimeData$ = 8					; size = 4
?AddDrawingTimeData@CDrawingHourData@@QAE_NABVCDrawingTimeData@@@Z PROC ; CDrawingHourData::AddDrawingTimeData, COMDAT
; _this$ = ecx

; 90   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AddDrawingTimeData@CDrawingHourData@@QAE_NABVCDrawingTimeData@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$1$[ebp], ecx

; 64   : 	if(m_nIndex < 0)

  0002b	8b 7d 08	 mov	 edi, DWORD PTR _drawingTimeData$[ebp]
  0002e	83 7f 08 00	 cmp	 DWORD PTR [edi+8], 0
  00032	7c 73		 jl	 SHORT $LN26@AddDrawing
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 519  : 		return( GetData()->nDataLength );

  00034	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 800  : 		return( reinterpret_cast< CStringData* >( m_pszData )-1 );

  00037	8d 5f 0c	 lea	 ebx, DWORD PTR [edi+12]

; 533  : 		return( GetLength() == 0 );

  0003a	83 78 f4 00	 cmp	 DWORD PTR [eax-12], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 67   : 	return (!m_strTimeData.IsEmpty() || m_nTime != -1);

  0003e	75 06		 jne	 SHORT $LN2@AddDrawing
  00040	83 7f 04 ff	 cmp	 DWORD PTR [edi+4], -1
  00044	74 61		 je	 SHORT $LN26@AddDrawing
$LN2@AddDrawing:

; 93   : 
; 94   : 	m_timeDataList.AddTail(new CDrawingTimeData(drawingTimeData));

  00046	6a 10		 push	 16			; 00000010H
  00048	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004d	8b f0		 mov	 esi, eax
  0004f	83 c4 04	 add	 esp, 4
  00052	89 75 08	 mov	 DWORD PTR $T2[ebp], esi
  00055	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005c	85 f6		 test	 esi, esi
  0005e	74 1f		 je	 SHORT $LN4@AddDrawing

; 29   : 	m_nDate(data.m_nDate),

  00060	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00062	89 0e		 mov	 DWORD PTR [esi], ecx

; 30   : 	m_nTime(data.m_nTime)

  00064	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00067	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 28   : 	m_strTimeData(data.GetTimeData()),

  0006a	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0006d	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 77   : 	return m_strTimeData;

  00070	53		 push	 ebx

; 27   : 	m_nIndex(data.GetIndex()),

  00071	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 28   : 	m_strTimeData(data.GetTimeData()),

  00074	89 4d ec	 mov	 DWORD PTR ___$ReturnUdt$[ebp], ecx

; 77   : 	return m_strTimeData;

  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z

; 93   : 
; 94   : 	m_timeDataList.AddTail(new CDrawingTimeData(drawingTimeData));

  0007d	eb 02		 jmp	 SHORT $LN5@AddDrawing
$LN4@AddDrawing:
  0007f	33 f6		 xor	 esi, esi
$LN5@AddDrawing:
  00081	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00084	56		 push	 esi
  00085	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008c	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCDrawingTimeData@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingTimeData@@@Z ; CList<CDrawingTimeData *,CDrawingTimeData *>::AddTail

; 95   : 	return true;

  00091	b0 01		 mov	 al, 1

; 96   : }

  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c2 04 00	 ret	 4
$LN26@AddDrawing:

; 91   : 	if(!drawingTimeData.IsExactData())
; 92   : 		return false;

  000a7	32 c0		 xor	 al, al

; 96   : }

  000a9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ac	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b3	59		 pop	 ecx
  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddDrawingTimeData@CDrawingHourData@@QAE_NABVCDrawingTimeData@@@Z$0:
  00000	6a 10		 push	 16			; 00000010H
  00002	8b 45 08	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?AddDrawingTimeData@CDrawingHourData@@QAE_NABVCDrawingTimeData@@@Z:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddDrawingTimeData@CDrawingHourData@@QAE_NABVCDrawingTimeData@@@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddDrawingTimeData@CDrawingHourData@@QAE_NABVCDrawingTimeData@@@Z ENDP ; CDrawingHourData::AddDrawingTimeData
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ??1CDrawingHourData@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CDrawingHourData@@QAE@XZ PROC			; CDrawingHourData::~CDrawingHourData, COMDAT
; _this$ = ecx

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CDrawingHourData@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx

; 117  : 	if(m_timeDataList.GetCount() <= 0)

  00027	83 7e 0c 00	 cmp	 DWORD PTR [esi+12], 0
  0002b	7e 53		 jle	 SHORT $LN43@CDrawingHo

; 118  : 		return false;
; 119  : 
; 120  : 	POSITION pos = m_timeDataList.GetHeadPosition();

  0002d	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]

; 121  : 	while(pos != NULL){

  00030	85 ff		 test	 edi, edi
  00032	74 21		 je	 SHORT $LN20@CDrawingHo
$LL4@CDrawingHo:

; 122  : 		delete m_timeDataList.GetNext(pos);

  00034	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00037	8b 3f		 mov	 edi, DWORD PTR [edi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 122  : 		delete m_timeDataList.GetNext(pos);

  00039	85 db		 test	 ebx, ebx
  0003b	74 14		 je	 SHORT $LN13@CDrawingHo
  0003d	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00046	6a 10		 push	 16			; 00000010H
  00048	53		 push	 ebx
  00049	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0004e	83 c4 08	 add	 esp, 8
$LN13@CDrawingHo:

; 121  : 	while(pos != NULL){

  00051	85 ff		 test	 edi, edi
  00053	75 df		 jne	 SHORT $LL4@CDrawingHo
$LN20@CDrawingHo:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00055	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00058	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0005f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00066	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0006d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00074	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00079	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
$LN43@CDrawingHo:

; 872  : 	m_pBlocks->FreeDataChain();

  00080	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 878  : {

  00083	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0008a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@PAVCDrawingTimeData@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  00090	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00097	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0009e	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  000a5	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 872  : 	m_pBlocks->FreeDataChain();

  000ac	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  000b1	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 86   : }

  000b8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c2	59		 pop	 ecx
  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c3		 ret	 0
  000ca	cc		 int	 3
  000cb	cc		 int	 3
  000cc	cc		 int	 3
  000cd	cc		 int	 3
  000ce	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CDrawingHourData@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CDrawingHourData@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CDrawingHourData@@QAE@XZ ENDP			; CDrawingHourData::~CDrawingHourData
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetTimeData@CDrawingTimeData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetTimeData@CDrawingTimeData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ PROC ; CDrawingTimeData::GetTimeData, COMDAT
; _this$ = ecx

; 76   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 77   : 	return m_strTimeData;

  00003	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00010	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 78   : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?GetTimeData@CDrawingTimeData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ENDP ; CDrawingTimeData::GetTimeData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?GetIndex@CDrawingTimeData@@QBEHXZ
_TEXT	SEGMENT
?GetIndex@CDrawingTimeData@@QBEHXZ PROC			; CDrawingTimeData::GetIndex, COMDAT
; _this$ = ecx

; 72   : 	return m_nIndex;

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 73   : }

  00003	c3		 ret	 0
?GetIndex@CDrawingTimeData@@QBEHXZ ENDP			; CDrawingTimeData::GetIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?IsExactData@CDrawingTimeData@@QBE_NXZ
_TEXT	SEGMENT
?IsExactData@CDrawingTimeData@@QBE_NXZ PROC		; CDrawingTimeData::IsExactData, COMDAT
; _this$ = ecx

; 64   : 	if(m_nIndex < 0)

  00000	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00004	7d 03		 jge	 SHORT $LN2@IsExactDat
$LN12@IsExactDat:

; 68   : }

  00006	32 c0		 xor	 al, al
  00008	c3		 ret	 0
$LN2@IsExactDat:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 533  : 		return( GetLength() == 0 );

  00009	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0000c	83 78 f4 00	 cmp	 DWORD PTR [eax-12], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp

; 67   : 	return (!m_strTimeData.IsEmpty() || m_nTime != -1);

  00010	75 06		 jne	 SHORT $LN4@IsExactDat
  00012	83 79 04 ff	 cmp	 DWORD PTR [ecx+4], -1
  00016	74 ee		 je	 SHORT $LN12@IsExactDat
$LN4@IsExactDat:
  00018	b0 01		 mov	 al, 1

; 68   : }

  0001a	c3		 ret	 0
?IsExactData@CDrawingTimeData@@QBE_NXZ ENDP		; CDrawingTimeData::IsExactData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?SetTimeData@CDrawingTimeData@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
_TEXT	SEGMENT
_strTimeData$ = 8					; size = 4
?SetTimeData@CDrawingTimeData@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC ; CDrawingTimeData::SetTimeData, COMDAT
; _this$ = ecx

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 58   : 	m_strTimeData = strTimeData;

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH

; 59   : }

  00006	5d		 pop	 ebp

; 58   : 	m_strTimeData = strTimeData;

  00007	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
?SetTimeData@CDrawingTimeData@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CDrawingTimeData::SetTimeData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?SetIndex@CDrawingTimeData@@QAEXH@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?SetIndex@CDrawingTimeData@@QAEXH@Z PROC		; CDrawingTimeData::SetIndex, COMDAT
; _this$ = ecx

; 52   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 53   : 	m_nIndex = nIndex;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00006	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 54   : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetIndex@CDrawingTimeData@@QAEXH@Z ENDP		; CDrawingTimeData::SetIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ??0CDrawingTimeData@@QAE@HHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_nDate$ = 12						; size = 4
_nTime$ = 16						; size = 4
??0CDrawingTimeData@@QAE@HHH@Z PROC			; CDrawingTimeData::CDrawingTimeData, COMDAT
; _this$ = ecx

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 45   : 	m_nDate(nDate),

  00004	8b 45 0c	 mov	 eax, DWORD PTR _nDate$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 44   : 	m_strTimeData(""),

  0000a	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0000f	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00012	89 06		 mov	 DWORD PTR [esi], eax
  00014	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00017	8b 45 10	 mov	 eax, DWORD PTR _nTime$[ebp]
  0001a	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0001d	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00020	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z

; 48   : }

  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
??0CDrawingTimeData@@QAE@HHH@Z ENDP			; CDrawingTimeData::CDrawingTimeData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ??0CDrawingTimeData@@QAE@HABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_strTimeData$ = 12					; size = 4
??0CDrawingTimeData@@QAE@HABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC ; CDrawingTimeData::CDrawingTimeData, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 35   : 	m_nIndex(nIndex),

  00004	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00007	56		 push	 esi

; 36   : 	m_strTimeData(strTimeData),

  00008	ff 75 0c	 push	 DWORD PTR _strTimeData$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00010	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00013	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1
  00019	c7 46 04 ff ff
	ff ff		 mov	 DWORD PTR [esi+4], -1
  00020	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z

; 40   : }

  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
??0CDrawingTimeData@@QAE@HABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CDrawingTimeData::CDrawingTimeData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ??0CDrawingTimeData@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_data$ = 8						; size = 4
??0CDrawingTimeData@@QAE@ABV0@@Z PROC			; CDrawingTimeData::CDrawingTimeData, COMDAT
; _this$ = ecx

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 29   : 	m_nDate(data.m_nDate),

  00004	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000d	8b 02		 mov	 eax, DWORD PTR [edx]
  0000f	89 06		 mov	 DWORD PTR [esi], eax

; 28   : 	m_strTimeData(data.GetTimeData()),

  00011	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00014	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00017	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0001a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001d	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 77   : 	return m_strTimeData;

  00020	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00023	50		 push	 eax

; 28   : 	m_strTimeData(data.GetTimeData()),

  00024	89 4d 08	 mov	 DWORD PTR ___$ReturnUdt$[ebp], ecx

; 77   : 	return m_strTimeData;

  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z

; 32   : }

  0002d	8b c6		 mov	 eax, esi
  0002f	5e		 pop	 esi
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??0CDrawingTimeData@@QAE@ABV0@@Z ENDP			; CDrawingTimeData::CDrawingTimeData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ??4CDrawingTimeData@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
$T2 = 8							; size = 4
_data$ = 8						; size = 4
??4CDrawingTimeData@@QAEAAV0@ABV0@@Z PROC		; CDrawingTimeData::operator=, COMDAT
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??4CDrawingTimeData@@QAEAAV0@ABV0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 15   : 	if(this == &data)

  00026	8b 7d 08	 mov	 edi, DWORD PTR _data$[ebp]
  00029	3b f7		 cmp	 esi, edi
  0002b	74 3a		 je	 SHORT $LN10@operator

; 16   : 		return *this;
; 17   : 	
; 18   : 	m_nIndex = data.GetIndex();

  0002d	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 77   : 	return m_strTimeData;

  00030	8d 4d 08	 lea	 ecx, DWORD PTR $T2[ebp]

; 16   : 		return *this;
; 17   : 	
; 18   : 	m_nIndex = data.GetIndex();

  00033	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 77   : 	return m_strTimeData;

  00036	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  00039	50		 push	 eax
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z

; 19   : 	m_strTimeData = data.GetTimeData();

  00040	8d 45 08	 lea	 eax, DWORD PTR $T2[ebp]
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	50		 push	 eax
  0004b	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  00054	8d 4d 08	 lea	 ecx, DWORD PTR $T2[ebp]
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 20   : 	m_nDate = data.m_nDate;

  0005d	8b 07		 mov	 eax, DWORD PTR [edi]
  0005f	89 06		 mov	 DWORD PTR [esi], eax

; 21   : 	m_nTime = data.m_nTime;

  00061	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00064	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN10@operator:

; 22   : 
; 23   : 	return *this;
; 24   : }

  00067	8b c6		 mov	 eax, esi
  00069	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00073	59		 pop	 ecx
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4CDrawingTimeData@@QAEAAV0@ABV0@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
__ehhandler$??4CDrawingTimeData@@QAEAAV0@ABV0@@Z:
  0000e	90		 npad	 1
  0000f	90		 npad	 1
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??4CDrawingTimeData@@QAEAAV0@ABV0@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??4CDrawingTimeData@@QAEAAV0@ABV0@@Z ENDP		; CDrawingTimeData::operator=
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z PROC		; CObject::Dump, COMDAT
; _this$ = ecx

; 122  : 	{ /* no dumping in release builds */ }

  00000	c2 04 00	 ret	 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z ENDP		; CObject::Dump
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT
?AssertValid@CObject@@UBEXXZ PROC			; CObject::AssertValid, COMDAT
; _this$ = ecx

; 120  : 	{ /* no asserts in release builds */ }

  00000	c2 00 00	 ret	 0
?AssertValid@CObject@@UBEXXZ ENDP			; CObject::AssertValid
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z PROC		; CObject::Serialize, COMDAT
; _this$ = ecx

; 106  : 	{ /* CObject does not serialize anything by default */ }

  00000	c2 04 00	 ret	 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z ENDP		; CObject::Serialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT
??1CObject@@UAE@XZ PROC					; CObject::~CObject, COMDAT
; _this$ = ecx

; 104  : 	{ }

  00000	c2 00 00	 ret	 0
??1CObject@@UAE@XZ ENDP					; CObject::~CObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ScaleDraw\DrawingTimeData.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
