; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30148.0 

	TITLE	D:\git\src\IBK\IBK_DRFN\#DRfn-CS\_Obj\MultiChart\TextProgressCtrl.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1CObject@@UAE@XZ				; CObject::~CObject
PUBLIC	?Serialize@CObject@@UAEXAAVCArchive@@@Z		; CObject::Serialize
PUBLIC	?AssertValid@CObject@@UBEXXZ			; CObject::AssertValid
PUBLIC	?Dump@CObject@@UBEXAAVCDumpContext@@@Z		; CObject::Dump
PUBLIC	??1CGdiObject@@UAE@XZ				; CGdiObject::~CGdiObject
PUBLIC	??_GCGdiObject@@UAEPAXI@Z			; CGdiObject::`scalar deleting destructor'
PUBLIC	??1CFont@@UAE@XZ				; CFont::~CFont
PUBLIC	??_GCFont@@UAEPAXI@Z				; CFont::`scalar deleting destructor'
PUBLIC	??1CBitmap@@UAE@XZ				; CBitmap::~CBitmap
PUBLIC	??_GCBitmap@@UAEPAXI@Z				; CBitmap::`scalar deleting destructor'
PUBLIC	??1CRgn@@UAE@XZ					; CRgn::~CRgn
PUBLIC	??_GCRgn@@UAEPAXI@Z				; CRgn::`scalar deleting destructor'
PUBLIC	?PtVisible@CDC@@UBEHHH@Z			; CDC::PtVisible
PUBLIC	?RectVisible@CDC@@UBEHPBUtagRECT@@@Z		; CDC::RectVisible
PUBLIC	?TextOutA@CDC@@UAEHHHPBDH@Z			; CDC::TextOutA
PUBLIC	?ExtTextOutA@CDC@@UAEHHHIPBUtagRECT@@PBDIPAH@Z	; CDC::ExtTextOutA
PUBLIC	?TabbedTextOutA@CDC@@UAE?AVCSize@@HHPBDHHPAHH@Z	; CDC::TabbedTextOutA
PUBLIC	?DrawTextA@CDC@@UAEHPBDHPAUtagRECT@@I@Z		; CDC::DrawTextA
PUBLIC	?DrawTextExA@CDC@@UAEHPADHPAUtagRECT@@IPAUtagDRAWTEXTPARAMS@@@Z ; CDC::DrawTextExA
PUBLIC	?GrayStringA@CDC@@UAEHPAVCBrush@@P6GHPAUHDC__@@JH@ZJHHHHH@Z ; CDC::GrayStringA
PUBLIC	?Escape@CDC@@UAEHHHPBDPAX@Z			; CDC::Escape
PUBLIC	?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z	; CWnd::DoDataExchange
PUBLIC	?BeginModalState@CWnd@@UAEXXZ			; CWnd::BeginModalState
PUBLIC	?EndModalState@CWnd@@UAEXXZ			; CWnd::EndModalState
PUBLIC	??_GCProgressCtrl@@UAEPAXI@Z			; CProgressCtrl::`scalar deleting destructor'
PUBLIC	??0CTextProgressCtrl@@QAE@XZ			; CTextProgressCtrl::CTextProgressCtrl
PUBLIC	?SetShowText@CTextProgressCtrl@@QAEXH@Z		; CTextProgressCtrl::SetShowText
PUBLIC	?SetBarColour@CTextProgressCtrl@@QAEKK@Z	; CTextProgressCtrl::SetBarColour
PUBLIC	?GetBarColour@CTextProgressCtrl@@QBEKXZ		; CTextProgressCtrl::GetBarColour
PUBLIC	?SetBgColour@CTextProgressCtrl@@QAEKK@Z		; CTextProgressCtrl::SetBgColour
PUBLIC	?GetBgColour@CTextProgressCtrl@@QBEKXZ		; CTextProgressCtrl::GetBgColour
PUBLIC	?SetTextColour@CTextProgressCtrl@@QAEKK@Z	; CTextProgressCtrl::SetTextColour
PUBLIC	?GetTextColour@CTextProgressCtrl@@QAEKXZ	; CTextProgressCtrl::GetTextColour
PUBLIC	?AlignText@CTextProgressCtrl@@QAEHK@Z		; CTextProgressCtrl::AlignText
PUBLIC	?AlignTextInvalidate@CTextProgressCtrl@@QAEHK@Z	; CTextProgressCtrl::AlignTextInvalidate
PUBLIC	??1CTextProgressCtrl@@UAE@XZ			; CTextProgressCtrl::~CTextProgressCtrl
PUBLIC	?OnEraseBkgnd@CTextProgressCtrl@@IAEHPAVCDC@@@Z	; CTextProgressCtrl::OnEraseBkgnd
PUBLIC	?OnPaint@CTextProgressCtrl@@IAEXXZ		; CTextProgressCtrl::OnPaint
PUBLIC	?OnSize@CTextProgressCtrl@@IAEXIHH@Z		; CTextProgressCtrl::OnSize
PUBLIC	?OnSetText@CTextProgressCtrl@@IAEJIJ@Z		; CTextProgressCtrl::OnSetText
PUBLIC	?OnGetText@CTextProgressCtrl@@IAEJIJ@Z		; CTextProgressCtrl::OnGetText
PUBLIC	?OnGetPos@CTextProgressCtrl@@IAEJIJ@Z		; CTextProgressCtrl::OnGetPos
PUBLIC	?OnSetPos@CTextProgressCtrl@@IAEJIJ@Z		; CTextProgressCtrl::OnSetPos
PUBLIC	?OnStepIt@CTextProgressCtrl@@IAEJIJ@Z		; CTextProgressCtrl::OnStepIt
PUBLIC	?OnSetRange@CTextProgressCtrl@@IAEJIJ@Z		; CTextProgressCtrl::OnSetRange
PUBLIC	?OnSetRange32@CTextProgressCtrl@@IAEJIJ@Z	; CTextProgressCtrl::OnSetRange32
PUBLIC	?OnGetRange@CTextProgressCtrl@@IAEJIJ@Z		; CTextProgressCtrl::OnGetRange
PUBLIC	?OnOffsetPos@CTextProgressCtrl@@IAEJIJ@Z	; CTextProgressCtrl::OnOffsetPos
PUBLIC	?OnSetStep@CTextProgressCtrl@@IAEJIJ@Z		; CTextProgressCtrl::OnSetStep
PUBLIC	?OnSetBarColor@CTextProgressCtrl@@IAEJIJ@Z	; CTextProgressCtrl::OnSetBarColor
PUBLIC	?OnSetBkColor@CTextProgressCtrl@@IAEJIJ@Z	; CTextProgressCtrl::OnSetBkColor
PUBLIC	?OnSetTextColor@CTextProgressCtrl@@IAEJIJ@Z	; CTextProgressCtrl::OnSetTextColor
PUBLIC	?OnSetShowText@CTextProgressCtrl@@IAEJIJ@Z	; CTextProgressCtrl::OnSetShowText
PUBLIC	?GetThisMessageMap@CTextProgressCtrl@@KGPBUAFX_MSGMAP@@XZ ; CTextProgressCtrl::GetThisMessageMap
PUBLIC	?GetMessageMap@CTextProgressCtrl@@MBEPBUAFX_MSGMAP@@XZ ; CTextProgressCtrl::GetMessageMap
PUBLIC	??_GCTextProgressCtrl@@UAEPAXI@Z		; CTextProgressCtrl::`scalar deleting destructor'
PUBLIC	??1CMemDC@@UAE@XZ				; CMemDC::~CMemDC
PUBLIC	??_GCMemDC@@UAEPAXI@Z				; CMemDC::`scalar deleting destructor'
PUBLIC	??_R0PAVCException@@@8				; CException * `RTTI Type Descriptor'
PUBLIC	??_7CGdiObject@@6B@				; CGdiObject::`vftable'
PUBLIC	??_7CFont@@6B@					; CFont::`vftable'
PUBLIC	??_7CBitmap@@6B@				; CBitmap::`vftable'
PUBLIC	??_7CRgn@@6B@					; CRgn::`vftable'
PUBLIC	??_C@_0HD@JJCHHHNK@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_0BP@OIEOKIDM@Exception?5thrown?5in?5destructor@ ; `string'
PUBLIC	??_C@_0BB@HBOOMJBF@?$CFTs?5?$CI?$CFTs?3?$CFd?$CJ?6?$CFTs@ ; `string'
PUBLIC	??_C@_0N@OMEMOKLE@?$CFTs?5?$CI?$CFTs?3?$CFd?$CJ@ ; `string'
PUBLIC	??_7CProgressCtrl@@6B@				; CProgressCtrl::`vftable'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R3CObject@@8					; CObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObject@@8					; CObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CObject@@8			; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CGdiObject@@6B@				; CGdiObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGdiObject@@@8				; CGdiObject `RTTI Type Descriptor'
PUBLIC	??_R3CGdiObject@@8				; CGdiObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGdiObject@@8				; CGdiObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGdiObject@@8			; CGdiObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CFont@@6B@					; CFont::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFont@@@8				; CFont `RTTI Type Descriptor'
PUBLIC	??_R3CFont@@8					; CFont::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFont@@8					; CFont::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFont@@8				; CFont::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CBitmap@@6B@				; CBitmap::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBitmap@@@8				; CBitmap `RTTI Type Descriptor'
PUBLIC	??_R3CBitmap@@8					; CBitmap::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBitmap@@8					; CBitmap::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBitmap@@8			; CBitmap::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CRgn@@6B@					; CRgn::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCRgn@@@8				; CRgn `RTTI Type Descriptor'
PUBLIC	??_R3CRgn@@8					; CRgn::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CRgn@@8					; CRgn::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CRgn@@8				; CRgn::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CWnd@@8				; CWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCWnd@@@8				; CWnd `RTTI Type Descriptor'
PUBLIC	??_R3CWnd@@8					; CWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWnd@@8					; CWnd::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCmdTarget@@8			; CCmdTarget::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCCmdTarget@@@8				; CCmdTarget `RTTI Type Descriptor'
PUBLIC	??_R3CCmdTarget@@8				; CCmdTarget::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCmdTarget@@8				; CCmdTarget::`RTTI Base Class Array'
PUBLIC	??_R4CProgressCtrl@@6B@				; CProgressCtrl::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCProgressCtrl@@@8			; CProgressCtrl `RTTI Type Descriptor'
PUBLIC	??_R3CProgressCtrl@@8				; CProgressCtrl::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CProgressCtrl@@8				; CProgressCtrl::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CProgressCtrl@@8			; CProgressCtrl::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CTextProgressCtrl@@6B@			; CTextProgressCtrl::`vftable'
PUBLIC	??_7CMemDC@@6B@					; CMemDC::`vftable'
PUBLIC	??_C@_04FCMNJMCO@?$CFd?$CF?$CF@			; `string'
PUBLIC	??_R4CTextProgressCtrl@@6B@			; CTextProgressCtrl::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCTextProgressCtrl@@@8			; CTextProgressCtrl `RTTI Type Descriptor'
PUBLIC	??_R3CTextProgressCtrl@@8			; CTextProgressCtrl::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CTextProgressCtrl@@8			; CTextProgressCtrl::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CTextProgressCtrl@@8		; CTextProgressCtrl::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CMemDC@@6B@				; CMemDC::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMemDC@@@8				; CMemDC `RTTI Type Descriptor'
PUBLIC	??_R3CMemDC@@8					; CMemDC::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMemDC@@8					; CMemDC::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMemDC@@8				; CMemDC::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CDC@@8				; CDC::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCDC@@@8					; CDC `RTTI Type Descriptor'
PUBLIC	??_R3CDC@@8					; CDC::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDC@@8					; CDC::`RTTI Base Class Array'
PUBLIC	__real@4059000000000000
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?__global_delete@@YAXPAXI@Z:PROC		; __global_delete
EXTRN	__imp__BitBlt@36:PROC
EXTRN	__imp__CreateCompatibleBitmap@12:PROC
EXTRN	__imp__CreateCompatibleDC@4:PROC
EXTRN	__imp__CreateFontIndirectA@4:PROC
EXTRN	__imp__CreateRectRgn@16:PROC
EXTRN	__imp__Escape@20:PROC
EXTRN	__imp__PtVisible@12:PROC
EXTRN	__imp__RectVisible@8:PROC
EXTRN	__imp__GetObjectA@12:PROC
EXTRN	__imp__TextOutA@20:PROC
EXTRN	__imp__ExtTextOutA@32:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	__imp__IsWindow@4:PROC
EXTRN	__imp__EnableWindow@8:PROC
EXTRN	__imp__DrawTextA@20:PROC
EXTRN	__imp__DrawTextExA@24:PROC
EXTRN	__imp__GrayStringA@36:PROC
EXTRN	__imp__TabbedTextOutA@32:PROC
EXTRN	__imp__InvalidateRect@12:PROC
EXTRN	__imp__RedrawWindow@16:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	__imp__GetSysColor@4:PROC
EXTRN	__imp__GetParent@4:PROC
EXTRN	__imp___mbsnbcpy:PROC
EXTRN	__imp_?Empty@?$CSimpleStringT@D$00@ATL@@QAEXXZ:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z:PROC
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z:PROC
EXTRN	__imp_?Compare@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z:PROC
EXTRN	__imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ:PROC
EXTRN	?GetRuntimeClass@CGdiObject@@UBEPAUCRuntimeClass@@XZ:PROC ; CGdiObject::GetRuntimeClass
EXTRN	?FromHandle@CGdiObject@@SGPAV1@PAX@Z:PROC	; CGdiObject::FromHandle
EXTRN	?Attach@CGdiObject@@QAEHPAX@Z:PROC		; CGdiObject::Attach
EXTRN	?DeleteObject@CGdiObject@@QAEHXZ:PROC		; CGdiObject::DeleteObject
EXTRN	??_ECGdiObject@@UAEPAXI@Z:PROC			; CGdiObject::`vector deleting destructor'
EXTRN	?GetRuntimeClass@CFont@@UBEPAUCRuntimeClass@@XZ:PROC ; CFont::GetRuntimeClass
EXTRN	??_ECFont@@UAEPAXI@Z:PROC			; CFont::`vector deleting destructor'
EXTRN	?GetRuntimeClass@CBitmap@@UBEPAUCRuntimeClass@@XZ:PROC ; CBitmap::GetRuntimeClass
EXTRN	??_ECBitmap@@UAEPAXI@Z:PROC			; CBitmap::`vector deleting destructor'
EXTRN	?GetRuntimeClass@CRgn@@UBEPAUCRuntimeClass@@XZ:PROC ; CRgn::GetRuntimeClass
EXTRN	??_ECRgn@@UAEPAXI@Z:PROC			; CRgn::`vector deleting destructor'
EXTRN	?GetRuntimeClass@CDC@@UBEPAUCRuntimeClass@@XZ:PROC ; CDC::GetRuntimeClass
EXTRN	?Attach@CDC@@QAEHPAUHDC__@@@Z:PROC		; CDC::Attach
EXTRN	?SetAttribDC@CDC@@UAEXPAUHDC__@@@Z:PROC		; CDC::SetAttribDC
EXTRN	?SetOutputDC@CDC@@UAEXPAUHDC__@@@Z:PROC		; CDC::SetOutputDC
EXTRN	?ReleaseAttribDC@CDC@@UAEXXZ:PROC		; CDC::ReleaseAttribDC
EXTRN	?ReleaseOutputDC@CDC@@UAEXXZ:PROC		; CDC::ReleaseOutputDC
EXTRN	??0CDC@@QAE@XZ:PROC				; CDC::CDC
EXTRN	?SaveDC@CDC@@UAEHXZ:PROC			; CDC::SaveDC
EXTRN	?RestoreDC@CDC@@UAEHH@Z:PROC			; CDC::RestoreDC
EXTRN	?SelectStockObject@CDC@@UAEPAVCGdiObject@@H@Z:PROC ; CDC::SelectStockObject
EXTRN	?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z:PROC	; CDC::SelectObject
EXTRN	?SetBkColor@CDC@@UAEKK@Z:PROC			; CDC::SetBkColor
EXTRN	?SetBkMode@CDC@@QAEHH@Z:PROC			; CDC::SetBkMode
EXTRN	?SetTextColor@CDC@@UAEKK@Z:PROC			; CDC::SetTextColor
EXTRN	?SetMapMode@CDC@@UAEHH@Z:PROC			; CDC::SetMapMode
EXTRN	?SetViewportOrg@CDC@@UAE?AVCPoint@@HH@Z:PROC	; CDC::SetViewportOrg
EXTRN	?OffsetViewportOrg@CDC@@UAE?AVCPoint@@HH@Z:PROC	; CDC::OffsetViewportOrg
EXTRN	?SetViewportExt@CDC@@UAE?AVCSize@@HH@Z:PROC	; CDC::SetViewportExt
EXTRN	?ScaleViewportExt@CDC@@UAE?AVCSize@@HHHH@Z:PROC	; CDC::ScaleViewportExt
EXTRN	?SetWindowOrg@CDC@@QAE?AVCPoint@@HH@Z:PROC	; CDC::SetWindowOrg
EXTRN	?SetWindowExt@CDC@@UAE?AVCSize@@HH@Z:PROC	; CDC::SetWindowExt
EXTRN	?ScaleWindowExt@CDC@@UAE?AVCSize@@HHHH@Z:PROC	; CDC::ScaleWindowExt
EXTRN	?GetClipBox@CDC@@UBEHPAUtagRECT@@@Z:PROC	; CDC::GetClipBox
EXTRN	?SelectClipRgn@CDC@@QAEHPAVCRgn@@@Z:PROC	; CDC::SelectClipRgn
EXTRN	?FillSolidRect@CDC@@QAEXPBUtagRECT@@K@Z:PROC	; CDC::FillSolidRect
EXTRN	??1CDC@@UAE@XZ:PROC				; CDC::~CDC
EXTRN	?SelectGdiObject@CDC@@KGPAVCGdiObject@@PAUHDC__@@PAX@Z:PROC ; CDC::SelectGdiObject
EXTRN	??0CPaintDC@@QAE@PAVCWnd@@@Z:PROC		; CPaintDC::CPaintDC
EXTRN	??1CPaintDC@@UAE@XZ:PROC			; CPaintDC::~CPaintDC
EXTRN	?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z:PROC ; CCmdTarget::OnCmdMsg
EXTRN	?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z:PROC	; CCmdTarget::IsInvokeAllowed
EXTRN	?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z:PROC ; CCmdTarget::GetDispatchIID
EXTRN	?GetTypeInfoCount@CCmdTarget@@UAEIXZ:PROC	; CCmdTarget::GetTypeInfoCount
EXTRN	?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ:PROC ; CCmdTarget::GetTypeLibCache
EXTRN	?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z:PROC ; CCmdTarget::GetTypeLib
EXTRN	?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ:PROC ; CCmdTarget::GetCommandMap
EXTRN	?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ:PROC ; CCmdTarget::GetDispatchMap
EXTRN	?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ:PROC ; CCmdTarget::GetConnectionMap
EXTRN	?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ:PROC ; CCmdTarget::GetEventSinkMap
EXTRN	?OnCreateAggregates@CCmdTarget@@UAEHXZ:PROC	; CCmdTarget::OnCreateAggregates
EXTRN	?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z:PROC ; CCmdTarget::GetInterfaceHook
EXTRN	?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z:PROC ; CCmdTarget::GetExtraConnectionPoints
EXTRN	?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z:PROC ; CCmdTarget::GetConnectionHook
EXTRN	?GetStyle@CWnd@@QBEKXZ:PROC			; CWnd::GetStyle
EXTRN	??0CWnd@@QAE@XZ:PROC				; CWnd::CWnd
EXTRN	?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z:PROC	; CWnd::FromHandle
EXTRN	?PreSubclassWindow@CWnd@@UAEXXZ:PROC		; CWnd::PreSubclassWindow
EXTRN	?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z:PROC ; CWnd::Create
EXTRN	?CreateEx@CWnd@@UAEHKPBD0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z:PROC ; CWnd::CreateEx
EXTRN	?CreateEx@CWnd@@UAEHKPBD0KABUtagRECT@@PAV1@IPAX@Z:PROC ; CWnd::CreateEx
EXTRN	?DestroyWindow@CWnd@@UAEHXZ:PROC		; CWnd::DestroyWindow
EXTRN	?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z:PROC ; CWnd::PreCreateWindow
EXTRN	?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z:PROC	; CWnd::CalcWindowRect
EXTRN	?GetMenu@CWnd@@UBEPAVCMenu@@XZ:PROC		; CWnd::GetMenu
EXTRN	?SetMenu@CWnd@@UAEHPAVCMenu@@@Z:PROC		; CWnd::SetMenu
EXTRN	?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z:PROC ; CWnd::OnToolHitTest
EXTRN	?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z:PROC ; CWnd::GetScrollBarCtrl
EXTRN	?WinHelpA@CWnd@@UAEXKI@Z:PROC			; CWnd::WinHelpA
EXTRN	?HtmlHelpA@CWnd@@UAEXKI@Z:PROC			; CWnd::HtmlHelpA
EXTRN	?WinHelpInternal@CWnd@@UAEXKI@Z:PROC		; CWnd::WinHelpInternal
EXTRN	?ContinueModal@CWnd@@UAEHXZ:PROC		; CWnd::ContinueModal
EXTRN	?EndModalLoop@CWnd@@UAEXH@Z:PROC		; CWnd::EndModalLoop
EXTRN	?OnDrawIconicThumbnailOrLivePreview@CWnd@@UAEXAAVCDC@@VCRect@@VCSize@@HAAH@Z:PROC ; CWnd::OnDrawIconicThumbnailOrLivePreview
EXTRN	?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ:PROC ; CWnd::GetInterfaceMap
EXTRN	?EnsureStdObj@CWnd@@UAEJXZ:PROC			; CWnd::EnsureStdObj
EXTRN	?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z:PROC ; CWnd::get_accParent
EXTRN	?get_accChildCount@CWnd@@UAEJPAJ@Z:PROC		; CWnd::get_accChildCount
EXTRN	?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z:PROC ; CWnd::get_accChild
EXTRN	?get_accName@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accName
EXTRN	?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accValue
EXTRN	?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accDescription
EXTRN	?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z:PROC ; CWnd::get_accRole
EXTRN	?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z:PROC ; CWnd::get_accState
EXTRN	?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accHelp
EXTRN	?get_accHelpTopic@CWnd@@UAEJPAPA_WUtagVARIANT@@PAJ@Z:PROC ; CWnd::get_accHelpTopic
EXTRN	?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accKeyboardShortcut
EXTRN	?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z:PROC	; CWnd::get_accFocus
EXTRN	?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z:PROC ; CWnd::get_accSelection
EXTRN	?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accDefaultAction
EXTRN	?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z:PROC	; CWnd::accSelect
EXTRN	?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z:PROC ; CWnd::accLocation
EXTRN	?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z:PROC ; CWnd::accNavigate
EXTRN	?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z:PROC	; CWnd::accHitTest
EXTRN	?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z:PROC ; CWnd::accDoDefaultAction
EXTRN	?put_accName@CWnd@@UAEJUtagVARIANT@@PA_W@Z:PROC	; CWnd::put_accName
EXTRN	?put_accValue@CWnd@@UAEJUtagVARIANT@@PA_W@Z:PROC ; CWnd::put_accValue
EXTRN	?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z:PROC ; CWnd::SetProxy
EXTRN	?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z:PROC	; CWnd::CreateAccessibleProxy
EXTRN	?OnCommand@CWnd@@MAEHIJ@Z:PROC			; CWnd::OnCommand
EXTRN	?OnNotify@CWnd@@MAEHIJPAJ@Z:PROC		; CWnd::OnNotify
EXTRN	?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ:PROC ; CWnd::GetSuperWndProcAddr
EXTRN	?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z:PROC ; CWnd::PreTranslateMessage
EXTRN	?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z:PROC ; CWnd::OnAmbientProperty
EXTRN	?WindowProc@CWnd@@MAEJIIJ@Z:PROC		; CWnd::WindowProc
EXTRN	?OnWndMsg@CWnd@@MAEHIIJPAJ@Z:PROC		; CWnd::OnWndMsg
EXTRN	?Default@CWnd@@IAEJXZ:PROC			; CWnd::Default
EXTRN	?DefWindowProcA@CWnd@@MAEJIIJ@Z:PROC		; CWnd::DefWindowProcA
EXTRN	?PostNcDestroy@CWnd@@MAEXXZ:PROC		; CWnd::PostNcDestroy
EXTRN	?OnChildNotify@CWnd@@MAEHIIJPAJ@Z:PROC		; CWnd::OnChildNotify
EXTRN	?OnTouchInputs@CWnd@@MAEHIPAUtagTOUCHINPUT@@@Z:PROC ; CWnd::OnTouchInputs
EXTRN	?OnTouchInput@CWnd@@MAEHVCPoint@@HHPAUtagTOUCHINPUT@@@Z:PROC ; CWnd::OnTouchInput
EXTRN	?GetGestureStatus@CWnd@@MAEKVCPoint@@@Z:PROC	; CWnd::GetGestureStatus
EXTRN	?OnGestureZoom@CWnd@@MAEHVCPoint@@J@Z:PROC	; CWnd::OnGestureZoom
EXTRN	?OnGesturePan@CWnd@@MAEHVCPoint@@0@Z:PROC	; CWnd::OnGesturePan
EXTRN	?OnGestureRotate@CWnd@@MAEHVCPoint@@N@Z:PROC	; CWnd::OnGestureRotate
EXTRN	?OnGestureTwoFingerTap@CWnd@@MAEHVCPoint@@@Z:PROC ; CWnd::OnGestureTwoFingerTap
EXTRN	?OnGesturePressAndTap@CWnd@@MAEHVCPoint@@J@Z:PROC ; CWnd::OnGesturePressAndTap
EXTRN	?ResizeDynamicLayout@CWnd@@MAEXXZ:PROC		; CWnd::ResizeDynamicLayout
EXTRN	?CheckAutoCenter@CWnd@@UAEHXZ:PROC		; CWnd::CheckAutoCenter
EXTRN	?IsFrameWnd@CWnd@@UBEHXZ:PROC			; CWnd::IsFrameWnd
EXTRN	?OnFinalRelease@CWnd@@UAEXXZ:PROC		; CWnd::OnFinalRelease
EXTRN	?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z:PROC ; CWnd::CreateControlContainer
EXTRN	?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z:PROC ; CWnd::CreateControlSite
EXTRN	?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z:PROC ; CWnd::SetOccDialogInfo
EXTRN	?GetOccDialogInfo@CWnd@@MAEPAU_AFX_OCC_DIALOG_INFO@@XZ:PROC ; CWnd::GetOccDialogInfo
EXTRN	?GetThisMessageMap@CWnd@@KGPBUAFX_MSGMAP@@XZ:PROC ; CWnd::GetThisMessageMap
EXTRN	?GetMessageMap@CWnd@@MBEPBUAFX_MSGMAP@@XZ:PROC	; CWnd::GetMessageMap
EXTRN	?AfxMessageBox@@YGHPBDII@Z:PROC			; AfxMessageBox
EXTRN	?GetRuntimeClass@CProgressCtrl@@UBEPAUCRuntimeClass@@XZ:PROC ; CProgressCtrl::GetRuntimeClass
EXTRN	?Create@CProgressCtrl@@UAEHKABUtagRECT@@PAVCWnd@@I@Z:PROC ; CProgressCtrl::Create
EXTRN	?CreateEx@CProgressCtrl@@UAEHKKABUtagRECT@@PAVCWnd@@I@Z:PROC ; CProgressCtrl::CreateEx
EXTRN	??1CProgressCtrl@@UAE@XZ:PROC			; CProgressCtrl::~CProgressCtrl
EXTRN	??_ECProgressCtrl@@UAEPAXI@Z:PROC		; CProgressCtrl::`vector deleting destructor'
EXTRN	??_ECTextProgressCtrl@@UAEPAXI@Z:PROC		; CTextProgressCtrl::`vector deleting destructor'
EXTRN	??_ECMemDC@@UAEPAXI@Z:PROC			; CMemDC::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT ??_R2CDC@@8
rdata$r	SEGMENT
??_R2CDC@@8 DD	FLAT:??_R1A@?0A@EA@CDC@@8		; CDC::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CDC@@8
rdata$r	SEGMENT
??_R3CDC@@8 DD	00H					; CDC::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CDC@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDC@@@8
data$rs	SEGMENT
??_R0?AVCDC@@@8 DD FLAT:??_7type_info@@6B@		; CDC `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDC@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CDC@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDC@@8 DD FLAT:??_R0?AVCDC@@@8		; CDC::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDC@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMemDC@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMemDC@@8 DD FLAT:??_R0?AVCMemDC@@@8	; CMemDC::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMemDC@@8
rdata$r	ENDS
;	COMDAT ??_R2CMemDC@@8
rdata$r	SEGMENT
??_R2CMemDC@@8 DD FLAT:??_R1A@?0A@EA@CMemDC@@8		; CMemDC::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CDC@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CMemDC@@8
rdata$r	SEGMENT
??_R3CMemDC@@8 DD 00H					; CMemDC::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CMemDC@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMemDC@@@8
data$rs	SEGMENT
??_R0?AVCMemDC@@@8 DD FLAT:??_7type_info@@6B@		; CMemDC `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMemDC@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CMemDC@@6B@
rdata$r	SEGMENT
??_R4CMemDC@@6B@ DD 00H					; CMemDC::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMemDC@@@8
	DD	FLAT:??_R3CMemDC@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CTextProgressCtrl@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CTextProgressCtrl@@8 DD FLAT:??_R0?AVCTextProgressCtrl@@@8 ; CTextProgressCtrl::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CTextProgressCtrl@@8
rdata$r	ENDS
;	COMDAT ??_R2CTextProgressCtrl@@8
rdata$r	SEGMENT
??_R2CTextProgressCtrl@@8 DD FLAT:??_R1A@?0A@EA@CTextProgressCtrl@@8 ; CTextProgressCtrl::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CProgressCtrl@@8
	DD	FLAT:??_R1A@?0A@EA@CWnd@@8
	DD	FLAT:??_R1A@?0A@EA@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CTextProgressCtrl@@8
rdata$r	SEGMENT
??_R3CTextProgressCtrl@@8 DD 00H			; CTextProgressCtrl::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2CTextProgressCtrl@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCTextProgressCtrl@@@8
data$rs	SEGMENT
??_R0?AVCTextProgressCtrl@@@8 DD FLAT:??_7type_info@@6B@ ; CTextProgressCtrl `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCTextProgressCtrl@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CTextProgressCtrl@@6B@
rdata$r	SEGMENT
??_R4CTextProgressCtrl@@6B@ DD 00H			; CTextProgressCtrl::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCTextProgressCtrl@@@8
	DD	FLAT:??_R3CTextProgressCtrl@@8
rdata$r	ENDS
;	COMDAT ??_C@_04FCMNJMCO@?$CFd?$CF?$CF@
CONST	SEGMENT
??_C@_04FCMNJMCO@?$CFd?$CF?$CF@ DB '%d%%', 00H		; `string'
CONST	ENDS
;	COMDAT ?messageMap@?1??GetThisMessageMap@CTextProgressCtrl@@KGPBUAFX_MSGMAP@@XZ@4U3@B
CONST	SEGMENT
?messageMap@?1??GetThisMessageMap@CTextProgressCtrl@@KGPBUAFX_MSGMAP@@XZ@4U3@B DD FLAT:?GetThisMessageMap@CWnd@@KGPBUAFX_MSGMAP@@XZ ; `CTextProgressCtrl::GetThisMessageMap'::`2'::messageMap
	DD	FLAT:?_messageEntries@?1??GetThisMessageMap@CTextProgressCtrl@@KGPBUAFX_MSGMAP@@XZ@4QBUAFX_MSGMAP_ENTRY@@B
CONST	ENDS
;	COMDAT ?_messageEntries@?1??GetThisMessageMap@CTextProgressCtrl@@KGPBUAFX_MSGMAP@@XZ@4QBUAFX_MSGMAP_ENTRY@@B
CONST	SEGMENT
?_messageEntries@?1??GetThisMessageMap@CTextProgressCtrl@@KGPBUAFX_MSGMAP@@XZ@4QBUAFX_MSGMAP_ENTRY@@B DD 014H ; `CTextProgressCtrl::GetThisMessageMap'::`2'::_messageEntries
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:?OnEraseBkgnd@CTextProgressCtrl@@IAEHPAVCDC@@@Z
	DD	0fH
	DD	00H
	DD	00H
	DD	00H
	DD	013H
	DD	FLAT:?OnPaint@CTextProgressCtrl@@IAEXXZ
	DD	05H
	DD	00H
	DD	00H
	DD	00H
	DD	01aH
	DD	FLAT:?OnSize@CTextProgressCtrl@@IAEXIHH@Z
	DD	0cH
	DD	00H
	DD	00H
	DD	00H
	DD	0eH
	DD	FLAT:?OnSetText@CTextProgressCtrl@@IAEJIJ@Z
	DD	0dH
	DD	00H
	DD	00H
	DD	00H
	DD	0eH
	DD	FLAT:?OnGetText@CTextProgressCtrl@@IAEJIJ@Z
	DD	0403H
	DD	00H
	DD	00H
	DD	00H
	DD	0eH
	DD	FLAT:?OnOffsetPos@CTextProgressCtrl@@IAEJIJ@Z
	DD	0408H
	DD	00H
	DD	00H
	DD	00H
	DD	0eH
	DD	FLAT:?OnGetPos@CTextProgressCtrl@@IAEJIJ@Z
	DD	0407H
	DD	00H
	DD	00H
	DD	00H
	DD	0eH
	DD	FLAT:?OnGetRange@CTextProgressCtrl@@IAEJIJ@Z
	DD	0409H
	DD	00H
	DD	00H
	DD	00H
	DD	0eH
	DD	FLAT:?OnSetBarColor@CTextProgressCtrl@@IAEJIJ@Z
	DD	02001H
	DD	00H
	DD	00H
	DD	00H
	DD	0eH
	DD	FLAT:?OnSetBkColor@CTextProgressCtrl@@IAEJIJ@Z
	DD	0402H
	DD	00H
	DD	00H
	DD	00H
	DD	0eH
	DD	FLAT:?OnSetPos@CTextProgressCtrl@@IAEJIJ@Z
	DD	0401H
	DD	00H
	DD	00H
	DD	00H
	DD	0eH
	DD	FLAT:?OnSetRange@CTextProgressCtrl@@IAEJIJ@Z
	DD	0406H
	DD	00H
	DD	00H
	DD	00H
	DD	0eH
	DD	FLAT:?OnSetRange32@CTextProgressCtrl@@IAEJIJ@Z
	DD	0404H
	DD	00H
	DD	00H
	DD	00H
	DD	0eH
	DD	FLAT:?OnSetStep@CTextProgressCtrl@@IAEJIJ@Z
	DD	0405H
	DD	00H
	DD	00H
	DD	00H
	DD	0eH
	DD	FLAT:?OnStepIt@CTextProgressCtrl@@IAEJIJ@Z
	DD	0464H
	DD	00H
	DD	00H
	DD	00H
	DD	0eH
	DD	FLAT:?OnSetTextColor@CTextProgressCtrl@@IAEJIJ@Z
	DD	0465H
	DD	00H
	DD	00H
	DD	00H
	DD	0eH
	DD	FLAT:?OnSetShowText@CTextProgressCtrl@@IAEJIJ@Z
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ??_7CMemDC@@6B@
CONST	SEGMENT
??_7CMemDC@@6B@ DD FLAT:??_R4CMemDC@@6B@		; CMemDC::`vftable'
	DD	FLAT:?GetRuntimeClass@CDC@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECMemDC@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?SetAttribDC@CDC@@UAEXPAUHDC__@@@Z
	DD	FLAT:?SetOutputDC@CDC@@UAEXPAUHDC__@@@Z
	DD	FLAT:?ReleaseAttribDC@CDC@@UAEXXZ
	DD	FLAT:?ReleaseOutputDC@CDC@@UAEXXZ
	DD	FLAT:?SaveDC@CDC@@UAEHXZ
	DD	FLAT:?RestoreDC@CDC@@UAEHH@Z
	DD	FLAT:?SelectStockObject@CDC@@UAEPAVCGdiObject@@H@Z
	DD	FLAT:?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z
	DD	FLAT:?SetBkColor@CDC@@UAEKK@Z
	DD	FLAT:?SetTextColor@CDC@@UAEKK@Z
	DD	FLAT:?SetMapMode@CDC@@UAEHH@Z
	DD	FLAT:?SetViewportOrg@CDC@@UAE?AVCPoint@@HH@Z
	DD	FLAT:?OffsetViewportOrg@CDC@@UAE?AVCPoint@@HH@Z
	DD	FLAT:?SetViewportExt@CDC@@UAE?AVCSize@@HH@Z
	DD	FLAT:?ScaleViewportExt@CDC@@UAE?AVCSize@@HHHH@Z
	DD	FLAT:?SetWindowExt@CDC@@UAE?AVCSize@@HH@Z
	DD	FLAT:?ScaleWindowExt@CDC@@UAE?AVCSize@@HHHH@Z
	DD	FLAT:?GetClipBox@CDC@@UBEHPAUtagRECT@@@Z
	DD	FLAT:?PtVisible@CDC@@UBEHHH@Z
	DD	FLAT:?RectVisible@CDC@@UBEHPBUtagRECT@@@Z
	DD	FLAT:?TextOutA@CDC@@UAEHHHPBDH@Z
	DD	FLAT:?ExtTextOutA@CDC@@UAEHHHIPBUtagRECT@@PBDIPAH@Z
	DD	FLAT:?TabbedTextOutA@CDC@@UAE?AVCSize@@HHPBDHHPAHH@Z
	DD	FLAT:?DrawTextA@CDC@@UAEHPBDHPAUtagRECT@@I@Z
	DD	FLAT:?DrawTextExA@CDC@@UAEHPADHPAUtagRECT@@IPAUtagDRAWTEXTPARAMS@@@Z
	DD	FLAT:?GrayStringA@CDC@@UAEHPAVCBrush@@P6GHPAUHDC__@@JH@ZJHHHHH@Z
	DD	FLAT:?Escape@CDC@@UAEHHHPBDPAX@Z
CONST	ENDS
;	COMDAT ??_7CTextProgressCtrl@@6B@
CONST	SEGMENT
??_7CTextProgressCtrl@@6B@ DD FLAT:??_R4CTextProgressCtrl@@6B@ ; CTextProgressCtrl::`vftable'
	DD	FLAT:?GetRuntimeClass@CProgressCtrl@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECTextProgressCtrl@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CTextProgressCtrl@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CWnd@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KABUtagRECT@@PAV1@IPAX@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?GetMenu@CWnd@@UBEPAVCMenu@@XZ
	DD	FLAT:?SetMenu@CWnd@@UAEHPAVCMenu@@@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?HtmlHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?WinHelpInternal@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?OnDrawIconicThumbnailOrLivePreview@CWnd@@UAEXAAVCDC@@VCRect@@VCSize@@HAAH@Z
	DD	FLAT:?EnsureStdObj@CWnd@@UAEJXZ
	DD	FLAT:?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z
	DD	FLAT:?get_accChildCount@CWnd@@UAEJPAJ@Z
	DD	FLAT:?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z
	DD	FLAT:?get_accName@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accHelpTopic@CWnd@@UAEJPAPA_WUtagVARIANT@@PAJ@Z
	DD	FLAT:?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z
	DD	FLAT:?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z
	DD	FLAT:?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z
	DD	FLAT:?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z
	DD	FLAT:?put_accName@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?put_accValue@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z
	DD	FLAT:?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z
	DD	FLAT:?OnCommand@CWnd@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CWnd@@MAEXXZ
	DD	FLAT:?OnChildNotify@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?OnTouchInputs@CWnd@@MAEHIPAUtagTOUCHINPUT@@@Z
	DD	FLAT:?OnTouchInput@CWnd@@MAEHVCPoint@@HHPAUtagTOUCHINPUT@@@Z
	DD	FLAT:?GetGestureStatus@CWnd@@MAEKVCPoint@@@Z
	DD	FLAT:?OnGestureZoom@CWnd@@MAEHVCPoint@@J@Z
	DD	FLAT:?OnGesturePan@CWnd@@MAEHVCPoint@@0@Z
	DD	FLAT:?OnGestureRotate@CWnd@@MAEHVCPoint@@N@Z
	DD	FLAT:?OnGestureTwoFingerTap@CWnd@@MAEHVCPoint@@@Z
	DD	FLAT:?OnGesturePressAndTap@CWnd@@MAEHVCPoint@@J@Z
	DD	FLAT:?ResizeDynamicLayout@CWnd@@MAEXXZ
	DD	FLAT:?CheckAutoCenter@CWnd@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z
	DD	FLAT:?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z
	DD	FLAT:?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?GetOccDialogInfo@CWnd@@MAEPAU_AFX_OCC_DIALOG_INFO@@XZ
	DD	FLAT:?Create@CProgressCtrl@@UAEHKABUtagRECT@@PAVCWnd@@I@Z
	DD	FLAT:?CreateEx@CProgressCtrl@@UAEHKKABUtagRECT@@PAVCWnd@@I@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CProgressCtrl@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CProgressCtrl@@8 DD FLAT:??_R0?AVCProgressCtrl@@@8 ; CProgressCtrl::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CProgressCtrl@@8
rdata$r	ENDS
;	COMDAT ??_R2CProgressCtrl@@8
rdata$r	SEGMENT
??_R2CProgressCtrl@@8 DD FLAT:??_R1A@?0A@EA@CProgressCtrl@@8 ; CProgressCtrl::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CWnd@@8
	DD	FLAT:??_R1A@?0A@EA@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CProgressCtrl@@8
rdata$r	SEGMENT
??_R3CProgressCtrl@@8 DD 00H				; CProgressCtrl::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CProgressCtrl@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCProgressCtrl@@@8
data$rs	SEGMENT
??_R0?AVCProgressCtrl@@@8 DD FLAT:??_7type_info@@6B@	; CProgressCtrl `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCProgressCtrl@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CProgressCtrl@@6B@
rdata$r	SEGMENT
??_R4CProgressCtrl@@6B@ DD 00H				; CProgressCtrl::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCProgressCtrl@@@8
	DD	FLAT:??_R3CProgressCtrl@@8
rdata$r	ENDS
;	COMDAT ??_R2CCmdTarget@@8
rdata$r	SEGMENT
??_R2CCmdTarget@@8 DD FLAT:??_R1A@?0A@EA@CCmdTarget@@8	; CCmdTarget::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CCmdTarget@@8
rdata$r	SEGMENT
??_R3CCmdTarget@@8 DD 00H				; CCmdTarget::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CCmdTarget@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCmdTarget@@@8
data$rs	SEGMENT
??_R0?AVCCmdTarget@@@8 DD FLAT:??_7type_info@@6B@	; CCmdTarget `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCmdTarget@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CCmdTarget@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCmdTarget@@8 DD FLAT:??_R0?AVCCmdTarget@@@8 ; CCmdTarget::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCmdTarget@@8
rdata$r	ENDS
;	COMDAT ??_R2CWnd@@8
rdata$r	SEGMENT
??_R2CWnd@@8 DD	FLAT:??_R1A@?0A@EA@CWnd@@8		; CWnd::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CWnd@@8
rdata$r	SEGMENT
??_R3CWnd@@8 DD	00H					; CWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWnd@@@8
data$rs	SEGMENT
??_R0?AVCWnd@@@8 DD FLAT:??_7type_info@@6B@		; CWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWnd@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWnd@@8 DD FLAT:??_R0?AVCWnd@@@8		; CWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWnd@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CRgn@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CRgn@@8 DD FLAT:??_R0?AVCRgn@@@8		; CRgn::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CRgn@@8
rdata$r	ENDS
;	COMDAT ??_R2CRgn@@8
rdata$r	SEGMENT
??_R2CRgn@@8 DD	FLAT:??_R1A@?0A@EA@CRgn@@8		; CRgn::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGdiObject@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CRgn@@8
rdata$r	SEGMENT
??_R3CRgn@@8 DD	00H					; CRgn::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CRgn@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCRgn@@@8
data$rs	SEGMENT
??_R0?AVCRgn@@@8 DD FLAT:??_7type_info@@6B@		; CRgn `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCRgn@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CRgn@@6B@
rdata$r	SEGMENT
??_R4CRgn@@6B@ DD 00H					; CRgn::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCRgn@@@8
	DD	FLAT:??_R3CRgn@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBitmap@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBitmap@@8 DD FLAT:??_R0?AVCBitmap@@@8	; CBitmap::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBitmap@@8
rdata$r	ENDS
;	COMDAT ??_R2CBitmap@@8
rdata$r	SEGMENT
??_R2CBitmap@@8 DD FLAT:??_R1A@?0A@EA@CBitmap@@8	; CBitmap::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGdiObject@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CBitmap@@8
rdata$r	SEGMENT
??_R3CBitmap@@8 DD 00H					; CBitmap::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CBitmap@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBitmap@@@8
data$rs	SEGMENT
??_R0?AVCBitmap@@@8 DD FLAT:??_7type_info@@6B@		; CBitmap `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBitmap@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CBitmap@@6B@
rdata$r	SEGMENT
??_R4CBitmap@@6B@ DD 00H				; CBitmap::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBitmap@@@8
	DD	FLAT:??_R3CBitmap@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CFont@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFont@@8 DD FLAT:??_R0?AVCFont@@@8	; CFont::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFont@@8
rdata$r	ENDS
;	COMDAT ??_R2CFont@@8
rdata$r	SEGMENT
??_R2CFont@@8 DD FLAT:??_R1A@?0A@EA@CFont@@8		; CFont::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGdiObject@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CFont@@8
rdata$r	SEGMENT
??_R3CFont@@8 DD 00H					; CFont::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CFont@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFont@@@8
data$rs	SEGMENT
??_R0?AVCFont@@@8 DD FLAT:??_7type_info@@6B@		; CFont `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFont@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CFont@@6B@
rdata$r	SEGMENT
??_R4CFont@@6B@ DD 00H					; CFont::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFont@@@8
	DD	FLAT:??_R3CFont@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGdiObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGdiObject@@8 DD FLAT:??_R0?AVCGdiObject@@@8 ; CGdiObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGdiObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CGdiObject@@8
rdata$r	SEGMENT
??_R2CGdiObject@@8 DD FLAT:??_R1A@?0A@EA@CGdiObject@@8	; CGdiObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CGdiObject@@8
rdata$r	SEGMENT
??_R3CGdiObject@@8 DD 00H				; CGdiObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGdiObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGdiObject@@@8
data$rs	SEGMENT
??_R0?AVCGdiObject@@@8 DD FLAT:??_7type_info@@6B@	; CGdiObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGdiObject@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CGdiObject@@6B@
rdata$r	SEGMENT
??_R4CGdiObject@@6B@ DD 00H				; CGdiObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGdiObject@@@8
	DD	FLAT:??_R3CGdiObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CObject@@8
rdata$r	SEGMENT
??_R2CObject@@8 DD FLAT:??_R1A@?0A@EA@CObject@@8	; CObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObject@@8
rdata$r	SEGMENT
??_R3CObject@@8 DD 00H					; CObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
data$rs	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
data$rs	ENDS
;	COMDAT ??_7CProgressCtrl@@6B@
CONST	SEGMENT
??_7CProgressCtrl@@6B@ DD FLAT:??_R4CProgressCtrl@@6B@	; CProgressCtrl::`vftable'
	DD	FLAT:?GetRuntimeClass@CProgressCtrl@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECProgressCtrl@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CWnd@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CWnd@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KABUtagRECT@@PAV1@IPAX@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?GetMenu@CWnd@@UBEPAVCMenu@@XZ
	DD	FLAT:?SetMenu@CWnd@@UAEHPAVCMenu@@@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?HtmlHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?WinHelpInternal@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?OnDrawIconicThumbnailOrLivePreview@CWnd@@UAEXAAVCDC@@VCRect@@VCSize@@HAAH@Z
	DD	FLAT:?EnsureStdObj@CWnd@@UAEJXZ
	DD	FLAT:?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z
	DD	FLAT:?get_accChildCount@CWnd@@UAEJPAJ@Z
	DD	FLAT:?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z
	DD	FLAT:?get_accName@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accHelpTopic@CWnd@@UAEJPAPA_WUtagVARIANT@@PAJ@Z
	DD	FLAT:?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z
	DD	FLAT:?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z
	DD	FLAT:?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z
	DD	FLAT:?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z
	DD	FLAT:?put_accName@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?put_accValue@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z
	DD	FLAT:?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z
	DD	FLAT:?OnCommand@CWnd@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CWnd@@MAEXXZ
	DD	FLAT:?OnChildNotify@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?OnTouchInputs@CWnd@@MAEHIPAUtagTOUCHINPUT@@@Z
	DD	FLAT:?OnTouchInput@CWnd@@MAEHVCPoint@@HHPAUtagTOUCHINPUT@@@Z
	DD	FLAT:?GetGestureStatus@CWnd@@MAEKVCPoint@@@Z
	DD	FLAT:?OnGestureZoom@CWnd@@MAEHVCPoint@@J@Z
	DD	FLAT:?OnGesturePan@CWnd@@MAEHVCPoint@@0@Z
	DD	FLAT:?OnGestureRotate@CWnd@@MAEHVCPoint@@N@Z
	DD	FLAT:?OnGestureTwoFingerTap@CWnd@@MAEHVCPoint@@@Z
	DD	FLAT:?OnGesturePressAndTap@CWnd@@MAEHVCPoint@@J@Z
	DD	FLAT:?ResizeDynamicLayout@CWnd@@MAEXXZ
	DD	FLAT:?CheckAutoCenter@CWnd@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z
	DD	FLAT:?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z
	DD	FLAT:?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?GetOccDialogInfo@CWnd@@MAEPAU_AFX_OCC_DIALOG_INFO@@XZ
	DD	FLAT:?Create@CProgressCtrl@@UAEHKABUtagRECT@@PAVCWnd@@I@Z
	DD	FLAT:?CreateEx@CProgressCtrl@@UAEHKKABUtagRECT@@PAVCWnd@@I@Z
CONST	ENDS
;	COMDAT ??_C@_0N@OMEMOKLE@?$CFTs?5?$CI?$CFTs?3?$CFd?$CJ@
CONST	SEGMENT
??_C@_0N@OMEMOKLE@?$CFTs?5?$CI?$CFTs?3?$CFd?$CJ@ DB '%Ts (%Ts:%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HBOOMJBF@?$CFTs?5?$CI?$CFTs?3?$CFd?$CJ?6?$CFTs@
CONST	SEGMENT
??_C@_0BB@HBOOMJBF@?$CFTs?5?$CI?$CFTs?3?$CFd?$CJ?6?$CFTs@ DB '%Ts (%Ts:%d'
	DB	')', 0aH, '%Ts', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OIEOKIDM@Exception?5thrown?5in?5destructor@
CONST	SEGMENT
??_C@_0BP@OIEOKIDM@Exception?5thrown?5in?5destructor@ DB 'Exception throw'
	DB	'n in destructor', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0HD@JJCHHHNK@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0HD@JJCHHHNK@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.29.30133\atlmfc\include\afxwin1.inl', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CRgn@@6B@
CONST	SEGMENT
??_7CRgn@@6B@ DD FLAT:??_R4CRgn@@6B@			; CRgn::`vftable'
	DD	FLAT:?GetRuntimeClass@CRgn@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECRgn@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_7CBitmap@@6B@
CONST	SEGMENT
??_7CBitmap@@6B@ DD FLAT:??_R4CBitmap@@6B@		; CBitmap::`vftable'
	DD	FLAT:?GetRuntimeClass@CBitmap@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECBitmap@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_7CFont@@6B@
CONST	SEGMENT
??_7CFont@@6B@ DD FLAT:??_R4CFont@@6B@			; CFont::`vftable'
	DD	FLAT:?GetRuntimeClass@CFont@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECFont@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_7CGdiObject@@6B@
CONST	SEGMENT
??_7CGdiObject@@6B@ DD FLAT:??_R4CGdiObject@@6B@	; CGdiObject::`vftable'
	DD	FLAT:?GetRuntimeClass@CGdiObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECGdiObject@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R0PAVCException@@@8
data$r	SEGMENT
??_R0PAVCException@@@8 DD FLAT:??_7type_info@@6B@	; CException * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAVCException@@', 00H
data$r	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CMemDC@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CMemDC@@QAE@PAVCDC@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CMemDC@@QAE@PAVCDC@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CMemDC@@QAE@PAVCDC@@@Z$1
__ehfuncinfo$??0CMemDC@@QAE@PAVCDC@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CMemDC@@QAE@PAVCDC@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?OnPaint@CTextProgressCtrl@@IAEXXZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?OnPaint@CTextProgressCtrl@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?OnPaint@CTextProgressCtrl@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnPaint@CTextProgressCtrl@@IAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?OnPaint@CTextProgressCtrl@@IAEXXZ$5
	DD	01H
	DD	FLAT:__unwindfunclet$?OnPaint@CTextProgressCtrl@@IAEXXZ$6
	DD	00H
	DD	FLAT:__unwindfunclet$?OnPaint@CTextProgressCtrl@@IAEXXZ$1
	DD	03H
	DD	FLAT:__unwindfunclet$?OnPaint@CTextProgressCtrl@@IAEXXZ$2
	DD	04H
	DD	FLAT:__unwindfunclet$?OnPaint@CTextProgressCtrl@@IAEXXZ$3
	DD	05H
	DD	FLAT:__unwindfunclet$?OnPaint@CTextProgressCtrl@@IAEXXZ$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??1CGdiObject@@UAE@XZ$3 DD 00H
	DD	FLAT:??_R0PAVCException@@@8
	DD	0fffffde4H
	DD	FLAT:__catch$??1CGdiObject@@UAE@XZ$0
__tryblocktable$??1CGdiObject@@UAE@XZ DD 00H
	DD	00H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??1CGdiObject@@UAE@XZ$3
__unwindtable$??1CGdiObject@@UAE@XZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	FLAT:__unwindfunclet$??1CGdiObject@@UAE@XZ$2
__ehfuncinfo$??1CGdiObject@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CGdiObject@@UAE@XZ
	DD	01H
	DD	FLAT:__tryblocktable$??1CGdiObject@@UAE@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_GCMemDC@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMemDC@@UAEPAXI@Z PROC				; CMemDC::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMemDC@@UAE@XZ	; CMemDC::~CMemDC
  0000b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0000e	a8 01		 test	 al, 1
  00010	74 1f		 je	 SHORT $LN9@scalar
  00012	a8 04		 test	 al, 4
  00014	75 10		 jne	 SHORT $LN3@scalar

; 112  : 	{ ::operator delete(p); }

  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	83 c4 04	 add	 esp, 4
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN3@scalar:
  00026	6a 34		 push	 52			; 00000034H
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0002e	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??_GCMemDC@@UAEPAXI@Z ENDP				; CMemDC::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ??1CMemDC@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CMemDC@@UAE@XZ PROC					; CMemDC::~CMemDC, COMDAT
; _this$ = ecx

; 102  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CMemDC@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b d9		 mov	 ebx, ecx

; 103  :         if (m_bMemDC) 

  00027	83 7b 30 00	 cmp	 DWORD PTR [ebx+48], 0
  0002b	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7CMemDC@@6B@
  00031	74 4a		 je	 SHORT $LN2@CMemDC

; 106  :             m_pDC->BitBlt(m_rect.left, m_rect.top, m_rect.Width(), m_rect.Height(),

  00033	8b 7b 24	 mov	 edi, DWORD PTR [ebx+36]
  00036	8b 73 20	 mov	 esi, DWORD PTR [ebx+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 581  : 	return bottom - top;

  00039	8b 53 2c	 mov	 edx, DWORD PTR [ebx+44]

; 576  : 	return right - left;

  0003c	8b 4b 28	 mov	 ecx, DWORD PTR [ebx+40]

; 581  : 	return bottom - top;

  0003f	2b d7		 sub	 edx, edi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 106  :             m_pDC->BitBlt(m_rect.left, m_rect.top, m_rect.Width(), m_rect.Height(),

  00041	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 576  : 	return right - left;

  00044	2b ce		 sub	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 552  : 	{ ASSERT(m_hDC != NULL); return ::BitBlt(m_hDC, x, y, nWidth, nHeight,

  00046	68 20 00 cc 00	 push	 13369376		; 00cc0020H
  0004b	57		 push	 edi
  0004c	56		 push	 esi
  0004d	ff 73 04	 push	 DWORD PTR [ebx+4]
  00050	52		 push	 edx
  00051	51		 push	 ecx
  00052	57		 push	 edi
  00053	56		 push	 esi
  00054	ff 70 04	 push	 DWORD PTR [eax+4]
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BitBlt@36
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 110  :             SelectObject(m_pOldBitmap);

  0005d	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 68   : 	{ return this == NULL ? NULL : m_hObject; }

  00060	85 c0		 test	 eax, eax
  00062	75 0b		 jne	 SHORT $LN19@CMemDC

; 361  : 	{ ASSERT(m_hDC != NULL); return (CBitmap*) SelectGdiObject(m_hDC, pBitmap->GetSafeHandle()); }

  00064	50		 push	 eax
  00065	ff 73 04	 push	 DWORD PTR [ebx+4]
  00068	e8 00 00 00 00	 call	 ?SelectGdiObject@CDC@@KGPAVCGdiObject@@PAUHDC__@@PAX@Z ; CDC::SelectGdiObject
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 111  :         } else {

  0006d	eb 1c		 jmp	 SHORT $LN3@CMemDC
$LN19@CMemDC:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 68   : 	{ return this == NULL ? NULL : m_hObject; }

  0006f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 361  : 	{ ASSERT(m_hDC != NULL); return (CBitmap*) SelectGdiObject(m_hDC, pBitmap->GetSafeHandle()); }

  00072	50		 push	 eax
  00073	ff 73 04	 push	 DWORD PTR [ebx+4]
  00076	e8 00 00 00 00	 call	 ?SelectGdiObject@CDC@@KGPAVCGdiObject@@PAUHDC__@@PAX@Z ; CDC::SelectGdiObject
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 111  :         } else {

  0007b	eb 0e		 jmp	 SHORT $LN3@CMemDC
$LN2@CMemDC:

; 112  :             // All we need to do is replace the DC with an illegal value,
; 113  :             // this keeps us from accidently deleting the handles associated with
; 114  :             // the CDC that was passed to the constructor.
; 115  :             m_hDC = m_hAttribDC = NULL;

  0007d	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
  00084	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
$LN3@CMemDC:

; 117  :     }

  0008b	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 179  : 	{ }

  0008e	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CBitmap@@6B@
  00094	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 117  :     }

  00099	8b cb		 mov	 ecx, ebx
  0009b	e8 00 00 00 00	 call	 ??1CDC@@UAE@XZ		; CDC::~CDC
  000a0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000aa	59		 pop	 ecx
  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	5b		 pop	 ebx
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
  000b2	cc		 int	 3
  000b3	cc		 int	 3
  000b4	cc		 int	 3
  000b5	cc		 int	 3
  000b6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CMemDC@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CMemDC@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CMemDC@@UAE@XZ ENDP					; CMemDC::~CMemDC
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_GCTextProgressCtrl@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCTextProgressCtrl@@UAEPAXI@Z PROC			; CTextProgressCtrl::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 157  : {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 158  : }

  00006	8d 8e 94 00 00
	00		 lea	 ecx, DWORD PTR [esi+148]
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CTextProgressCtrl@@6B@
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00018	8b ce		 mov	 ecx, esi
  0001a	e8 00 00 00 00	 call	 ??1CProgressCtrl@@UAE@XZ ; CProgressCtrl::~CProgressCtrl
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00022	a8 01		 test	 al, 1
  00024	74 22		 je	 SHORT $LN12@scalar
  00026	a8 04		 test	 al, 4
  00028	75 10		 jne	 SHORT $LN3@scalar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 112  : 	{ ::operator delete(p); }

  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
$LN3@scalar:
  0003a	68 b0 00 00 00	 push	 176			; 000000b0H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  00045	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00048	8b c6		 mov	 eax, esi
  0004a	5e		 pop	 esi
  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
??_GCTextProgressCtrl@@UAEPAXI@Z ENDP			; CTextProgressCtrl::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?GetMessageMap@CTextProgressCtrl@@MBEPBUAFX_MSGMAP@@XZ
_TEXT	SEGMENT
?GetMessageMap@CTextProgressCtrl@@MBEPBUAFX_MSGMAP@@XZ PROC ; CTextProgressCtrl::GetMessageMap, COMDAT
; _this$ = ecx

; 160  : BEGIN_MESSAGE_MAP(CTextProgressCtrl, CProgressCtrl)

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?messageMap@?1??GetThisMessageMap@CTextProgressCtrl@@KGPBUAFX_MSGMAP@@XZ@4U3@B
  00005	c3		 ret	 0
?GetMessageMap@CTextProgressCtrl@@MBEPBUAFX_MSGMAP@@XZ ENDP ; CTextProgressCtrl::GetMessageMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?GetThisMessageMap@CTextProgressCtrl@@KGPBUAFX_MSGMAP@@XZ
_TEXT	SEGMENT
?GetThisMessageMap@CTextProgressCtrl@@KGPBUAFX_MSGMAP@@XZ PROC ; CTextProgressCtrl::GetThisMessageMap, COMDAT

; 161  :     //{{AFX_MSG_MAP(CTextProgressCtrl)
; 162  :     ON_WM_ERASEBKGND()
; 163  :     ON_WM_PAINT()
; 164  :     ON_WM_SIZE()
; 165  :     //}}AFX_MSG_MAP
; 166  :     ON_MESSAGE(WM_SETTEXT, OnSetText)
; 167  :     ON_MESSAGE(WM_GETTEXT, OnGetText)
; 168  :     ON_MESSAGE(PBM_DELTAPOS, OnOffsetPos)
; 169  :     ON_MESSAGE(PBM_GETPOS, OnGetPos)
; 170  :     ON_MESSAGE(PBM_GETRANGE, OnGetRange)
; 171  :     ON_MESSAGE(PBM_SETBARCOLOR, OnSetBarColor)
; 172  :     ON_MESSAGE(PBM_SETBKCOLOR, OnSetBkColor)
; 173  :     ON_MESSAGE(PBM_SETPOS, OnSetPos)
; 174  :     ON_MESSAGE(PBM_SETRANGE, OnSetRange)
; 175  :     ON_MESSAGE(PBM_SETRANGE32, OnSetRange32)
; 176  :     ON_MESSAGE(PBM_SETSTEP, OnSetStep)
; 177  :     ON_MESSAGE(PBM_STEPIT, OnStepIt)
; 178  :     ON_MESSAGE(PBM_SETTEXTCOLOR, OnSetTextColor)
; 179  :     ON_MESSAGE(PBM_SETSHOWTEXT, OnSetShowText)
; 180  : END_MESSAGE_MAP()

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?messageMap@?1??GetThisMessageMap@CTextProgressCtrl@@KGPBUAFX_MSGMAP@@XZ@4U3@B
  00005	c3		 ret	 0
?GetThisMessageMap@CTextProgressCtrl@@KGPBUAFX_MSGMAP@@XZ ENDP ; CTextProgressCtrl::GetThisMessageMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?OnSetShowText@CTextProgressCtrl@@IAEJIJ@Z
_TEXT	SEGMENT
_bShow$ = 8						; size = 4
___formal$ = 12						; size = 4
?OnSetShowText@CTextProgressCtrl@@IAEJIJ@Z PROC		; CTextProgressCtrl::OnSetShowText, COMDAT
; _this$ = ecx

; 328  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 329  :     LRESULT result = Default();

  00007	e8 00 00 00 00	 call	 ?Default@CWnd@@IAEJXZ	; CWnd::Default

; 336  :     if (::IsWindow(m_hWnd) && m_bShowText != bShow)

  0000c	ff 76 20	 push	 DWORD PTR [esi+32]

; 329  :     LRESULT result = Default();

  0000f	8b d8		 mov	 ebx, eax

; 336  :     if (::IsWindow(m_hWnd) && m_bShowText != bShow)

  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  00017	85 c0		 test	 eax, eax
  00019	74 28		 je	 SHORT $LN8@OnSetShowT
  0001b	57		 push	 edi
  0001c	8b 7d 08	 mov	 edi, DWORD PTR _bShow$[ebp]
  0001f	39 be 98 00 00
	00		 cmp	 DWORD PTR [esi+152], edi
  00025	74 0d		 je	 SHORT $LN9@OnSetShowT
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl

; 114  : 	{ ASSERT(::IsWindow(m_hWnd)); ::InvalidateRect(m_hWnd, NULL, bErase); }

  00027	6a 01		 push	 1
  00029	6a 00		 push	 0
  0002b	ff 76 20	 push	 DWORD PTR [esi+32]
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12
$LN9@OnSetShowT:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 339  :     m_bShowText = bShow;

  00034	89 be 98 00 00
	00		 mov	 DWORD PTR [esi+152], edi

; 330  :     SetShowText((BOOL)bShow);
; 331  :     return result;

  0003a	8b c3		 mov	 eax, ebx
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi

; 332  : }

  0003e	5b		 pop	 ebx
  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
$LN8@OnSetShowT:

; 339  :     m_bShowText = bShow;

  00043	8b 45 08	 mov	 eax, DWORD PTR _bShow$[ebp]
  00046	89 86 98 00 00
	00		 mov	 DWORD PTR [esi+152], eax

; 330  :     SetShowText((BOOL)bShow);
; 331  :     return result;

  0004c	8b c3		 mov	 eax, ebx
  0004e	5e		 pop	 esi

; 332  : }

  0004f	5b		 pop	 ebx
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
?OnSetShowText@CTextProgressCtrl@@IAEJIJ@Z ENDP		; CTextProgressCtrl::OnSetShowText
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?OnSetTextColor@CTextProgressCtrl@@IAEJIJ@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_Colour$ = 12						; size = 4
?OnSetTextColor@CTextProgressCtrl@@IAEJIJ@Z PROC	; CTextProgressCtrl::OnSetTextColor, COMDAT
; _this$ = ecx

; 468  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 474  :     if (::IsWindow(m_hWnd))

  00006	ff 76 20	 push	 DWORD PTR [esi+32]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  0000f	85 c0		 test	 eax, eax
  00011	74 0d		 je	 SHORT $LN4@OnSetTextC
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl

; 114  : 	{ ASSERT(::IsWindow(m_hWnd)); ::InvalidateRect(m_hWnd, NULL, bErase); }

  00013	6a 01		 push	 1
  00015	6a 00		 push	 0
  00017	ff 76 20	 push	 DWORD PTR [esi+32]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12
$LN4@OnSetTextC:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 477  :     COLORREF crOldTextClr = m_crTextClr;

  00020	8b 86 80 00 00
	00		 mov	 eax, DWORD PTR [esi+128]

; 478  :     m_crTextClr = crTextClr;

  00026	8b 4d 0c	 mov	 ecx, DWORD PTR _Colour$[ebp]
  00029	89 8e 80 00 00
	00		 mov	 DWORD PTR [esi+128], ecx

; 469  :     return (LRESULT)SetTextColour((COLORREF)Colour);

  0002f	5e		 pop	 esi

; 470  : }

  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
?OnSetTextColor@CTextProgressCtrl@@IAEJIJ@Z ENDP	; CTextProgressCtrl::OnSetTextColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?OnSetBkColor@CTextProgressCtrl@@IAEJIJ@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_Colour$ = 12						; size = 4
?OnSetBkColor@CTextProgressCtrl@@IAEJIJ@Z PROC		; CTextProgressCtrl::OnSetBkColor, COMDAT
; _this$ = ecx

; 448  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 454  :     if (::IsWindow(m_hWnd))

  00006	ff 76 20	 push	 DWORD PTR [esi+32]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  0000f	85 c0		 test	 eax, eax
  00011	74 0d		 je	 SHORT $LN4@OnSetBkCol
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl

; 114  : 	{ ASSERT(::IsWindow(m_hWnd)); ::InvalidateRect(m_hWnd, NULL, bErase); }

  00013	6a 01		 push	 1
  00015	6a 00		 push	 0
  00017	ff 76 20	 push	 DWORD PTR [esi+32]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12
$LN4@OnSetBkCol:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 457  :     COLORREF crOldBgClr = m_crBgClr;

  00020	8b 86 a4 00 00
	00		 mov	 eax, DWORD PTR [esi+164]

; 458  :     m_crBgClr = crBgClr;

  00026	8b 4d 0c	 mov	 ecx, DWORD PTR _Colour$[ebp]
  00029	89 8e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ecx

; 449  :     return (LRESULT)SetBgColour((COLORREF)Colour);

  0002f	5e		 pop	 esi

; 450  : }

  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
?OnSetBkColor@CTextProgressCtrl@@IAEJIJ@Z ENDP		; CTextProgressCtrl::OnSetBkColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?OnSetBarColor@CTextProgressCtrl@@IAEJIJ@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_Colour$ = 12						; size = 4
?OnSetBarColor@CTextProgressCtrl@@IAEJIJ@Z PROC		; CTextProgressCtrl::OnSetBarColor, COMDAT
; _this$ = ecx

; 428  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 434  :     if (::IsWindow(m_hWnd))

  00006	ff 76 20	 push	 DWORD PTR [esi+32]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  0000f	85 c0		 test	 eax, eax
  00011	74 0d		 je	 SHORT $LN4@OnSetBarCo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl

; 114  : 	{ ASSERT(::IsWindow(m_hWnd)); ::InvalidateRect(m_hWnd, NULL, bErase); }

  00013	6a 01		 push	 1
  00015	6a 00		 push	 0
  00017	ff 76 20	 push	 DWORD PTR [esi+32]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12
$LN4@OnSetBarCo:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 437  :     COLORREF crOldBarClr = m_crBarClr;

  00020	8b 86 a0 00 00
	00		 mov	 eax, DWORD PTR [esi+160]

; 438  :     m_crBarClr = crBarClr;

  00026	8b 4d 0c	 mov	 ecx, DWORD PTR _Colour$[ebp]
  00029	89 8e a0 00 00
	00		 mov	 DWORD PTR [esi+160], ecx

; 429  :     return (LRESULT)SetBarColour((COLORREF)Colour);

  0002f	5e		 pop	 esi

; 430  : }

  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
?OnSetBarColor@CTextProgressCtrl@@IAEJIJ@Z ENDP		; CTextProgressCtrl::OnSetBarColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?OnSetStep@CTextProgressCtrl@@IAEJIJ@Z
_TEXT	SEGMENT
_nStep$ = 8						; size = 4
___formal$ = 12						; size = 4
?OnSetStep@CTextProgressCtrl@@IAEJIJ@Z PROC		; CTextProgressCtrl::OnSetStep, COMDAT
; _this$ = ecx

; 421  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 422  :     int nOldStep = m_nStepSize;

  00003	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]

; 423  :     m_nStepSize = (int)nStep;

  00009	8b 55 08	 mov	 edx, DWORD PTR _nStep$[ebp]
  0000c	89 91 88 00 00
	00		 mov	 DWORD PTR [ecx+136], edx

; 424  :     return (LRESULT)nOldStep;
; 425  : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?OnSetStep@CTextProgressCtrl@@IAEJIJ@Z ENDP		; CTextProgressCtrl::OnSetStep
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxcmn2.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?OnOffsetPos@CTextProgressCtrl@@IAEJIJ@Z
_TEXT	SEGMENT
_nPos$ = 8						; size = 4
___formal$ = 12						; size = 4
?OnOffsetPos@CTextProgressCtrl@@IAEJIJ@Z PROC		; CTextProgressCtrl::OnOffsetPos, COMDAT
; _this$ = ecx

; 416  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 417  :     return (LRESULT)SetPos(m_nPos + (int)nPos);

  00003	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]
  00009	03 45 08	 add	 eax, DWORD PTR _nPos$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxcmn2.inl

; 359  : 	{ ASSERT(::IsWindow(m_hWnd)); return (int) ::SendMessage(m_hWnd, PBM_SETPOS, nPos, 0L); }

  0000c	6a 00		 push	 0
  0000e	50		 push	 eax
  0000f	68 02 04 00 00	 push	 1026			; 00000402H
  00014	ff 71 20	 push	 DWORD PTR [ecx+32]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 418  : }

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?OnOffsetPos@CTextProgressCtrl@@IAEJIJ@Z ENDP		; CTextProgressCtrl::OnOffsetPos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?OnGetRange@CTextProgressCtrl@@IAEJIJ@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
_range$ = 12						; size = 4
?OnGetRange@CTextProgressCtrl@@IAEJIJ@Z PROC		; CTextProgressCtrl::OnGetRange, COMDAT
; _this$ = ecx

; 361  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 362  :     BOOL bType = (BOOL)Type;
; 363  :     PPBRANGE pRange = (PPBRANGE)range;
; 364  :     if (pRange)

  00003	8b 55 0c	 mov	 edx, DWORD PTR _range$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 11		 je	 SHORT $LN2@OnGetRange

; 365  :     {
; 366  :         pRange->iHigh = m_nMax;

  0000a	8b 81 8c 00 00
	00		 mov	 eax, DWORD PTR [ecx+140]
  00010	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 367  :         pRange->iLow = m_nMin;

  00013	8b 81 90 00 00
	00		 mov	 eax, DWORD PTR [ecx+144]
  00019	89 02		 mov	 DWORD PTR [edx], eax
$LN2@OnGetRange:

; 368  :     }
; 369  :     return (LRESULT)(bType ? m_nMin : m_nMax);

  0001b	83 7d 08 00	 cmp	 DWORD PTR _Type$[ebp], 0
  0001f	74 0a		 je	 SHORT $LN4@OnGetRange
  00021	8b 81 90 00 00
	00		 mov	 eax, DWORD PTR [ecx+144]

; 370  : }

  00027	5d		 pop	 ebp
  00028	c2 08 00	 ret	 8
$LN4@OnGetRange:

; 368  :     }
; 369  :     return (LRESULT)(bType ? m_nMin : m_nMax);

  0002b	8b 81 8c 00 00
	00		 mov	 eax, DWORD PTR [ecx+140]

; 370  : }

  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
?OnGetRange@CTextProgressCtrl@@IAEJIJ@Z ENDP		; CTextProgressCtrl::OnGetRange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?OnSetRange32@CTextProgressCtrl@@IAEJIJ@Z
_TEXT	SEGMENT
_Lower$ = 8						; size = 4
_Upper$ = 12						; size = 4
?OnSetRange32@CTextProgressCtrl@@IAEJIJ@Z PROC		; CTextProgressCtrl::OnSetRange32, COMDAT
; _this$ = ecx

; 348  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 349  :     m_nMax = (int)Upper;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _Upper$[ebp]

; 350  :     m_nMin = (int)Lower;

  00006	8b 55 08	 mov	 edx, DWORD PTR _Lower$[ebp]
  00009	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 351  : 
; 352  :     // PBM_SETRANGE32 returns a DWORD value that holds the previous 16-bit 
; 353  :     // low limit in its low word and the previous 16-bit high limit in its 
; 354  :     // high word. If the previous ranges were 32-bit values, the return value 
; 355  :     // consists of the low words of both 32-bit limits. 
; 356  :     LRESULT result = (DWORD) (LOWORD(m_nMax) << 16) & DWORD(LOWORD(m_nMin));

  0000f	0f b7 c0	 movzx	 eax, ax
  00012	89 91 90 00 00
	00		 mov	 DWORD PTR [ecx+144], edx
  00018	c1 e0 10	 shl	 eax, 16			; 00000010H
  0001b	0f b7 ca	 movzx	 ecx, dx
  0001e	23 c1		 and	 eax, ecx

; 357  :     return result;
; 358  : }

  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
?OnSetRange32@CTextProgressCtrl@@IAEJIJ@Z ENDP		; CTextProgressCtrl::OnSetRange32
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?OnSetRange@CTextProgressCtrl@@IAEJIJ@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_range$ = 12						; size = 4
?OnSetRange@CTextProgressCtrl@@IAEJIJ@Z PROC		; CTextProgressCtrl::OnSetRange, COMDAT
; _this$ = ecx

; 343  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 344  :     return OnSetRange32(LOWORD(range), HIWORD(range));

  00003	8b 55 0c	 mov	 edx, DWORD PTR _range$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	c1 e8 10	 shr	 eax, 16			; 00000010H

; 349  :     m_nMax = (int)Upper;

  0000b	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 350  :     m_nMin = (int)Lower;

  00011	0f b7 d2	 movzx	 edx, dx

; 351  : 
; 352  :     // PBM_SETRANGE32 returns a DWORD value that holds the previous 16-bit 
; 353  :     // low limit in its low word and the previous 16-bit high limit in its 
; 354  :     // high word. If the previous ranges were 32-bit values, the return value 
; 355  :     // consists of the low words of both 32-bit limits. 
; 356  :     LRESULT result = (DWORD) (LOWORD(m_nMax) << 16) & DWORD(LOWORD(m_nMin));

  00014	c1 e0 10	 shl	 eax, 16			; 00000010H
  00017	89 91 90 00 00
	00		 mov	 DWORD PTR [ecx+144], edx
  0001d	23 c2		 and	 eax, edx

; 345  : }

  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?OnSetRange@CTextProgressCtrl@@IAEJIJ@Z ENDP		; CTextProgressCtrl::OnSetRange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxcmn2.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?OnStepIt@CTextProgressCtrl@@IAEJIJ@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?OnStepIt@CTextProgressCtrl@@IAEJIJ@Z PROC		; CTextProgressCtrl::OnStepIt, COMDAT
; _this$ = ecx

; 412  :    return (LRESULT)SetPos(m_nPos + m_nStepSize);

  00000	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  00006	03 81 84 00 00
	00		 add	 eax, DWORD PTR [ecx+132]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxcmn2.inl

; 359  : 	{ ASSERT(::IsWindow(m_hWnd)); return (int) ::SendMessage(m_hWnd, PBM_SETPOS, nPos, 0L); }

  0000c	6a 00		 push	 0
  0000e	50		 push	 eax
  0000f	68 02 04 00 00	 push	 1026			; 00000402H
  00014	ff 71 20	 push	 DWORD PTR [ecx+32]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 413  : }

  0001d	c2 08 00	 ret	 8
?OnStepIt@CTextProgressCtrl@@IAEJIJ@Z ENDP		; CTextProgressCtrl::OnStepIt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?OnSetPos@CTextProgressCtrl@@IAEJIJ@Z
_TEXT	SEGMENT
_rect$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_newPos$ = 8						; size = 4
___formal$ = 12						; size = 4
?OnSetPos@CTextProgressCtrl@@IAEJIJ@Z PROC		; CTextProgressCtrl::OnSetPos, COMDAT
; _this$ = ecx

; 386  : {    

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx

; 387  :     if (!::IsWindow(m_hWnd))

  00013	ff 76 20	 push	 DWORD PTR [esi+32]
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  0001c	85 c0		 test	 eax, eax
  0001e	75 14		 jne	 SHORT $LN2@OnSetPos

; 388  :         return -1;

  00020	83 c8 ff	 or	 eax, -1
  00023	5e		 pop	 esi

; 408  : }

  00024	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00027	33 cd		 xor	 ecx, ebp
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
$LN2@OnSetPos:

; 389  : 
; 390  :     int nPos = (int)newPos;
; 391  : 
; 392  :     int nOldPos = m_nPos;
; 393  :     m_nPos = nPos;

  00034	8b 45 08	 mov	 eax, DWORD PTR _newPos$[ebp]
  00037	0f 57 c0	 xorps	 xmm0, xmm0
  0003a	57		 push	 edi
  0003b	8b be 84 00 00
	00		 mov	 edi, DWORD PTR [esi+132]
  00041	89 86 84 00 00
	00		 mov	 DWORD PTR [esi+132], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl

; 86   : 	{ ASSERT(::IsWindow(m_hWnd)); ::GetClientRect(m_hWnd, lpRect); }

  00047	8d 45 ec	 lea	 eax, DWORD PTR _rect$[ebp]
  0004a	50		 push	 eax
  0004b	ff 76 20	 push	 DWORD PTR [esi+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 528  : 	left = 0;

  0004e	0f 11 45 ec	 movups	 XMMWORD PTR _rect$[ebp], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl

; 86   : 	{ ASSERT(::IsWindow(m_hWnd)); ::GetClientRect(m_hWnd, lpRect); }

  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 398  :     double Fraction = (double)(m_nPos - m_nMin) / ((double)(m_nMax - m_nMin));

  00058	8b 8e 90 00 00
	00		 mov	 ecx, DWORD PTR [esi+144]
  0005e	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00064	2b c1		 sub	 eax, ecx
  00066	66 0f 6e c8	 movd	 xmm1, eax
  0006a	8b 86 8c 00 00
	00		 mov	 eax, DWORD PTR [esi+140]
  00070	2b c1		 sub	 eax, ecx
  00072	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  00076	66 0f 6e c0	 movd	 xmm0, eax
  0007a	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 576  : 	return right - left;

  0007e	8b 45 f4	 mov	 eax, DWORD PTR _rect$[ebp+8]
  00081	2b 45 ec	 sub	 eax, DWORD PTR _rect$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 398  :     double Fraction = (double)(m_nPos - m_nMin) / ((double)(m_nMax - m_nMin));

  00084	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00088	66 0f 6e c0	 movd	 xmm0, eax

; 399  :     int nBarWidth = (int) (Fraction * rect.Width());

  0008c	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00090	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00094	f2 0f 2c c9	 cvttsd2si ecx, xmm1

; 400  : 
; 401  :     if (nBarWidth != m_nBarWidth)

  00098	3b 8e 9c 00 00
	00		 cmp	 ecx, DWORD PTR [esi+156]
  0009e	74 18		 je	 SHORT $LN3@OnSetPos
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl

; 142  : 	{ ASSERT(::IsWindow(m_hWnd)); return ::RedrawWindow(m_hWnd, lpRectUpdate, (HRGN)prgnUpdate->GetSafeHandle(), flags); }

  000a0	68 05 01 00 00	 push	 261			; 00000105H
  000a5	6a 00		 push	 0
  000a7	6a 00		 push	 0
  000a9	ff 76 20	 push	 DWORD PTR [esi+32]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 403  :         m_nBarWidth = nBarWidth;

  000ac	89 8e 9c 00 00
	00		 mov	 DWORD PTR [esi+156], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl

; 142  : 	{ ASSERT(::IsWindow(m_hWnd)); return ::RedrawWindow(m_hWnd, lpRectUpdate, (HRGN)prgnUpdate->GetSafeHandle(), flags); }

  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RedrawWindow@16
$LN3@OnSetPos:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 408  : }

  000b8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bb	8b c7		 mov	 eax, edi
  000bd	5f		 pop	 edi
  000be	33 cd		 xor	 ecx, ebp
  000c0	5e		 pop	 esi
  000c1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 08 00	 ret	 8
?OnSetPos@CTextProgressCtrl@@IAEJIJ@Z ENDP		; CTextProgressCtrl::OnSetPos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?OnGetPos@CTextProgressCtrl@@IAEJIJ@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?OnGetPos@CTextProgressCtrl@@IAEJIJ@Z PROC		; CTextProgressCtrl::OnGetPos, COMDAT
; _this$ = ecx

; 382  :     return (LRESULT)m_nPos;

  00000	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]

; 383  : }

  00006	c2 08 00	 ret	 8
?OnGetPos@CTextProgressCtrl@@IAEJIJ@Z ENDP		; CTextProgressCtrl::OnGetPos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\tchar.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\tchar.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?OnGetText@CTextProgressCtrl@@IAEJIJ@Z
_TEXT	SEGMENT
_wParam$ = 8						; size = 4
_lParam$ = 12						; size = 4
?OnGetText@CTextProgressCtrl@@IAEJIJ@Z PROC		; CTextProgressCtrl::OnGetText, COMDAT
; _this$ = ecx

; 202  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\tchar.h

; 1528 :     return (char *)_mbsnbcpy((unsigned char *)_Dst,(const unsigned char *)_Source,_Count);

  00004	8b 75 08	 mov	 esi, DWORD PTR _wParam$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 202  : {

  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\tchar.h

; 1528 :     return (char *)_mbsnbcpy((unsigned char *)_Dst,(const unsigned char *)_Source,_Count);

  0000a	56		 push	 esi
  0000b	ff b7 94 00 00
	00		 push	 DWORD PTR [edi+148]
  00011	ff 75 0c	 push	 DWORD PTR _lParam$[ebp]
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbsnbcpy
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 205  :     if (!_tcsncpy(szText, m_strText, cchTextMax))

  0001d	85 c0		 test	 eax, eax
  0001f	75 06		 jne	 SHORT $LN2@OnGetText

; 209  : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
$LN2@OnGetText:

; 206  :         return 0;
; 207  :     else 
; 208  :         return min(cchTextMax, (UINT) m_strText.GetLength());

  00027	8b 87 94 00 00
	00		 mov	 eax, DWORD PTR [edi+148]
  0002d	5f		 pop	 edi
  0002e	8b 40 f4	 mov	 eax, DWORD PTR [eax-12]
  00031	3b f0		 cmp	 esi, eax
  00033	0f 42 c6	 cmovb	 eax, esi

; 209  : }

  00036	5e		 pop	 esi
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
?OnGetText@CTextProgressCtrl@@IAEJIJ@Z ENDP		; CTextProgressCtrl::OnGetText
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?OnSetText@CTextProgressCtrl@@IAEJIJ@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
___formal$ = 8						; size = 4
_lParam$ = 12						; size = 4
?OnSetText@CTextProgressCtrl@@IAEJIJ@Z PROC		; CTextProgressCtrl::OnSetText, COMDAT
; _this$ = ecx

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b d9		 mov	 ebx, ecx
  00008	57		 push	 edi
  00009	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx

; 187  :     LRESULT result = Default();

  0000c	e8 00 00 00 00	 call	 ?Default@CWnd@@IAEJXZ	; CWnd::Default
  00011	8d bb 94 00 00
	00		 lea	 edi, DWORD PTR [ebx+148]
  00017	8b f0		 mov	 esi, eax

; 191  :     if ( (!szText && m_strText.GetLength()) ||

  00019	8b 5d 0c	 mov	 ebx, DWORD PTR _lParam$[ebp]
  0001c	85 db		 test	 ebx, ebx
  0001e	75 10		 jne	 SHORT $LN14@OnSetText
  00020	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00022	39 59 f4	 cmp	 DWORD PTR [ecx-12], ebx
  00025	75 16		 jne	 SHORT $LN3@OnSetText

; 199  : }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
$LN14@OnSetText:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h

; 2567 : 		return( str1.Compare( psz2 ) != 0 );

  00030	53		 push	 ebx
  00031	8b cf		 mov	 ecx, edi
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Compare@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z
  00039	85 c0		 test	 eax, eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 191  :     if ( (!szText && m_strText.GetLength()) ||

  0003b	74 19		 je	 SHORT $LN16@OnSetText
$LN3@OnSetText:

; 192  :          (szText && (m_strText != szText))   )
; 193  :     {
; 194  :         m_strText = szText;

  0003d	53		 push	 ebx
  0003e	8b cf		 mov	 ecx, edi
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl

; 114  : 	{ ASSERT(::IsWindow(m_hWnd)); ::InvalidateRect(m_hWnd, NULL, bErase); }

  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00049	6a 01		 push	 1
  0004b	6a 00		 push	 0
  0004d	ff 70 20	 push	 DWORD PTR [eax+32]
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12
$LN16@OnSetText:
  00056	5f		 pop	 edi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 199  : }

  00057	8b c6		 mov	 eax, esi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
?OnSetText@CTextProgressCtrl@@IAEJIJ@Z ENDP		; CTextProgressCtrl::OnSetText
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?OnSize@CTextProgressCtrl@@IAEXIHH@Z
_TEXT	SEGMENT
_nType$ = 8						; size = 4
_cx$ = 12						; size = 4
_cy$ = 16						; size = 4
?OnSize@CTextProgressCtrl@@IAEXIHH@Z PROC		; CTextProgressCtrl::OnSize, COMDAT
; _this$ = ecx

; 217  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl

; 330  : 	{ Default(); }

  00003	e8 00 00 00 00	 call	 ?Default@CWnd@@IAEJXZ	; CWnd::Default
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 220  :     m_nBarWidth    = -1;   // Force update if SetPos called

  00008	c7 86 9c 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+156], -1
  00012	5e		 pop	 esi

; 221  : }

  00013	c2 0c 00	 ret	 12			; 0000000cH
?OnSize@CTextProgressCtrl@@IAEXIHH@Z ENDP		; CTextProgressCtrl::OnSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?OnPaint@CTextProgressCtrl@@IAEXXZ
_TEXT	SEGMENT
_Fraction$1$ = -232					; size = 8
$T2 = -224						; size = 8
_font$3 = -224						; size = 8
_rgn$4 = -216						; size = 8
_crBgColour$1$ = -208					; size = 4
tv1171 = -208						; size = 4
_dwStyle$1$ = -204					; size = 4
_str$5 = -204						; size = 4
_PaintDC$ = -200					; size = 84
_ClientRect$ = -116					; size = 16
_RightRect$ = -100					; size = 16
_dc$ = -84						; size = 52
_LeftRect$ = -32					; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?OnPaint@CTextProgressCtrl@@IAEXXZ PROC			; CTextProgressCtrl::OnPaint, COMDAT
; _this$ = ecx

; 224  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnPaint@CTextProgressCtrl@@IAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b f1		 mov	 esi, ecx

; 225  :     if (m_nMin >= m_nMax) 

  0002f	8b 86 90 00 00
	00		 mov	 eax, DWORD PTR [esi+144]
  00035	3b 86 8c 00 00
	00		 cmp	 eax, DWORD PTR [esi+140]
  0003b	0f 8d 1d 04 00
	00		 jge	 $LN1@OnPaint

; 226  :         return;
; 227  : 
; 228  :     COLORREF crBarColour, crBgColour;
; 229  : 
; 230  :     crBarColour = (m_crBarClr == CLR_DEFAULT)? ::GetSysColor(COLOR_HIGHLIGHT) : m_crBarClr;

  00041	8b be a0 00 00
	00		 mov	 edi, DWORD PTR [esi+160]
  00047	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp__GetSysColor@4
  0004d	81 ff 00 00 00
	ff		 cmp	 edi, -16777216		; ff000000H
  00053	75 0c		 jne	 SHORT $LN11@OnPaint
  00055	6a 0d		 push	 13			; 0000000dH
  00057	ff d1		 call	 ecx
  00059	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp__GetSysColor@4
  0005f	8b f8		 mov	 edi, eax
$LN11@OnPaint:

; 231  :     crBgColour = (m_crBgClr == CLR_DEFAULT)? ::GetSysColor(COLOR_WINDOW) : m_crBgClr;

  00061	8b 86 a4 00 00
	00		 mov	 eax, DWORD PTR [esi+164]
  00067	89 85 30 ff ff
	ff		 mov	 DWORD PTR _crBgColour$1$[ebp], eax
  0006d	3d 00 00 00 ff	 cmp	 eax, -16777216		; ff000000H
  00072	75 0a		 jne	 SHORT $LN13@OnPaint
  00074	6a 05		 push	 5
  00076	ff d1		 call	 ecx
  00078	89 85 30 ff ff
	ff		 mov	 DWORD PTR _crBgColour$1$[ebp], eax
$LN13@OnPaint:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl

; 86   : 	{ ASSERT(::IsWindow(m_hWnd)); ::GetClientRect(m_hWnd, lpRect); }

  0007e	8d 45 8c	 lea	 eax, DWORD PTR _ClientRect$[ebp]
  00081	0f 57 c0	 xorps	 xmm0, xmm0
  00084	50		 push	 eax
  00085	ff 76 20	 push	 DWORD PTR [esi+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 528  : 	left = 0;

  00088	0f 11 45 8c	 movups	 XMMWORD PTR _ClientRect$[ebp], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl

; 86   : 	{ ASSERT(::IsWindow(m_hWnd)); ::GetClientRect(m_hWnd, lpRect); }

  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 236  :     double Fraction = (double)(m_nPos - m_nMin) / ((double)(m_nMax - m_nMin));

  00092	8b 8e 90 00 00
	00		 mov	 ecx, DWORD PTR [esi+144]
  00098	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  0009e	2b c1		 sub	 eax, ecx

; 237  : 
; 238  :     CPaintDC PaintDC(this); // device context for painting

  000a0	56		 push	 esi
  000a1	66 0f 6e c8	 movd	 xmm1, eax
  000a5	8b 86 8c 00 00
	00		 mov	 eax, DWORD PTR [esi+140]
  000ab	2b c1		 sub	 eax, ecx
  000ad	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _PaintDC$[ebp]
  000b3	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  000b7	66 0f 6e c0	 movd	 xmm0, eax
  000bb	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  000bf	f2 0f 5e c8	 divsd	 xmm1, xmm0
  000c3	f2 0f 11 8d 18
	ff ff ff	 movsd	 QWORD PTR _Fraction$1$[ebp], xmm1
  000cb	e8 00 00 00 00	 call	 ??0CPaintDC@@QAE@PAVCWnd@@@Z ; CPaintDC::CPaintDC

; 76   :     CMemDC(CDC* pDC) : CDC()

  000d0	8d 4d ac	 lea	 ecx, DWORD PTR _dc$[ebp]

; 237  : 
; 238  :     CPaintDC PaintDC(this); // device context for painting

  000d3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 76   :     CMemDC(CDC* pDC) : CDC()

  000da	e8 00 00 00 00	 call	 ??0CDC@@QAE@XZ		; CDC::CDC

; 77   :     {

  000df	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _dc$[ebp], OFFSET ??_7CMemDC@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 70   : 	{ m_hObject = NULL; }

  000e6	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _dc$[ebp+20], 0

; 177  : 	{ }

  000ed	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _dc$[ebp+16], OFFSET ??_7CBitmap@@6B@
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 82   :         m_bMemDC = !pDC->IsPrinting();

  000f4	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR _PaintDC$[ebp+12]
  000fa	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _PaintDC$[ebp]
  00100	89 45 c8	 mov	 DWORD PTR _dc$[ebp+28], eax
  00103	0f 57 c0	 xorps	 xmm0, xmm0
  00106	33 c0		 xor	 eax, eax
  00108	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0010c	85 c9		 test	 ecx, ecx
  0010e	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _dc$[ebp+24], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 528  : 	left = 0;

  00115	0f 11 45 cc	 movups	 XMMWORD PTR _dc$[ebp+32], xmm0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 82   :         m_bMemDC = !pDC->IsPrinting();

  00119	0f 94 c0	 sete	 al
  0011c	89 45 dc	 mov	 DWORD PTR _dc$[ebp+48], eax
  0011f	85 c9		 test	 ecx, ecx

; 83   :               
; 84   :         if (m_bMemDC)    // Create a Memory DC

  00121	75 70		 jne	 SHORT $LN33@OnPaint

; 85   :         {
; 86   :             pDC->GetClipBox(&m_rect);

  00123	8d 45 cc	 lea	 eax, DWORD PTR _dc$[ebp+32]
  00126	50		 push	 eax
  00127	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _PaintDC$[ebp]
  0012d	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _PaintDC$[ebp]
  00133	ff 50 58	 call	 DWORD PTR [eax+88]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 330  : 	{ return Attach(::CreateCompatibleDC(pDC->GetSafeHdc())); }

  00136	ff b5 3c ff ff
	ff		 push	 DWORD PTR _PaintDC$[ebp+4]
  0013c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleDC@4
  00142	50		 push	 eax
  00143	8d 4d ac	 lea	 ecx, DWORD PTR _dc$[ebp]
  00146	e8 00 00 00 00	 call	 ?Attach@CDC@@QAEHPAUHDC__@@@Z ; CDC::Attach
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 581  : 	return bottom - top;

  0014b	8b 4d d8	 mov	 ecx, DWORD PTR _dc$[ebp+44]
  0014e	2b 4d d0	 sub	 ecx, DWORD PTR _dc$[ebp+36]

; 576  : 	return right - left;

  00151	8b 45 d4	 mov	 eax, DWORD PTR _dc$[ebp+40]
  00154	2b 45 cc	 sub	 eax, DWORD PTR _dc$[ebp+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 217  : 	{ return Attach(::CreateCompatibleBitmap(pDC->m_hDC, nWidth, nHeight)); }

  00157	51		 push	 ecx
  00158	50		 push	 eax
  00159	ff b5 3c ff ff
	ff		 push	 DWORD PTR _PaintDC$[ebp+4]
  0015f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleBitmap@12
  00165	50		 push	 eax
  00166	8d 4d bc	 lea	 ecx, DWORD PTR _dc$[ebp+16]
  00169	e8 00 00 00 00	 call	 ?Attach@CGdiObject@@QAEHPAX@Z ; CGdiObject::Attach

; 361  : 	{ ASSERT(m_hDC != NULL); return (CBitmap*) SelectGdiObject(m_hDC, pBitmap->GetSafeHandle()); }

  0016e	ff 75 c0	 push	 DWORD PTR _dc$[ebp+20]
  00171	ff 75 b0	 push	 DWORD PTR _dc$[ebp+4]
  00174	e8 00 00 00 00	 call	 ?SelectGdiObject@CDC@@KGPAVCGdiObject@@PAUHDC__@@PAX@Z ; CDC::SelectGdiObject
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 90   :             SetWindowOrg(m_rect.left, m_rect.top);

  00179	ff 75 d0	 push	 DWORD PTR _dc$[ebp+36]
  0017c	89 45 c4	 mov	 DWORD PTR _dc$[ebp+24], eax
  0017f	8d 4d ac	 lea	 ecx, DWORD PTR _dc$[ebp]
  00182	ff 75 cc	 push	 DWORD PTR _dc$[ebp+32]
  00185	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  0018b	50		 push	 eax
  0018c	e8 00 00 00 00	 call	 ?SetWindowOrg@CDC@@QAE?AVCPoint@@HH@Z ; CDC::SetWindowOrg

; 91   :         }

  00191	eb 15		 jmp	 SHORT $LN34@OnPaint
$LN33@OnPaint:

; 92   :         else        // Make a copy of the relevent parts of the current DC for printing
; 93   :         {
; 94   :             m_bPrinting = pDC->m_bPrinting;
; 95   :             m_hDC       = pDC->m_hDC;

  00193	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _PaintDC$[ebp+4]
  00199	89 45 b0	 mov	 DWORD PTR _dc$[ebp+4], eax

; 96   :             m_hAttribDC = pDC->m_hAttribDC;

  0019c	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _PaintDC$[ebp+8]
  001a2	89 4d b8	 mov	 DWORD PTR _dc$[ebp+12], ecx
  001a5	89 45 b4	 mov	 DWORD PTR _dc$[ebp+8], eax
$LN34@OnPaint:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl

; 213  : 	{ ASSERT(::IsWindow(m_hWnd)); return CWnd::FromHandle(::GetParent(m_hWnd)); }

  001a8	ff 76 20	 push	 DWORD PTR [esi+32]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 239  :     CMemDC dc(&PaintDC);

  001ab	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl

; 213  : 	{ ASSERT(::IsWindow(m_hWnd)); return CWnd::FromHandle(::GetParent(m_hWnd)); }

  001af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  001b5	50		 push	 eax
  001b6	e8 00 00 00 00	 call	 ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z ; CWnd::FromHandle

; 45   : 	{ ASSERT(::IsWindow(m_hWnd)); return CFont::FromHandle(

  001bb	6a 00		 push	 0
  001bd	6a 00		 push	 0
  001bf	6a 31		 push	 49			; 00000031H
  001c1	ff 70 20	 push	 DWORD PTR [eax+32]
  001c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 151  : 	{ return (CFont*) CGdiObject::FromHandle(hFont); }

  001ca	50		 push	 eax
  001cb	e8 00 00 00 00	 call	 ?FromHandle@CGdiObject@@SGPAV1@PAX@Z ; CGdiObject::FromHandle
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 242  :     dc.SelectObject(GetParent()->GetFont()); // pja July 1, 2001

  001d0	50		 push	 eax
  001d1	8d 4d ac	 lea	 ecx, DWORD PTR _dc$[ebp]
  001d4	e8 00 00 00 00	 call	 ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z ; CDC::SelectObject

; 243  : 
; 244  :     // Draw Bar
; 245  :     LeftRect = RightRect = ClientRect;

  001d9	0f 10 45 8c	 movups	 xmm0, XMMWORD PTR _ClientRect$[ebp]

; 246  : 
; 247  : #ifdef PBS_VERTICAL
; 248  :     DWORD dwStyle = GetStyle();

  001dd	8b ce		 mov	 ecx, esi
  001df	0f 11 45 9c	 movups	 XMMWORD PTR _RightRect$[ebp], xmm0
  001e3	0f 11 45 e0	 movups	 XMMWORD PTR _LeftRect$[ebp], xmm0
  001e7	e8 00 00 00 00	 call	 ?GetStyle@CWnd@@QBEKXZ	; CWnd::GetStyle

; 249  :     if (dwStyle & PBS_VERTICAL)

  001ec	83 e0 04	 and	 eax, 4
  001ef	89 85 34 ff ff
	ff		 mov	 DWORD PTR _dwStyle$1$[ebp], eax
  001f5	74 26		 je	 SHORT $LN3@OnPaint

; 250  :     {
; 251  :         LeftRect.top = LeftRect.bottom - (int)((LeftRect.bottom - LeftRect.top)*Fraction);

  001f7	8b 55 ec	 mov	 edx, DWORD PTR _LeftRect$[ebp+12]
  001fa	8b ca		 mov	 ecx, edx
  001fc	2b 4d e4	 sub	 ecx, DWORD PTR _LeftRect$[ebp+4]
  001ff	66 0f 6e c1	 movd	 xmm0, ecx
  00203	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00207	f2 0f 59 85 18
	ff ff ff	 mulsd	 xmm0, QWORD PTR _Fraction$1$[ebp]
  0020f	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00213	2b d0		 sub	 edx, eax
  00215	89 55 e4	 mov	 DWORD PTR _LeftRect$[ebp+4], edx

; 252  :         RightRect.bottom = LeftRect.top;

  00218	89 55 a8	 mov	 DWORD PTR _RightRect$[ebp+12], edx

; 253  :     }

  0021b	eb 23		 jmp	 SHORT $LN4@OnPaint
$LN3@OnPaint:

; 254  :     else
; 255  : #endif
; 256  :     {
; 257  :         LeftRect.right = LeftRect.left + (int)((LeftRect.right - LeftRect.left)*Fraction);

  0021d	8b 45 e8	 mov	 eax, DWORD PTR _LeftRect$[ebp+8]
  00220	2b 45 e0	 sub	 eax, DWORD PTR _LeftRect$[ebp]
  00223	66 0f 6e c0	 movd	 xmm0, eax
  00227	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0022b	f2 0f 59 85 18
	ff ff ff	 mulsd	 xmm0, QWORD PTR _Fraction$1$[ebp]
  00233	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00237	03 45 e0	 add	 eax, DWORD PTR _LeftRect$[ebp]
  0023a	89 45 e8	 mov	 DWORD PTR _LeftRect$[ebp+8], eax

; 258  :         RightRect.left = LeftRect.right;

  0023d	89 45 9c	 mov	 DWORD PTR _RightRect$[ebp], eax
$LN4@OnPaint:

; 259  :     }
; 260  :     dc.FillSolidRect(LeftRect, crBarColour);

  00240	57		 push	 edi
  00241	8d 45 e0	 lea	 eax, DWORD PTR _LeftRect$[ebp]
  00244	50		 push	 eax
  00245	8d 4d ac	 lea	 ecx, DWORD PTR _dc$[ebp]
  00248	e8 00 00 00 00	 call	 ?FillSolidRect@CDC@@QAEXPBUtagRECT@@K@Z ; CDC::FillSolidRect

; 261  :     dc.FillSolidRect(RightRect, crBgColour);

  0024d	ff b5 30 ff ff
	ff		 push	 DWORD PTR _crBgColour$1$[ebp]
  00253	8d 45 9c	 lea	 eax, DWORD PTR _RightRect$[ebp]
  00256	50		 push	 eax
  00257	8d 4d ac	 lea	 ecx, DWORD PTR _dc$[ebp]
  0025a	e8 00 00 00 00	 call	 ?FillSolidRect@CDC@@QAEXPBUtagRECT@@K@Z ; CDC::FillSolidRect

; 262  : 
; 263  :     // Draw Text if not vertical
; 264  :     if (m_bShowText
; 265  : #ifdef PBS_VERTICAL
; 266  :         && (dwStyle & PBS_VERTICAL) == 0

  0025f	83 be 98 00 00
	00 00		 cmp	 DWORD PTR [esi+152], 0
  00266	0f 84 df 01 00
	00		 je	 $LN5@OnPaint
  0026c	83 bd 34 ff ff
	ff 00		 cmp	 DWORD PTR _dwStyle$1$[ebp], 0
  00273	0f 85 d2 01 00
	00		 jne	 $LN5@OnPaint

; 270  :         CString str;

  00279	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _str$5[ebp]
  0027f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 519  : 		return( GetData()->nDataLength );

  00285	8b 86 94 00 00
	00		 mov	 eax, DWORD PTR [esi+148]

; 800  : 		return( reinterpret_cast< CStringData* >( m_pszData )-1 );

  0028b	8d 8e 94 00 00
	00		 lea	 ecx, DWORD PTR [esi+148]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 270  :         CString str;

  00291	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 271  :         if (m_strText.GetLength())

  00295	83 78 f4 00	 cmp	 DWORD PTR [eax-12], 0
  00299	74 0f		 je	 SHORT $LN6@OnPaint

; 272  :             str = m_strText;

  0029b	51		 push	 ecx
  0029c	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _str$5[ebp]
  002a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  002a8	eb 2a		 jmp	 SHORT $LN7@OnPaint
$LN6@OnPaint:

; 273  :         else
; 274  :             str.Format("%d%%", (int)(Fraction*100.0));

  002aa	f2 0f 10 85 18
	ff ff ff	 movsd	 xmm0, QWORD PTR _Fraction$1$[ebp]
  002b2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4059000000000000
  002ba	f2 0f 2c c0	 cvttsd2si eax, xmm0
  002be	50		 push	 eax
  002bf	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _str$5[ebp]
  002c5	68 00 00 00 00	 push	 OFFSET ??_C@_04FCMNJMCO@?$CFd?$CF?$CF@
  002ca	50		 push	 eax
  002cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  002d1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@OnPaint:

; 275  : 
; 276  :         dc.SetBkMode(TRANSPARENT);

  002d4	6a 01		 push	 1
  002d6	8d 4d ac	 lea	 ecx, DWORD PTR _dc$[ebp]
  002d9	e8 00 00 00 00	 call	 ?SetBkMode@CDC@@QAEHH@Z	; CDC::SetBkMode
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 70   : 	{ m_hObject = NULL; }

  002de	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _font$3[ebp+4], 0

; 153  : 	{ }

  002e8	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _font$3[ebp], OFFSET ??_7CFont@@6B@

; 70   : 	{ m_hObject = NULL; }

  002f2	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _rgn$4[ebp+4], 0

; 264  : 	{ }

  002fc	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _rgn$4[ebp], OFFSET ??_7CRgn@@6B@

; 268  : 	{ return Attach(::CreateRectRgn(x1, y1, x2, y2)); }

  00306	ff 75 ec	 push	 DWORD PTR _LeftRect$[ebp+12]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 304  :         CRgn rgn;

  00309	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 268  : 	{ return Attach(::CreateRectRgn(x1, y1, x2, y2)); }

  0030d	ff 75 e8	 push	 DWORD PTR _LeftRect$[ebp+8]
  00310	ff 75 e4	 push	 DWORD PTR _LeftRect$[ebp+4]
  00313	ff 75 e0	 push	 DWORD PTR _LeftRect$[ebp]
  00316	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateRectRgn@16
  0031c	50		 push	 eax
  0031d	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _rgn$4[ebp]
  00323	e8 00 00 00 00	 call	 ?Attach@CGdiObject@@QAEHPAX@Z ; CGdiObject::Attach
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 306  :         dc.SelectClipRgn(&rgn);

  00328	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _rgn$4[ebp]
  0032e	50		 push	 eax
  0032f	8d 4d ac	 lea	 ecx, DWORD PTR _dc$[ebp]
  00332	e8 00 00 00 00	 call	 ?SelectClipRgn@CDC@@QAEHPAVCRgn@@@Z ; CDC::SelectClipRgn

; 307  :         dc.SetTextColor(m_crTextClr == CLR_DEFAULT ? crBgColour : m_crTextClr);

  00337	8b 86 80 00 00
	00		 mov	 eax, DWORD PTR [esi+128]
  0033d	3d 00 00 00 ff	 cmp	 eax, -16777216		; ff000000H
  00342	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR _crBgColour$1$[ebp]
  00348	0f 45 c8	 cmovne	 ecx, eax
  0034b	51		 push	 ecx
  0034c	8d 4d ac	 lea	 ecx, DWORD PTR _dc$[ebp]
  0034f	e8 00 00 00 00	 call	 ?SetTextColor@CDC@@UAEKK@Z ; CDC::SetTextColor
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 600  : 		return _AFX_FUNCNAME(DrawText)((LPCTSTR)str, (int)str.GetLength(), lpRect, nFormat); }

  00354	8b 4d ac	 mov	 ecx, DWORD PTR _dc$[ebp]
  00357	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _str$5[ebp]
  0035d	8b 96 a8 00 00
	00		 mov	 edx, DWORD PTR [esi+168]
  00363	52		 push	 edx
  00364	8b 49 70	 mov	 ecx, DWORD PTR [ecx+112]
  00367	81 f9 00 00 00
	00		 cmp	 ecx, OFFSET ?DrawTextA@CDC@@UAEHPBDHPAUtagRECT@@I@Z ; CDC::DrawTextA
  0036d	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv1171[ebp], ecx
  00373	8d 4d 8c	 lea	 ecx, DWORD PTR _ClientRect$[ebp]
  00376	51		 push	 ecx
  00377	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  0037a	51		 push	 ecx
  0037b	50		 push	 eax
  0037c	75 0b		 jne	 SHORT $LN99@OnPaint

; 594  : 		return ::DrawText(m_hDC, lpszString, nCount, lpRect, nFormat); }

  0037e	ff 75 b0	 push	 DWORD PTR _dc$[ebp+4]
  00381	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DrawTextA@20

; 600  : 		return _AFX_FUNCNAME(DrawText)((LPCTSTR)str, (int)str.GetLength(), lpRect, nFormat); }

  00387	eb 09		 jmp	 SHORT $LN98@OnPaint
$LN99@OnPaint:
  00389	8d 4d ac	 lea	 ecx, DWORD PTR _dc$[ebp]
  0038c	ff 95 30 ff ff
	ff		 call	 DWORD PTR tv1171[ebp]
$LN98@OnPaint:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 310  :         rgn.DeleteObject();

  00392	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _rgn$4[ebp]
  00398	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 268  : 	{ return Attach(::CreateRectRgn(x1, y1, x2, y2)); }

  0039d	ff 75 a8	 push	 DWORD PTR _RightRect$[ebp+12]
  003a0	ff 75 a4	 push	 DWORD PTR _RightRect$[ebp+8]
  003a3	ff 75 a0	 push	 DWORD PTR _RightRect$[ebp+4]
  003a6	ff 75 9c	 push	 DWORD PTR _RightRect$[ebp]
  003a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateRectRgn@16
  003af	50		 push	 eax
  003b0	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _rgn$4[ebp]
  003b6	e8 00 00 00 00	 call	 ?Attach@CGdiObject@@QAEHPAX@Z ; CGdiObject::Attach
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 312  :         dc.SelectClipRgn(&rgn);

  003bb	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _rgn$4[ebp]
  003c1	50		 push	 eax
  003c2	8d 4d ac	 lea	 ecx, DWORD PTR _dc$[ebp]
  003c5	e8 00 00 00 00	 call	 ?SelectClipRgn@CDC@@QAEHPAVCRgn@@@Z ; CDC::SelectClipRgn

; 313  :         dc.SetTextColor(m_crTextClr == CLR_DEFAULT ? crBarColour : m_crTextClr);

  003ca	8b 86 80 00 00
	00		 mov	 eax, DWORD PTR [esi+128]
  003d0	8d 4d ac	 lea	 ecx, DWORD PTR _dc$[ebp]
  003d3	3d 00 00 00 ff	 cmp	 eax, -16777216		; ff000000H
  003d8	0f 45 f8	 cmovne	 edi, eax
  003db	57		 push	 edi
  003dc	e8 00 00 00 00	 call	 ?SetTextColor@CDC@@UAEKK@Z ; CDC::SetTextColor
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 600  : 		return _AFX_FUNCNAME(DrawText)((LPCTSTR)str, (int)str.GetLength(), lpRect, nFormat); }

  003e1	8b 4d ac	 mov	 ecx, DWORD PTR _dc$[ebp]
  003e4	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _str$5[ebp]
  003ea	8b 96 a8 00 00
	00		 mov	 edx, DWORD PTR [esi+168]
  003f0	52		 push	 edx
  003f1	8b 79 70	 mov	 edi, DWORD PTR [ecx+112]
  003f4	8d 4d 8c	 lea	 ecx, DWORD PTR _ClientRect$[ebp]
  003f7	8b 70 f4	 mov	 esi, DWORD PTR [eax-12]
  003fa	51		 push	 ecx
  003fb	56		 push	 esi
  003fc	50		 push	 eax
  003fd	81 ff 00 00 00
	00		 cmp	 edi, OFFSET ?DrawTextA@CDC@@UAEHPBDHPAUtagRECT@@I@Z ; CDC::DrawTextA
  00403	75 0b		 jne	 SHORT $LN113@OnPaint

; 594  : 		return ::DrawText(m_hDC, lpszString, nCount, lpRect, nFormat); }

  00405	ff 75 b0	 push	 DWORD PTR _dc$[ebp+4]
  00408	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DrawTextA@20

; 600  : 		return _AFX_FUNCNAME(DrawText)((LPCTSTR)str, (int)str.GetLength(), lpRect, nFormat); }

  0040e	eb 05		 jmp	 SHORT $LN9@OnPaint
$LN113@OnPaint:
  00410	8d 4d ac	 lea	 ecx, DWORD PTR _dc$[ebp]
  00413	ff d7		 call	 edi
$LN9@OnPaint:

; 266  : 	{ }

  00415	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _rgn$4[ebp]
  0041b	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _rgn$4[ebp], OFFSET ??_7CRgn@@6B@
  00425	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject

; 155  : 	{ }

  0042a	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _font$3[ebp]
  00430	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _font$3[ebp], OFFSET ??_7CFont@@6B@
  0043a	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 321  :     }

  0043f	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _str$5[ebp]
  00445	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN5@OnPaint:

; 322  : }

  0044b	8d 4d ac	 lea	 ecx, DWORD PTR _dc$[ebp]
  0044e	e8 00 00 00 00	 call	 ??1CMemDC@@UAE@XZ	; CMemDC::~CMemDC
  00453	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _PaintDC$[ebp]
  00459	e8 00 00 00 00	 call	 ??1CPaintDC@@UAE@XZ	; CPaintDC::~CPaintDC
$LN1@OnPaint:
  0045e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00461	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00468	59		 pop	 ecx
  00469	5f		 pop	 edi
  0046a	5e		 pop	 esi
  0046b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0046e	33 cd		 xor	 ecx, ebp
  00470	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00475	8b e5		 mov	 esp, ebp
  00477	5d		 pop	 ebp
  00478	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnPaint@CTextProgressCtrl@@IAEXXZ$0:
  00000	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _PaintDC$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CPaintDC@@UAE@XZ	; CPaintDC::~CPaintDC
__unwindfunclet$?OnPaint@CTextProgressCtrl@@IAEXXZ$5:
  0000b	8d 4d ac	 lea	 ecx, DWORD PTR _dc$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1CDC@@UAE@XZ		; CDC::~CDC
__unwindfunclet$?OnPaint@CTextProgressCtrl@@IAEXXZ$6:
  00013	8d 4d bc	 lea	 ecx, DWORD PTR _dc$[ebp+16]
  00016	e9 00 00 00 00	 jmp	 ??1CBitmap@@UAE@XZ	; CBitmap::~CBitmap
__unwindfunclet$?OnPaint@CTextProgressCtrl@@IAEXXZ$1:
  0001b	8d 4d ac	 lea	 ecx, DWORD PTR _dc$[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1CMemDC@@UAE@XZ	; CMemDC::~CMemDC
__unwindfunclet$?OnPaint@CTextProgressCtrl@@IAEXXZ$2:
  00023	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _str$5[ebp]
  00029	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?OnPaint@CTextProgressCtrl@@IAEXXZ$3:
  0002f	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _font$3[ebp]
  00035	e9 00 00 00 00	 jmp	 ??1CFont@@UAE@XZ	; CFont::~CFont
__unwindfunclet$?OnPaint@CTextProgressCtrl@@IAEXXZ$4:
  0003a	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _rgn$4[ebp]
  00040	e9 00 00 00 00	 jmp	 ??1CRgn@@UAE@XZ		; CRgn::~CRgn
  00045	cc		 int	 3
  00046	cc		 int	 3
  00047	cc		 int	 3
  00048	cc		 int	 3
  00049	cc		 int	 3
__ehhandler$?OnPaint@CTextProgressCtrl@@IAEXXZ:
  0004a	90		 npad	 1
  0004b	90		 npad	 1
  0004c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00050	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00053	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  00059	33 c8		 xor	 ecx, eax
  0005b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00060	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00063	33 c8		 xor	 ecx, eax
  00065	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnPaint@CTextProgressCtrl@@IAEXXZ
  0006f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnPaint@CTextProgressCtrl@@IAEXXZ ENDP			; CTextProgressCtrl::OnPaint
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?OnEraseBkgnd@CTextProgressCtrl@@IAEHPAVCDC@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?OnEraseBkgnd@CTextProgressCtrl@@IAEHPAVCDC@@@Z PROC	; CTextProgressCtrl::OnEraseBkgnd, COMDAT
; _this$ = ecx

; 213  :      return TRUE;

  00000	b8 01 00 00 00	 mov	 eax, 1

; 214  : }

  00005	c2 04 00	 ret	 4
?OnEraseBkgnd@CTextProgressCtrl@@IAEHPAVCDC@@@Z ENDP	; CTextProgressCtrl::OnEraseBkgnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ??1CTextProgressCtrl@@UAE@XZ
_TEXT	SEGMENT
??1CTextProgressCtrl@@UAE@XZ PROC			; CTextProgressCtrl::~CTextProgressCtrl, COMDAT
; _this$ = ecx

; 157  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 158  : }

  00003	8d 8e 94 00 00
	00		 lea	 ecx, DWORD PTR [esi+148]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CTextProgressCtrl@@6B@
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00015	8b ce		 mov	 ecx, esi
  00017	5e		 pop	 esi
  00018	e9 00 00 00 00	 jmp	 ??1CProgressCtrl@@UAE@XZ ; CProgressCtrl::~CProgressCtrl
??1CTextProgressCtrl@@UAE@XZ ENDP			; CTextProgressCtrl::~CTextProgressCtrl
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?AlignTextInvalidate@CTextProgressCtrl@@QAEHK@Z
_TEXT	SEGMENT
_aligment$ = 8						; size = 4
?AlignTextInvalidate@CTextProgressCtrl@@QAEHK@Z PROC	; CTextProgressCtrl::AlignTextInvalidate, COMDAT
; _this$ = ecx

; 538  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 539  : 	switch(aligment)

  00003	8b 55 08	 mov	 edx, DWORD PTR _aligment$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	83 e8 00	 sub	 eax, 0
  0000b	74 10		 je	 SHORT $LN4@AlignTextI
  0000d	83 e8 01	 sub	 eax, 1
  00010	74 0b		 je	 SHORT $LN4@AlignTextI
  00012	83 e8 01	 sub	 eax, 1
  00015	74 06		 je	 SHORT $LN4@AlignTextI

; 545  : 		break;
; 546  : 	default:
; 547  : 		return FALSE;

  00017	33 c0		 xor	 eax, eax

; 552  : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
$LN4@AlignTextI:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl

; 114  : 	{ ASSERT(::IsWindow(m_hWnd)); ::InvalidateRect(m_hWnd, NULL, bErase); }

  0001d	6a 01		 push	 1
  0001f	6a 00		 push	 0
  00021	ff 71 20	 push	 DWORD PTR [ecx+32]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 544  : 		m_dwTextStyle = DT_VCENTER | DT_SINGLELINE | aligment;

  00024	83 ca 24	 or	 edx, 36			; 00000024H
  00027	89 91 a8 00 00
	00		 mov	 DWORD PTR [ecx+168], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl

; 114  : 	{ ASSERT(::IsWindow(m_hWnd)); ::InvalidateRect(m_hWnd, NULL, bErase); }

  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 551  : 	return TRUE;

  00033	b8 01 00 00 00	 mov	 eax, 1

; 552  : }

  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?AlignTextInvalidate@CTextProgressCtrl@@QAEHK@Z ENDP	; CTextProgressCtrl::AlignTextInvalidate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?AlignText@CTextProgressCtrl@@QAEHK@Z
_TEXT	SEGMENT
_aligment$ = 8						; size = 4
?AlignText@CTextProgressCtrl@@QAEHK@Z PROC		; CTextProgressCtrl::AlignText, COMDAT
; _this$ = ecx

; 505  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 506  : 	switch(aligment)

  00003	8b 55 08	 mov	 edx, DWORD PTR _aligment$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	83 e8 00	 sub	 eax, 0
  0000b	74 10		 je	 SHORT $LN4@AlignText
  0000d	83 e8 01	 sub	 eax, 1
  00010	74 0b		 je	 SHORT $LN4@AlignText
  00012	83 e8 01	 sub	 eax, 1
  00015	74 06		 je	 SHORT $LN4@AlignText

; 512  : 		break;
; 513  : 	default:
; 514  : 		return FALSE;

  00017	33 c0		 xor	 eax, eax

; 518  : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
$LN4@AlignText:

; 507  : 	{
; 508  : 	case DT_LEFT: 
; 509  : 	case DT_CENTER: 
; 510  : 	case DT_RIGHT:
; 511  : 		m_dwTextStyle = DT_VCENTER | DT_SINGLELINE | aligment;

  0001d	83 ca 24	 or	 edx, 36			; 00000024H

; 515  : 	}
; 516  : 
; 517  : 	return TRUE;

  00020	b8 01 00 00 00	 mov	 eax, 1
  00025	89 91 a8 00 00
	00		 mov	 DWORD PTR [ecx+168], edx

; 518  : }

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?AlignText@CTextProgressCtrl@@QAEHK@Z ENDP		; CTextProgressCtrl::AlignText
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?GetTextColour@CTextProgressCtrl@@QAEKXZ
_TEXT	SEGMENT
?GetTextColour@CTextProgressCtrl@@QAEKXZ PROC		; CTextProgressCtrl::GetTextColour, COMDAT
; _this$ = ecx

; 484  :     return m_crTextClr;

  00000	8b 81 80 00 00
	00		 mov	 eax, DWORD PTR [ecx+128]

; 485  : }

  00006	c3		 ret	 0
?GetTextColour@CTextProgressCtrl@@QAEKXZ ENDP		; CTextProgressCtrl::GetTextColour
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?SetTextColour@CTextProgressCtrl@@QAEKK@Z
_TEXT	SEGMENT
_crTextClr$ = 8						; size = 4
?SetTextColour@CTextProgressCtrl@@QAEKK@Z PROC		; CTextProgressCtrl::SetTextColour, COMDAT
; _this$ = ecx

; 473  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 474  :     if (::IsWindow(m_hWnd))

  00006	ff 76 20	 push	 DWORD PTR [esi+32]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  0000f	85 c0		 test	 eax, eax
  00011	74 0d		 je	 SHORT $LN2@SetTextCol
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl

; 114  : 	{ ASSERT(::IsWindow(m_hWnd)); ::InvalidateRect(m_hWnd, NULL, bErase); }

  00013	6a 01		 push	 1
  00015	6a 00		 push	 0
  00017	ff 76 20	 push	 DWORD PTR [esi+32]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12
$LN2@SetTextCol:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 477  :     COLORREF crOldTextClr = m_crTextClr;

  00020	8b 86 80 00 00
	00		 mov	 eax, DWORD PTR [esi+128]

; 478  :     m_crTextClr = crTextClr;

  00026	8b 4d 08	 mov	 ecx, DWORD PTR _crTextClr$[ebp]
  00029	89 8e 80 00 00
	00		 mov	 DWORD PTR [esi+128], ecx

; 479  :     return crOldTextClr;

  0002f	5e		 pop	 esi

; 480  : }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?SetTextColour@CTextProgressCtrl@@QAEKK@Z ENDP		; CTextProgressCtrl::SetTextColour
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?GetBgColour@CTextProgressCtrl@@QBEKXZ
_TEXT	SEGMENT
?GetBgColour@CTextProgressCtrl@@QBEKXZ PROC		; CTextProgressCtrl::GetBgColour, COMDAT
; _this$ = ecx

; 464  :     return m_crBgClr;

  00000	8b 81 a4 00 00
	00		 mov	 eax, DWORD PTR [ecx+164]

; 465  : }

  00006	c3		 ret	 0
?GetBgColour@CTextProgressCtrl@@QBEKXZ ENDP		; CTextProgressCtrl::GetBgColour
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?SetBgColour@CTextProgressCtrl@@QAEKK@Z
_TEXT	SEGMENT
_crBgClr$ = 8						; size = 4
?SetBgColour@CTextProgressCtrl@@QAEKK@Z PROC		; CTextProgressCtrl::SetBgColour, COMDAT
; _this$ = ecx

; 453  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 454  :     if (::IsWindow(m_hWnd))

  00006	ff 76 20	 push	 DWORD PTR [esi+32]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  0000f	85 c0		 test	 eax, eax
  00011	74 0d		 je	 SHORT $LN2@SetBgColou
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl

; 114  : 	{ ASSERT(::IsWindow(m_hWnd)); ::InvalidateRect(m_hWnd, NULL, bErase); }

  00013	6a 01		 push	 1
  00015	6a 00		 push	 0
  00017	ff 76 20	 push	 DWORD PTR [esi+32]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12
$LN2@SetBgColou:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 457  :     COLORREF crOldBgClr = m_crBgClr;

  00020	8b 86 a4 00 00
	00		 mov	 eax, DWORD PTR [esi+164]

; 458  :     m_crBgClr = crBgClr;

  00026	8b 4d 08	 mov	 ecx, DWORD PTR _crBgClr$[ebp]
  00029	89 8e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ecx

; 459  :     return crOldBgClr;

  0002f	5e		 pop	 esi

; 460  : }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?SetBgColour@CTextProgressCtrl@@QAEKK@Z ENDP		; CTextProgressCtrl::SetBgColour
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?GetBarColour@CTextProgressCtrl@@QBEKXZ
_TEXT	SEGMENT
?GetBarColour@CTextProgressCtrl@@QBEKXZ PROC		; CTextProgressCtrl::GetBarColour, COMDAT
; _this$ = ecx

; 444  :     return m_crBarClr;

  00000	8b 81 a0 00 00
	00		 mov	 eax, DWORD PTR [ecx+160]

; 445  : }

  00006	c3		 ret	 0
?GetBarColour@CTextProgressCtrl@@QBEKXZ ENDP		; CTextProgressCtrl::GetBarColour
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?SetBarColour@CTextProgressCtrl@@QAEKK@Z
_TEXT	SEGMENT
_crBarClr$ = 8						; size = 4
?SetBarColour@CTextProgressCtrl@@QAEKK@Z PROC		; CTextProgressCtrl::SetBarColour, COMDAT
; _this$ = ecx

; 433  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 434  :     if (::IsWindow(m_hWnd))

  00006	ff 76 20	 push	 DWORD PTR [esi+32]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  0000f	85 c0		 test	 eax, eax
  00011	74 0d		 je	 SHORT $LN2@SetBarColo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl

; 114  : 	{ ASSERT(::IsWindow(m_hWnd)); ::InvalidateRect(m_hWnd, NULL, bErase); }

  00013	6a 01		 push	 1
  00015	6a 00		 push	 0
  00017	ff 76 20	 push	 DWORD PTR [esi+32]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12
$LN2@SetBarColo:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 437  :     COLORREF crOldBarClr = m_crBarClr;

  00020	8b 86 a0 00 00
	00		 mov	 eax, DWORD PTR [esi+160]

; 438  :     m_crBarClr = crBarClr;

  00026	8b 4d 08	 mov	 ecx, DWORD PTR _crBarClr$[ebp]
  00029	89 8e a0 00 00
	00		 mov	 DWORD PTR [esi+160], ecx

; 439  :     return crOldBarClr;

  0002f	5e		 pop	 esi

; 440  : }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?SetBarColour@CTextProgressCtrl@@QAEKK@Z ENDP		; CTextProgressCtrl::SetBarColour
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?SetShowText@CTextProgressCtrl@@QAEXH@Z
_TEXT	SEGMENT
_bShow$ = 8						; size = 4
?SetShowText@CTextProgressCtrl@@QAEXH@Z PROC		; CTextProgressCtrl::SetShowText, COMDAT
; _this$ = ecx

; 335  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 336  :     if (::IsWindow(m_hWnd) && m_bShowText != bShow)

  00006	ff 76 20	 push	 DWORD PTR [esi+32]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  0000f	85 c0		 test	 eax, eax
  00011	74 25		 je	 SHORT $LN6@SetShowTex
  00013	57		 push	 edi
  00014	8b 7d 08	 mov	 edi, DWORD PTR _bShow$[ebp]
  00017	39 be 98 00 00
	00		 cmp	 DWORD PTR [esi+152], edi
  0001d	74 0d		 je	 SHORT $LN7@SetShowTex
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl

; 114  : 	{ ASSERT(::IsWindow(m_hWnd)); ::InvalidateRect(m_hWnd, NULL, bErase); }

  0001f	6a 01		 push	 1
  00021	6a 00		 push	 0
  00023	ff 76 20	 push	 DWORD PTR [esi+32]
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12
$LN7@SetShowTex:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 339  :     m_bShowText = bShow;

  0002c	89 be 98 00 00
	00		 mov	 DWORD PTR [esi+152], edi
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi

; 340  : }

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN6@SetShowTex:

; 339  :     m_bShowText = bShow;

  00038	8b 45 08	 mov	 eax, DWORD PTR _bShow$[ebp]
  0003b	89 86 98 00 00
	00		 mov	 DWORD PTR [esi+152], eax
  00041	5e		 pop	 esi

; 340  : }

  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
?SetShowText@CTextProgressCtrl@@QAEXH@Z ENDP		; CTextProgressCtrl::SetShowText
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxcmn.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ??0CTextProgressCtrl@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CTextProgressCtrl@@QAE@XZ PROC			; CTextProgressCtrl::CTextProgressCtrl, COMDAT
; _this$ = ecx

; 141  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	89 7d fc	 mov	 DWORD PTR _this$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxcmn.inl

; 520  : 	{ }

  0000b	e8 00 00 00 00	 call	 ??0CWnd@@QAE@XZ		; CWnd::CWnd
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp

; 141  : {

  00010	8d 8f 94 00 00
	00		 lea	 ecx, DWORD PTR [edi+148]
  00016	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CTextProgressCtrl@@6B@
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 142  :     m_nPos      = 0;
; 143  :     m_nStepSize = 1;
; 144  :     m_nMax      = 100;
; 145  :     m_nMin      = 0;
; 146  :     m_bShowText = TRUE;
; 147  :     m_strText.Empty();

  00022	8d 8f 94 00 00
	00		 lea	 ecx, DWORD PTR [edi+148]
  00028	c7 87 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+132], 0
  00032	c7 87 88 00 00
	00 01 00 00 00	 mov	 DWORD PTR [edi+136], 1
  0003c	c7 87 8c 00 00
	00 64 00 00 00	 mov	 DWORD PTR [edi+140], 100 ; 00000064H
  00046	c7 87 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+144], 0
  00050	c7 87 98 00 00
	00 01 00 00 00	 mov	 DWORD PTR [edi+152], 1
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Empty@?$CSimpleStringT@D$00@ATL@@QAEXXZ

; 148  :     m_crBarClr  = CLR_DEFAULT;

  00060	c7 87 a0 00 00
	00 00 00 00 ff	 mov	 DWORD PTR [edi+160], -16777216 ; ff000000H

; 149  :     m_crBgClr   = CLR_DEFAULT;
; 150  :     m_crTextClr = CLR_DEFAULT;
; 151  : 	m_dwTextStyle = DT_CENTER | DT_SINGLELINE | DT_VCENTER;
; 152  : 
; 153  :     m_nBarWidth = -1;
; 154  : }

  0006a	8b c7		 mov	 eax, edi
  0006c	c7 87 a4 00 00
	00 00 00 00 ff	 mov	 DWORD PTR [edi+164], -16777216 ; ff000000H
  00076	c7 87 80 00 00
	00 00 00 00 ff	 mov	 DWORD PTR [edi+128], -16777216 ; ff000000H
  00080	c7 87 a8 00 00
	00 25 00 00 00	 mov	 DWORD PTR [edi+168], 37	; 00000025H
  0008a	c7 87 9c 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [edi+156], -1
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
??0CTextProgressCtrl@@QAE@XZ ENDP			; CTextProgressCtrl::CTextProgressCtrl
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_GCProgressCtrl@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCProgressCtrl@@UAEPAXI@Z PROC			; CProgressCtrl::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CProgressCtrl@@UAE@XZ ; CProgressCtrl::~CProgressCtrl
  0000b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0000e	a8 01		 test	 al, 1
  00010	74 22		 je	 SHORT $LN9@scalar
  00012	a8 04		 test	 al, 4
  00014	75 10		 jne	 SHORT $LN3@scalar

; 112  : 	{ ::operator delete(p); }

  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	83 c4 04	 add	 esp, 4
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN3@scalar:
  00026	68 80 00 00 00	 push	 128			; 00000080H
  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  00031	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00034	8b c6		 mov	 eax, esi
  00036	5e		 pop	 esi
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
??_GCProgressCtrl@@UAEPAXI@Z ENDP			; CProgressCtrl::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
;	COMDAT ?EndModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT
?EndModalState@CWnd@@UAEXXZ PROC			; CWnd::EndModalState, COMDAT
; _this$ = ecx

; 567  : 	{ ::EnableWindow(m_hWnd, TRUE); }

  00000	6a 01		 push	 1
  00002	ff 71 20	 push	 DWORD PTR [ecx+32]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  0000b	c3		 ret	 0
?EndModalState@CWnd@@UAEXXZ ENDP			; CWnd::EndModalState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
;	COMDAT ?BeginModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT
?BeginModalState@CWnd@@UAEXXZ PROC			; CWnd::BeginModalState, COMDAT
; _this$ = ecx

; 565  : 	{ ::EnableWindow(m_hWnd, FALSE); }

  00000	6a 00		 push	 0
  00002	ff 71 20	 push	 DWORD PTR [ecx+32]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  0000b	c3		 ret	 0
?BeginModalState@CWnd@@UAEXXZ ENDP			; CWnd::BeginModalState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
;	COMDAT ?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z PROC	; CWnd::DoDataExchange, COMDAT
; _this$ = ecx

; 561  : 	{ } // default does nothing

  00000	c2 04 00	 ret	 4
?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z ENDP	; CWnd::DoDataExchange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
;	COMDAT ?Escape@CDC@@UAEHHHPBDPAX@Z
_TEXT	SEGMENT
_nEscape$ = 8						; size = 4
_nCount$ = 12						; size = 4
_lpszInData$ = 16					; size = 4
_lpOutData$ = 20					; size = 4
?Escape@CDC@@UAEHHHPBDPAX@Z PROC			; CDC::Escape, COMDAT
; _this$ = ecx

; 727  : 	{ ASSERT(m_hDC != NULL); return ::Escape(m_hDC, nEscape, nCount, lpszInData, lpOutData);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	ff 75 14	 push	 DWORD PTR _lpOutData$[ebp]
  00006	ff 75 10	 push	 DWORD PTR _lpszInData$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR _nCount$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR _nEscape$[ebp]
  0000f	ff 71 04	 push	 DWORD PTR [ecx+4]
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Escape@20
  00018	5d		 pop	 ebp
  00019	c2 10 00	 ret	 16			; 00000010H
?Escape@CDC@@UAEHHHPBDPAX@Z ENDP			; CDC::Escape
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
;	COMDAT ?GrayStringA@CDC@@UAEHPAVCBrush@@P6GHPAUHDC__@@JH@ZJHHHHH@Z
_TEXT	SEGMENT
_pBrush$ = 8						; size = 4
_lpfnOutput$ = 12					; size = 4
_lpData$ = 16						; size = 4
_nCount$ = 20						; size = 4
_x$ = 24						; size = 4
_y$ = 28						; size = 4
_nWidth$ = 32						; size = 4
_nHeight$ = 36						; size = 4
?GrayStringA@CDC@@UAEHPAVCBrush@@P6GHPAUHDC__@@JH@ZJHHHHH@Z PROC ; CDC::GrayStringA, COMDAT
; _this$ = ecx

; 678  : 	{ ASSERT(m_hDC != NULL); return ::GrayString(m_hDC, (HBRUSH)pBrush->GetSafeHandle(),

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 	{ return this == NULL ? NULL : m_hObject; }

  00003	8b 45 08	 mov	 eax, DWORD PTR _pBrush$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 03		 je	 SHORT $LN6@GrayString
$LN5@GrayString:
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
$LN6@GrayString:

; 678  : 	{ ASSERT(m_hDC != NULL); return ::GrayString(m_hDC, (HBRUSH)pBrush->GetSafeHandle(),

  0000d	ff 75 24	 push	 DWORD PTR _nHeight$[ebp]
  00010	ff 75 20	 push	 DWORD PTR _nWidth$[ebp]
  00013	ff 75 1c	 push	 DWORD PTR _y$[ebp]
  00016	ff 75 18	 push	 DWORD PTR _x$[ebp]
  00019	ff 75 14	 push	 DWORD PTR _nCount$[ebp]
  0001c	ff 75 10	 push	 DWORD PTR _lpData$[ebp]
  0001f	ff 75 0c	 push	 DWORD PTR _lpfnOutput$[ebp]
  00022	50		 push	 eax
  00023	ff 71 04	 push	 DWORD PTR [ecx+4]
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrayStringA@36

; 679  : 		(GRAYSTRINGPROC)lpfnOutput, lpData, nCount, x, y, nWidth, nHeight); }

  0002c	5d		 pop	 ebp
  0002d	c2 20 00	 ret	 32			; 00000020H
?GrayStringA@CDC@@UAEHPAVCBrush@@P6GHPAUHDC__@@JH@ZJHHHHH@Z ENDP ; CDC::GrayStringA
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
;	COMDAT ?DrawTextExA@CDC@@UAEHPADHPAUtagRECT@@IPAUtagDRAWTEXTPARAMS@@@Z
_TEXT	SEGMENT
_lpszString$ = 8					; size = 4
_nCount$ = 12						; size = 4
_lpRect$ = 16						; size = 4
_nFormat$ = 20						; size = 4
_lpDTParams$ = 24					; size = 4
?DrawTextExA@CDC@@UAEHPADHPAUtagRECT@@IPAUtagDRAWTEXTPARAMS@@@Z PROC ; CDC::DrawTextExA, COMDAT
; _this$ = ecx

; 604  : 	{ ASSERT(m_hDC != NULL);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 605  : 		return ::DrawTextEx(m_hDC, lpszString, nCount, lpRect, nFormat, lpDTParams); }

  00003	ff 75 18	 push	 DWORD PTR _lpDTParams$[ebp]
  00006	ff 75 14	 push	 DWORD PTR _nFormat$[ebp]
  00009	ff 75 10	 push	 DWORD PTR _lpRect$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR _nCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR _lpszString$[ebp]
  00012	ff 71 04	 push	 DWORD PTR [ecx+4]
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DrawTextExA@24
  0001b	5d		 pop	 ebp
  0001c	c2 14 00	 ret	 20			; 00000014H
?DrawTextExA@CDC@@UAEHPADHPAUtagRECT@@IPAUtagDRAWTEXTPARAMS@@@Z ENDP ; CDC::DrawTextExA
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
;	COMDAT ?DrawTextA@CDC@@UAEHPBDHPAUtagRECT@@I@Z
_TEXT	SEGMENT
_lpszString$ = 8					; size = 4
_nCount$ = 12						; size = 4
_lpRect$ = 16						; size = 4
_nFormat$ = 20						; size = 4
?DrawTextA@CDC@@UAEHPBDHPAUtagRECT@@I@Z PROC		; CDC::DrawTextA, COMDAT
; _this$ = ecx

; 593  : 	{ ASSERT(m_hDC != NULL);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 594  : 		return ::DrawText(m_hDC, lpszString, nCount, lpRect, nFormat); }

  00003	ff 75 14	 push	 DWORD PTR _nFormat$[ebp]
  00006	ff 75 10	 push	 DWORD PTR _lpRect$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR _nCount$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR _lpszString$[ebp]
  0000f	ff 71 04	 push	 DWORD PTR [ecx+4]
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DrawTextA@20
  00018	5d		 pop	 ebp
  00019	c2 10 00	 ret	 16			; 00000010H
?DrawTextA@CDC@@UAEHPBDHPAUtagRECT@@I@Z ENDP		; CDC::DrawTextA
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
;	COMDAT ?TabbedTextOutA@CDC@@UAE?AVCSize@@HHPBDHHPAHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_lpszString$ = 20					; size = 4
_nCount$ = 24						; size = 4
_nTabPositions$ = 28					; size = 4
_lpnTabStopPositions$ = 32				; size = 4
_nTabOrigin$ = 36					; size = 4
?TabbedTextOutA@CDC@@UAE?AVCSize@@HHPBDHHPAHH@Z PROC	; CDC::TabbedTextOutA, COMDAT
; _this$ = ecx

; 585  : 	{ ASSERT(m_hDC != NULL); return ::TabbedTextOut(m_hDC, x, y, lpszString, nCount,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	ff 75 24	 push	 DWORD PTR _nTabOrigin$[ebp]
  00006	ff 75 20	 push	 DWORD PTR _lpnTabStopPositions$[ebp]
  00009	ff 75 1c	 push	 DWORD PTR _nTabPositions$[ebp]
  0000c	ff 75 18	 push	 DWORD PTR _nCount$[ebp]
  0000f	ff 75 14	 push	 DWORD PTR _lpszString$[ebp]
  00012	ff 75 10	 push	 DWORD PTR _y$[ebp]
  00015	ff 75 0c	 push	 DWORD PTR _x$[ebp]
  00018	ff 71 04	 push	 DWORD PTR [ecx+4]
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TabbedTextOutA@32
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 328  : 		cx = (short)LOWORD(dwSize);

  00021	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00024	0f bf c8	 movsx	 ecx, ax

; 329  : 		cy = (short)HIWORD(dwSize);

  00027	c1 e8 10	 shr	 eax, 16			; 00000010H
  0002a	89 0a		 mov	 DWORD PTR [edx], ecx
  0002c	0f bf c8	 movsx	 ecx, ax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 585  : 	{ ASSERT(m_hDC != NULL); return ::TabbedTextOut(m_hDC, x, y, lpszString, nCount,

  0002f	8b c2		 mov	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 329  : 		cy = (short)HIWORD(dwSize);

  00031	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 586  : 		nTabPositions, lpnTabStopPositions, nTabOrigin); }

  00034	5d		 pop	 ebp
  00035	c2 20 00	 ret	 32			; 00000020H
?TabbedTextOutA@CDC@@UAE?AVCSize@@HHPBDHHPAHH@Z ENDP	; CDC::TabbedTextOutA
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
;	COMDAT ?ExtTextOutA@CDC@@UAEHHHIPBUtagRECT@@PBDIPAH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_nOptions$ = 16						; size = 4
_lpRect$ = 20						; size = 4
_lpszString$ = 24					; size = 4
_nCount$ = 28						; size = 4
_lpDxWidths$ = 32					; size = 4
?ExtTextOutA@CDC@@UAEHHHIPBUtagRECT@@PBDIPAH@Z PROC	; CDC::ExtTextOutA, COMDAT
; _this$ = ecx

; 577  : 	{ ASSERT(m_hDC != NULL); return ::ExtTextOut(m_hDC, x, y, nOptions, lpRect,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	ff 75 20	 push	 DWORD PTR _lpDxWidths$[ebp]
  00006	ff 75 1c	 push	 DWORD PTR _nCount$[ebp]
  00009	ff 75 18	 push	 DWORD PTR _lpszString$[ebp]
  0000c	ff 75 14	 push	 DWORD PTR _lpRect$[ebp]
  0000f	ff 75 10	 push	 DWORD PTR _nOptions$[ebp]
  00012	ff 75 0c	 push	 DWORD PTR _y$[ebp]
  00015	ff 75 08	 push	 DWORD PTR _x$[ebp]
  00018	ff 71 04	 push	 DWORD PTR [ecx+4]
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExtTextOutA@32

; 578  : 		lpszString, nCount, lpDxWidths); }

  00021	5d		 pop	 ebp
  00022	c2 1c 00	 ret	 28			; 0000001cH
?ExtTextOutA@CDC@@UAEHHHIPBUtagRECT@@PBDIPAH@Z ENDP	; CDC::ExtTextOutA
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
;	COMDAT ?TextOutA@CDC@@UAEHHHPBDH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_lpszString$ = 16					; size = 4
_nCount$ = 20						; size = 4
?TextOutA@CDC@@UAEHHHPBDH@Z PROC			; CDC::TextOutA, COMDAT
; _this$ = ecx

; 572  : 	{ ASSERT(m_hDC != NULL); return ::TextOut(m_hDC, x, y, lpszString, nCount); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	ff 75 14	 push	 DWORD PTR _nCount$[ebp]
  00006	ff 75 10	 push	 DWORD PTR _lpszString$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR _y$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR _x$[ebp]
  0000f	ff 71 04	 push	 DWORD PTR [ecx+4]
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TextOutA@20
  00018	5d		 pop	 ebp
  00019	c2 10 00	 ret	 16			; 00000010H
?TextOutA@CDC@@UAEHHHPBDH@Z ENDP			; CDC::TextOutA
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
;	COMDAT ?RectVisible@CDC@@UBEHPBUtagRECT@@@Z
_TEXT	SEGMENT
_lpRect$ = 8						; size = 4
?RectVisible@CDC@@UBEHPBUtagRECT@@@Z PROC		; CDC::RectVisible, COMDAT
; _this$ = ecx

; 454  : 	{ ASSERT(m_hDC != NULL); return ::RectVisible(m_hDC, lpRect); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	ff 75 08	 push	 DWORD PTR _lpRect$[ebp]
  00006	ff 71 04	 push	 DWORD PTR [ecx+4]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RectVisible@8
  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?RectVisible@CDC@@UBEHPBUtagRECT@@@Z ENDP		; CDC::RectVisible
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
;	COMDAT ?PtVisible@CDC@@UBEHHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?PtVisible@CDC@@UBEHHH@Z PROC				; CDC::PtVisible, COMDAT
; _this$ = ecx

; 450  : 	{ ASSERT(m_hDC != NULL); return ::PtVisible(m_hDC, x, y); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	ff 75 0c	 push	 DWORD PTR _y$[ebp]
  00006	ff 75 08	 push	 DWORD PTR _x$[ebp]
  00009	ff 71 04	 push	 DWORD PTR [ecx+4]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PtVisible@12
  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?PtVisible@CDC@@UBEHHH@Z ENDP				; CDC::PtVisible
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_GCRgn@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCRgn@@UAEPAXI@Z PROC				; CRgn::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 266  : 	{ }

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CRgn@@6B@
  0000c	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  00011	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00014	a8 01		 test	 al, 1
  00016	74 1f		 je	 SHORT $LN12@scalar
  00018	a8 04		 test	 al, 4
  0001a	75 10		 jne	 SHORT $LN3@scalar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 112  : 	{ ::operator delete(p); }

  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN3@scalar:
  0002c	6a 08		 push	 8
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  00034	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00037	8b c6		 mov	 eax, esi
  00039	5e		 pop	 esi
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
??_GCRgn@@UAEPAXI@Z ENDP				; CRgn::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
;	COMDAT ??1CRgn@@UAE@XZ
_TEXT	SEGMENT
??1CRgn@@UAE@XZ PROC					; CRgn::~CRgn, COMDAT
; _this$ = ecx

; 266  : 	{ }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CRgn@@6B@
  00006	e9 00 00 00 00	 jmp	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
??1CRgn@@UAE@XZ ENDP					; CRgn::~CRgn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_GCBitmap@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCBitmap@@UAEPAXI@Z PROC				; CBitmap::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 179  : 	{ }

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CBitmap@@6B@
  0000c	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  00011	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00014	a8 01		 test	 al, 1
  00016	74 1f		 je	 SHORT $LN12@scalar
  00018	a8 04		 test	 al, 4
  0001a	75 10		 jne	 SHORT $LN3@scalar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 112  : 	{ ::operator delete(p); }

  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN3@scalar:
  0002c	6a 08		 push	 8
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  00034	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00037	8b c6		 mov	 eax, esi
  00039	5e		 pop	 esi
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
??_GCBitmap@@UAEPAXI@Z ENDP				; CBitmap::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
;	COMDAT ??1CBitmap@@UAE@XZ
_TEXT	SEGMENT
??1CBitmap@@UAE@XZ PROC					; CBitmap::~CBitmap, COMDAT
; _this$ = ecx

; 179  : 	{ }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CBitmap@@6B@
  00006	e9 00 00 00 00	 jmp	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
??1CBitmap@@UAE@XZ ENDP					; CBitmap::~CBitmap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_GCFont@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCFont@@UAEPAXI@Z PROC				; CFont::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 155  : 	{ }

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CFont@@6B@
  0000c	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  00011	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00014	a8 01		 test	 al, 1
  00016	74 1f		 je	 SHORT $LN12@scalar
  00018	a8 04		 test	 al, 4
  0001a	75 10		 jne	 SHORT $LN3@scalar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 112  : 	{ ::operator delete(p); }

  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN3@scalar:
  0002c	6a 08		 push	 8
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  00034	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00037	8b c6		 mov	 eax, esi
  00039	5e		 pop	 esi
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
??_GCFont@@UAEPAXI@Z ENDP				; CFont::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
;	COMDAT ??1CFont@@UAE@XZ
_TEXT	SEGMENT
??1CFont@@UAE@XZ PROC					; CFont::~CFont, COMDAT
; _this$ = ecx

; 155  : 	{ }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CFont@@6B@
  00006	e9 00 00 00 00	 jmp	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
??1CFont@@UAE@XZ ENDP					; CFont::~CFont
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_GCGdiObject@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGdiObject@@UAEPAXI@Z PROC				; CGdiObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  0000b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0000e	a8 01		 test	 al, 1
  00010	74 1f		 je	 SHORT $LN9@scalar
  00012	a8 04		 test	 al, 4
  00014	75 10		 jne	 SHORT $LN3@scalar

; 112  : 	{ ::operator delete(p); }

  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	83 c4 04	 add	 esp, 4
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN3@scalar:
  00026	6a 08		 push	 8
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0002e	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??_GCGdiObject@@UAEPAXI@Z ENDP				; CGdiObject::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
;	COMDAT ??1CGdiObject@@UAE@XZ
_TEXT	SEGMENT
_pException$2 = -540					; size = 4
_strMsg$3 = -536					; size = 4
_szErrorMessage$4 = -532				; size = 512
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
??1CGdiObject@@UAE@XZ PROC				; CGdiObject::~CGdiObject, COMDAT
; _this$ = ecx

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CGdiObject@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 10 02 00
	00		 sub	 esp, 528		; 00000210H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00031	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CGdiObject@@6B@

; 75   : 	AFX_BEGIN_DESTRUCTOR

  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 76   : 	DeleteObject();

  0003e	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject
$LN18@CGdiObject:

; 78   : }

  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00054	33 cd		 xor	 ecx, ebp
  00056	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
__catch$??1CGdiObject@@UAE@XZ$0:

; 77   : 	AFX_END_DESTRUCTOR

  0005f	8d 8d e8 fd ff
	ff		 lea	 ecx, DWORD PTR _strMsg$3[ebp]
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0006b	8b b5 e4 fd ff
	ff		 mov	 esi, DWORD PTR _pException$2[ebp]
  00071	8d 8d ec fd ff
	ff		 lea	 ecx, DWORD PTR _szErrorMessage$4[ebp]
  00077	6a 00		 push	 0
  00079	68 00 02 00 00	 push	 512			; 00000200H
  0007e	51		 push	 ecx
  0007f	8b 06		 mov	 eax, DWORD PTR [esi]
  00081	8b ce		 mov	 ecx, esi
  00083	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00087	ff 50 14	 call	 DWORD PTR [eax+20]
  0008a	85 c0		 test	 eax, eax
  0008c	74 2a		 je	 SHORT $LN9@CGdiObject
  0008e	8d 85 ec fd ff
	ff		 lea	 eax, DWORD PTR _szErrorMessage$4[ebp]
  00094	50		 push	 eax
  00095	6a 4d		 push	 77			; 0000004dH
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_0HD@JJCHHHNK@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OIEOKIDM@Exception?5thrown?5in?5destructor@
  000a1	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _strMsg$3[ebp]
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@HBOOMJBF@?$CFTs?5?$CI?$CFTs?3?$CFd?$CJ?6?$CFTs@
  000ac	50		 push	 eax
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  000b3	83 c4 18	 add	 esp, 24			; 00000018H
  000b6	eb 21		 jmp	 SHORT $LN10@CGdiObject
$LN9@CGdiObject:
  000b8	6a 4d		 push	 77			; 0000004dH
  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_0HD@JJCHHHNK@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000bf	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OIEOKIDM@Exception?5thrown?5in?5destructor@
  000c4	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _strMsg$3[ebp]
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OMEMOKLE@?$CFTs?5?$CI?$CFTs?3?$CFd?$CJ@
  000cf	50		 push	 eax
  000d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  000d6	83 c4 14	 add	 esp, 20			; 00000014H
$LN10@CGdiObject:
  000d9	6a 00		 push	 0
  000db	6a 00		 push	 0
  000dd	ff b5 e8 fd ff
	ff		 push	 DWORD PTR _strMsg$3[ebp]
  000e3	e8 00 00 00 00	 call	 ?AfxMessageBox@@YGHPBDII@Z ; AfxMessageBox
  000e8	8d 8d e8 fd ff
	ff		 lea	 ecx, DWORD PTR _strMsg$3[ebp]
  000ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000f4	8b 06		 mov	 eax, DWORD PTR [esi]
  000f6	8b ce		 mov	 ecx, esi
  000f8	6a 01		 push	 1
  000fa	ff 50 04	 call	 DWORD PTR [eax+4]
  000fd	b8 00 00 00 00	 mov	 eax, $LN18@CGdiObject
  00102	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CGdiObject@@UAE@XZ$2:
  00000	8d 8d e8 fd ff
	ff		 lea	 ecx, DWORD PTR _strMsg$3[ebp]
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$??1CGdiObject@@UAE@XZ:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 8a e0 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-544]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CGdiObject@@UAE@XZ
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CGdiObject@@UAE@XZ ENDP				; CGdiObject::~CGdiObject
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z PROC		; CObject::Dump, COMDAT
; _this$ = ecx

; 122  : 	{ /* no dumping in release builds */ }

  00000	c2 04 00	 ret	 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z ENDP		; CObject::Dump
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT
?AssertValid@CObject@@UBEXXZ PROC			; CObject::AssertValid, COMDAT
; _this$ = ecx

; 120  : 	{ /* no asserts in release builds */ }

  00000	c2 00 00	 ret	 0
?AssertValid@CObject@@UBEXXZ ENDP			; CObject::AssertValid
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z PROC		; CObject::Serialize, COMDAT
; _this$ = ecx

; 106  : 	{ /* CObject does not serialize anything by default */ }

  00000	c2 04 00	 ret	 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z ENDP		; CObject::Serialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT
??1CObject@@UAE@XZ PROC					; CObject::~CObject, COMDAT
; _this$ = ecx

; 104  : 	{ }

  00000	c2 00 00	 ret	 0
??1CObject@@UAE@XZ ENDP					; CObject::~CObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\MULTICHART\control\TextProgressCtrl.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
