; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30145.0 

	TITLE	D:\git\src\IBK\IBK_DRFN\#DRfn-CS\_Obj\ChartObject\XScaleGridTime.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlength@?$vector@PAXV?$allocator@PAX@std@@@std@@CAXXZ ; std::vector<void *,std::allocator<void *> >::_Xlength
PUBLIC	?PushBackUNK@CDataBlockListUNK@@QAEXPAX@Z	; CDataBlockListUNK::PushBackUNK
PUBLIC	??_GCDataBlockListUNK@@UAEPAXI@Z		; CDataBlockListUNK::`scalar deleting destructor'
PUBLIC	??0CXScaleGridTime@@QAE@XZ			; CXScaleGridTime::CXScaleGridTime
PUBLIC	??1CXScaleGridTime@@UAE@XZ			; CXScaleGridTime::~CXScaleGridTime
PUBLIC	??0?$CDataBlockList@Utm@@$0CAA@@@QAE@XZ		; CDataBlockList<tm,512>::CDataBlockList<tm,512>
PUBLIC	??1?$CDataBlockList@Utm@@$0CAA@@@UAE@XZ		; CDataBlockList<tm,512>::~CDataBlockList<tm,512>
PUBLIC	??_G?$CDataBlockList@Utm@@$0CAA@@@UAEPAXI@Z	; CDataBlockList<tm,512>::`scalar deleting destructor'
PUBLIC	??0?$CDataBlockList@H$0CAA@@@QAE@XZ		; CDataBlockList<int,512>::CDataBlockList<int,512>
PUBLIC	??1?$CDataBlockList@H$0CAA@@@UAE@XZ		; CDataBlockList<int,512>::~CDataBlockList<int,512>
PUBLIC	??_G?$CDataBlockList@H$0CAA@@@UAEPAXI@Z		; CDataBlockList<int,512>::`scalar deleting destructor'
PUBLIC	?PopLastScaleDataTime@CXScaleGridTime@@QAEXXZ	; CXScaleGridTime::PopLastScaleDataTime
PUBLIC	?PushScaleDataTime@CXScaleGridTime@@QAEXHHUtm@@H@Z ; CXScaleGridTime::PushScaleDataTime
PUBLIC	?Clear@CXScaleGridTime@@QAEXXZ			; CXScaleGridTime::Clear
PUBLIC	?RecalculateScaleType@CXScaleGridTime@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4HORZSCALEDRAWERTYPE@CScaleBaseData@@HAAHHW4CHART_MODE@CChartInfo@@@Z ; CXScaleGridTime::RecalculateScaleType
PUBLIC	?GetLastDRI@CXScaleGridTime@@QAEHXZ		; CXScaleGridTime::GetLastDRI
PUBLIC	?MakeScaleData@CXScaleGridTime@@QAEXHAAV?$CDataBlockList@Utm@@$0CAA@@@AAV?$CDataBlockList@H$0CAA@@@HW4CHART_MODE@CChartInfo@@@Z ; CXScaleGridTime::MakeScaleData
PUBLIC	??_GCXScaleGridTime@@UAEPAXI@Z			; CXScaleGridTime::`scalar deleting destructor'
PUBLIC	??$_Emplace_reallocate@ABQAX@?$vector@PAXV?$allocator@PAX@std@@@std@@QAEPAPAXQAPAXABQAX@Z ; std::vector<void *,std::allocator<void *> >::_Emplace_reallocate<void * const &>
PUBLIC	??$_Copy_memmove@PAPAXPAPAX@std@@YAPAPAXPAPAX00@Z ; std::_Copy_memmove<void * *,void * *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_7CDataBlockListUNK@@6B@			; CDataBlockListUNK::`vftable'
PUBLIC	??_7?$CDataBlockList@Utm@@$0CAA@@@6B@		; CDataBlockList<tm,512>::`vftable'
PUBLIC	??_7?$CDataBlockList@H$0CAA@@@6B@		; CDataBlockList<int,512>::`vftable'
PUBLIC	??_7CXScaleGridTime@@6B@			; CXScaleGridTime::`vftable'
PUBLIC	??_C@_02CGAEACJK@YM@				; `string'
PUBLIC	??_C@_02OMOJLCHP@MD@				; `string'
PUBLIC	??_C@_02DLOAMLNN@HM@				; `string'
PUBLIC	??_C@_02OJGKDGOJ@MS@				; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CDataBlockListUNK@@6B@			; CDataBlockListUNK::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDataBlockListUNK@@@8			; CDataBlockListUNK `RTTI Type Descriptor'
PUBLIC	??_R3CDataBlockListUNK@@8			; CDataBlockListUNK::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDataBlockListUNK@@8			; CDataBlockListUNK::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDataBlockListUNK@@8		; CDataBlockListUNK::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CXScaleGridTime@@6B@			; CXScaleGridTime::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCXScaleGridTime@@@8			; CXScaleGridTime `RTTI Type Descriptor'
PUBLIC	??_R3CXScaleGridTime@@8				; CXScaleGridTime::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CXScaleGridTime@@8				; CXScaleGridTime::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CXScaleGridTime@@8		; CXScaleGridTime::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDataBlockList@Utm@@$0CAA@@@6B@		; CDataBlockList<tm,512>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDataBlockList@Utm@@$0CAA@@@@8	; CDataBlockList<tm,512> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDataBlockList@Utm@@$0CAA@@@8		; CDataBlockList<tm,512>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDataBlockList@Utm@@$0CAA@@@8		; CDataBlockList<tm,512>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDataBlockList@Utm@@$0CAA@@@8	; CDataBlockList<tm,512>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDataBlockList@H$0CAA@@@6B@		; CDataBlockList<int,512>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDataBlockList@H$0CAA@@@@8		; CDataBlockList<int,512> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDataBlockList@H$0CAA@@@8		; CDataBlockList<int,512>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDataBlockList@H$0CAA@@@8		; CDataBlockList<int,512>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDataBlockList@H$0CAA@@@8	; CDataBlockList<int,512>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@4004000000000000
PUBLIC	__real@4014000000000000
PUBLIC	__real@4019000000000000
PUBLIC	__real@401e000000000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@4029000000000000
PUBLIC	__real@402e000000000000
PUBLIC	__real@4032c00000000000
PUBLIC	__real@40356db6db6db6db
PUBLIC	__real@4039000000000000
PUBLIC	__real@403e000000000000
PUBLIC	__real@4042c00000000000
PUBLIC	__real@4049000000000000
PUBLIC	__real@4052c00000000000
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	___std_terminate:PROC
EXTRN	__imp___invalid_parameter_noinfo_noreturn:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp___mktime64:PROC
EXTRN	__imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHDH@Z:PROC
EXTRN	__imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBDH@Z:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	??1CDataBlockListUNK@@UAE@XZ:PROC		; CDataBlockListUNK::~CDataBlockListUNK
EXTRN	?Clear@CDataBlockListUNK@@QAEXXZ:PROC		; CDataBlockListUNK::Clear
EXTRN	?GetItemCount@CDataBlockListUNK@@QAEHXZ:PROC	; CDataBlockListUNK::GetItemCount
EXTRN	?DeleteBack@CDataBlockListUNK@@QAEXH@Z:PROC	; CDataBlockListUNK::DeleteBack
EXTRN	?GetAtUNK@CDataBlockListUNK@@QAEPAXH@Z:PROC	; CDataBlockListUNK::GetAtUNK
EXTRN	?SetIndex@CDataBlockListUNK@@QAEXH@Z:PROC	; CDataBlockListUNK::SetIndex
EXTRN	?GetNextUNK@CDataBlockListUNK@@QAEPAXXZ:PROC	; CDataBlockListUNK::GetNextUNK
EXTRN	??_ECDataBlockListUNK@@UAEPAXI@Z:PROC		; CDataBlockListUNK::`vector deleting destructor'
EXTRN	??_E?$CDataBlockList@Utm@@$0CAA@@@UAEPAXI@Z:PROC ; CDataBlockList<tm,512>::`vector deleting destructor'
EXTRN	??_E?$CDataBlockList@H$0CAA@@@UAEPAXI@Z:PROC	; CDataBlockList<int,512>::`vector deleting destructor'
EXTRN	??_ECXScaleGridTime@@UAEPAXI@Z:PROC		; CXScaleGridTime::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@4052c00000000000
CONST	SEGMENT
__real@4052c00000000000 DQ 04052c00000000000r	; 75
CONST	ENDS
;	COMDAT __real@4049000000000000
CONST	SEGMENT
__real@4049000000000000 DQ 04049000000000000r	; 50
CONST	ENDS
;	COMDAT __real@4042c00000000000
CONST	SEGMENT
__real@4042c00000000000 DQ 04042c00000000000r	; 37.5
CONST	ENDS
;	COMDAT __real@403e000000000000
CONST	SEGMENT
__real@403e000000000000 DQ 0403e000000000000r	; 30
CONST	ENDS
;	COMDAT __real@4039000000000000
CONST	SEGMENT
__real@4039000000000000 DQ 04039000000000000r	; 25
CONST	ENDS
;	COMDAT __real@40356db6db6db6db
CONST	SEGMENT
__real@40356db6db6db6db DQ 040356db6db6db6dbr	; 21.4286
CONST	ENDS
;	COMDAT __real@4032c00000000000
CONST	SEGMENT
__real@4032c00000000000 DQ 04032c00000000000r	; 18.75
CONST	ENDS
;	COMDAT __real@402e000000000000
CONST	SEGMENT
__real@402e000000000000 DQ 0402e000000000000r	; 15
CONST	ENDS
;	COMDAT __real@4029000000000000
CONST	SEGMENT
__real@4029000000000000 DQ 04029000000000000r	; 12.5
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@401e000000000000
CONST	SEGMENT
__real@401e000000000000 DQ 0401e000000000000r	; 7.5
CONST	ENDS
;	COMDAT __real@4019000000000000
CONST	SEGMENT
__real@4019000000000000 DQ 04019000000000000r	; 6.25
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@4004000000000000
CONST	SEGMENT
__real@4004000000000000 DQ 04004000000000000r	; 2.5
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDataBlockList@H$0CAA@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDataBlockList@H$0CAA@@@8 DD FLAT:??_R0?AV?$CDataBlockList@H$0CAA@@@@8 ; CDataBlockList<int,512>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDataBlockList@H$0CAA@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDataBlockList@H$0CAA@@@8
rdata$r	SEGMENT
??_R2?$CDataBlockList@H$0CAA@@@8 DD FLAT:??_R1A@?0A@EA@?$CDataBlockList@H$0CAA@@@8 ; CDataBlockList<int,512>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CDataBlockListUNK@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CDataBlockList@H$0CAA@@@8
rdata$r	SEGMENT
??_R3?$CDataBlockList@H$0CAA@@@8 DD 00H			; CDataBlockList<int,512>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CDataBlockList@H$0CAA@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDataBlockList@H$0CAA@@@@8
data$rs	SEGMENT
??_R0?AV?$CDataBlockList@H$0CAA@@@@8 DD FLAT:??_7type_info@@6B@ ; CDataBlockList<int,512> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDataBlockList@H$0CAA@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDataBlockList@H$0CAA@@@6B@
rdata$r	SEGMENT
??_R4?$CDataBlockList@H$0CAA@@@6B@ DD 00H		; CDataBlockList<int,512>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDataBlockList@H$0CAA@@@@8
	DD	FLAT:??_R3?$CDataBlockList@H$0CAA@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDataBlockList@Utm@@$0CAA@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDataBlockList@Utm@@$0CAA@@@8 DD FLAT:??_R0?AV?$CDataBlockList@Utm@@$0CAA@@@@8 ; CDataBlockList<tm,512>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDataBlockList@Utm@@$0CAA@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDataBlockList@Utm@@$0CAA@@@8
rdata$r	SEGMENT
??_R2?$CDataBlockList@Utm@@$0CAA@@@8 DD FLAT:??_R1A@?0A@EA@?$CDataBlockList@Utm@@$0CAA@@@8 ; CDataBlockList<tm,512>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CDataBlockListUNK@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CDataBlockList@Utm@@$0CAA@@@8
rdata$r	SEGMENT
??_R3?$CDataBlockList@Utm@@$0CAA@@@8 DD 00H		; CDataBlockList<tm,512>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CDataBlockList@Utm@@$0CAA@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDataBlockList@Utm@@$0CAA@@@@8
data$rs	SEGMENT
??_R0?AV?$CDataBlockList@Utm@@$0CAA@@@@8 DD FLAT:??_7type_info@@6B@ ; CDataBlockList<tm,512> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDataBlockList@Utm@@$0CAA@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDataBlockList@Utm@@$0CAA@@@6B@
rdata$r	SEGMENT
??_R4?$CDataBlockList@Utm@@$0CAA@@@6B@ DD 00H		; CDataBlockList<tm,512>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDataBlockList@Utm@@$0CAA@@@@8
	DD	FLAT:??_R3?$CDataBlockList@Utm@@$0CAA@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CXScaleGridTime@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CXScaleGridTime@@8 DD FLAT:??_R0?AVCXScaleGridTime@@@8 ; CXScaleGridTime::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CXScaleGridTime@@8
rdata$r	ENDS
;	COMDAT ??_R2CXScaleGridTime@@8
rdata$r	SEGMENT
??_R2CXScaleGridTime@@8 DD FLAT:??_R1A@?0A@EA@CXScaleGridTime@@8 ; CXScaleGridTime::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CXScaleGridTime@@8
rdata$r	SEGMENT
??_R3CXScaleGridTime@@8 DD 00H				; CXScaleGridTime::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CXScaleGridTime@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCXScaleGridTime@@@8
data$rs	SEGMENT
??_R0?AVCXScaleGridTime@@@8 DD FLAT:??_7type_info@@6B@	; CXScaleGridTime `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCXScaleGridTime@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CXScaleGridTime@@6B@
rdata$r	SEGMENT
??_R4CXScaleGridTime@@6B@ DD 00H			; CXScaleGridTime::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCXScaleGridTime@@@8
	DD	FLAT:??_R3CXScaleGridTime@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDataBlockListUNK@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDataBlockListUNK@@8 DD FLAT:??_R0?AVCDataBlockListUNK@@@8 ; CDataBlockListUNK::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDataBlockListUNK@@8
rdata$r	ENDS
;	COMDAT ??_R2CDataBlockListUNK@@8
rdata$r	SEGMENT
??_R2CDataBlockListUNK@@8 DD FLAT:??_R1A@?0A@EA@CDataBlockListUNK@@8 ; CDataBlockListUNK::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CDataBlockListUNK@@8
rdata$r	SEGMENT
??_R3CDataBlockListUNK@@8 DD 00H			; CDataBlockListUNK::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CDataBlockListUNK@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDataBlockListUNK@@@8
data$rs	SEGMENT
??_R0?AVCDataBlockListUNK@@@8 DD FLAT:??_7type_info@@6B@ ; CDataBlockListUNK `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDataBlockListUNK@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CDataBlockListUNK@@6B@
rdata$r	SEGMENT
??_R4CDataBlockListUNK@@6B@ DD 00H			; CDataBlockListUNK::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDataBlockListUNK@@@8
	DD	FLAT:??_R3CDataBlockListUNK@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02OJGKDGOJ@MS@
CONST	SEGMENT
??_C@_02OJGKDGOJ@MS@ DB 'MS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DLOAMLNN@HM@
CONST	SEGMENT
??_C@_02DLOAMLNN@HM@ DB 'HM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OMOJLCHP@MD@
CONST	SEGMENT
??_C@_02OMOJLCHP@MD@ DB 'MD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CGAEACJK@YM@
CONST	SEGMENT
??_C@_02CGAEACJK@YM@ DB 'YM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CXScaleGridTime@@6B@
CONST	SEGMENT
??_7CXScaleGridTime@@6B@ DD FLAT:??_R4CXScaleGridTime@@6B@ ; CXScaleGridTime::`vftable'
	DD	FLAT:??_ECXScaleGridTime@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDataBlockList@H$0CAA@@@6B@
CONST	SEGMENT
??_7?$CDataBlockList@H$0CAA@@@6B@ DD FLAT:??_R4?$CDataBlockList@H$0CAA@@@6B@ ; CDataBlockList<int,512>::`vftable'
	DD	FLAT:??_E?$CDataBlockList@H$0CAA@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDataBlockList@Utm@@$0CAA@@@6B@
CONST	SEGMENT
??_7?$CDataBlockList@Utm@@$0CAA@@@6B@ DD FLAT:??_R4?$CDataBlockList@Utm@@$0CAA@@@6B@ ; CDataBlockList<tm,512>::`vftable'
	DD	FLAT:??_E?$CDataBlockList@Utm@@$0CAA@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CDataBlockListUNK@@6B@
CONST	SEGMENT
??_7CDataBlockListUNK@@6B@ DD FLAT:??_R4CDataBlockListUNK@@6B@ ; CDataBlockListUNK::`vftable'
	DD	FLAT:??_ECDataBlockListUNK@@UAEPAXI@Z
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GCXScaleGridTime@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_GCXScaleGridTime@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_GCXScaleGridTime@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CXScaleGridTime@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CXScaleGridTime@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CXScaleGridTime@@QAE@XZ$0
__ehfuncinfo$??0CXScaleGridTime@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CXScaleGridTime@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 79   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 79   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAXPAPAX@std@@YAPAPAXPAPAX00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAXPAPAX@std@@YAPAPAXPAPAX00@Z PROC	; std::_Copy_memmove<void * *,void * *>, COMDAT

; 4058 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4059 :     auto _FirstPtr              = _To_address(_First);
; 4060 :     auto _LastPtr               = _To_address(_Last);
; 4061 :     auto _DestPtr               = _To_address(_Dest);
; 4062 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4063 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4064 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4067 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4069 :     } else {
; 4070 :         return _Dest + (_LastPtr - _FirstPtr);
; 4071 :     }
; 4072 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAXPAPAX@std@@YAPAPAXPAPAX00@Z ENDP	; std::_Copy_memmove<void * *,void * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAX@?$vector@PAXV?$allocator@PAX@std@@@std@@QAEPAPAXQAPAXABQAX@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
tv710 = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAX@?$vector@PAXV?$allocator@PAX@std@@@std@@QAEPAPAXQAPAXABQAX@Z PROC ; std::vector<void *,std::allocator<void *> >::_Emplace_reallocate<void * const &>, COMDAT
; _this$ = ecx

; 752  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 753  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 754  :         _Alty& _Al        = _Getal();
; 755  :         auto& _My_data    = _Mypair._Myval2;
; 756  :         pointer& _Myfirst = _My_data._Myfirst;
; 757  :         pointer& _Mylast  = _My_data._Mylast;
; 758  : 
; 759  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 760  : 
; 761  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00010	2b c1		 sub	 eax, ecx
  00012	c1 f8 02	 sar	 eax, 2
  00015	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 762  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001b	2b c1		 sub	 eax, ecx
  0001d	c1 f8 02	 sar	 eax, 2

; 763  : 
; 764  :         if (_Oldsize == max_size()) {

  00020	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00025	0f 84 24 01 00
	00		 je	 $LN117@Emplace_re

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 57 08	 mov	 edx, DWORD PTR [edi+8]

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

  0002e	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	2b d1		 sub	 edx, ecx

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

  00033	89 75 f8	 mov	 DWORD PTR __Newsize$1$[ebp], esi

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	c1 fa 02	 sar	 edx, 2

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00039	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003e	8b ca		 mov	 ecx, edx
  00040	d1 e9		 shr	 ecx, 1
  00042	2b c1		 sub	 eax, ecx
  00044	3b d0		 cmp	 edx, eax
  00046	0f 87 fe 00 00
	00		 ja	 $LN114@Emplace_re

; 1676 :             return _Max; // geometric growth would overflow
; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0004c	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0004f	8b de		 mov	 ebx, esi
  00051	3b c6		 cmp	 eax, esi
  00053	0f 43 d8	 cmovae	 ebx, eax
  00056	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  0005c	0f 87 e8 00 00
	00		 ja	 $LN114@Emplace_re

; 61   :             _Throw_bad_array_new_length(); // multiply overflow
; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00062	c1 e3 02	 shl	 ebx, 2

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00065	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  0006b	72 27		 jb	 SHORT $LN24@Emplace_re

; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  0006d	8d 43 23	 lea	 eax, DWORD PTR [ebx+35]

; 130  :     if (_Block_size <= _Bytes) {

  00070	3b c3		 cmp	 eax, ebx
  00072	0f 86 d2 00 00
	00		 jbe	 $LN114@Emplace_re

; 79   :         return ::operator new(_Bytes);

  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007e	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00081	85 c0		 test	 eax, eax
  00083	0f 84 bb 00 00
	00		 je	 $LN105@Emplace_re

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00089	8d 70 23	 lea	 esi, DWORD PTR [eax+35]
  0008c	83 e6 e0	 and	 esi, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  0008f	89 46 fc	 mov	 DWORD PTR [esi-4], eax

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00092	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00094	85 db		 test	 ebx, ebx
  00096	74 0d		 je	 SHORT $LN25@Emplace_re

; 79   :         return ::operator new(_Bytes);

  00098	53		 push	 ebx
  00099	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0009e	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000a1	8b f0		 mov	 esi, eax
  000a3	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000a5	33 f6		 xor	 esi, esi
$LN23@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 776  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a7	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]

; 777  :         _Constructed_first = _Newvec + _Whereoff;
; 778  : 
; 779  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000aa	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  000ad	8d 0c 86	 lea	 ecx, DWORD PTR [esi+eax*4]
  000b0	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000b3	89 4d fc	 mov	 DWORD PTR tv710[ebp], ecx
  000b6	8b 00		 mov	 eax, DWORD PTR [eax]
  000b8	89 01		 mov	 DWORD PTR [ecx], eax
  000ba	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000bd	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000bf	3b d0		 cmp	 edx, eax
  000c1	75 0f		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  000c3	2b c1		 sub	 eax, ecx

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  000c5	50		 push	 eax
  000c6	51		 push	 ecx
  000c7	56		 push	 esi
  000c8	e8 00 00 00 00	 call	 _memmove
  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 781  :         } else { // provide basic guarantee

  000d0	eb 23		 jmp	 SHORT $LN78@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  000d2	2b d1		 sub	 edx, ecx

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  000d4	52		 push	 edx
  000d5	51		 push	 ecx
  000d6	56		 push	 esi
  000d7	e8 00 00 00 00	 call	 _memmove

; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  000dc	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000df	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  000e2	2b c1		 sub	 eax, ecx

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  000e4	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000e5	8b 45 fc	 mov	 eax, DWORD PTR tv710[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  000e8	51		 push	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000e9	83 c0 04	 add	 eax, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  000ec	50		 push	 eax
  000ed	e8 00 00 00 00	 call	 _memmove
  000f2	83 c4 18	 add	 esp, 24			; 00000018H
$LN78@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

  000f5	8b 07		 mov	 eax, DWORD PTR [edi]
  000f7	85 c0		 test	 eax, eax
  000f9	74 2c		 je	 SHORT $LN98@Emplace_re

; 1733 :             _Destroy(_Myfirst, _Mylast);
; 1734 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000fb	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000fe	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00100	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00103	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00109	72 12		 jb	 SHORT $LN108@Emplace_re

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0010b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0010e	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00111	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00113	83 c0 fc	 add	 eax, -4			; fffffffcH
  00116	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00119	77 29		 ja	 SHORT $LN105@Emplace_re

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0011b	8b c2		 mov	 eax, edx
$LN108@Emplace_re:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0011d	51		 push	 ecx
  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00124	83 c4 08	 add	 esp, 8
$LN98@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1738 :         _Mylast  = _Newvec + _Newsize;

  00127	8b 45 f8	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  0012a	89 37		 mov	 DWORD PTR [edi], esi
  0012c	8d 0c 86	 lea	 ecx, DWORD PTR [esi+eax*4]

; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);
; 788  :         _Al.deallocate(_Newvec, _Newcapacity);
; 789  :         _RERAISE;
; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 793  :         return _Newvec + _Whereoff;

  0012f	8b 45 fc	 mov	 eax, DWORD PTR tv710[ebp]

; 1738 :         _Mylast  = _Newvec + _Newsize;

  00132	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 1739 :         _Myend   = _Newvec + _Newcapacity;

  00135	8d 0c 33	 lea	 ecx, DWORD PTR [ebx+esi]
  00138	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);
; 788  :         _Al.deallocate(_Newvec, _Newcapacity);
; 789  :         _RERAISE;
; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 793  :         return _Newvec + _Whereoff;

  0013b	5f		 pop	 edi
  0013c	5e		 pop	 esi
  0013d	5b		 pop	 ebx

; 794  :     }

  0013e	8b e5		 mov	 esp, ebp
  00140	5d		 pop	 ebp
  00141	c2 08 00	 ret	 8
$LN105@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00144	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN114@Emplace_re:

; 131  :         _Throw_bad_array_new_length(); // add overflow

  0014a	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN117@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 765  :             _Xlength();

  0014f	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAXV?$allocator@PAX@std@@@std@@CAXXZ ; std::vector<void *,std::allocator<void *> >::_Xlength
$LN115@Emplace_re:
  00154	cc		 int	 3
??$_Emplace_reallocate@ABQAX@?$vector@PAXV?$allocator@PAX@std@@@std@@QAEPAPAXQAPAXABQAX@Z ENDP ; std::vector<void *,std::allocator<void *> >::_Emplace_reallocate<void * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
;	COMDAT ??_GCXScaleGridTime@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GCXScaleGridTime@@UAEPAXI@Z PROC			; CXScaleGridTime::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_GCXScaleGridTime@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b d9		 mov	 ebx, ecx

; 17   : {

  00027	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002e	8d 73 0c	 lea	 esi, DWORD PTR [ebx+12]
  00031	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7CXScaleGridTime@@6B@
  00037	bf 06 00 00 00	 mov	 edi, 6
  0003c	0f 1f 40 00	 npad	 4
$LL10@scalar:

; 75   : 	for( int i = 0; i < 6; i++) m_blaScaleDataTime[ i].Clear();

  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?Clear@CDataBlockListUNK@@QAEXXZ ; CDataBlockListUNK::Clear
  00047	83 c6 34	 add	 esi, 52			; 00000034H
  0004a	83 ef 01	 sub	 edi, 1
  0004d	75 f1		 jne	 SHORT $LL10@scalar

; 76   : 	for( int i = 0; i < 6; i++)	m_blaScaleDataDRI[ i].Clear();

  0004f	8d b3 44 01 00
	00		 lea	 esi, DWORD PTR [ebx+324]
  00055	bf 06 00 00 00	 mov	 edi, 6
  0005a	66 0f 1f 44 00
	00		 npad	 6
$LL13@scalar:
  00060	8b ce		 mov	 ecx, esi
  00062	e8 00 00 00 00	 call	 ?Clear@CDataBlockListUNK@@QAEXXZ ; CDataBlockListUNK::Clear
  00067	83 c6 34	 add	 esi, 52			; 00000034H
  0006a	83 ef 01	 sub	 edi, 1
  0006d	75 f1		 jne	 SHORT $LL13@scalar

; 77   : 	memset( m_tmLastScale, 0, sizeof( tm) * 6);

  0006f	68 d8 00 00 00	 push	 216			; 000000d8H
  00074	8d 83 7c 02 00
	00		 lea	 eax, DWORD PTR [ebx+636]
  0007a	57		 push	 edi
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 _memset
  00081	83 c4 0c	 add	 esp, 12			; 0000000cH

; 19   : }

  00084	8d 83 44 01 00
	00		 lea	 eax, DWORD PTR [ebx+324]
  0008a	68 00 00 00 00	 push	 OFFSET ??1?$CDataBlockList@H$0CAA@@@UAE@XZ ; CDataBlockList<int,512>::~CDataBlockList<int,512>
  0008f	6a 06		 push	 6
  00091	6a 34		 push	 52			; 00000034H
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00099	68 00 00 00 00	 push	 OFFSET ??1?$CDataBlockList@Utm@@$0CAA@@@UAE@XZ ; CDataBlockList<tm,512>::~CDataBlockList<tm,512>
  0009e	6a 06		 push	 6
  000a0	6a 34		 push	 52			; 00000034H
  000a2	8d 43 0c	 lea	 eax, DWORD PTR [ebx+12]
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  000ab	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  000af	74 0e		 je	 SHORT $LN23@scalar
  000b1	68 54 03 00 00	 push	 852			; 00000354H
  000b6	53		 push	 ebx
  000b7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000bc	83 c4 08	 add	 esp, 8
$LN23@scalar:
  000bf	8b c3		 mov	 eax, ebx
  000c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cb	59		 pop	 ecx
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c2 04 00	 ret	 4
  000d5	cc		 int	 3
  000d6	cc		 int	 3
  000d7	cc		 int	 3
  000d8	cc		 int	 3
  000d9	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_GCXScaleGridTime@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GCXScaleGridTime@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GCXScaleGridTime@@UAEPAXI@Z ENDP			; CXScaleGridTime::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
;	COMDAT ?MakeScaleData@CXScaleGridTime@@QAEXHAAV?$CDataBlockList@Utm@@$0CAA@@@AAV?$CDataBlockList@H$0CAA@@@HW4CHART_MODE@CChartInfo@@@Z
_TEXT	SEGMENT
tv259 = -192						; size = 4
tv262 = -188						; size = 4
_nDRICount$1$ = -184					; size = 4
_p_blScaleDRI$GSCopy$1$ = -180				; size = 4
_p_nScaleType$GSCopy$1$ = -176				; size = 4
_i$1$ = -172						; size = 4
_p_blScaleTime$GSCopy$1$ = -168				; size = 4
_timeNext$ = -164					; size = 8
_nDRI$1$ = -160						; size = 4
_Item$ = -160						; size = 4
_Item$ = -160						; size = 4
_bNext$1$ = -156					; size = 4
_timeNext$1$ = -152					; size = 4
_Item$ = -148						; size = 36
_Item$ = -112						; size = 36
_tmDRI$ = -76						; size = 36
_tmNext$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_p_nScaleType$ = 8					; size = 4
_p_blScaleTime$ = 12					; size = 4
_p_blScaleDRI$ = 16					; size = 4
_p_nSkipFactor$ = 20					; size = 4
_p_eChartMode$ = 24					; size = 4
?MakeScaleData@CXScaleGridTime@@QAEXHAAV?$CDataBlockList@Utm@@$0CAA@@@AAV?$CDataBlockList@H$0CAA@@@HW4CHART_MODE@CChartInfo@@@Z PROC ; CXScaleGridTime::MakeScaleData, COMDAT
; _this$ = ecx

; 248  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _p_nScaleType$[ebp]
  00016	0f 57 c0	 xorps	 xmm0, xmm0
  00019	8b 55 0c	 mov	 edx, DWORD PTR _p_blScaleTime$[ebp]
  0001c	53		 push	 ebx
  0001d	56		 push	 esi

; 249  : 	const int *pIReturn = NULL;
; 250  : 	const tm *pMReturn = NULL;
; 251  : 
; 252  : 	time_t timeNext = 0;
; 253  : 	int nNextTime = -1;
; 254  : 	int nDRI = -1;
; 255  : 	tm tmDRI, tmNext;
; 256  : 	memset( &tmDRI, 0, sizeof( tm));
; 257  : 	memset( &tmNext, 0, sizeof( tm));
; 258  : 	m_blaScaleDataDRI[ p_nScaleType].SetIndex( 0);

  0001e	6b f0 34	 imul	 esi, eax, 52
  00021	89 95 58 ff ff
	ff		 mov	 DWORD PTR _p_blScaleTime$GSCopy$1$[ebp], edx
  00027	8b 55 10	 mov	 edx, DWORD PTR _p_blScaleDRI$[ebp]
  0002a	6a 00		 push	 0
  0002c	89 85 50 ff ff
	ff		 mov	 DWORD PTR _p_nScaleType$GSCopy$1$[ebp], eax
  00032	03 f1		 add	 esi, ecx
  00034	89 95 4c ff ff
	ff		 mov	 DWORD PTR _p_blScaleDRI$GSCopy$1$[ebp], edx
  0003a	66 0f 13 85 5c
	ff ff ff	 movlpd	 QWORD PTR _timeNext$[ebp], xmm0
  00042	0f 11 45 b4	 movups	 XMMWORD PTR _tmDRI$[ebp], xmm0
  00046	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _tmDRI$[ebp+32], 0
  0004d	8d 9e 44 01 00
	00		 lea	 ebx, DWORD PTR [esi+324]
  00053	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _tmNext$[ebp+32], 0
  0005a	8b cb		 mov	 ecx, ebx
  0005c	89 9d 44 ff ff
	ff		 mov	 DWORD PTR tv262[ebp], ebx
  00062	0f 11 45 c4	 movups	 XMMWORD PTR _tmDRI$[ebp+16], xmm0
  00066	0f 11 45 d8	 movups	 XMMWORD PTR _tmNext$[ebp], xmm0
  0006a	0f 11 45 e8	 movups	 XMMWORD PTR _tmNext$[ebp+16], xmm0
  0006e	e8 00 00 00 00	 call	 ?SetIndex@CDataBlockListUNK@@QAEXH@Z ; CDataBlockListUNK::SetIndex

; 259  : 	m_blaScaleDataTime[ p_nScaleType].SetIndex( 0);

  00073	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00076	6a 00		 push	 0
  00078	8b c8		 mov	 ecx, eax
  0007a	89 85 40 ff ff
	ff		 mov	 DWORD PTR tv259[ebp], eax
  00080	e8 00 00 00 00	 call	 ?SetIndex@CDataBlockListUNK@@QAEXH@Z ; CDataBlockListUNK::SetIndex

; 260  : 
; 261  : 	int nDRICount = m_blaScaleDataDRI[ p_nScaleType].GetItemCount();

  00085	8b cb		 mov	 ecx, ebx
  00087	e8 00 00 00 00	 call	 ?GetItemCount@CDataBlockListUNK@@QAEHXZ ; CDataBlockListUNK::GetItemCount
  0008c	89 85 48 ff ff
	ff		 mov	 DWORD PTR _nDRICount$1$[ebp], eax

; 262  : 	for( int i = 0; i < nDRICount; i++)

  00092	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$1$[ebp], 0
  0009c	85 c0		 test	 eax, eax
  0009e	0f 8e bd 07 00
	00		 jle	 $LN177@MakeScaleD
  000a4	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _timeNext$[ebp+4]
  000aa	8b 75 14	 mov	 esi, DWORD PTR _p_nSkipFactor$[ebp]
  000ad	8b 9d 5c ff ff
	ff		 mov	 ebx, DWORD PTR _timeNext$[ebp]
  000b3	57		 push	 edi
  000b4	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp___mktime64
  000ba	89 85 68 ff ff
	ff		 mov	 DWORD PTR _timeNext$1$[ebp], eax
$LL4@MakeScaleD:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h

; 227  : 	T* GetNext()	{	return ( T*)GetNextUNK();	}

  000c0	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR tv262[ebp]
  000c6	e8 00 00 00 00	 call	 ?GetNextUNK@CDataBlockListUNK@@QAEPAXXZ ; CDataBlockListUNK::GetNextUNK
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 265  : 		if( !pIReturn) break;

  000cb	85 c0		 test	 eax, eax
  000cd	0f 84 8d 07 00
	00		 je	 $LN178@MakeScaleD

; 266  : 		nDRI = *pIReturn;

  000d3	8b 00		 mov	 eax, DWORD PTR [eax]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h

; 227  : 	T* GetNext()	{	return ( T*)GetNextUNK();	}

  000d5	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR tv259[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 266  : 		nDRI = *pIReturn;

  000db	89 85 60 ff ff
	ff		 mov	 DWORD PTR _nDRI$1$[ebp], eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h

; 227  : 	T* GetNext()	{	return ( T*)GetNextUNK();	}

  000e1	e8 00 00 00 00	 call	 ?GetNextUNK@CDataBlockListUNK@@QAEPAXXZ ; CDataBlockListUNK::GetNextUNK
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 269  : 		if( !pMReturn) break;

  000e6	85 c0		 test	 eax, eax
  000e8	0f 84 72 07 00
	00		 je	 $LN178@MakeScaleD

; 270  : 		tmDRI = *pMReturn;

  000ee	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 271  : 
; 272  : 		if( 0 == p_blScaleTime.GetItemCount())

  000f1	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _p_blScaleTime$GSCopy$1$[ebp]
  000f7	0f 11 45 b4	 movups	 XMMWORD PTR _tmDRI$[ebp], xmm0
  000fb	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  000ff	0f 11 45 c4	 movups	 XMMWORD PTR _tmDRI$[ebp+16], xmm0
  00103	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00106	89 45 d4	 mov	 DWORD PTR _tmDRI$[ebp+32], eax
  00109	e8 00 00 00 00	 call	 ?GetItemCount@CDataBlockListUNK@@QAEHXZ ; CDataBlockListUNK::GetItemCount
  0010e	85 c0		 test	 eax, eax
  00110	0f 85 7c 03 00
	00		 jne	 $LN11@MakeScaleD

; 274  : 			p_blScaleTime.PushBack( tmDRI);

  00116	0f 10 45 b4	 movups	 xmm0, XMMWORD PTR _tmDRI$[ebp]
  0011a	8b 45 d4	 mov	 eax, DWORD PTR _tmDRI$[ebp+32]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h

; 173  : 		PushBackUNK(&Item);

  0011d	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _p_blScaleTime$GSCopy$1$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 274  : 			p_blScaleTime.PushBack( tmDRI);

  00123	0f 11 45 90	 movups	 XMMWORD PTR _Item$[ebp], xmm0
  00127	89 45 b0	 mov	 DWORD PTR _Item$[ebp+32], eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h

; 173  : 		PushBackUNK(&Item);

  0012a	8d 45 90	 lea	 eax, DWORD PTR _Item$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 274  : 			p_blScaleTime.PushBack( tmDRI);

  0012d	0f 10 45 c4	 movups	 xmm0, XMMWORD PTR _tmDRI$[ebp+16]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h

; 173  : 		PushBackUNK(&Item);

  00131	50		 push	 eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 274  : 			p_blScaleTime.PushBack( tmDRI);

  00132	0f 11 45 a0	 movups	 XMMWORD PTR _Item$[ebp+16], xmm0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h

; 173  : 		PushBackUNK(&Item);

  00136	e8 00 00 00 00	 call	 ?PushBackUNK@CDataBlockListUNK@@QAEXPAX@Z ; CDataBlockListUNK::PushBackUNK
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 275  : 			p_blScaleDRI.PushBack( nDRI);

  0013b	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _nDRI$1$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h

; 173  : 		PushBackUNK(&Item);

  00141	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _p_blScaleDRI$GSCopy$1$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 275  : 			p_blScaleDRI.PushBack( nDRI);

  00147	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Item$[ebp], eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h

; 173  : 		PushBackUNK(&Item);

  0014d	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _Item$[ebp]
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 ?PushBackUNK@CDataBlockListUNK@@QAEXPAX@Z ; CDataBlockListUNK::PushBackUNK
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 276  : 			switch( p_nScaleType)

  00159	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _p_nScaleType$GSCopy$1$[ebp]
  0015f	83 f8 05	 cmp	 eax, 5
  00162	0f 87 14 03 00
	00		 ja	 $LN45@MakeScaleD
  00168	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN169@MakeScaleD[eax*4]
$LN12@MakeScaleD:

; 278  : 				case 0:	tmNext.tm_year = tmDRI.tm_year + p_nSkipFactor - tmDRI.tm_year % p_nSkipFactor;

  0016f	8b 4d c8	 mov	 ecx, DWORD PTR _tmDRI$[ebp+20]
  00172	8b c1		 mov	 eax, ecx
  00174	99		 cdq
  00175	f7 fe		 idiv	 esi
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  00177	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 279  : 						tmNext.tm_mday = 1;

  0017a	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _tmNext$[ebp+12], 1
  00181	2b ca		 sub	 ecx, edx
  00183	03 ce		 add	 ecx, esi
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  00185	50		 push	 eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 278  : 				case 0:	tmNext.tm_year = tmDRI.tm_year + p_nSkipFactor - tmDRI.tm_year % p_nSkipFactor;

  00186	89 4d ec	 mov	 DWORD PTR _tmNext$[ebp+20], ecx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  00189	ff d7		 call	 edi
  0018b	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 353  : 			timeNext = mktime( &tmNext);

  0018e	89 95 68 ff ff
	ff		 mov	 DWORD PTR _timeNext$1$[ebp], edx
  00194	8b d8		 mov	 ebx, eax

; 354  : 			continue;

  00196	e9 ac 06 00 00	 jmp	 $LN2@MakeScaleD
$LN13@MakeScaleD:

; 280  : 						break;
; 281  : 				case 1:	tmNext.tm_year = tmDRI.tm_year;

  0019b	8b 45 c8	 mov	 eax, DWORD PTR _tmDRI$[ebp+20]

; 282  : 						tmNext.tm_mon = tmDRI.tm_mon + p_nSkipFactor - tmDRI.tm_mon % p_nSkipFactor;

  0019e	8b 4d c4	 mov	 ecx, DWORD PTR _tmDRI$[ebp+16]
  001a1	89 45 ec	 mov	 DWORD PTR _tmNext$[ebp+20], eax
  001a4	8b c1		 mov	 eax, ecx
  001a6	99		 cdq
  001a7	f7 fe		 idiv	 esi
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  001a9	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 283  : 						tmNext.tm_mday = 1;

  001ac	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _tmNext$[ebp+12], 1
  001b3	2b ca		 sub	 ecx, edx
  001b5	03 ce		 add	 ecx, esi
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  001b7	50		 push	 eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 282  : 						tmNext.tm_mon = tmDRI.tm_mon + p_nSkipFactor - tmDRI.tm_mon % p_nSkipFactor;

  001b8	89 4d e8	 mov	 DWORD PTR _tmNext$[ebp+16], ecx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  001bb	ff d7		 call	 edi
  001bd	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 353  : 			timeNext = mktime( &tmNext);

  001c0	89 95 68 ff ff
	ff		 mov	 DWORD PTR _timeNext$1$[ebp], edx
  001c6	8b d8		 mov	 ebx, eax

; 354  : 			continue;

  001c8	e9 7a 06 00 00	 jmp	 $LN2@MakeScaleD
$LN14@MakeScaleD:

; 284  : 						break;
; 285  : 				case 2:	tmNext.tm_year = tmDRI.tm_year;

  001cd	8b 45 c8	 mov	 eax, DWORD PTR _tmDRI$[ebp+20]
  001d0	89 45 ec	 mov	 DWORD PTR _tmNext$[ebp+20], eax

; 286  : 						tmNext.tm_mon = tmDRI.tm_mon;

  001d3	8b 45 c4	 mov	 eax, DWORD PTR _tmDRI$[ebp+16]
  001d6	89 45 e8	 mov	 DWORD PTR _tmNext$[ebp+16], eax

; 287  : 						if( 1 == p_nSkipFactor)		tmNext.tm_mday = tmDRI.tm_mday + 1;

  001d9	83 fe 01	 cmp	 esi, 1
  001dc	75 1d		 jne	 SHORT $LN15@MakeScaleD
  001de	8b 45 c0	 mov	 eax, DWORD PTR _tmDRI$[ebp+12]
  001e1	40		 inc	 eax
  001e2	89 45 e4	 mov	 DWORD PTR _tmNext$[ebp+12], eax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  001e5	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
  001e8	50		 push	 eax
  001e9	ff d7		 call	 edi
  001eb	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 353  : 			timeNext = mktime( &tmNext);

  001ee	89 95 68 ff ff
	ff		 mov	 DWORD PTR _timeNext$1$[ebp], edx
  001f4	8b d8		 mov	 ebx, eax

; 354  : 			continue;

  001f6	e9 4c 06 00 00	 jmp	 $LN2@MakeScaleD
$LN15@MakeScaleD:

; 288  : 						else if( 7 == p_nSkipFactor)	tmNext.tm_mday = tmDRI.tm_mday + p_nSkipFactor - tmDRI.tm_wday + 1;

  001fb	83 fe 07	 cmp	 esi, 7
  001fe	75 22		 jne	 SHORT $LN17@MakeScaleD
  00200	8b 45 c0	 mov	 eax, DWORD PTR _tmDRI$[ebp+12]
  00203	2b 45 cc	 sub	 eax, DWORD PTR _tmDRI$[ebp+24]
  00206	83 c0 08	 add	 eax, 8
  00209	89 45 e4	 mov	 DWORD PTR _tmNext$[ebp+12], eax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  0020c	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
  0020f	50		 push	 eax
  00210	ff d7		 call	 edi
  00212	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 353  : 			timeNext = mktime( &tmNext);

  00215	89 95 68 ff ff
	ff		 mov	 DWORD PTR _timeNext$1$[ebp], edx
  0021b	8b d8		 mov	 ebx, eax

; 354  : 			continue;

  0021d	e9 25 06 00 00	 jmp	 $LN2@MakeScaleD
$LN17@MakeScaleD:

; 289  : 						else if( 14 == p_nSkipFactor || 28 == p_nSkipFactor)

  00222	83 fe 0e	 cmp	 esi, 14			; 0000000eH
  00225	74 65		 je	 SHORT $LN21@MakeScaleD
  00227	83 fe 1c	 cmp	 esi, 28			; 0000001cH
  0022a	74 60		 je	 SHORT $LN21@MakeScaleD

; 300  : 							}
; 301  : 						}
; 302  : 						else if( 31 == p_nSkipFactor)

  0022c	83 fe 1f	 cmp	 esi, 31			; 0000001fH
  0022f	75 21		 jne	 SHORT $LN26@MakeScaleD

; 303  : 						{
; 304  : 							tmNext.tm_mon++;

  00231	40		 inc	 eax

; 305  : 							tmNext.tm_mday = 1;

  00232	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _tmNext$[ebp+12], 1
  00239	89 45 e8	 mov	 DWORD PTR _tmNext$[ebp+16], eax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  0023c	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
  0023f	50		 push	 eax
  00240	ff d7		 call	 edi
  00242	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 353  : 			timeNext = mktime( &tmNext);

  00245	89 95 68 ff ff
	ff		 mov	 DWORD PTR _timeNext$1$[ebp], edx
  0024b	8b d8		 mov	 ebx, eax

; 354  : 			continue;

  0024d	e9 f5 05 00 00	 jmp	 $LN2@MakeScaleD
$LN26@MakeScaleD:

; 306  : 						}
; 307  : 						else // if( 2 == p_nSkipFactor) 2 and others
; 308  : 						{
; 309  : 							tmNext.tm_mday = tmDRI.tm_mday + p_nSkipFactor;

  00252	8b 45 c0	 mov	 eax, DWORD PTR _tmDRI$[ebp+12]
  00255	03 c6		 add	 eax, esi
  00257	89 45 e4	 mov	 DWORD PTR _tmNext$[ebp+12], eax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  0025a	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
  0025d	50		 push	 eax
  0025e	ff d7		 call	 edi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 311  : 							if( tmNext.tm_mon != tmDRI.tm_mon) tmNext.tm_mday = 0;

  00260	8b 45 e8	 mov	 eax, DWORD PTR _tmNext$[ebp+16]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  00263	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 311  : 							if( tmNext.tm_mon != tmDRI.tm_mon) tmNext.tm_mday = 0;

  00266	3b 45 c4	 cmp	 eax, DWORD PTR _tmDRI$[ebp+16]
  00269	0f 84 0d 02 00
	00		 je	 $LN45@MakeScaleD
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  0026f	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 311  : 							if( tmNext.tm_mon != tmDRI.tm_mon) tmNext.tm_mday = 0;

  00272	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _tmNext$[ebp+12], 0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  00279	50		 push	 eax
  0027a	ff d7		 call	 edi
  0027c	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 353  : 			timeNext = mktime( &tmNext);

  0027f	89 95 68 ff ff
	ff		 mov	 DWORD PTR _timeNext$1$[ebp], edx
  00285	8b d8		 mov	 ebx, eax

; 354  : 			continue;

  00287	e9 bb 05 00 00	 jmp	 $LN2@MakeScaleD
$LN21@MakeScaleD:

; 290  : 						{
; 291  : 							tmNext.tm_mday = tmDRI.tm_mday + 7 - tmDRI.tm_wday + 1;

  0028c	8b 45 c0	 mov	 eax, DWORD PTR _tmDRI$[ebp+12]
  0028f	2b 45 cc	 sub	 eax, DWORD PTR _tmDRI$[ebp+24]
  00292	83 c0 08	 add	 eax, 8
  00295	89 45 e4	 mov	 DWORD PTR _tmNext$[ebp+12], eax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  00298	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
  0029b	50		 push	 eax
  0029c	ff d7		 call	 edi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 293  : 							if( tmNext.tm_mon == tmDRI.tm_mon) tmNext.tm_mday += 7;

  0029e	8b 45 e8	 mov	 eax, DWORD PTR _tmNext$[ebp+16]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  002a1	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 293  : 							if( tmNext.tm_mon == tmDRI.tm_mon) tmNext.tm_mday += 7;

  002a4	3b 45 c4	 cmp	 eax, DWORD PTR _tmDRI$[ebp+16]
  002a7	75 04		 jne	 SHORT $LN22@MakeScaleD
  002a9	83 45 e4 07	 add	 DWORD PTR _tmNext$[ebp+12], 7
$LN22@MakeScaleD:

; 294  : 							if( 28 == p_nSkipFactor)

  002ad	83 fe 1c	 cmp	 esi, 28			; 0000001cH
  002b0	0f 85 c6 01 00
	00		 jne	 $LN45@MakeScaleD
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  002b6	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
  002b9	50		 push	 eax
  002ba	ff d7		 call	 edi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 297  : 								if( tmNext.tm_mon == tmDRI.tm_mon) tmNext.tm_mday += 7;

  002bc	8b 45 e8	 mov	 eax, DWORD PTR _tmNext$[ebp+16]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  002bf	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 297  : 								if( tmNext.tm_mon == tmDRI.tm_mon) tmNext.tm_mday += 7;

  002c2	3b 45 c4	 cmp	 eax, DWORD PTR _tmDRI$[ebp+16]
  002c5	75 04		 jne	 SHORT $LN24@MakeScaleD
  002c7	83 45 e4 07	 add	 DWORD PTR _tmNext$[ebp+12], 7
$LN24@MakeScaleD:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  002cb	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
  002ce	50		 push	 eax
  002cf	ff d7		 call	 edi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 299  : 								if( tmNext.tm_mon == tmDRI.tm_mon) tmNext.tm_mday += 7;

  002d1	8b 45 e8	 mov	 eax, DWORD PTR _tmNext$[ebp+16]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  002d4	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 299  : 								if( tmNext.tm_mon == tmDRI.tm_mon) tmNext.tm_mday += 7;

  002d7	3b 45 c4	 cmp	 eax, DWORD PTR _tmDRI$[ebp+16]
  002da	0f 85 9c 01 00
	00		 jne	 $LN45@MakeScaleD
  002e0	83 45 e4 07	 add	 DWORD PTR _tmNext$[ebp+12], 7
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  002e4	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
  002e7	50		 push	 eax
  002e8	ff d7		 call	 edi
  002ea	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 353  : 			timeNext = mktime( &tmNext);

  002ed	89 95 68 ff ff
	ff		 mov	 DWORD PTR _timeNext$1$[ebp], edx
  002f3	8b d8		 mov	 ebx, eax

; 354  : 			continue;

  002f5	e9 4d 05 00 00	 jmp	 $LN2@MakeScaleD
$LN29@MakeScaleD:

; 312  : 						}
; 313  : 						break;
; 314  : 				case 3:	tmNext.tm_year = tmDRI.tm_year;

  002fa	8b 45 c8	 mov	 eax, DWORD PTR _tmDRI$[ebp+20]
  002fd	89 45 ec	 mov	 DWORD PTR _tmNext$[ebp+20], eax

; 315  : 						tmNext.tm_mon = tmDRI.tm_mon;

  00300	8b 45 c4	 mov	 eax, DWORD PTR _tmDRI$[ebp+16]
  00303	89 45 e8	 mov	 DWORD PTR _tmNext$[ebp+16], eax

; 316  : 						tmNext.tm_mday = tmDRI.tm_mday;

  00306	8b 45 c0	 mov	 eax, DWORD PTR _tmDRI$[ebp+12]
  00309	89 45 e4	 mov	 DWORD PTR _tmNext$[ebp+12], eax

; 317  : 						if( 1 == p_nSkipFactor)		tmNext.tm_hour = tmDRI.tm_hour + 1;

  0030c	83 fe 01	 cmp	 esi, 1
  0030f	75 1d		 jne	 SHORT $LN30@MakeScaleD
  00311	8b 45 bc	 mov	 eax, DWORD PTR _tmDRI$[ebp+8]
  00314	40		 inc	 eax
  00315	89 45 e0	 mov	 DWORD PTR _tmNext$[ebp+8], eax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  00318	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
  0031b	50		 push	 eax
  0031c	ff d7		 call	 edi
  0031e	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 353  : 			timeNext = mktime( &tmNext);

  00321	89 95 68 ff ff
	ff		 mov	 DWORD PTR _timeNext$1$[ebp], edx
  00327	8b d8		 mov	 ebx, eax

; 354  : 			continue;

  00329	e9 19 05 00 00	 jmp	 $LN2@MakeScaleD
$LN30@MakeScaleD:

; 318  : 						else if( 2 <= p_nSkipFactor)

  0032e	83 fe 02	 cmp	 esi, 2
  00331	0f 8c 45 01 00
	00		 jl	 $LN45@MakeScaleD

; 319  : 						{
; 320  : 							tmNext.tm_hour = tmDRI.tm_hour + p_nSkipFactor;
; 321  : 							if( CChartInfo::HTS != p_eChartMode) tmNext.tm_hour -= tmDRI.tm_hour % p_nSkipFactor;

  00337	83 7d 18 01	 cmp	 DWORD PTR _p_eChartMode$[ebp], 1
  0033b	8b 45 bc	 mov	 eax, DWORD PTR _tmDRI$[ebp+8]
  0033e	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  00341	89 4d e0	 mov	 DWORD PTR _tmNext$[ebp+8], ecx
  00344	74 08		 je	 SHORT $LN33@MakeScaleD
  00346	99		 cdq
  00347	f7 fe		 idiv	 esi
  00349	2b ca		 sub	 ecx, edx
  0034b	89 4d e0	 mov	 DWORD PTR _tmNext$[ebp+8], ecx
$LN33@MakeScaleD:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  0034e	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
  00351	50		 push	 eax
  00352	ff d7		 call	 edi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 323  : 							if( tmNext.tm_mday != tmDRI.tm_mday) tmNext.tm_hour = 0;

  00354	8b 45 e4	 mov	 eax, DWORD PTR _tmNext$[ebp+12]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  00357	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 323  : 							if( tmNext.tm_mday != tmDRI.tm_mday) tmNext.tm_hour = 0;

  0035a	3b 45 c0	 cmp	 eax, DWORD PTR _tmDRI$[ebp+12]
  0035d	0f 84 19 01 00
	00		 je	 $LN45@MakeScaleD
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  00363	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 323  : 							if( tmNext.tm_mday != tmDRI.tm_mday) tmNext.tm_hour = 0;

  00366	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _tmNext$[ebp+8], 0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  0036d	50		 push	 eax
  0036e	ff d7		 call	 edi
  00370	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 353  : 			timeNext = mktime( &tmNext);

  00373	89 95 68 ff ff
	ff		 mov	 DWORD PTR _timeNext$1$[ebp], edx
  00379	8b d8		 mov	 ebx, eax

; 354  : 			continue;

  0037b	e9 c7 04 00 00	 jmp	 $LN2@MakeScaleD
$LN35@MakeScaleD:

; 324  : 						}
; 325  : 						break;
; 326  : 				case 4:	tmNext.tm_year = tmDRI.tm_year;

  00380	8b 45 c8	 mov	 eax, DWORD PTR _tmDRI$[ebp+20]
  00383	89 45 ec	 mov	 DWORD PTR _tmNext$[ebp+20], eax

; 327  : 						tmNext.tm_mon = tmDRI.tm_mon;

  00386	8b 45 c4	 mov	 eax, DWORD PTR _tmDRI$[ebp+16]
  00389	89 45 e8	 mov	 DWORD PTR _tmNext$[ebp+16], eax

; 328  : 						tmNext.tm_mday = tmDRI.tm_mday;

  0038c	8b 45 c0	 mov	 eax, DWORD PTR _tmDRI$[ebp+12]
  0038f	89 45 e4	 mov	 DWORD PTR _tmNext$[ebp+12], eax

; 329  : 						tmNext.tm_hour = tmDRI.tm_hour;

  00392	8b 45 bc	 mov	 eax, DWORD PTR _tmDRI$[ebp+8]
  00395	89 45 e0	 mov	 DWORD PTR _tmNext$[ebp+8], eax

; 330  : 						if( 1 == p_nSkipFactor)		tmNext.tm_min = tmDRI.tm_min + 1;

  00398	83 fe 01	 cmp	 esi, 1
  0039b	75 1d		 jne	 SHORT $LN36@MakeScaleD
  0039d	8b 45 b8	 mov	 eax, DWORD PTR _tmDRI$[ebp+4]
  003a0	40		 inc	 eax
  003a1	89 45 dc	 mov	 DWORD PTR _tmNext$[ebp+4], eax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  003a4	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
  003a7	50		 push	 eax
  003a8	ff d7		 call	 edi
  003aa	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 353  : 			timeNext = mktime( &tmNext);

  003ad	89 95 68 ff ff
	ff		 mov	 DWORD PTR _timeNext$1$[ebp], edx
  003b3	8b d8		 mov	 ebx, eax

; 354  : 			continue;

  003b5	e9 8d 04 00 00	 jmp	 $LN2@MakeScaleD
$LN36@MakeScaleD:

; 331  : 						else if( 2 <= p_nSkipFactor)

  003ba	83 fe 02	 cmp	 esi, 2
  003bd	0f 8c b9 00 00
	00		 jl	 $LN45@MakeScaleD

; 333  : 							tmNext.tm_min = tmDRI.tm_min + p_nSkipFactor - tmDRI.tm_min % p_nSkipFactor;

  003c3	8b 4d b8	 mov	 ecx, DWORD PTR _tmDRI$[ebp+4]
  003c6	8b c1		 mov	 eax, ecx
  003c8	99		 cdq
  003c9	f7 fe		 idiv	 esi
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  003cb	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 333  : 							tmNext.tm_min = tmDRI.tm_min + p_nSkipFactor - tmDRI.tm_min % p_nSkipFactor;

  003ce	2b ca		 sub	 ecx, edx
  003d0	03 ce		 add	 ecx, esi
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  003d2	50		 push	 eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 333  : 							tmNext.tm_min = tmDRI.tm_min + p_nSkipFactor - tmDRI.tm_min % p_nSkipFactor;

  003d3	89 4d dc	 mov	 DWORD PTR _tmNext$[ebp+4], ecx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  003d6	ff d7		 call	 edi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 335  : 							if( tmNext.tm_mday != tmDRI.tm_mday) tmNext.tm_hour = 0;

  003d8	8b 45 e4	 mov	 eax, DWORD PTR _tmNext$[ebp+12]
  003db	33 d2		 xor	 edx, edx
  003dd	8b 4d e0	 mov	 ecx, DWORD PTR _tmNext$[ebp+8]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  003e0	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 335  : 							if( tmNext.tm_mday != tmDRI.tm_mday) tmNext.tm_hour = 0;

  003e3	3b 45 c0	 cmp	 eax, DWORD PTR _tmDRI$[ebp+12]
  003e6	0f 45 ca	 cmovne	 ecx, edx
  003e9	89 4d e0	 mov	 DWORD PTR _tmNext$[ebp+8], ecx

; 336  : 							if( tmNext.tm_hour != tmDRI.tm_hour) tmNext.tm_min = 0;

  003ec	3b 4d bc	 cmp	 ecx, DWORD PTR _tmDRI$[ebp+8]
  003ef	0f 84 87 00 00
	00		 je	 $LN45@MakeScaleD
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  003f5	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 336  : 							if( tmNext.tm_hour != tmDRI.tm_hour) tmNext.tm_min = 0;

  003f8	89 55 dc	 mov	 DWORD PTR _tmNext$[ebp+4], edx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  003fb	50		 push	 eax
  003fc	ff d7		 call	 edi
  003fe	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 353  : 			timeNext = mktime( &tmNext);

  00401	89 95 68 ff ff
	ff		 mov	 DWORD PTR _timeNext$1$[ebp], edx
  00407	8b d8		 mov	 ebx, eax

; 354  : 			continue;

  00409	e9 39 04 00 00	 jmp	 $LN2@MakeScaleD
$LN41@MakeScaleD:

; 337  : 						}
; 338  : 						break;
; 339  : 				case 5:	tmNext.tm_year = tmDRI.tm_year;

  0040e	8b 45 c8	 mov	 eax, DWORD PTR _tmDRI$[ebp+20]
  00411	89 45 ec	 mov	 DWORD PTR _tmNext$[ebp+20], eax

; 340  : 						tmNext.tm_mon = tmDRI.tm_mon;

  00414	8b 45 c4	 mov	 eax, DWORD PTR _tmDRI$[ebp+16]
  00417	89 45 e8	 mov	 DWORD PTR _tmNext$[ebp+16], eax

; 341  : 						tmNext.tm_mday = tmDRI.tm_mday;

  0041a	8b 45 c0	 mov	 eax, DWORD PTR _tmDRI$[ebp+12]
  0041d	89 45 e4	 mov	 DWORD PTR _tmNext$[ebp+12], eax

; 342  : 						tmNext.tm_hour = tmDRI.tm_hour;

  00420	8b 45 bc	 mov	 eax, DWORD PTR _tmDRI$[ebp+8]
  00423	89 45 e0	 mov	 DWORD PTR _tmNext$[ebp+8], eax

; 343  : 						tmNext.tm_min = tmDRI.tm_min;

  00426	8b 45 b8	 mov	 eax, DWORD PTR _tmDRI$[ebp+4]
  00429	89 45 dc	 mov	 DWORD PTR _tmNext$[ebp+4], eax

; 344  : 						if( 1 == p_nSkipFactor)		tmNext.tm_sec = tmDRI.tm_sec + 1;

  0042c	83 fe 01	 cmp	 esi, 1
  0042f	75 1d		 jne	 SHORT $LN42@MakeScaleD
  00431	8b 45 b4	 mov	 eax, DWORD PTR _tmDRI$[ebp]
  00434	40		 inc	 eax
  00435	89 45 d8	 mov	 DWORD PTR _tmNext$[ebp], eax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  00438	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
  0043b	50		 push	 eax
  0043c	ff d7		 call	 edi
  0043e	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 353  : 			timeNext = mktime( &tmNext);

  00441	89 95 68 ff ff
	ff		 mov	 DWORD PTR _timeNext$1$[ebp], edx
  00447	8b d8		 mov	 ebx, eax

; 354  : 			continue;

  00449	e9 f9 03 00 00	 jmp	 $LN2@MakeScaleD
$LN42@MakeScaleD:

; 345  : 						else if( 2 <= p_nSkipFactor)

  0044e	83 fe 02	 cmp	 esi, 2
  00451	7c 29		 jl	 SHORT $LN45@MakeScaleD

; 347  : 							tmNext.tm_sec = tmDRI.tm_sec + p_nSkipFactor - tmDRI.tm_sec % p_nSkipFactor;

  00453	8b 4d b4	 mov	 ecx, DWORD PTR _tmDRI$[ebp]
  00456	8b c1		 mov	 eax, ecx
  00458	99		 cdq
  00459	f7 fe		 idiv	 esi
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  0045b	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 347  : 							tmNext.tm_sec = tmDRI.tm_sec + p_nSkipFactor - tmDRI.tm_sec % p_nSkipFactor;

  0045e	2b ca		 sub	 ecx, edx
  00460	03 ce		 add	 ecx, esi
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  00462	50		 push	 eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 347  : 							tmNext.tm_sec = tmDRI.tm_sec + p_nSkipFactor - tmDRI.tm_sec % p_nSkipFactor;

  00463	89 4d d8	 mov	 DWORD PTR _tmNext$[ebp], ecx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  00466	ff d7		 call	 edi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 349  : 							if( tmNext.tm_min != tmDRI.tm_min) tmNext.tm_sec = 0;

  00468	8b 45 dc	 mov	 eax, DWORD PTR _tmNext$[ebp+4]
  0046b	33 d2		 xor	 edx, edx
  0046d	8b 4d d8	 mov	 ecx, DWORD PTR _tmNext$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  00470	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 349  : 							if( tmNext.tm_min != tmDRI.tm_min) tmNext.tm_sec = 0;

  00473	3b 45 b8	 cmp	 eax, DWORD PTR _tmDRI$[ebp+4]
  00476	0f 45 ca	 cmovne	 ecx, edx
  00479	89 4d d8	 mov	 DWORD PTR _tmNext$[ebp], ecx
$LN45@MakeScaleD:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  0047c	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
  0047f	50		 push	 eax
  00480	ff d7		 call	 edi
  00482	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 353  : 			timeNext = mktime( &tmNext);

  00485	89 95 68 ff ff
	ff		 mov	 DWORD PTR _timeNext$1$[ebp], edx
  0048b	8b d8		 mov	 ebx, eax

; 354  : 			continue;

  0048d	e9 b5 03 00 00	 jmp	 $LN2@MakeScaleD
$LN11@MakeScaleD:

; 355  : 		}
; 356  : 
; 357  : 		BOOL bNext = FALSE;
; 358  : 		if( nDRICount - 1 == i) bNext = TRUE;

  00492	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _nDRICount$1$[ebp]
  00498	48		 dec	 eax
  00499	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _bNext$1$[ebp], 0
  004a3	3b 85 54 ff ff
	ff		 cmp	 eax, DWORD PTR _i$1$[ebp]
  004a9	0f 84 4c 03 00
	00		 je	 $LN168@MakeScaleD

; 359  : 		else switch( p_nScaleType)

  004af	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _p_nScaleType$GSCopy$1$[ebp]
  004b5	83 f8 05	 cmp	 eax, 5
  004b8	0f 87 89 03 00
	00		 ja	 $LN2@MakeScaleD
  004be	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN170@MakeScaleD[eax*4]
$LN48@MakeScaleD:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  004c5	8d 45 b4	 lea	 eax, DWORD PTR _tmDRI$[ebp]
  004c8	50		 push	 eax
  004c9	ff d7		 call	 edi
  004cb	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 361  : 			case 0:	if( timeNext <= mktime( &tmDRI))

  004ce	39 95 68 ff ff
	ff		 cmp	 DWORD PTR _timeNext$1$[ebp], edx
  004d4	0f 8f 6d 03 00
	00		 jg	 $LN2@MakeScaleD
  004da	7c 08		 jl	 SHORT $LN171@MakeScaleD
  004dc	3b d8		 cmp	 ebx, eax
  004de	0f 87 63 03 00
	00		 ja	 $LN2@MakeScaleD
$LN171@MakeScaleD:

; 362  : 					{
; 363  : 						bNext = TRUE;
; 364  : 						tmNext.tm_year += p_nSkipFactor;

  004e4	01 75 ec	 add	 DWORD PTR _tmNext$[ebp+20], esi

; 365  : 						timeNext = mktime( &tmNext);
; 366  : 					}
; 367  : 					break;

  004e7	e9 fe 02 00 00	 jmp	 $LN93@MakeScaleD
$LN50@MakeScaleD:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  004ec	8d 45 b4	 lea	 eax, DWORD PTR _tmDRI$[ebp]
  004ef	50		 push	 eax
  004f0	ff d7		 call	 edi
  004f2	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 368  : 			case 1:	if( timeNext <= mktime( &tmDRI))

  004f5	39 95 68 ff ff
	ff		 cmp	 DWORD PTR _timeNext$1$[ebp], edx
  004fb	0f 8f 46 03 00
	00		 jg	 $LN2@MakeScaleD
  00501	7c 08		 jl	 SHORT $LN172@MakeScaleD
  00503	3b d8		 cmp	 ebx, eax
  00505	0f 87 3c 03 00
	00		 ja	 $LN2@MakeScaleD
$LN172@MakeScaleD:

; 369  : 					{
; 370  : 						tmNext.tm_year = tmDRI.tm_year;

  0050b	8b 45 c8	 mov	 eax, DWORD PTR _tmDRI$[ebp+20]
  0050e	89 45 ec	 mov	 DWORD PTR _tmNext$[ebp+20], eax

; 371  : 						if( p_nSkipFactor == 1 || 11 != tmDRI.tm_mon)

  00511	83 fe 01	 cmp	 esi, 1
  00514	74 0e		 je	 SHORT $LN54@MakeScaleD
  00516	83 7d c4 0b	 cmp	 DWORD PTR _tmDRI$[ebp+16], 11 ; 0000000bH
  0051a	75 08		 jne	 SHORT $LN54@MakeScaleD

; 375  : 						}
; 376  : 						else tmNext.tm_mon += 1;

  0051c	ff 45 e8	 inc	 DWORD PTR _tmNext$[ebp+16]
  0051f	e9 27 01 00 00	 jmp	 $LN70@MakeScaleD
$LN54@MakeScaleD:

; 372  : 						{
; 373  : 							bNext = TRUE;		// Do not show Descember in skip mode.
; 374  : 							tmNext.tm_mon += p_nSkipFactor;

  00524	01 75 e8	 add	 DWORD PTR _tmNext$[ebp+16], esi
  00527	c7 85 64 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _bNext$1$[ebp], 1

; 377  : 						timeNext = mktime( &tmNext);
; 378  : 					}
; 379  : 					break;

  00531	e9 15 01 00 00	 jmp	 $LN70@MakeScaleD
$LN55@MakeScaleD:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  00536	8d 45 b4	 lea	 eax, DWORD PTR _tmDRI$[ebp]
  00539	50		 push	 eax
  0053a	ff d7		 call	 edi
  0053c	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 380  : 			case 2:	if( timeNext <= mktime( &tmDRI))

  0053f	39 95 68 ff ff
	ff		 cmp	 DWORD PTR _timeNext$1$[ebp], edx
  00545	0f 8f fc 02 00
	00		 jg	 $LN2@MakeScaleD
  0054b	7c 08		 jl	 SHORT $LN173@MakeScaleD
  0054d	3b d8		 cmp	 ebx, eax
  0054f	0f 87 f2 02 00
	00		 ja	 $LN2@MakeScaleD
$LN173@MakeScaleD:

; 381  : 					{
; 382  : 						bNext = TRUE;
; 383  : 						tmNext.tm_year = tmDRI.tm_year;

  00555	8b 45 c8	 mov	 eax, DWORD PTR _tmDRI$[ebp+20]
  00558	89 45 ec	 mov	 DWORD PTR _tmNext$[ebp+20], eax

; 384  : 						tmNext.tm_mon = tmDRI.tm_mon;

  0055b	8b 45 c4	 mov	 eax, DWORD PTR _tmDRI$[ebp+16]
  0055e	c7 85 64 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _bNext$1$[ebp], 1
  00568	89 45 e8	 mov	 DWORD PTR _tmNext$[ebp+16], eax

; 385  : 						if( 1 == p_nSkipFactor)		tmNext.tm_mday = tmDRI.tm_mday + 1;

  0056b	83 fe 01	 cmp	 esi, 1
  0056e	75 0c		 jne	 SHORT $LN57@MakeScaleD
  00570	8b 45 c0	 mov	 eax, DWORD PTR _tmDRI$[ebp+12]
  00573	40		 inc	 eax
  00574	89 45 e4	 mov	 DWORD PTR _tmNext$[ebp+12], eax
  00577	e9 cf 00 00 00	 jmp	 $LN70@MakeScaleD
$LN57@MakeScaleD:

; 386  : 						else if( 7 == p_nSkipFactor)	tmNext.tm_mday = tmDRI.tm_mday + p_nSkipFactor - tmDRI.tm_wday + 1;

  0057c	83 fe 07	 cmp	 esi, 7
  0057f	75 11		 jne	 SHORT $LN59@MakeScaleD
  00581	8b 45 c0	 mov	 eax, DWORD PTR _tmDRI$[ebp+12]
  00584	2b 45 cc	 sub	 eax, DWORD PTR _tmDRI$[ebp+24]
  00587	83 c0 08	 add	 eax, 8
  0058a	89 45 e4	 mov	 DWORD PTR _tmNext$[ebp+12], eax
  0058d	e9 b9 00 00 00	 jmp	 $LN70@MakeScaleD
$LN59@MakeScaleD:

; 387  : 						else if( 14 == p_nSkipFactor || 28 == p_nSkipFactor)

  00592	83 fe 0e	 cmp	 esi, 14			; 0000000eH
  00595	74 40		 je	 SHORT $LN63@MakeScaleD
  00597	83 fe 1c	 cmp	 esi, 28			; 0000001cH
  0059a	74 3b		 je	 SHORT $LN63@MakeScaleD

; 401  : 							}
; 402  : 						}
; 403  : 						else if( 31 == p_nSkipFactor)

  0059c	83 fe 1f	 cmp	 esi, 31			; 0000001fH
  0059f	75 10		 jne	 SHORT $LN71@MakeScaleD

; 404  : 						{
; 405  : 							tmNext.tm_mon++;

  005a1	40		 inc	 eax

; 406  : 							tmNext.tm_mday = 1;

  005a2	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _tmNext$[ebp+12], 1
  005a9	89 45 e8	 mov	 DWORD PTR _tmNext$[ebp+16], eax

; 407  : 						}

  005ac	e9 9a 00 00 00	 jmp	 $LN70@MakeScaleD
$LN71@MakeScaleD:

; 408  : 						else // if( 2 == p_nSkipFactor) 2 and others
; 409  : 						{
; 410  : 							tmNext.tm_mday = tmDRI.tm_mday + p_nSkipFactor;

  005b1	8b 45 c0	 mov	 eax, DWORD PTR _tmDRI$[ebp+12]
  005b4	03 c6		 add	 eax, esi
  005b6	89 45 e4	 mov	 DWORD PTR _tmNext$[ebp+12], eax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  005b9	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
  005bc	50		 push	 eax
  005bd	ff d7		 call	 edi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 412  : 							if( tmNext.tm_mon != tmDRI.tm_mon) tmNext.tm_mday = 0;

  005bf	8b 45 e8	 mov	 eax, DWORD PTR _tmNext$[ebp+16]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  005c2	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 412  : 							if( tmNext.tm_mon != tmDRI.tm_mon) tmNext.tm_mday = 0;

  005c5	3b 45 c4	 cmp	 eax, DWORD PTR _tmDRI$[ebp+16]
  005c8	0f 84 7d 00 00
	00		 je	 $LN70@MakeScaleD
  005ce	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _tmNext$[ebp+12], 0
  005d5	eb 74		 jmp	 SHORT $LN70@MakeScaleD
$LN63@MakeScaleD:

; 388  : 						{
; 389  : 							tmNext.tm_mday = tmDRI.tm_mday + 7 - tmDRI.tm_wday + 1;

  005d7	8b 45 c0	 mov	 eax, DWORD PTR _tmDRI$[ebp+12]
  005da	2b 45 cc	 sub	 eax, DWORD PTR _tmDRI$[ebp+24]
  005dd	83 c0 08	 add	 eax, 8
  005e0	89 45 e4	 mov	 DWORD PTR _tmNext$[ebp+12], eax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  005e3	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
  005e6	50		 push	 eax
  005e7	ff d7		 call	 edi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 391  : 							if( tmNext.tm_mon == tmDRI.tm_mon) tmNext.tm_mday += 7;

  005e9	8b 45 e8	 mov	 eax, DWORD PTR _tmNext$[ebp+16]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  005ec	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 391  : 							if( tmNext.tm_mon == tmDRI.tm_mon) tmNext.tm_mday += 7;

  005ef	3b 45 c4	 cmp	 eax, DWORD PTR _tmDRI$[ebp+16]
  005f2	75 06		 jne	 SHORT $LN64@MakeScaleD
  005f4	83 45 e4 07	 add	 DWORD PTR _tmNext$[ebp+12], 7
  005f8	eb 0a		 jmp	 SHORT $LN65@MakeScaleD
$LN64@MakeScaleD:

; 392  : 							else bNext = FALSE;

  005fa	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _bNext$1$[ebp], 0
$LN65@MakeScaleD:

; 393  : 							if( 28 == p_nSkipFactor)

  00604	83 fe 1c	 cmp	 esi, 28			; 0000001cH
  00607	75 42		 jne	 SHORT $LN70@MakeScaleD
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  00609	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
  0060c	50		 push	 eax
  0060d	ff d7		 call	 edi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 396  : 								if( tmNext.tm_mon == tmDRI.tm_mon) tmNext.tm_mday += 7;

  0060f	8b 45 e8	 mov	 eax, DWORD PTR _tmNext$[ebp+16]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  00612	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 396  : 								if( tmNext.tm_mon == tmDRI.tm_mon) tmNext.tm_mday += 7;

  00615	3b 45 c4	 cmp	 eax, DWORD PTR _tmDRI$[ebp+16]
  00618	75 06		 jne	 SHORT $LN67@MakeScaleD
  0061a	83 45 e4 07	 add	 DWORD PTR _tmNext$[ebp+12], 7
  0061e	eb 0a		 jmp	 SHORT $LN68@MakeScaleD
$LN67@MakeScaleD:

; 397  : 								else bNext = FALSE;

  00620	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _bNext$1$[ebp], 0
$LN68@MakeScaleD:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  0062a	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
  0062d	50		 push	 eax
  0062e	ff d7		 call	 edi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 399  : 								if( tmNext.tm_mon == tmDRI.tm_mon) tmNext.tm_mday += 7;

  00630	8b 45 e8	 mov	 eax, DWORD PTR _tmNext$[ebp+16]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  00633	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 399  : 								if( tmNext.tm_mon == tmDRI.tm_mon) tmNext.tm_mday += 7;

  00636	3b 45 c4	 cmp	 eax, DWORD PTR _tmDRI$[ebp+16]
  00639	75 06		 jne	 SHORT $LN69@MakeScaleD
  0063b	83 45 e4 07	 add	 DWORD PTR _tmNext$[ebp+12], 7
  0063f	eb 0a		 jmp	 SHORT $LN70@MakeScaleD
$LN69@MakeScaleD:

; 400  : 								else bNext = FALSE;

  00641	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _bNext$1$[ebp], 0
$LN70@MakeScaleD:

; 465  : 						}
; 466  : 						timeNext = mktime( &tmNext);
; 467  : 					}
; 468  : 					break;
; 469  : 		}
; 470  : 
; 471  : 		if( !bNext) continue;

  0064b	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
  0064e	50		 push	 eax
  0064f	ff d7		 call	 edi
  00651	83 c4 04	 add	 esp, 4
  00654	89 95 68 ff ff
	ff		 mov	 DWORD PTR _timeNext$1$[ebp], edx
  0065a	83 bd 64 ff ff
	ff 00		 cmp	 DWORD PTR _bNext$1$[ebp], 0
  00661	8b d8		 mov	 ebx, eax
  00663	0f 84 de 01 00
	00		 je	 $LN2@MakeScaleD
  00669	e9 8d 01 00 00	 jmp	 $LN168@MakeScaleD
$LN74@MakeScaleD:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  0066e	8d 45 b4	 lea	 eax, DWORD PTR _tmDRI$[ebp]
  00671	50		 push	 eax
  00672	ff d7		 call	 edi
  00674	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 417  : 			case 3:	if( timeNext <= mktime( &tmDRI))

  00677	39 95 68 ff ff
	ff		 cmp	 DWORD PTR _timeNext$1$[ebp], edx
  0067d	0f 8f c4 01 00
	00		 jg	 $LN2@MakeScaleD
  00683	7c 08		 jl	 SHORT $LN174@MakeScaleD
  00685	3b d8		 cmp	 ebx, eax
  00687	0f 87 ba 01 00
	00		 ja	 $LN2@MakeScaleD
$LN174@MakeScaleD:

; 418  : 					{
; 419  : 						bNext = TRUE;
; 420  : 						tmNext.tm_year = tmDRI.tm_year;

  0068d	8b 45 c8	 mov	 eax, DWORD PTR _tmDRI$[ebp+20]
  00690	89 45 ec	 mov	 DWORD PTR _tmNext$[ebp+20], eax

; 421  : 						tmNext.tm_mon = tmDRI.tm_mon;

  00693	8b 45 c4	 mov	 eax, DWORD PTR _tmDRI$[ebp+16]
  00696	89 45 e8	 mov	 DWORD PTR _tmNext$[ebp+16], eax

; 422  : 						tmNext.tm_mday = tmDRI.tm_mday;

  00699	8b 45 c0	 mov	 eax, DWORD PTR _tmDRI$[ebp+12]
  0069c	89 45 e4	 mov	 DWORD PTR _tmNext$[ebp+12], eax

; 423  : 						if( 1 == p_nSkipFactor)		tmNext.tm_hour= tmDRI.tm_hour + 1;

  0069f	83 fe 01	 cmp	 esi, 1
  006a2	75 0c		 jne	 SHORT $LN76@MakeScaleD
  006a4	8b 45 bc	 mov	 eax, DWORD PTR _tmDRI$[ebp+8]
  006a7	40		 inc	 eax
  006a8	89 45 e0	 mov	 DWORD PTR _tmNext$[ebp+8], eax
  006ab	e9 3a 01 00 00	 jmp	 $LN93@MakeScaleD
$LN76@MakeScaleD:

; 424  : 						else if( 2 <= p_nSkipFactor)

  006b0	83 fe 02	 cmp	 esi, 2
  006b3	0f 8c 31 01 00
	00		 jl	 $LN93@MakeScaleD

; 425  : 						{
; 426  : 							tmNext.tm_hour = tmDRI.tm_hour + p_nSkipFactor;
; 427  : 							if( CChartInfo::HTS != p_eChartMode) tmNext.tm_hour -= tmDRI.tm_hour % p_nSkipFactor;

  006b9	83 7d 18 01	 cmp	 DWORD PTR _p_eChartMode$[ebp], 1
  006bd	8b 45 bc	 mov	 eax, DWORD PTR _tmDRI$[ebp+8]
  006c0	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  006c3	89 4d e0	 mov	 DWORD PTR _tmNext$[ebp+8], ecx
  006c6	74 08		 je	 SHORT $LN79@MakeScaleD
  006c8	99		 cdq
  006c9	f7 fe		 idiv	 esi
  006cb	2b ca		 sub	 ecx, edx
  006cd	89 4d e0	 mov	 DWORD PTR _tmNext$[ebp+8], ecx
$LN79@MakeScaleD:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  006d0	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
  006d3	50		 push	 eax
  006d4	ff d7		 call	 edi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 429  : 							if( tmNext.tm_mday != tmDRI.tm_mday) tmNext.tm_hour = 0;

  006d6	8b 45 e4	 mov	 eax, DWORD PTR _tmNext$[ebp+12]
  006d9	33 d2		 xor	 edx, edx
  006db	8b 4d e0	 mov	 ecx, DWORD PTR _tmNext$[ebp+8]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  006de	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 429  : 							if( tmNext.tm_mday != tmDRI.tm_mday) tmNext.tm_hour = 0;

  006e1	3b 45 c0	 cmp	 eax, DWORD PTR _tmDRI$[ebp+12]
  006e4	0f 45 ca	 cmovne	 ecx, edx
  006e7	89 4d e0	 mov	 DWORD PTR _tmNext$[ebp+8], ecx

; 430  : 						}
; 431  : 						timeNext = mktime( &tmNext);
; 432  : 					}
; 433  : 					break;

  006ea	e9 fb 00 00 00	 jmp	 $LN93@MakeScaleD
$LN81@MakeScaleD:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  006ef	8d 45 b4	 lea	 eax, DWORD PTR _tmDRI$[ebp]
  006f2	50		 push	 eax
  006f3	ff d7		 call	 edi
  006f5	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 434  : 			case 4:	if( timeNext <= mktime( &tmDRI))

  006f8	39 95 68 ff ff
	ff		 cmp	 DWORD PTR _timeNext$1$[ebp], edx
  006fe	0f 8f 43 01 00
	00		 jg	 $LN2@MakeScaleD
  00704	7c 08		 jl	 SHORT $LN175@MakeScaleD
  00706	3b d8		 cmp	 ebx, eax
  00708	0f 87 39 01 00
	00		 ja	 $LN2@MakeScaleD
$LN175@MakeScaleD:

; 435  : 					{
; 436  : 						bNext = TRUE;
; 437  : 						tmNext.tm_year = tmDRI.tm_year;

  0070e	8b 45 c8	 mov	 eax, DWORD PTR _tmDRI$[ebp+20]
  00711	89 45 ec	 mov	 DWORD PTR _tmNext$[ebp+20], eax

; 438  : 						tmNext.tm_mon = tmDRI.tm_mon;

  00714	8b 45 c4	 mov	 eax, DWORD PTR _tmDRI$[ebp+16]
  00717	89 45 e8	 mov	 DWORD PTR _tmNext$[ebp+16], eax

; 439  : 						tmNext.tm_mday = tmDRI.tm_mday;

  0071a	8b 45 c0	 mov	 eax, DWORD PTR _tmDRI$[ebp+12]
  0071d	89 45 e4	 mov	 DWORD PTR _tmNext$[ebp+12], eax

; 440  : 						tmNext.tm_hour = tmDRI.tm_hour;

  00720	8b 45 bc	 mov	 eax, DWORD PTR _tmDRI$[ebp+8]
  00723	89 45 e0	 mov	 DWORD PTR _tmNext$[ebp+8], eax

; 441  : 						if( 1 == p_nSkipFactor)		tmNext.tm_min = tmDRI.tm_min + 1;

  00726	83 fe 01	 cmp	 esi, 1
  00729	75 0c		 jne	 SHORT $LN83@MakeScaleD
  0072b	8b 45 b8	 mov	 eax, DWORD PTR _tmDRI$[ebp+4]
  0072e	40		 inc	 eax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  0072f	89 45 dc	 mov	 DWORD PTR _tmNext$[ebp+4], eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 451  : 					break;

  00732	e9 b3 00 00 00	 jmp	 $LN93@MakeScaleD
$LN83@MakeScaleD:

; 442  : 						else if( 2 <= p_nSkipFactor)

  00737	83 fe 02	 cmp	 esi, 2
  0073a	0f 8c aa 00 00
	00		 jl	 $LN93@MakeScaleD

; 444  : 							tmNext.tm_min = tmDRI.tm_min + p_nSkipFactor - tmDRI.tm_min % p_nSkipFactor;

  00740	8b 4d b8	 mov	 ecx, DWORD PTR _tmDRI$[ebp+4]
  00743	8b c1		 mov	 eax, ecx
  00745	99		 cdq
  00746	f7 fe		 idiv	 esi
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  00748	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 444  : 							tmNext.tm_min = tmDRI.tm_min + p_nSkipFactor - tmDRI.tm_min % p_nSkipFactor;

  0074b	2b ca		 sub	 ecx, edx
  0074d	03 ce		 add	 ecx, esi
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  0074f	50		 push	 eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 444  : 							tmNext.tm_min = tmDRI.tm_min + p_nSkipFactor - tmDRI.tm_min % p_nSkipFactor;

  00750	89 4d dc	 mov	 DWORD PTR _tmNext$[ebp+4], ecx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  00753	ff d7		 call	 edi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 446  : 							if( tmNext.tm_mday != tmDRI.tm_mday) tmNext.tm_hour = 0;

  00755	8b 45 e4	 mov	 eax, DWORD PTR _tmNext$[ebp+12]
  00758	33 d2		 xor	 edx, edx
  0075a	8b 4d e0	 mov	 ecx, DWORD PTR _tmNext$[ebp+8]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  0075d	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 446  : 							if( tmNext.tm_mday != tmDRI.tm_mday) tmNext.tm_hour = 0;

  00760	3b 45 c0	 cmp	 eax, DWORD PTR _tmDRI$[ebp+12]

; 447  : 							if( tmNext.tm_hour != tmDRI.tm_hour) tmNext.tm_min = 0;

  00763	8b 45 dc	 mov	 eax, DWORD PTR _tmNext$[ebp+4]
  00766	0f 45 ca	 cmovne	 ecx, edx
  00769	3b 4d bc	 cmp	 ecx, DWORD PTR _tmDRI$[ebp+8]
  0076c	89 4d e0	 mov	 DWORD PTR _tmNext$[ebp+8], ecx
  0076f	0f 45 c2	 cmovne	 eax, edx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  00772	89 45 dc	 mov	 DWORD PTR _tmNext$[ebp+4], eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 451  : 					break;

  00775	eb 73		 jmp	 SHORT $LN93@MakeScaleD
$LN88@MakeScaleD:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  00777	8d 45 b4	 lea	 eax, DWORD PTR _tmDRI$[ebp]
  0077a	50		 push	 eax
  0077b	ff d7		 call	 edi
  0077d	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 452  : 			case 5:	if( timeNext <= mktime( &tmDRI))

  00780	39 95 68 ff ff
	ff		 cmp	 DWORD PTR _timeNext$1$[ebp], edx
  00786	0f 8f bb 00 00
	00		 jg	 $LN2@MakeScaleD
  0078c	7c 08		 jl	 SHORT $LN176@MakeScaleD
  0078e	3b d8		 cmp	 ebx, eax
  00790	0f 87 b1 00 00
	00		 ja	 $LN2@MakeScaleD
$LN176@MakeScaleD:

; 453  : 					{
; 454  : 						bNext = TRUE;
; 455  : 						tmNext.tm_year = tmDRI.tm_year;

  00796	8b 45 c8	 mov	 eax, DWORD PTR _tmDRI$[ebp+20]
  00799	89 45 ec	 mov	 DWORD PTR _tmNext$[ebp+20], eax

; 456  : 						tmNext.tm_mon = tmDRI.tm_mon;

  0079c	8b 45 c4	 mov	 eax, DWORD PTR _tmDRI$[ebp+16]
  0079f	89 45 e8	 mov	 DWORD PTR _tmNext$[ebp+16], eax

; 457  : 						tmNext.tm_mday = tmDRI.tm_mday;

  007a2	8b 45 c0	 mov	 eax, DWORD PTR _tmDRI$[ebp+12]
  007a5	89 45 e4	 mov	 DWORD PTR _tmNext$[ebp+12], eax

; 458  : 						tmNext.tm_min = tmDRI.tm_min;

  007a8	8b 45 b8	 mov	 eax, DWORD PTR _tmDRI$[ebp+4]
  007ab	89 45 dc	 mov	 DWORD PTR _tmNext$[ebp+4], eax

; 459  : 						if( 1 == p_nSkipFactor)		tmNext.tm_sec = tmDRI.tm_sec + 1;

  007ae	83 fe 01	 cmp	 esi, 1
  007b1	75 09		 jne	 SHORT $LN90@MakeScaleD
  007b3	8b 45 b4	 mov	 eax, DWORD PTR _tmDRI$[ebp]
  007b6	40		 inc	 eax
  007b7	89 45 d8	 mov	 DWORD PTR _tmNext$[ebp], eax
  007ba	eb 2e		 jmp	 SHORT $LN93@MakeScaleD
$LN90@MakeScaleD:

; 460  : 						else if( 2 <= p_nSkipFactor)

  007bc	83 fe 02	 cmp	 esi, 2
  007bf	7c 29		 jl	 SHORT $LN93@MakeScaleD

; 462  : 							tmNext.tm_sec = tmDRI.tm_sec + p_nSkipFactor - tmDRI.tm_sec % p_nSkipFactor;

  007c1	8b 4d b4	 mov	 ecx, DWORD PTR _tmDRI$[ebp]
  007c4	8b c1		 mov	 eax, ecx
  007c6	99		 cdq
  007c7	f7 fe		 idiv	 esi
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  007c9	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 462  : 							tmNext.tm_sec = tmDRI.tm_sec + p_nSkipFactor - tmDRI.tm_sec % p_nSkipFactor;

  007cc	2b ca		 sub	 ecx, edx
  007ce	03 ce		 add	 ecx, esi
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  007d0	50		 push	 eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 462  : 							tmNext.tm_sec = tmDRI.tm_sec + p_nSkipFactor - tmDRI.tm_sec % p_nSkipFactor;

  007d1	89 4d d8	 mov	 DWORD PTR _tmNext$[ebp], ecx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  007d4	ff d7		 call	 edi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 464  : 							if( tmNext.tm_min != tmDRI.tm_min) tmNext.tm_sec = 0;

  007d6	8b 45 dc	 mov	 eax, DWORD PTR _tmNext$[ebp+4]
  007d9	33 d2		 xor	 edx, edx
  007db	8b 4d d8	 mov	 ecx, DWORD PTR _tmNext$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  007de	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 464  : 							if( tmNext.tm_min != tmDRI.tm_min) tmNext.tm_sec = 0;

  007e1	3b 45 b8	 cmp	 eax, DWORD PTR _tmDRI$[ebp+4]
  007e4	0f 45 ca	 cmovne	 ecx, edx
  007e7	89 4d d8	 mov	 DWORD PTR _tmNext$[ebp], ecx
$LN93@MakeScaleD:

; 473  : 		p_blScaleTime.PushBack( tmDRI);

  007ea	8d 45 d8	 lea	 eax, DWORD PTR _tmNext$[ebp]
  007ed	50		 push	 eax
  007ee	ff d7		 call	 edi
  007f0	89 95 68 ff ff
	ff		 mov	 DWORD PTR _timeNext$1$[ebp], edx
  007f6	8b d8		 mov	 ebx, eax
  007f8	83 c4 04	 add	 esp, 4
$LN168@MakeScaleD:
  007fb	0f 10 45 b4	 movups	 xmm0, XMMWORD PTR _tmDRI$[ebp]
  007ff	8b 45 d4	 mov	 eax, DWORD PTR _tmDRI$[ebp+32]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h

; 173  : 		PushBackUNK(&Item);

  00802	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _p_blScaleTime$GSCopy$1$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 473  : 		p_blScaleTime.PushBack( tmDRI);

  00808	0f 11 85 6c ff
	ff ff		 movups	 XMMWORD PTR _Item$[ebp], xmm0
  0080f	89 45 8c	 mov	 DWORD PTR _Item$[ebp+32], eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h

; 173  : 		PushBackUNK(&Item);

  00812	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _Item$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 473  : 		p_blScaleTime.PushBack( tmDRI);

  00818	0f 10 45 c4	 movups	 xmm0, XMMWORD PTR _tmDRI$[ebp+16]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h

; 173  : 		PushBackUNK(&Item);

  0081c	50		 push	 eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 473  : 		p_blScaleTime.PushBack( tmDRI);

  0081d	0f 11 85 7c ff
	ff ff		 movups	 XMMWORD PTR _Item$[ebp+16], xmm0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h

; 173  : 		PushBackUNK(&Item);

  00824	e8 00 00 00 00	 call	 ?PushBackUNK@CDataBlockListUNK@@QAEXPAX@Z ; CDataBlockListUNK::PushBackUNK
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 474  : 		p_blScaleDRI.PushBack( nDRI);

  00829	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _nDRI$1$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h

; 173  : 		PushBackUNK(&Item);

  0082f	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _p_blScaleDRI$GSCopy$1$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 474  : 		p_blScaleDRI.PushBack( nDRI);

  00835	89 85 60 ff ff
	ff		 mov	 DWORD PTR _Item$[ebp], eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h

; 173  : 		PushBackUNK(&Item);

  0083b	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _Item$[ebp]
  00841	50		 push	 eax
  00842	e8 00 00 00 00	 call	 ?PushBackUNK@CDataBlockListUNK@@QAEXPAX@Z ; CDataBlockListUNK::PushBackUNK
$LN2@MakeScaleD:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 262  : 	for( int i = 0; i < nDRICount; i++)

  00847	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _i$1$[ebp]
  0084d	40		 inc	 eax
  0084e	89 85 54 ff ff
	ff		 mov	 DWORD PTR _i$1$[ebp], eax
  00854	3b 85 48 ff ff
	ff		 cmp	 eax, DWORD PTR _nDRICount$1$[ebp]
  0085a	0f 8c 60 f8 ff
	ff		 jl	 $LL4@MakeScaleD
$LN178@MakeScaleD:
  00860	5f		 pop	 edi
$LN177@MakeScaleD:

; 475  : 	}
; 476  : }

  00861	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00864	5e		 pop	 esi
  00865	33 cd		 xor	 ecx, ebp
  00867	5b		 pop	 ebx
  00868	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0086d	8b e5		 mov	 esp, ebp
  0086f	5d		 pop	 ebp
  00870	c2 14 00	 ret	 20			; 00000014H
  00873	90		 npad	 1
$LN169@MakeScaleD:
  00874	00 00 00 00	 DD	 $LN12@MakeScaleD
  00878	00 00 00 00	 DD	 $LN13@MakeScaleD
  0087c	00 00 00 00	 DD	 $LN14@MakeScaleD
  00880	00 00 00 00	 DD	 $LN29@MakeScaleD
  00884	00 00 00 00	 DD	 $LN35@MakeScaleD
  00888	00 00 00 00	 DD	 $LN41@MakeScaleD
$LN170@MakeScaleD:
  0088c	00 00 00 00	 DD	 $LN48@MakeScaleD
  00890	00 00 00 00	 DD	 $LN50@MakeScaleD
  00894	00 00 00 00	 DD	 $LN55@MakeScaleD
  00898	00 00 00 00	 DD	 $LN74@MakeScaleD
  0089c	00 00 00 00	 DD	 $LN81@MakeScaleD
  008a0	00 00 00 00	 DD	 $LN88@MakeScaleD
?MakeScaleData@CXScaleGridTime@@QAEXHAAV?$CDataBlockList@Utm@@$0CAA@@@AAV?$CDataBlockList@H$0CAA@@@HW4CHART_MODE@CChartInfo@@@Z ENDP ; CXScaleGridTime::MakeScaleData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
;	COMDAT ?GetLastDRI@CXScaleGridTime@@QAEHXZ
_TEXT	SEGMENT
?GetLastDRI@CXScaleGridTime@@QAEHXZ PROC		; CXScaleGridTime::GetLastDRI, COMDAT
; _this$ = ecx

; 236  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 237  : 	int nDRIScaleCount = m_blaScaleDataDRI[ 5].GetItemCount();

  00004	8d 8e 48 02 00
	00		 lea	 ecx, DWORD PTR [esi+584]
  0000a	e8 00 00 00 00	 call	 ?GetItemCount@CDataBlockListUNK@@QAEHXZ ; CDataBlockListUNK::GetItemCount

; 238  : 	if( nDRIScaleCount <= 0) return 0;

  0000f	85 c0		 test	 eax, eax
  00011	7e 21		 jle	 SHORT $LN8@GetLastDRI

; 240  : 	m_pIReturn = m_blaScaleDataDRI[ 5].GetAt( nDRIScaleCount - 1);

  00013	48		 dec	 eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h

; 215  : 	T*	GetAt( int nIndex)	{	return ( T*)GetAtUNK( nIndex);	}

  00014	8d 8e 48 02 00
	00		 lea	 ecx, DWORD PTR [esi+584]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ?GetAtUNK@CDataBlockListUNK@@QAEPAXH@Z ; CDataBlockListUNK::GetAtUNK
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 240  : 	m_pIReturn = m_blaScaleDataDRI[ 5].GetAt( nDRIScaleCount - 1);

  00020	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 241  : 	if( !m_pIReturn) return 0;

  00023	85 c0		 test	 eax, eax
  00025	74 0d		 je	 SHORT $LN8@GetLastDRI

; 242  : 	int nDRI_Start_Cur = *m_pIReturn - 1;

  00027	8b 08		 mov	 ecx, DWORD PTR [eax]

; 243  : 	if( nDRI_Start_Cur < 0) nDRI_Start_Cur = 0;
; 244  : 	return nDRI_Start_Cur;

  00029	33 c0		 xor	 eax, eax
  0002b	83 e9 01	 sub	 ecx, 1
  0002e	5f		 pop	 edi
  0002f	0f 49 c1	 cmovns	 eax, ecx

; 245  : }

  00032	5e		 pop	 esi
  00033	c3		 ret	 0
$LN8@GetLastDRI:
  00034	5f		 pop	 edi

; 241  : 	if( !m_pIReturn) return 0;

  00035	33 c0		 xor	 eax, eax

; 245  : }

  00037	5e		 pop	 esi
  00038	c3		 ret	 0
?GetLastDRI@CXScaleGridTime@@QAEHXZ ENDP		; CXScaleGridTime::GetLastDRI
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
;	COMDAT ?RecalculateScaleType@CXScaleGridTime@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4HORZSCALEDRAWERTYPE@CScaleBaseData@@HAAHHW4CHART_MODE@CChartInfo@@@Z
_TEXT	SEGMENT
_dOverlapFactor$1$ = -16				; size = 8
_this$1$ = -12						; size = 4
_nUpDRICount$1$ = -8					; size = 4
_nDRICount$1$ = -4					; size = 4
_p_strPacketType$ = 8					; size = 4
_p_eScaleDrawType$ = 12					; size = 4
_p_nScaleRegionWidth$ = 16				; size = 4
_p_nSkipFactor$ = 20					; size = 4
_p_nTimeInterval$ = 24					; size = 4
_p_eChartMode$ = 28					; size = 4
?RecalculateScaleType@CXScaleGridTime@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4HORZSCALEDRAWERTYPE@CScaleBaseData@@HAAHHW4CHART_MODE@CChartInfo@@@Z PROC ; CXScaleGridTime::RecalculateScaleType, COMDAT
; _this$ = ecx

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	8b c1		 mov	 eax, ecx
  00008	53		 push	 ebx
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 82   : 	// 1. Get Scale Type
; 83   : 	int nMaxDRICount = m_blaScaleDataDRI[ 5].GetItemCount();

  0000b	8d 88 48 02 00
	00		 lea	 ecx, DWORD PTR [eax+584]
  00011	89 45 f4	 mov	 DWORD PTR _this$1$[ebp], eax
  00014	e8 00 00 00 00	 call	 ?GetItemCount@CDataBlockListUNK@@QAEHXZ ; CDataBlockListUNK::GetItemCount

; 84   : 	int nDRICount = 0;
; 85   : 	int nUpDRICount = 0;
; 86   : 	int nScaleType = 0;
; 87   : 	for( nScaleType = 0; nScaleType < 6; nScaleType++)

  00019	8b 7d 0c	 mov	 edi, DWORD PTR _p_eScaleDrawType$[ebp]
  0001c	33 c0		 xor	 eax, eax
  0001e	8b 5d 08	 mov	 ebx, DWORD PTR _p_strPacketType$[ebp]
  00021	33 f6		 xor	 esi, esi
  00023	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _nDRICount$1$[ebp], 0
  0002a	89 45 f8	 mov	 DWORD PTR _nUpDRICount$1$[ebp], eax
  0002d	0f 1f 00	 npad	 3
$LL4@Recalculat:

; 88   : 	{
; 89   : 		// (2009/4/30 - Seung-Won, Bae) Check packet type for Auto Scale Type.
; 90   : 		if( 0 == nScaleType && p_strPacketType.Find( 'Y') < 0) continue;

  00030	85 f6		 test	 esi, esi
  00032	75 05		 jne	 SHORT $LN9@Recalculat
  00034	56		 push	 esi
  00035	6a 59		 push	 89			; 00000059H

; 91   : 		if( 1 == nScaleType && p_strPacketType.Find( "YM") < 0 && p_strPacketType.Find( "MD") < 0) continue;

  00037	eb 71		 jmp	 SHORT $LN150@Recalculat
$LN9@Recalculat:
  00039	83 fe 01	 cmp	 esi, 1
  0003c	75 24		 jne	 SHORT $LN10@Recalculat
  0003e	6a 00		 push	 0
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_02CGAEACJK@YM@
  00045	8b cb		 mov	 ecx, ebx
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBDH@Z
  0004d	85 c0		 test	 eax, eax
  0004f	79 69		 jns	 SHORT $LN14@Recalculat
  00051	6a 00		 push	 0
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_02OMOJLCHP@MD@
  00058	8b cb		 mov	 ecx, ebx
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBDH@Z

; 92   : 		if( 2 == nScaleType && p_strPacketType.Find( 'D') < 0) continue;

  00060	eb 50		 jmp	 SHORT $LN151@Recalculat
$LN10@Recalculat:
  00062	83 fe 02	 cmp	 esi, 2
  00065	75 06		 jne	 SHORT $LN11@Recalculat
  00067	6a 00		 push	 0
  00069	6a 44		 push	 68			; 00000044H

; 93   : 		if( 3 == nScaleType && p_strPacketType.Find( 'H') < 0) continue;

  0006b	eb 3d		 jmp	 SHORT $LN150@Recalculat
$LN11@Recalculat:
  0006d	83 fe 03	 cmp	 esi, 3
  00070	75 06		 jne	 SHORT $LN12@Recalculat
  00072	6a 00		 push	 0
  00074	6a 48		 push	 72			; 00000048H

; 94   : 		if( 4 == nScaleType && p_strPacketType.Find( "HM") < 0 && p_strPacketType.Find( "MS") < 0) continue;

  00076	eb 32		 jmp	 SHORT $LN150@Recalculat
$LN12@Recalculat:
  00078	83 fe 04	 cmp	 esi, 4
  0007b	75 24		 jne	 SHORT $LN13@Recalculat
  0007d	6a 00		 push	 0
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_02DLOAMLNN@HM@
  00084	8b cb		 mov	 ecx, ebx
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBDH@Z
  0008c	85 c0		 test	 eax, eax
  0008e	79 2a		 jns	 SHORT $LN14@Recalculat
  00090	6a 00		 push	 0
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_02OJGKDGOJ@MS@
  00097	8b cb		 mov	 ecx, ebx
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBDH@Z

; 95   : 		if( 5 == nScaleType && p_strPacketType.Find( 'S') < 0) continue;

  0009f	eb 11		 jmp	 SHORT $LN151@Recalculat
$LN13@Recalculat:
  000a1	83 fe 05	 cmp	 esi, 5
  000a4	75 14		 jne	 SHORT $LN14@Recalculat
  000a6	6a 00		 push	 0
  000a8	6a 53		 push	 83			; 00000053H
$LN150@Recalculat:

; 96   : 		nUpDRICount = nDRICount;

  000aa	8b cb		 mov	 ecx, ebx
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHDH@Z
$LN151@Recalculat:
  000b2	85 c0		 test	 eax, eax
  000b4	0f 88 b8 00 00
	00		 js	 $LN140@Recalculat
$LN14@Recalculat:
  000ba	8b 45 fc	 mov	 eax, DWORD PTR _nDRICount$1$[ebp]

; 97   : 
; 98   : 		nDRICount = m_blaScaleDataDRI[ nScaleType].GetItemCount();

  000bd	8b 4d f4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000c0	89 45 f8	 mov	 DWORD PTR _nUpDRICount$1$[ebp], eax
  000c3	81 c1 44 01 00
	00		 add	 ecx, 324		; 00000144H
  000c9	6b c6 34	 imul	 eax, esi, 52
  000cc	03 c8		 add	 ecx, eax
  000ce	e8 00 00 00 00	 call	 ?GetItemCount@CDataBlockListUNK@@QAEHXZ ; CDataBlockListUNK::GetItemCount
  000d3	8b c8		 mov	 ecx, eax
  000d5	89 4d fc	 mov	 DWORD PTR _nDRICount$1$[ebp], ecx

; 99   : 
; 100  : 		// (2009/2/6 - Seung-Won, Bae) check maximum scale type
; 101  : 		if( ( CScaleBaseData::HORZ_TIME_ONE == p_eScaleDrawType
; 102  : 				|| CScaleBaseData::HORZ_TIME_TWO == p_eScaleDrawType)
; 103  : 			&& nScaleType < 1)

  000d8	83 ff 04	 cmp	 edi, 4
  000db	74 05		 je	 SHORT $LN16@Recalculat
  000dd	83 ff 06	 cmp	 edi, 6
  000e0	75 09		 jne	 SHORT $LN15@Recalculat
$LN16@Recalculat:
  000e2	83 fe 01	 cmp	 esi, 1
  000e5	0f 8c 8a 00 00
	00		 jl	 $LN2@Recalculat
$LN15@Recalculat:

; 104  : 			continue;
; 105  : 		if( ( CScaleBaseData::HORZ_TICK == p_eScaleDrawType
; 106  : 				|| CScaleBaseData::HORZ_TIME_SECOND == p_eScaleDrawType)
; 107  : 			&& nScaleType < 2)

  000eb	83 ff 05	 cmp	 edi, 5
  000ee	74 05		 je	 SHORT $LN18@Recalculat
  000f0	83 ff 0c	 cmp	 edi, 12			; 0000000cH
  000f3	75 05		 jne	 SHORT $LN17@Recalculat
$LN18@Recalculat:
  000f5	83 fe 02	 cmp	 esi, 2
  000f8	7c 7b		 jl	 SHORT $LN2@Recalculat
$LN17@Recalculat:

; 108  : 			continue;
; 109  : 
; 110  : 		// (2009/1/22 - Seung-Won, Bae) check minimum scale type.
; 111  : 		if( 1 == nScaleType && CScaleBaseData::HORZ_MONTHLY == p_eScaleDrawType)

  000fa	83 fe 01	 cmp	 esi, 1
  000fd	75 05		 jne	 SHORT $LN19@Recalculat
  000ff	83 ff 03	 cmp	 edi, 3

; 112  : 			break;
; 113  : 		if( 2 == nScaleType
; 114  : 			&& ( CScaleBaseData::HORZ_DAILY == p_eScaleDrawType

  00102	eb 1f		 jmp	 SHORT $LN142@Recalculat
$LN19@Recalculat:
  00104	83 fe 02	 cmp	 esi, 2
  00107	75 09		 jne	 SHORT $LN20@Recalculat
  00109	83 ff 01	 cmp	 edi, 1
  0010c	74 31		 je	 SHORT $LN26@Recalculat
  0010e	3b fe		 cmp	 edi, esi

; 115  : 				|| CScaleBaseData::HORZ_WEEKLEY == p_eScaleDrawType))
; 116  : 				break;
; 117  : 		if( 4 == nScaleType
; 118  : 			&& ( CScaleBaseData::HORZ_TIME_ONE == p_eScaleDrawType

  00110	eb 11		 jmp	 SHORT $LN142@Recalculat
$LN20@Recalculat:
  00112	83 fe 04	 cmp	 esi, 4
  00115	75 0e		 jne	 SHORT $LN22@Recalculat
  00117	3b fe		 cmp	 edi, esi
  00119	74 24		 je	 SHORT $LN26@Recalculat
  0011b	83 ff 06	 cmp	 edi, 6
  0011e	74 1f		 je	 SHORT $LN26@Recalculat
  00120	83 ff 05	 cmp	 edi, 5
$LN142@Recalculat:

; 119  : 				|| CScaleBaseData::HORZ_TIME_TWO == p_eScaleDrawType
; 120  : 				|| CScaleBaseData::HORZ_TICK == p_eScaleDrawType))
; 121  : 				break;
; 122  : 
; 123  : 		// (2009/2/17 - Seung-Won, Bae) Check minimum scale.
; 124  : 		if( nDRICount < 3) continue;

  00123	74 1a		 je	 SHORT $LN26@Recalculat
$LN22@Recalculat:
  00125	83 f9 03	 cmp	 ecx, 3
  00128	7c 4b		 jl	 SHORT $LN2@Recalculat

; 125  : 		
; 126  : 		if( p_nScaleRegionWidth / nDRICount <= 110)						// Maximum Scale width is 100 pixel.

  0012a	8b 45 10	 mov	 eax, DWORD PTR _p_nScaleRegionWidth$[ebp]
  0012d	99		 cdq
  0012e	f7 f9		 idiv	 ecx
  00130	83 f8 6e	 cmp	 eax, 110		; 0000006eH
  00133	7f 40		 jg	 SHORT $LN2@Recalculat

; 127  : 			break;
; 128  : 	}
; 129  : 	if( 6 <= nScaleType) nScaleType = 5;

  00135	83 fe 06	 cmp	 esi, 6
  00138	7c 05		 jl	 SHORT $LN26@Recalculat
$LN129@Recalculat:
  0013a	be 05 00 00 00	 mov	 esi, 5
$LN26@Recalculat:
  0013f	66 0f 6e 4d 10	 movd	 xmm1, DWORD PTR _p_nScaleRegionWidth$[ebp]

; 130  : 
; 131  : 	double dOverlapFactor = p_nScaleRegionWidth;

  00144	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  00148	f2 0f 11 4d f0	 movsd	 QWORD PTR _dOverlapFactor$1$[ebp], xmm1

; 132  : 	if( 0 < nDRICount) dOverlapFactor /= nDRICount;		// the factor for closing of scale

  0014d	85 c9		 test	 ecx, ecx
  0014f	7e 11		 jle	 SHORT $LN27@Recalculat
  00151	66 0f 6e c1	 movd	 xmm0, ecx
  00155	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00159	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0015d	f2 0f 11 4d f0	 movsd	 QWORD PTR _dOverlapFactor$1$[ebp], xmm1
$LN27@Recalculat:

; 133  : 	TRACE( "\r\nScale Closing : %f\r\n", dOverlapFactor);
; 134  : 
; 135  : 
; 136  : 	// Adjust Skip Factor
; 137  : 	switch( nScaleType)

  00162	83 fe 05	 cmp	 esi, 5
  00165	0f 87 24 05 00
	00		 ja	 $LN119@Recalculat
  0016b	ff 24 b5 00 00
	00 00		 jmp	 DWORD PTR $LN130@Recalculat[esi*4]
$LN140@Recalculat:

; 84   : 	int nDRICount = 0;
; 85   : 	int nUpDRICount = 0;
; 86   : 	int nScaleType = 0;
; 87   : 	for( nScaleType = 0; nScaleType < 6; nScaleType++)

  00172	8b 4d fc	 mov	 ecx, DWORD PTR _nDRICount$1$[ebp]
$LN2@Recalculat:
  00175	46		 inc	 esi
  00176	83 fe 06	 cmp	 esi, 6
  00179	0f 8c b1 fe ff
	ff		 jl	 $LL4@Recalculat
  0017f	eb b9		 jmp	 SHORT $LN129@Recalculat
$LN28@Recalculat:

; 138  : 	{
; 139  : 		// Year
; 140  : 		case 0: if(			150./10 >= dOverlapFactor)	p_nSkipFactor = 10;

  00181	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@402e000000000000
  00189	66 0f 2f c1	 comisd	 xmm0, xmm1
  0018d	0f 83 af 04 00
	00		 jae	 $LN147@Recalculat

; 141  : 				else if(	150./ 5 >= dOverlapFactor)	p_nSkipFactor = 5;

  00193	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@403e000000000000
  0019b	66 0f 2f c1	 comisd	 xmm0, xmm1
  0019f	0f 83 bf 04 00
	00		 jae	 $LN145@Recalculat

; 142  : 				else if(	150./ 2 >= dOverlapFactor)	p_nSkipFactor = 2;

  001a5	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4052c00000000000
  001ad	66 0f 2f c1	 comisd	 xmm0, xmm1
  001b1	0f 82 d8 04 00
	00		 jb	 $LN119@Recalculat
  001b7	8b 45 14	 mov	 eax, DWORD PTR _p_nSkipFactor$[ebp]

; 229  : 				break;
; 230  : 	}
; 231  : 
; 232  : 	return nScaleType;

  001ba	5f		 pop	 edi
  001bb	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
  001c1	8b c6		 mov	 eax, esi
  001c3	5e		 pop	 esi
  001c4	5b		 pop	 ebx

; 233  : }

  001c5	8b e5		 mov	 esp, ebp
  001c7	5d		 pop	 ebp
  001c8	c2 18 00	 ret	 24			; 00000018H
$LN34@Recalculat:

; 143  : 				break;
; 144  : 		// Month
; 145  : 		case 1: if(			150./12 >= dOverlapFactor)	p_nSkipFactor = 12;

  001cb	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4029000000000000
  001d3	66 0f 2f c1	 comisd	 xmm0, xmm1
  001d7	72 14		 jb	 SHORT $LN35@Recalculat
  001d9	8b 45 14	 mov	 eax, DWORD PTR _p_nSkipFactor$[ebp]

; 229  : 				break;
; 230  : 	}
; 231  : 
; 232  : 	return nScaleType;

  001dc	5f		 pop	 edi
  001dd	c7 00 0c 00 00
	00		 mov	 DWORD PTR [eax], 12	; 0000000cH
  001e3	8b c6		 mov	 eax, esi
  001e5	5e		 pop	 esi
  001e6	5b		 pop	 ebx

; 233  : }

  001e7	8b e5		 mov	 esp, ebp
  001e9	5d		 pop	 ebp
  001ea	c2 18 00	 ret	 24			; 00000018H
$LN35@Recalculat:

; 146  : 				else if(	150./ 6 >= dOverlapFactor)	p_nSkipFactor = 6;

  001ed	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4039000000000000
  001f5	66 0f 2f c1	 comisd	 xmm0, xmm1
  001f9	72 14		 jb	 SHORT $LN37@Recalculat
  001fb	8b 45 14	 mov	 eax, DWORD PTR _p_nSkipFactor$[ebp]

; 229  : 				break;
; 230  : 	}
; 231  : 
; 232  : 	return nScaleType;

  001fe	5f		 pop	 edi
  001ff	c7 00 06 00 00
	00		 mov	 DWORD PTR [eax], 6
  00205	8b c6		 mov	 eax, esi
  00207	5e		 pop	 esi
  00208	5b		 pop	 ebx

; 233  : }

  00209	8b e5		 mov	 esp, ebp
  0020b	5d		 pop	 ebp
  0020c	c2 18 00	 ret	 24			; 00000018H
$LN37@Recalculat:

; 147  : 				else if(	150./ 4 >= dOverlapFactor)	p_nSkipFactor = 4;

  0020f	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4042c00000000000
  00217	66 0f 2f c1	 comisd	 xmm0, xmm1
  0021b	72 14		 jb	 SHORT $LN39@Recalculat
  0021d	8b 45 14	 mov	 eax, DWORD PTR _p_nSkipFactor$[ebp]

; 229  : 				break;
; 230  : 	}
; 231  : 
; 232  : 	return nScaleType;

  00220	5f		 pop	 edi
  00221	c7 00 04 00 00
	00		 mov	 DWORD PTR [eax], 4
  00227	8b c6		 mov	 eax, esi
  00229	5e		 pop	 esi
  0022a	5b		 pop	 ebx

; 233  : }

  0022b	8b e5		 mov	 esp, ebp
  0022d	5d		 pop	 ebp
  0022e	c2 18 00	 ret	 24			; 00000018H
$LN39@Recalculat:

; 148  : 				else if(	150./ 3 >= dOverlapFactor)	p_nSkipFactor = 3;

  00231	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4049000000000000
  00239	66 0f 2f c1	 comisd	 xmm0, xmm1
  0023d	72 14		 jb	 SHORT $LN41@Recalculat
  0023f	8b 45 14	 mov	 eax, DWORD PTR _p_nSkipFactor$[ebp]

; 229  : 				break;
; 230  : 	}
; 231  : 
; 232  : 	return nScaleType;

  00242	5f		 pop	 edi
  00243	c7 00 03 00 00
	00		 mov	 DWORD PTR [eax], 3
  00249	8b c6		 mov	 eax, esi
  0024b	5e		 pop	 esi
  0024c	5b		 pop	 ebx

; 233  : }

  0024d	8b e5		 mov	 esp, ebp
  0024f	5d		 pop	 ebp
  00250	c2 18 00	 ret	 24			; 00000018H
$LN41@Recalculat:

; 149  : 				else if(	150./ 2 >= dOverlapFactor || CScaleBaseData::HORZ_MONTHLY == p_eScaleDrawType)

  00253	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4052c00000000000
  0025b	66 0f 2f c1	 comisd	 xmm0, xmm1
  0025f	73 09		 jae	 SHORT $LN44@Recalculat
  00261	83 ff 03	 cmp	 edi, 3
  00264	0f 85 25 04 00
	00		 jne	 $LN119@Recalculat
$LN44@Recalculat:

; 150  : 														p_nSkipFactor = 2;

  0026a	8b 45 14	 mov	 eax, DWORD PTR _p_nSkipFactor$[ebp]

; 229  : 				break;
; 230  : 	}
; 231  : 
; 232  : 	return nScaleType;

  0026d	5f		 pop	 edi
  0026e	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
  00274	8b c6		 mov	 eax, esi
  00276	5e		 pop	 esi
  00277	5b		 pop	 ebx

; 233  : }

  00278	8b e5		 mov	 esp, ebp
  0027a	5d		 pop	 ebp
  0027b	c2 18 00	 ret	 24			; 00000018H
$LN45@Recalculat:

; 151  : 				break;
; 152  : 		// Day
; 153  : 		case 2:	switch( p_eScaleDrawType)

  0027e	4f		 dec	 edi
  0027f	83 ff 05	 cmp	 edi, 5
  00282	0f 87 07 04 00
	00		 ja	 $LN119@Recalculat
  00288	ff 24 bd 00 00
	00 00		 jmp	 DWORD PTR $LN131@Recalculat[edi*4]
$LN46@Recalculat:

; 154  : 				{
; 155  : 					case CScaleBaseData::HORZ_WEEKLEY:	
; 156  : 						if(			150. * 7 / 28 >= dOverlapFactor)	p_nSkipFactor = 28;

  0028f	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4042c00000000000
  00297	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0029c	66 0f 2f c1	 comisd	 xmm0, xmm1
  002a0	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH

; 229  : 				break;
; 230  : 	}
; 231  : 
; 232  : 	return nScaleType;

  002a5	5f		 pop	 edi
  002a6	0f 43 c8	 cmovae	 ecx, eax
  002a9	8b 45 14	 mov	 eax, DWORD PTR _p_nSkipFactor$[ebp]
  002ac	89 08		 mov	 DWORD PTR [eax], ecx
  002ae	8b c6		 mov	 eax, esi
  002b0	5e		 pop	 esi
  002b1	5b		 pop	 ebx

; 233  : }

  002b2	8b e5		 mov	 esp, ebp
  002b4	5d		 pop	 ebp
  002b5	c2 18 00	 ret	 24			; 00000018H
$LN49@Recalculat:

; 157  : 						else											p_nSkipFactor = 14;
; 158  : 						break;
; 159  : 					case CScaleBaseData::HORZ_TIME_ONE:
; 160  : 					case CScaleBaseData::HORZ_TIME_TWO:
; 161  : 						if(			150. / 20 >= dOverlapFactor)	p_nSkipFactor = 31;

  002b8	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@401e000000000000
  002c0	66 0f 2f c1	 comisd	 xmm0, xmm1
  002c4	73 3c		 jae	 SHORT $LN148@Recalculat
$LN51@Recalculat:

; 229  : 				break;
; 230  : 	}
; 231  : 
; 232  : 	return nScaleType;

  002c6	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@402e000000000000
  002ce	66 0f 2f c1	 comisd	 xmm0, xmm1
  002d2	0f 82 10 01 00
	00		 jb	 $LN74@Recalculat
  002d8	8b 45 14	 mov	 eax, DWORD PTR _p_nSkipFactor$[ebp]
  002db	5f		 pop	 edi
  002dc	c7 00 0e 00 00
	00		 mov	 DWORD PTR [eax], 14	; 0000000eH
  002e2	8b c6		 mov	 eax, esi
  002e4	5e		 pop	 esi
  002e5	5b		 pop	 ebx

; 233  : }

  002e6	8b e5		 mov	 esp, ebp
  002e8	5d		 pop	 ebp
  002e9	c2 18 00	 ret	 24			; 00000018H
$LN56@Recalculat:

; 162  : 						else if(	150. / 10 >= dOverlapFactor)	p_nSkipFactor = 14;
; 163  : 						else if(	150. /  5 >= dOverlapFactor)	p_nSkipFactor = 7;
; 164  : 						break;
; 165  : 					case CScaleBaseData::HORZ_DAILY:
; 166  : 						if( p_nTimeInterval <= 1)

  002ec	8b 4d 18	 mov	 ecx, DWORD PTR _p_nTimeInterval$[ebp]
  002ef	83 f9 01	 cmp	 ecx, 1
  002f2	7f 4b		 jg	 SHORT $LN57@Recalculat

; 167  : 						{
; 168  : 							if(			150. / 20 >= dOverlapFactor)	p_nSkipFactor = 31;

  002f4	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@401e000000000000
  002fc	66 0f 2f c1	 comisd	 xmm0, xmm1
  00300	72 14		 jb	 SHORT $LN59@Recalculat
$LN148@Recalculat:

; 229  : 				break;
; 230  : 	}
; 231  : 
; 232  : 	return nScaleType;

  00302	8b 45 14	 mov	 eax, DWORD PTR _p_nSkipFactor$[ebp]
  00305	5f		 pop	 edi
  00306	c7 00 1f 00 00
	00		 mov	 DWORD PTR [eax], 31	; 0000001fH
  0030c	8b c6		 mov	 eax, esi
  0030e	5e		 pop	 esi
  0030f	5b		 pop	 ebx

; 233  : }

  00310	8b e5		 mov	 esp, ebp
  00312	5d		 pop	 ebp
  00313	c2 18 00	 ret	 24			; 00000018H
$LN59@Recalculat:

; 169  : 							else if(	150. / 10 >= dOverlapFactor)	p_nSkipFactor = 14;

  00316	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@402e000000000000
  0031e	b8 0e 00 00 00	 mov	 eax, 14			; 0000000eH
  00323	66 0f 2f c1	 comisd	 xmm0, xmm1
  00327	b9 07 00 00 00	 mov	 ecx, 7

; 229  : 				break;
; 230  : 	}
; 231  : 
; 232  : 	return nScaleType;

  0032c	5f		 pop	 edi
  0032d	0f 43 c8	 cmovae	 ecx, eax
  00330	8b 45 14	 mov	 eax, DWORD PTR _p_nSkipFactor$[ebp]
  00333	89 08		 mov	 DWORD PTR [eax], ecx
  00335	8b c6		 mov	 eax, esi
  00337	5e		 pop	 esi
  00338	5b		 pop	 ebx

; 233  : }

  00339	8b e5		 mov	 esp, ebp
  0033b	5d		 pop	 ebp
  0033c	c2 18 00	 ret	 24			; 00000018H
$LN57@Recalculat:
  0033f	66 0f 6e c1	 movd	 xmm0, ecx

; 170  : 							else										p_nSkipFactor = 7;
; 171  : 						}
; 172  : 						else
; 173  : 						{
; 174  : 							dOverlapFactor /= p_nTimeInterval;

  00343	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00347	f2 0f 5e c8	 divsd	 xmm1, xmm0

; 175  : 							if(			150. / 15 >= dOverlapFactor)	p_nSkipFactor = 15;

  0034b	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4024000000000000
  00353	66 0f 2f c1	 comisd	 xmm0, xmm1
  00357	72 14		 jb	 SHORT $LN63@Recalculat
  00359	8b 45 14	 mov	 eax, DWORD PTR _p_nSkipFactor$[ebp]

; 229  : 				break;
; 230  : 	}
; 231  : 
; 232  : 	return nScaleType;

  0035c	5f		 pop	 edi
  0035d	c7 00 0f 00 00
	00		 mov	 DWORD PTR [eax], 15	; 0000000fH
  00363	8b c6		 mov	 eax, esi
  00365	5e		 pop	 esi
  00366	5b		 pop	 ebx

; 233  : }

  00367	8b e5		 mov	 esp, ebp
  00369	5d		 pop	 ebp
  0036a	c2 18 00	 ret	 24			; 00000018H
$LN63@Recalculat:

; 176  : 							else if(	150. / 10 >= dOverlapFactor)	p_nSkipFactor = 10;

  0036d	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@402e000000000000
  00375	66 0f 2f c1	 comisd	 xmm0, xmm1
  00379	0f 83 c3 02 00
	00		 jae	 $LN147@Recalculat

; 177  : 							else if(	150. / 8  >= dOverlapFactor)	p_nSkipFactor = 8;

  0037f	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4032c00000000000
  00387	66 0f 2f c1	 comisd	 xmm0, xmm1
  0038b	8b 45 14	 mov	 eax, DWORD PTR _p_nSkipFactor$[ebp]
  0038e	72 11		 jb	 SHORT $LN67@Recalculat

; 229  : 				break;
; 230  : 	}
; 231  : 
; 232  : 	return nScaleType;

  00390	5f		 pop	 edi
  00391	c7 00 08 00 00
	00		 mov	 DWORD PTR [eax], 8
  00397	8b c6		 mov	 eax, esi
  00399	5e		 pop	 esi
  0039a	5b		 pop	 ebx

; 233  : }

  0039b	8b e5		 mov	 esp, ebp
  0039d	5d		 pop	 ebp
  0039e	c2 18 00	 ret	 24			; 00000018H
$LN67@Recalculat:

; 178  : 							else if(	150. / 5  >= dOverlapFactor)	p_nSkipFactor = 5;

  003a1	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@403e000000000000
  003a9	66 0f 2f c1	 comisd	 xmm0, xmm1
  003ad	0f 83 b4 02 00
	00		 jae	 $LN146@Recalculat

; 179  : 							else										p_nSkipFactor = 2 * p_nTimeInterval;

  003b3	03 c9		 add	 ecx, ecx

; 229  : 				break;
; 230  : 	}
; 231  : 
; 232  : 	return nScaleType;

  003b5	5f		 pop	 edi
  003b6	89 08		 mov	 DWORD PTR [eax], ecx
  003b8	8b c6		 mov	 eax, esi
  003ba	5e		 pop	 esi
  003bb	5b		 pop	 ebx

; 233  : }

  003bc	8b e5		 mov	 esp, ebp
  003be	5d		 pop	 ebp
  003bf	c2 18 00	 ret	 24			; 00000018H
$LN71@Recalculat:

; 180  : 						}
; 181  : 						break;
; 182  : 					case CScaleBaseData::HORZ_TICK:
; 183  : 						if(			150. / 20 >= dOverlapFactor)	p_nSkipFactor = 31;

  003c2	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@401e000000000000
  003ca	66 0f 2f c1	 comisd	 xmm0, xmm1
  003ce	0f 82 f2 fe ff
	ff		 jb	 $LN51@Recalculat

; 229  : 				break;
; 230  : 	}
; 231  : 
; 232  : 	return nScaleType;

  003d4	8b 45 14	 mov	 eax, DWORD PTR _p_nSkipFactor$[ebp]
  003d7	5f		 pop	 edi
  003d8	c7 00 1f 00 00
	00		 mov	 DWORD PTR [eax], 31	; 0000001fH
  003de	8b c6		 mov	 eax, esi
  003e0	5e		 pop	 esi
  003e1	5b		 pop	 ebx

; 233  : }

  003e2	8b e5		 mov	 esp, ebp
  003e4	5d		 pop	 ebp
  003e5	c2 18 00	 ret	 24			; 00000018H
$LN74@Recalculat:

; 229  : 				break;
; 230  : 	}
; 231  : 
; 232  : 	return nScaleType;

  003e8	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@403e000000000000
  003f0	66 0f 2f c1	 comisd	 xmm0, xmm1
  003f4	0f 82 95 02 00
	00		 jb	 $LN119@Recalculat
  003fa	8b 45 14	 mov	 eax, DWORD PTR _p_nSkipFactor$[ebp]
  003fd	5f		 pop	 edi
  003fe	c7 00 07 00 00
	00		 mov	 DWORD PTR [eax], 7
  00404	8b c6		 mov	 eax, esi
  00406	5e		 pop	 esi
  00407	5b		 pop	 ebx

; 233  : }

  00408	8b e5		 mov	 esp, ebp
  0040a	5d		 pop	 ebp
  0040b	c2 18 00	 ret	 24			; 00000018H
$LN77@Recalculat:

; 184  : 						else if(	150. / 10 >= dOverlapFactor)	p_nSkipFactor = 14;
; 185  : 						else if(	150. / 5 >= dOverlapFactor)		p_nSkipFactor = 7;
; 186  : 						break;
; 187  : 				}
; 188  : 				break;
; 189  : 		// Hour
; 190  : 		case 3: // (2009/4/30 - Seung-Won, Bae) Check packet type for Auto Scale Type.
; 191  : 				if( CChartInfo::HTS != p_eChartMode)

  0040e	83 7d 1c 01	 cmp	 DWORD PTR _p_eChartMode$[ebp], 1
  00412	8b 4d 14	 mov	 ecx, DWORD PTR _p_nSkipFactor$[ebp]
  00415	74 54		 je	 SHORT $LN78@Recalculat

; 192  : 				{
; 193  : 					if(			150./24 >= dOverlapFactor && 2 < nUpDRICount)

  00417	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4019000000000000
  0041f	66 0f 2f c1	 comisd	 xmm0, xmm1
  00423	8b 45 f8	 mov	 eax, DWORD PTR _nUpDRICount$1$[ebp]
  00426	72 0d		 jb	 SHORT $LN80@Recalculat
  00428	83 f8 02	 cmp	 eax, 2
  0042b	7e 08		 jle	 SHORT $LN80@Recalculat

; 194  : 														p_nSkipFactor = 24;

  0042d	c7 01 18 00 00
	00		 mov	 DWORD PTR [ecx], 24	; 00000018H
  00433	eb 50		 jmp	 SHORT $LN85@Recalculat
$LN80@Recalculat:

; 195  : 					else if(	150./12 >= dOverlapFactor && 2 < nUpDRICount)

  00435	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4029000000000000
  0043d	66 0f 2f c1	 comisd	 xmm0, xmm1
  00441	72 0d		 jb	 SHORT $LN82@Recalculat
  00443	83 f8 02	 cmp	 eax, 2
  00446	7e 08		 jle	 SHORT $LN82@Recalculat

; 196  : 														p_nSkipFactor = 12;

  00448	c7 01 0c 00 00
	00		 mov	 DWORD PTR [ecx], 12	; 0000000cH
  0044e	eb 35		 jmp	 SHORT $LN85@Recalculat
$LN82@Recalculat:

; 197  : 					else if(	150./6 >= dOverlapFactor && 2 < nUpDRICount)

  00450	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4039000000000000
  00458	66 0f 2f c1	 comisd	 xmm0, xmm1
  0045c	72 27		 jb	 SHORT $LN85@Recalculat
  0045e	83 f8 02	 cmp	 eax, 2
  00461	7e 22		 jle	 SHORT $LN85@Recalculat

; 198  : 														p_nSkipFactor = 6;

  00463	c7 01 06 00 00
	00		 mov	 DWORD PTR [ecx], 6

; 199  : 				}

  00469	eb 1a		 jmp	 SHORT $LN85@Recalculat
$LN78@Recalculat:

; 200  : 				else if(	150./7 >= dOverlapFactor && 2 < nUpDRICount)

  0046b	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@40356db6db6db6db
  00473	66 0f 2f c1	 comisd	 xmm0, xmm1
  00477	72 0c		 jb	 SHORT $LN85@Recalculat
  00479	83 7d f8 02	 cmp	 DWORD PTR _nUpDRICount$1$[ebp], 2
  0047d	7e 06		 jle	 SHORT $LN85@Recalculat

; 201  : 														p_nSkipFactor = 7;

  0047f	c7 01 07 00 00
	00		 mov	 DWORD PTR [ecx], 7
$LN85@Recalculat:

; 202  : 				if( 3 < p_nSkipFactor);

  00485	83 39 03	 cmp	 DWORD PTR [ecx], 3
  00488	0f 8f 01 02 00
	00		 jg	 $LN119@Recalculat

; 203  : 				else if(	150./3 >= dOverlapFactor)	p_nSkipFactor = 3;

  0048e	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4049000000000000
  00496	33 c0		 xor	 eax, eax
  00498	66 0f 2f c1	 comisd	 xmm0, xmm1

; 229  : 				break;
; 230  : 	}
; 231  : 
; 232  : 	return nScaleType;

  0049c	5f		 pop	 edi
  0049d	0f 93 c0	 setae	 al
  004a0	83 c0 02	 add	 eax, 2
  004a3	89 01		 mov	 DWORD PTR [ecx], eax
  004a5	8b c6		 mov	 eax, esi
  004a7	5e		 pop	 esi
  004a8	5b		 pop	 ebx

; 233  : }

  004a9	8b e5		 mov	 esp, ebp
  004ab	5d		 pop	 ebp
  004ac	c2 18 00	 ret	 24			; 00000018H
$LN90@Recalculat:

; 204  : 				else									p_nSkipFactor = 2;
; 205  : 				break;
; 206  : 		// Minute
; 207  : 		case 4:	// (2009/5/7 - Seung-Won, Bae) for HHMMSS Type.
; 208  : 				if( CScaleBaseData::HORZ_TIME_ONE == p_eScaleDrawType || CScaleBaseData::HORZ_TIME_TWO == p_eScaleDrawType)

  004af	83 ff 04	 cmp	 edi, 4
  004b2	74 0a		 je	 SHORT $LN92@Recalculat
  004b4	83 ff 06	 cmp	 edi, 6
  004b7	74 05		 je	 SHORT $LN92@Recalculat
  004b9	8b 5d 18	 mov	 ebx, DWORD PTR _p_nTimeInterval$[ebp]
  004bc	eb 58		 jmp	 SHORT $LN94@Recalculat
$LN92@Recalculat:

; 209  : 				{
; 210  : 					if( 0 <= p_strPacketType.Find( 'S')) p_nTimeInterval /= 100;

  004be	6a 00		 push	 0
  004c0	6a 53		 push	 83			; 00000053H
  004c2	8b cb		 mov	 ecx, ebx
  004c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHDH@Z
  004ca	85 c0		 test	 eax, eax
  004cc	78 14		 js	 SHORT $LN132@Recalculat
  004ce	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  004d3	f7 6d 18	 imul	 DWORD PTR _p_nTimeInterval$[ebp]
  004d6	c1 fa 05	 sar	 edx, 5
  004d9	8b da		 mov	 ebx, edx
  004db	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  004de	03 da		 add	 ebx, edx
  004e0	eb 03		 jmp	 SHORT $LN93@Recalculat
$LN132@Recalculat:
  004e2	8b 5d 18	 mov	 ebx, DWORD PTR _p_nTimeInterval$[ebp]
$LN93@Recalculat:

; 211  : 					if( 1 < p_nTimeInterval) dOverlapFactor /= ( p_nTimeInterval / 100 * 60 + p_nTimeInterval % 100);

  004e5	f2 0f 10 4d f0	 movsd	 xmm1, QWORD PTR _dOverlapFactor$1$[ebp]
  004ea	83 fb 01	 cmp	 ebx, 1
  004ed	7e 27		 jle	 SHORT $LN94@Recalculat
  004ef	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  004f4	f7 eb		 imul	 ebx
  004f6	c1 fa 05	 sar	 edx, 5
  004f9	8b c2		 mov	 eax, edx
  004fb	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  004fe	03 c2		 add	 eax, edx
  00500	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00503	8b c3		 mov	 eax, ebx
  00505	c1 e1 03	 shl	 ecx, 3
  00508	2b c1		 sub	 eax, ecx
  0050a	66 0f 6e c0	 movd	 xmm0, eax
  0050e	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00512	f2 0f 5e c8	 divsd	 xmm1, xmm0
$LN94@Recalculat:

; 212  : 				}
; 213  : 				if(			150./60 >= dOverlapFactor)	p_nSkipFactor = 60;

  00516	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4004000000000000
  0051e	66 0f 2f c1	 comisd	 xmm0, xmm1
  00522	8b 4d 14	 mov	 ecx, DWORD PTR _p_nSkipFactor$[ebp]
  00525	72 08		 jb	 SHORT $LN95@Recalculat
  00527	c7 01 3c 00 00
	00		 mov	 DWORD PTR [ecx], 60	; 0000003cH
  0052d	eb 7a		 jmp	 SHORT $LN105@Recalculat
$LN95@Recalculat:

; 214  : 				else if(	150./30 >= dOverlapFactor)	p_nSkipFactor = 30;

  0052f	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4014000000000000
  00537	66 0f 2f c1	 comisd	 xmm0, xmm1
  0053b	72 08		 jb	 SHORT $LN97@Recalculat
  0053d	c7 01 1e 00 00
	00		 mov	 DWORD PTR [ecx], 30	; 0000001eH
  00543	eb 64		 jmp	 SHORT $LN105@Recalculat
$LN97@Recalculat:

; 215  : 				else if(	150./20 >= dOverlapFactor)	p_nSkipFactor = 20;

  00545	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@401e000000000000
  0054d	66 0f 2f c1	 comisd	 xmm0, xmm1
  00551	72 08		 jb	 SHORT $LN99@Recalculat
  00553	c7 01 14 00 00
	00		 mov	 DWORD PTR [ecx], 20	; 00000014H
  00559	eb 4e		 jmp	 SHORT $LN105@Recalculat
$LN99@Recalculat:

; 216  : 				else if(	150./10 >= dOverlapFactor)	p_nSkipFactor = 10;

  0055b	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@402e000000000000
  00563	66 0f 2f c1	 comisd	 xmm0, xmm1
  00567	72 08		 jb	 SHORT $LN101@Recalculat
  00569	c7 01 0a 00 00
	00		 mov	 DWORD PTR [ecx], 10	; 0000000aH
  0056f	eb 38		 jmp	 SHORT $LN105@Recalculat
$LN101@Recalculat:

; 217  : 				else if(	150./ 5 >= dOverlapFactor)	p_nSkipFactor = 5;

  00571	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@403e000000000000
  00579	66 0f 2f c1	 comisd	 xmm0, xmm1
  0057d	72 08		 jb	 SHORT $LN103@Recalculat
  0057f	c7 01 05 00 00
	00		 mov	 DWORD PTR [ecx], 5
  00585	eb 22		 jmp	 SHORT $LN105@Recalculat
$LN103@Recalculat:

; 218  : 				else if(	150./ 2 >= dOverlapFactor || CScaleBaseData::HORZ_TIME_ONE == p_eScaleDrawType || CScaleBaseData::HORZ_TIME_TWO == p_eScaleDrawType)

  00587	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4052c00000000000
  0058f	66 0f 2f c1	 comisd	 xmm0, xmm1
  00593	73 0e		 jae	 SHORT $LN106@Recalculat
  00595	83 ff 04	 cmp	 edi, 4
  00598	74 09		 je	 SHORT $LN106@Recalculat
  0059a	83 ff 06	 cmp	 edi, 6
  0059d	0f 85 ec 00 00
	00		 jne	 $LN119@Recalculat
$LN106@Recalculat:

; 219  : 														p_nSkipFactor = 2;	

  005a3	c7 01 02 00 00
	00		 mov	 DWORD PTR [ecx], 2
$LN105@Recalculat:

; 220  : 				if( CScaleBaseData::HORZ_TIME_ONE == p_eScaleDrawType || CScaleBaseData::HORZ_TIME_TWO == p_eScaleDrawType)

  005a9	83 ff 04	 cmp	 edi, 4
  005ac	74 09		 je	 SHORT $LN108@Recalculat
  005ae	83 ff 06	 cmp	 edi, 6
  005b1	0f 85 d8 00 00
	00		 jne	 $LN119@Recalculat
$LN108@Recalculat:

; 221  : 					if( 1 < p_nTimeInterval && p_nSkipFactor <= p_nTimeInterval) p_nSkipFactor = ( p_nTimeInterval / 100 * 60 + p_nTimeInterval % 100) * 2;

  005b7	83 fb 01	 cmp	 ebx, 1
  005ba	0f 8e cf 00 00
	00		 jle	 $LN119@Recalculat
  005c0	39 19		 cmp	 DWORD PTR [ecx], ebx
  005c2	0f 8f c7 00 00
	00		 jg	 $LN119@Recalculat
  005c8	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  005cd	f7 eb		 imul	 ebx

; 229  : 				break;
; 230  : 	}
; 231  : 
; 232  : 	return nScaleType;

  005cf	5f		 pop	 edi
  005d0	c1 fa 05	 sar	 edx, 5
  005d3	8b c2		 mov	 eax, edx
  005d5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  005d8	03 c2		 add	 eax, edx
  005da	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  005dd	c1 e0 03	 shl	 eax, 3
  005e0	2b d8		 sub	 ebx, eax
  005e2	8b c6		 mov	 eax, esi
  005e4	03 db		 add	 ebx, ebx
  005e6	5e		 pop	 esi
  005e7	89 19		 mov	 DWORD PTR [ecx], ebx
  005e9	5b		 pop	 ebx

; 233  : }

  005ea	8b e5		 mov	 esp, ebp
  005ec	5d		 pop	 ebp
  005ed	c2 18 00	 ret	 24			; 00000018H
$LN110@Recalculat:

; 222  : 				break;
; 223  : 		// Second
; 224  : 		case 5: if(			150./30 >= dOverlapFactor)	p_nSkipFactor = 30;

  005f0	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4014000000000000
  005f8	66 0f 2f c1	 comisd	 xmm0, xmm1
  005fc	72 14		 jb	 SHORT $LN111@Recalculat
  005fe	8b 45 14	 mov	 eax, DWORD PTR _p_nSkipFactor$[ebp]

; 229  : 				break;
; 230  : 	}
; 231  : 
; 232  : 	return nScaleType;

  00601	5f		 pop	 edi
  00602	c7 00 1e 00 00
	00		 mov	 DWORD PTR [eax], 30	; 0000001eH
  00608	8b c6		 mov	 eax, esi
  0060a	5e		 pop	 esi
  0060b	5b		 pop	 ebx

; 233  : }

  0060c	8b e5		 mov	 esp, ebp
  0060e	5d		 pop	 ebp
  0060f	c2 18 00	 ret	 24			; 00000018H
$LN111@Recalculat:

; 225  : 				else if(	150./20 >= dOverlapFactor)	p_nSkipFactor = 20;

  00612	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@401e000000000000
  0061a	66 0f 2f c1	 comisd	 xmm0, xmm1
  0061e	72 14		 jb	 SHORT $LN113@Recalculat
  00620	8b 45 14	 mov	 eax, DWORD PTR _p_nSkipFactor$[ebp]

; 229  : 				break;
; 230  : 	}
; 231  : 
; 232  : 	return nScaleType;

  00623	5f		 pop	 edi
  00624	c7 00 14 00 00
	00		 mov	 DWORD PTR [eax], 20	; 00000014H
  0062a	8b c6		 mov	 eax, esi
  0062c	5e		 pop	 esi
  0062d	5b		 pop	 ebx

; 233  : }

  0062e	8b e5		 mov	 esp, ebp
  00630	5d		 pop	 ebp
  00631	c2 18 00	 ret	 24			; 00000018H
$LN113@Recalculat:

; 226  : 				else if(	150./10 >= dOverlapFactor)	p_nSkipFactor = 10;

  00634	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@402e000000000000
  0063c	66 0f 2f c1	 comisd	 xmm0, xmm1
  00640	72 14		 jb	 SHORT $LN115@Recalculat
$LN147@Recalculat:

; 229  : 				break;
; 230  : 	}
; 231  : 
; 232  : 	return nScaleType;

  00642	8b 45 14	 mov	 eax, DWORD PTR _p_nSkipFactor$[ebp]
  00645	5f		 pop	 edi
  00646	c7 00 0a 00 00
	00		 mov	 DWORD PTR [eax], 10	; 0000000aH
  0064c	8b c6		 mov	 eax, esi
  0064e	5e		 pop	 esi
  0064f	5b		 pop	 ebx

; 233  : }

  00650	8b e5		 mov	 esp, ebp
  00652	5d		 pop	 ebp
  00653	c2 18 00	 ret	 24			; 00000018H
$LN115@Recalculat:

; 227  : 				else if(	150./ 5 >= dOverlapFactor)	p_nSkipFactor = 5;

  00656	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@403e000000000000
  0065e	66 0f 2f c1	 comisd	 xmm0, xmm1
  00662	72 14		 jb	 SHORT $LN117@Recalculat
$LN145@Recalculat:

; 229  : 				break;
; 230  : 	}
; 231  : 
; 232  : 	return nScaleType;

  00664	8b 45 14	 mov	 eax, DWORD PTR _p_nSkipFactor$[ebp]
$LN146@Recalculat:
  00667	5f		 pop	 edi
  00668	c7 00 05 00 00
	00		 mov	 DWORD PTR [eax], 5
  0066e	8b c6		 mov	 eax, esi
  00670	5e		 pop	 esi
  00671	5b		 pop	 ebx

; 233  : }

  00672	8b e5		 mov	 esp, ebp
  00674	5d		 pop	 ebp
  00675	c2 18 00	 ret	 24			; 00000018H
$LN117@Recalculat:

; 228  : 				else if(	150./ 2 >= dOverlapFactor)	p_nSkipFactor = 2;	

  00678	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4052c00000000000
  00680	66 0f 2f c1	 comisd	 xmm0, xmm1
  00684	72 09		 jb	 SHORT $LN119@Recalculat
  00686	8b 4d 14	 mov	 ecx, DWORD PTR _p_nSkipFactor$[ebp]
  00689	c7 01 02 00 00
	00		 mov	 DWORD PTR [ecx], 2
$LN119@Recalculat:

; 229  : 				break;
; 230  : 	}
; 231  : 
; 232  : 	return nScaleType;

  0068f	5f		 pop	 edi
  00690	8b c6		 mov	 eax, esi
  00692	5e		 pop	 esi
  00693	5b		 pop	 ebx

; 233  : }

  00694	8b e5		 mov	 esp, ebp
  00696	5d		 pop	 ebp
  00697	c2 18 00	 ret	 24			; 00000018H
  0069a	66 90		 npad	 2
$LN130@Recalculat:
  0069c	00 00 00 00	 DD	 $LN28@Recalculat
  006a0	00 00 00 00	 DD	 $LN34@Recalculat
  006a4	00 00 00 00	 DD	 $LN45@Recalculat
  006a8	00 00 00 00	 DD	 $LN77@Recalculat
  006ac	00 00 00 00	 DD	 $LN90@Recalculat
  006b0	00 00 00 00	 DD	 $LN110@Recalculat
$LN131@Recalculat:
  006b4	00 00 00 00	 DD	 $LN56@Recalculat
  006b8	00 00 00 00	 DD	 $LN46@Recalculat
  006bc	00 00 00 00	 DD	 $LN119@Recalculat
  006c0	00 00 00 00	 DD	 $LN49@Recalculat
  006c4	00 00 00 00	 DD	 $LN71@Recalculat
  006c8	00 00 00 00	 DD	 $LN49@Recalculat
?RecalculateScaleType@CXScaleGridTime@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4HORZSCALEDRAWERTYPE@CScaleBaseData@@HAAHHW4CHART_MODE@CChartInfo@@@Z ENDP ; CXScaleGridTime::RecalculateScaleType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
;	COMDAT ?Clear@CXScaleGridTime@@QAEXXZ
_TEXT	SEGMENT
?Clear@CXScaleGridTime@@QAEXXZ PROC			; CXScaleGridTime::Clear, COMDAT
; _this$ = ecx

; 74   : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi
  00004	57		 push	 edi

; 75   : 	for( int i = 0; i < 6; i++) m_blaScaleDataTime[ i].Clear();

  00005	bf 06 00 00 00	 mov	 edi, 6
  0000a	8d 73 0c	 lea	 esi, DWORD PTR [ebx+12]
  0000d	0f 1f 00	 npad	 3
$LL4@Clear:
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?Clear@CDataBlockListUNK@@QAEXXZ ; CDataBlockListUNK::Clear
  00017	83 c6 34	 add	 esi, 52			; 00000034H
  0001a	83 ef 01	 sub	 edi, 1
  0001d	75 f1		 jne	 SHORT $LL4@Clear

; 76   : 	for( int i = 0; i < 6; i++)	m_blaScaleDataDRI[ i].Clear();

  0001f	8d b3 44 01 00
	00		 lea	 esi, DWORD PTR [ebx+324]
  00025	bf 06 00 00 00	 mov	 edi, 6
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL7@Clear:
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?Clear@CDataBlockListUNK@@QAEXXZ ; CDataBlockListUNK::Clear
  00037	83 c6 34	 add	 esi, 52			; 00000034H
  0003a	83 ef 01	 sub	 edi, 1
  0003d	75 f1		 jne	 SHORT $LL7@Clear

; 77   : 	memset( m_tmLastScale, 0, sizeof( tm) * 6);

  0003f	68 d8 00 00 00	 push	 216			; 000000d8H
  00044	8d 83 7c 02 00
	00		 lea	 eax, DWORD PTR [ebx+636]
  0004a	57		 push	 edi
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 _memset
  00051	83 c4 0c	 add	 esp, 12			; 0000000cH
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx

; 78   : }

  00057	c3		 ret	 0
?Clear@CXScaleGridTime@@QAEXXZ ENDP			; CXScaleGridTime::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
;	COMDAT ?PushScaleDataTime@CXScaleGridTime@@QAEXHHUtm@@H@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -84					; size = 4
_Item$ = -80						; size = 4
_Item$ = -76						; size = 36
_tmDRI$GSCopy$ = -40					; size = 36
__$ArrayPad$ = -4					; size = 4
_p_nTimeDiff$ = 8					; size = 4
_p_nDRI$ = 12						; size = 4
_tmDRI$ = 16						; size = 36
_p_bEndDRI$ = 52					; size = 4
?PushScaleDataTime@CXScaleGridTime@@QAEXHHUtm@@H@Z PROC	; CXScaleGridTime::PushScaleDataTime, COMDAT
; _this$ = ecx

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	0f 10 4d 10	 movups	 xmm1, XMMWORD PTR _tmDRI$[ebp]
  00014	8b 45 30	 mov	 eax, DWORD PTR _tmDRI$[ebp+32]
  00017	0f 10 45 20	 movups	 xmm0, XMMWORD PTR _tmDRI$[ebp+16]
  0001b	89 45 f8	 mov	 DWORD PTR _tmDRI$GSCopy$[ebp+32], eax
  0001e	0f 11 4d d8	 movups	 XMMWORD PTR _tmDRI$GSCopy$[ebp], xmm1
  00022	53		 push	 ebx

; 43   : 	tmDRI.tm_hour += p_nTimeDiff;

  00023	66 0f 73 d9 08	 psrldq	 xmm1, 8
  00028	66 0f 7e c8	 movd	 eax, xmm1
  0002c	56		 push	 esi
  0002d	57		 push	 edi
  0002e	03 45 08	 add	 eax, DWORD PTR _p_nTimeDiff$[ebp]
  00031	8b f9		 mov	 edi, ecx
  00033	89 45 e0	 mov	 DWORD PTR _tmDRI$GSCopy$[ebp+8], eax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  00036	8d 45 d8	 lea	 eax, DWORD PTR _tmDRI$GSCopy$[ebp]
  00039	50		 push	 eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 42   : {

  0003a	89 7d ac	 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi
  0003d	0f 11 45 e8	 movups	 XMMWORD PTR _tmDRI$GSCopy$[ebp+16], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mktime64
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 46   : 	BOOL bNewTime = p_bEndDRI;

  00047	8b 5d 34	 mov	 ebx, DWORD PTR _p_bEndDRI$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\time.h

; 515  :             return _mktime64(_Tm);

  0004a	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 47   : 	for( int i = 0; i < 6; i++)

  0004d	33 f6		 xor	 esi, esi
  0004f	90		 npad	 1
$LL4@PushScaleD:

; 48   : 	{
; 49   : 		if( !bNewTime) switch( i)

  00050	85 db		 test	 ebx, ebx
  00052	75 63		 jne	 SHORT $LN26@PushScaleD
  00054	83 fe 05	 cmp	 esi, 5
  00057	0f 87 b3 00 00
	00		 ja	 $LN2@PushScaleD
  0005d	ff 24 b5 00 00
	00 00		 jmp	 DWORD PTR $LN27@PushScaleD[esi*4]
$LN8@PushScaleD:

; 50   : 		{
; 51   : 			case 0:	bNewTime = ( tmDRI.tm_year	!= m_tmLastScale[ 0].tm_year);

  00064	8b 45 ec	 mov	 eax, DWORD PTR _tmDRI$GSCopy$[ebp+20]
  00067	33 db		 xor	 ebx, ebx
  00069	3b 87 90 02 00
	00		 cmp	 eax, DWORD PTR [edi+656]

; 52   : 					break;

  0006f	eb 3f		 jmp	 SHORT $LN28@PushScaleD
$LN9@PushScaleD:

; 53   : 			case 1: bNewTime = ( tmDRI.tm_mon	!= m_tmLastScale[ 1].tm_mon);

  00071	8b 45 e8	 mov	 eax, DWORD PTR _tmDRI$GSCopy$[ebp+16]
  00074	33 db		 xor	 ebx, ebx
  00076	3b 87 b0 02 00
	00		 cmp	 eax, DWORD PTR [edi+688]

; 54   : 					break;

  0007c	eb 32		 jmp	 SHORT $LN28@PushScaleD
$LN10@PushScaleD:

; 55   : 			case 2: bNewTime = ( tmDRI.tm_mday	!= m_tmLastScale[ 2].tm_mday);

  0007e	8b 45 e4	 mov	 eax, DWORD PTR _tmDRI$GSCopy$[ebp+12]
  00081	33 db		 xor	 ebx, ebx
  00083	3b 87 d0 02 00
	00		 cmp	 eax, DWORD PTR [edi+720]

; 56   : 					break;

  00089	eb 25		 jmp	 SHORT $LN28@PushScaleD
$LN11@PushScaleD:

; 57   : 			case 3: bNewTime = ( tmDRI.tm_hour	!= m_tmLastScale[ 3].tm_hour);

  0008b	8b 45 e0	 mov	 eax, DWORD PTR _tmDRI$GSCopy$[ebp+8]
  0008e	33 db		 xor	 ebx, ebx
  00090	3b 87 f0 02 00
	00		 cmp	 eax, DWORD PTR [edi+752]

; 58   : 					break;

  00096	eb 18		 jmp	 SHORT $LN28@PushScaleD
$LN12@PushScaleD:

; 59   : 			case 4: bNewTime = ( tmDRI.tm_min	!= m_tmLastScale[ 4].tm_min);

  00098	8b 45 dc	 mov	 eax, DWORD PTR _tmDRI$GSCopy$[ebp+4]
  0009b	33 db		 xor	 ebx, ebx
  0009d	3b 87 10 03 00
	00		 cmp	 eax, DWORD PTR [edi+784]

; 60   : 					break;

  000a3	eb 0b		 jmp	 SHORT $LN28@PushScaleD
$LN13@PushScaleD:

; 61   : 			case 5: bNewTime = ( tmDRI.tm_sec	!= m_tmLastScale[ 5].tm_sec);

  000a5	8b 45 d8	 mov	 eax, DWORD PTR _tmDRI$GSCopy$[ebp]
  000a8	33 db		 xor	 ebx, ebx
  000aa	3b 87 30 03 00
	00		 cmp	 eax, DWORD PTR [edi+816]
$LN28@PushScaleD:

; 62   : 					break;
; 63   : 		}
; 64   : 		if( bNewTime)

  000b0	0f 95 c3	 setne	 bl
  000b3	85 db		 test	 ebx, ebx
  000b5	74 59		 je	 SHORT $LN2@PushScaleD
$LN26@PushScaleD:

; 65   : 		{
; 66   : 			m_tmLastScale[ i] = tmDRI;

  000b7	0f 10 4d d8	 movups	 xmm1, XMMWORD PTR _tmDRI$GSCopy$[ebp]
  000bb	8d 04 f6	 lea	 eax, DWORD PTR [esi+esi*8]
  000be	0f 10 45 e8	 movups	 xmm0, XMMWORD PTR _tmDRI$GSCopy$[ebp+16]
  000c2	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  000c5	8b 45 f8	 mov	 eax, DWORD PTR _tmDRI$GSCopy$[ebp+32]
  000c8	0f 11 89 7c 02
	00 00		 movups	 XMMWORD PTR [ecx+636], xmm1

; 67   : 			m_blaScaleDataTime[ i].PushBack( tmDRI);

  000cf	89 45 d4	 mov	 DWORD PTR _Item$[ebp+32], eax
  000d2	0f 11 81 8c 02
	00 00		 movups	 XMMWORD PTR [ecx+652], xmm0
  000d9	89 81 9c 02 00
	00		 mov	 DWORD PTR [ecx+668], eax
  000df	6b c6 34	 imul	 eax, esi, 52
  000e2	0f 11 4d b4	 movups	 XMMWORD PTR _Item$[ebp], xmm1
  000e6	0f 11 45 c4	 movups	 XMMWORD PTR _Item$[ebp+16], xmm0
  000ea	03 f8		 add	 edi, eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h

; 173  : 		PushBackUNK(&Item);

  000ec	8d 45 b4	 lea	 eax, DWORD PTR _Item$[ebp]
  000ef	50		 push	 eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 67   : 			m_blaScaleDataTime[ i].PushBack( tmDRI);

  000f0	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h

; 173  : 		PushBackUNK(&Item);

  000f3	e8 00 00 00 00	 call	 ?PushBackUNK@CDataBlockListUNK@@QAEXPAX@Z ; CDataBlockListUNK::PushBackUNK
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 68   : 			m_blaScaleDataDRI[ i].PushBack( p_nDRI);

  000f8	8b 45 0c	 mov	 eax, DWORD PTR _p_nDRI$[ebp]
  000fb	8d 8f 44 01 00
	00		 lea	 ecx, DWORD PTR [edi+324]
  00101	89 45 b0	 mov	 DWORD PTR _Item$[ebp], eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h

; 173  : 		PushBackUNK(&Item);

  00104	8d 45 b0	 lea	 eax, DWORD PTR _Item$[ebp]
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 ?PushBackUNK@CDataBlockListUNK@@QAEXPAX@Z ; CDataBlockListUNK::PushBackUNK
  0010d	8b 7d ac	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
$LN2@PushScaleD:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 47   : 	for( int i = 0; i < 6; i++)

  00110	46		 inc	 esi
  00111	83 fe 06	 cmp	 esi, 6
  00114	0f 8c 36 ff ff
	ff		 jl	 $LL4@PushScaleD

; 69   : 		}
; 70   : 	}
; 71   : }

  0011a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	33 cd		 xor	 ecx, ebp
  00121	5b		 pop	 ebx
  00122	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00127	8b e5		 mov	 esp, ebp
  00129	5d		 pop	 ebp
  0012a	c2 30 00	 ret	 48			; 00000030H
  0012d	0f 1f 00	 npad	 3
$LN27@PushScaleD:
  00130	00 00 00 00	 DD	 $LN8@PushScaleD
  00134	00 00 00 00	 DD	 $LN9@PushScaleD
  00138	00 00 00 00	 DD	 $LN10@PushScaleD
  0013c	00 00 00 00	 DD	 $LN11@PushScaleD
  00140	00 00 00 00	 DD	 $LN12@PushScaleD
  00144	00 00 00 00	 DD	 $LN13@PushScaleD
?PushScaleDataTime@CXScaleGridTime@@QAEXHHUtm@@H@Z ENDP	; CXScaleGridTime::PushScaleDataTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
;	COMDAT ?PopLastScaleDataTime@CXScaleGridTime@@QAEXXZ
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
?PopLastScaleDataTime@CXScaleGridTime@@QAEXXZ PROC	; CXScaleGridTime::PopLastScaleDataTime, COMDAT
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b c1		 mov	 eax, ecx

; 27   : 	for( int i = 0; i < 6; i++) if( 1 < m_blaScaleDataDRI[ i].GetItemCount())

  00007	bb 06 00 00 00	 mov	 ebx, 6
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  00011	8d b0 7c 02 00
	00		 lea	 esi, DWORD PTR [eax+636]
  00017	8d b8 44 01 00
	00		 lea	 edi, DWORD PTR [eax+324]
  0001d	0f 1f 00	 npad	 3
$LL4@PopLastSca:
  00020	8b cf		 mov	 ecx, edi
  00022	e8 00 00 00 00	 call	 ?GetItemCount@CDataBlockListUNK@@QAEHXZ ; CDataBlockListUNK::GetItemCount
  00027	83 f8 01	 cmp	 eax, 1
  0002a	7e 5f		 jle	 SHORT $LN2@PopLastSca

; 28   : 	{
; 29   : 		m_blaScaleDataDRI[ i].DeleteBack( 1);

  0002c	6a 01		 push	 1
  0002e	8b cf		 mov	 ecx, edi
  00030	e8 00 00 00 00	 call	 ?DeleteBack@CDataBlockListUNK@@QAEXH@Z ; CDataBlockListUNK::DeleteBack

; 30   : 		m_blaScaleDataTime[ i].DeleteBack( 1);

  00035	8d 8f c8 fe ff
	ff		 lea	 ecx, DWORD PTR [edi-312]
  0003b	6a 01		 push	 1
  0003d	e8 00 00 00 00	 call	 ?DeleteBack@CDataBlockListUNK@@QAEXH@Z ; CDataBlockListUNK::DeleteBack

; 31   : 		int nDRICount = m_blaScaleDataDRI[ i].GetItemCount();

  00042	8b cf		 mov	 ecx, edi
  00044	e8 00 00 00 00	 call	 ?GetItemCount@CDataBlockListUNK@@QAEHXZ ; CDataBlockListUNK::GetItemCount

; 32   : 		if( 0 < nDRICount)

  00049	85 c0		 test	 eax, eax
  0004b	7e 2d		 jle	 SHORT $LN6@PopLastSca

; 34   : 			m_pMReturn = m_blaScaleDataTime[ i].GetAt( nDRICount - 1);

  0004d	48		 dec	 eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h

; 215  : 	T*	GetAt( int nIndex)	{	return ( T*)GetAtUNK( nIndex);	}

  0004e	8d 8f c8 fe ff
	ff		 lea	 ecx, DWORD PTR [edi-312]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ?GetAtUNK@CDataBlockListUNK@@QAEPAXH@Z ; CDataBlockListUNK::GetAtUNK
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp

; 34   : 			m_pMReturn = m_blaScaleDataTime[ i].GetAt( nDRICount - 1);

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0005d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 35   : 			if( m_pMReturn) m_tmLastScale[ i] = *m_pMReturn;

  00060	85 c0		 test	 eax, eax
  00062	74 27		 je	 SHORT $LN2@PopLastSca
  00064	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00067	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0006a	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  0006e	0f 11 46 10	 movups	 XMMWORD PTR [esi+16], xmm0
  00072	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00075	89 46 20	 mov	 DWORD PTR [esi+32], eax

; 36   : 		}

  00078	eb 11		 jmp	 SHORT $LN2@PopLastSca
$LN6@PopLastSca:
  0007a	0f 57 c0	 xorps	 xmm0, xmm0

; 37   : 		else memset( &m_tmLastScale[ i], 0, sizeof( tm));

  0007d	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00080	0f 11 46 10	 movups	 XMMWORD PTR [esi+16], xmm0
  00084	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
$LN2@PopLastSca:

; 27   : 	for( int i = 0; i < 6; i++) if( 1 < m_blaScaleDataDRI[ i].GetItemCount())

  0008b	83 c7 34	 add	 edi, 52			; 00000034H
  0008e	83 c6 24	 add	 esi, 36			; 00000024H
  00091	83 eb 01	 sub	 ebx, 1
  00094	75 8a		 jne	 SHORT $LL4@PopLastSca

; 38   : 	}
; 39   : }

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
?PopLastScaleDataTime@CXScaleGridTime@@QAEXXZ ENDP	; CXScaleGridTime::PopLastScaleDataTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
;	COMDAT ??_G?$CDataBlockList@H$0CAA@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDataBlockList@H$0CAA@@@UAEPAXI@Z PROC		; CDataBlockList<int,512>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 163  : 	{

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDataBlockList@H$0CAA@@@6B@

; 164  : 	}

  0000c	e8 00 00 00 00	 call	 ??1CDataBlockListUNK@@UAE@XZ ; CDataBlockListUNK::~CDataBlockListUNK
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 0b		 je	 SHORT $LN7@scalar
  00017	6a 34		 push	 52			; 00000034H
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001f	83 c4 08	 add	 esp, 8
$LN7@scalar:
  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_G?$CDataBlockList@H$0CAA@@@UAEPAXI@Z ENDP		; CDataBlockList<int,512>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
;	COMDAT ??1?$CDataBlockList@H$0CAA@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDataBlockList@H$0CAA@@@UAE@XZ PROC		; CDataBlockList<int,512>::~CDataBlockList<int,512>, COMDAT
; _this$ = ecx

; 163  : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CDataBlockList@H$0CAA@@@6B@

; 164  : 	}

  00006	e9 00 00 00 00	 jmp	 ??1CDataBlockListUNK@@UAE@XZ ; CDataBlockListUNK::~CDataBlockListUNK
??1?$CDataBlockList@H$0CAA@@@UAE@XZ ENDP		; CDataBlockList<int,512>::~CDataBlockList<int,512>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
;	COMDAT ??0?$CDataBlockList@H$0CAA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CDataBlockList@H$0CAA@@@QAE@XZ PROC		; CDataBlockList<int,512>::CDataBlockList<int,512>, COMDAT
; _this$ = ecx

; 158  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00004	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h

; 159  : 	}

  0000b	8b c1		 mov	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0000d	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0
  00014	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h

; 158  : 	{

  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 24   : 		m_nItemSize = nItemSize;

  0001e	c7 41 04 04 00
	00 00		 mov	 DWORD PTR [ecx+4], 4

; 25   : 		m_nBlockSize = nBlockSize;

  00025	c7 41 08 00 02
	00 00		 mov	 DWORD PTR [ecx+8], 512	; 00000200H

; 26   : 
; 27   : 		m_nItemCount = 0;

  0002c	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 28   : 		m_nFirstBlockStartIndex = 0;

  00033	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 29   : 		m_nLastBlockEndIndex = 0;

  0003a	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 30   : 
; 31   : 		m_nIndex = 0;

  00041	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 32   : 		m_nBlockIndex = 0;

  00048	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 33   : 		m_nIndexInBlock = 0;

  0004f	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0

; 34   : 		m_lpBlockIndex = NULL;

  00056	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 158  : 	{

  0005d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CDataBlockList@H$0CAA@@@6B@

; 159  : 	}

  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
??0?$CDataBlockList@H$0CAA@@@QAE@XZ ENDP		; CDataBlockList<int,512>::CDataBlockList<int,512>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
;	COMDAT ??_G?$CDataBlockList@Utm@@$0CAA@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDataBlockList@Utm@@$0CAA@@@UAEPAXI@Z PROC	; CDataBlockList<tm,512>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 163  : 	{

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDataBlockList@Utm@@$0CAA@@@6B@

; 164  : 	}

  0000c	e8 00 00 00 00	 call	 ??1CDataBlockListUNK@@UAE@XZ ; CDataBlockListUNK::~CDataBlockListUNK
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 0b		 je	 SHORT $LN7@scalar
  00017	6a 34		 push	 52			; 00000034H
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001f	83 c4 08	 add	 esp, 8
$LN7@scalar:
  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_G?$CDataBlockList@Utm@@$0CAA@@@UAEPAXI@Z ENDP	; CDataBlockList<tm,512>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
;	COMDAT ??1?$CDataBlockList@Utm@@$0CAA@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDataBlockList@Utm@@$0CAA@@@UAE@XZ PROC		; CDataBlockList<tm,512>::~CDataBlockList<tm,512>, COMDAT
; _this$ = ecx

; 163  : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CDataBlockList@Utm@@$0CAA@@@6B@

; 164  : 	}

  00006	e9 00 00 00 00	 jmp	 ??1CDataBlockListUNK@@UAE@XZ ; CDataBlockListUNK::~CDataBlockListUNK
??1?$CDataBlockList@Utm@@$0CAA@@@UAE@XZ ENDP		; CDataBlockList<tm,512>::~CDataBlockList<tm,512>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
;	COMDAT ??0?$CDataBlockList@Utm@@$0CAA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CDataBlockList@Utm@@$0CAA@@@QAE@XZ PROC		; CDataBlockList<tm,512>::CDataBlockList<tm,512>, COMDAT
; _this$ = ecx

; 158  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00004	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h

; 159  : 	}

  0000b	8b c1		 mov	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0000d	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0
  00014	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h

; 158  : 	{

  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 24   : 		m_nItemSize = nItemSize;

  0001e	c7 41 04 24 00
	00 00		 mov	 DWORD PTR [ecx+4], 36	; 00000024H

; 25   : 		m_nBlockSize = nBlockSize;

  00025	c7 41 08 00 02
	00 00		 mov	 DWORD PTR [ecx+8], 512	; 00000200H

; 26   : 
; 27   : 		m_nItemCount = 0;

  0002c	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 28   : 		m_nFirstBlockStartIndex = 0;

  00033	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 29   : 		m_nLastBlockEndIndex = 0;

  0003a	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 30   : 
; 31   : 		m_nIndex = 0;

  00041	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 32   : 		m_nBlockIndex = 0;

  00048	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 33   : 		m_nIndexInBlock = 0;

  0004f	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0

; 34   : 		m_lpBlockIndex = NULL;

  00056	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 158  : 	{

  0005d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CDataBlockList@Utm@@$0CAA@@@6B@

; 159  : 	}

  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
??0?$CDataBlockList@Utm@@$0CAA@@@QAE@XZ ENDP		; CDataBlockList<tm,512>::CDataBlockList<tm,512>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
;	COMDAT ??1CXScaleGridTime@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CXScaleGridTime@@UAE@XZ PROC				; CXScaleGridTime::~CXScaleGridTime, COMDAT
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CXScaleGridTime@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b d9		 mov	 ebx, ecx
  00027	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7CXScaleGridTime@@6B@
  0002d	8d 73 0c	 lea	 esi, DWORD PTR [ebx+12]
  00030	bf 06 00 00 00	 mov	 edi, 6
$LL6@CXScaleGri:

; 75   : 	for( int i = 0; i < 6; i++) m_blaScaleDataTime[ i].Clear();

  00035	8b ce		 mov	 ecx, esi
  00037	e8 00 00 00 00	 call	 ?Clear@CDataBlockListUNK@@QAEXXZ ; CDataBlockListUNK::Clear
  0003c	83 c6 34	 add	 esi, 52			; 00000034H
  0003f	83 ef 01	 sub	 edi, 1
  00042	75 f1		 jne	 SHORT $LL6@CXScaleGri

; 76   : 	for( int i = 0; i < 6; i++)	m_blaScaleDataDRI[ i].Clear();

  00044	8d b3 44 01 00
	00		 lea	 esi, DWORD PTR [ebx+324]
  0004a	bf 06 00 00 00	 mov	 edi, 6
  0004f	90		 npad	 1
$LL9@CXScaleGri:
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ?Clear@CDataBlockListUNK@@QAEXXZ ; CDataBlockListUNK::Clear
  00057	83 c6 34	 add	 esi, 52			; 00000034H
  0005a	83 ef 01	 sub	 edi, 1
  0005d	75 f1		 jne	 SHORT $LL9@CXScaleGri

; 77   : 	memset( m_tmLastScale, 0, sizeof( tm) * 6);

  0005f	68 d8 00 00 00	 push	 216			; 000000d8H
  00064	8d 83 7c 02 00
	00		 lea	 eax, DWORD PTR [ebx+636]
  0006a	57		 push	 edi
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 _memset
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH

; 18   : 	Clear();
; 19   : }

  00074	8d 83 44 01 00
	00		 lea	 eax, DWORD PTR [ebx+324]
  0007a	68 00 00 00 00	 push	 OFFSET ??1?$CDataBlockList@H$0CAA@@@UAE@XZ ; CDataBlockList<int,512>::~CDataBlockList<int,512>
  0007f	6a 06		 push	 6
  00081	6a 34		 push	 52			; 00000034H
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00089	68 00 00 00 00	 push	 OFFSET ??1?$CDataBlockList@Utm@@$0CAA@@@UAE@XZ ; CDataBlockList<tm,512>::~CDataBlockList<tm,512>
  0008e	6a 06		 push	 6
  00090	6a 34		 push	 52			; 00000034H
  00092	8d 43 0c	 lea	 eax, DWORD PTR [ebx+12]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0009b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a5	59		 pop	 ecx
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
  000ad	cc		 int	 3
  000ae	cc		 int	 3
  000af	cc		 int	 3
  000b0	cc		 int	 3
  000b1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CXScaleGridTime@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CXScaleGridTime@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CXScaleGridTime@@UAE@XZ ENDP				; CXScaleGridTime::~CXScaleGridTime
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
;	COMDAT ??0CXScaleGridTime@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CXScaleGridTime@@QAE@XZ PROC				; CXScaleGridTime::CXScaleGridTime, COMDAT
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CXScaleGridTime@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	68 00 00 00 00	 push	 OFFSET ??1?$CDataBlockList@Utm@@$0CAA@@@UAE@XZ ; CDataBlockList<tm,512>::~CDataBlockList<tm,512>
  0002e	68 00 00 00 00	 push	 OFFSET ??0?$CDataBlockList@Utm@@$0CAA@@@QAE@XZ ; CDataBlockList<tm,512>::CDataBlockList<tm,512>
  00033	6a 06		 push	 6
  00035	6a 34		 push	 52			; 00000034H
  00037	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CXScaleGridTime@@6B@
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
  00046	68 00 00 00 00	 push	 OFFSET ??1?$CDataBlockList@H$0CAA@@@UAE@XZ ; CDataBlockList<int,512>::~CDataBlockList<int,512>
  0004b	68 00 00 00 00	 push	 OFFSET ??0?$CDataBlockList@H$0CAA@@@QAE@XZ ; CDataBlockList<int,512>::CDataBlockList<int,512>
  00050	6a 06		 push	 6
  00052	6a 34		 push	 52			; 00000034H
  00054	8d 86 44 01 00
	00		 lea	 eax, DWORD PTR [esi+324]
  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z

; 14   : }

  00067	8b c6		 mov	 eax, esi
  00069	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00073	59		 pop	 ecx
  00074	5e		 pop	 esi
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CXScaleGridTime@@QAE@XZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ??1?$CDataBlockList@Utm@@$0CAA@@@UAE@XZ ; CDataBlockList<tm,512>::~CDataBlockList<tm,512>
  00005	6a 06		 push	 6
  00007	6a 34		 push	 52			; 00000034H
  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 c0 0c	 add	 eax, 12			; 0000000cH
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00015	c3		 ret	 0
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$??0CXScaleGridTime@@QAE@XZ:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CXScaleGridTime@@QAE@XZ
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CXScaleGridTime@@QAE@XZ ENDP				; CXScaleGridTime::CXScaleGridTime
; Function compile flags: /Ogtp
;	COMDAT ??_GCDataBlockListUNK@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCDataBlockListUNK@@UAEPAXI@Z PROC			; CDataBlockListUNK::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CDataBlockListUNK@@UAE@XZ ; CDataBlockListUNK::~CDataBlockListUNK
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 34		 push	 52			; 00000034H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCDataBlockListUNK@@UAEPAXI@Z ENDP			; CDataBlockListUNK::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
;	COMDAT ?PushBackUNK@CDataBlockListUNK@@QAEXPAX@Z
_TEXT	SEGMENT
_lpLastBlock$ = -4					; size = 4
_Item$ = 8						; size = 4
?PushBackUNK@CDataBlockListUNK@@QAEXPAX@Z PROC		; CDataBlockListUNK::PushBackUNK, COMDAT
; _this$ = ecx

; 86   : 				{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 87   : 					if( m_nBlockSize < m_nLastBlockEndIndex) return;

  00007	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000a	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0000d	3b c8		 cmp	 ecx, eax
  0000f	7c 74		 jl	 SHORT $LN1@PushBackUN

; 88   : 
; 89   : 					LPVOID lpLastBlock = NULL;
; 90   : 					if(m_nItemCount == 0 || m_nLastBlockEndIndex == m_nBlockSize)

  00011	83 7e 0c 00	 cmp	 DWORD PTR [esi+12], 0
  00015	57		 push	 edi
  00016	74 0c		 je	 SHORT $LN5@PushBackUN
  00018	3b c1		 cmp	 eax, ecx
  0001a	74 08		 je	 SHORT $LN5@PushBackUN

; 96   : 					}
; 97   : 					else lpLastBlock =  m_vtBlockPointer.back();

  0001c	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0001f	8b 78 fc	 mov	 edi, DWORD PTR [eax-4]
  00022	eb 39		 jmp	 SHORT $LN10@PushBackUN
$LN5@PushBackUN:

; 94   : 						lpLastBlock = malloc(m_nBlockSize * m_nItemSize);

  00024	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00027	0f af c1	 imul	 eax, ecx
  0002a	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00031	50		 push	 eax
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc

; 95   : 						m_vtBlockPointer.push_back(lpLastBlock);

  00038	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  0003b	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  0003d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h

; 94   : 						lpLastBlock = malloc(m_nBlockSize * m_nItemSize);

  00040	83 c4 04	 add	 esp, 4
  00043	89 7d fc	 mov	 DWORD PTR _lpLastBlock$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  00046	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00049	74 08		 je	 SHORT $LN11@PushBackUN

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  0004b	89 38		 mov	 DWORD PTR [eax], edi

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

  0004d	83 41 04 04	 add	 DWORD PTR [ecx+4], 4

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00051	eb 0a		 jmp	 SHORT $LN10@PushBackUN
$LN11@PushBackUN:

; 732  :         }
; 733  : 
; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00053	8d 55 fc	 lea	 edx, DWORD PTR _lpLastBlock$[ebp]
  00056	52		 push	 edx
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAX@?$vector@PAXV?$allocator@PAX@std@@@std@@QAEPAPAXQAPAXABQAX@Z ; std::vector<void *,std::allocator<void *> >::_Emplace_reallocate<void * const &>
$LN10@PushBackUN:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h

; 99   : 					if( Item && lpLastBlock) 

  0005d	8b 45 08	 mov	 eax, DWORD PTR _Item$[ebp]
  00060	85 c0		 test	 eax, eax
  00062	74 1a		 je	 SHORT $LN6@PushBackUN
  00064	85 ff		 test	 edi, edi
  00066	74 16		 je	 SHORT $LN6@PushBackUN

; 100  : 						memcpy( ( ( PBYTE)lpLastBlock + ( m_nLastBlockEndIndex * m_nItemSize)), Item, m_nItemSize);

  00068	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0006b	51		 push	 ecx
  0006c	50		 push	 eax
  0006d	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00070	0f af c1	 imul	 eax, ecx
  00073	03 c7		 add	 eax, edi
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 _memcpy
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@PushBackUN:

; 101  : 
; 102  : 					m_nLastBlockEndIndex++;

  0007e	ff 46 14	 inc	 DWORD PTR [esi+20]

; 103  : 					m_nItemCount++;

  00081	ff 46 0c	 inc	 DWORD PTR [esi+12]
  00084	5f		 pop	 edi
$LN1@PushBackUN:
  00085	5e		 pop	 esi

; 104  : 				}

  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 04 00	 ret	 4
?PushBackUNK@CDataBlockListUNK@@QAEXPAX@Z ENDP		; CDataBlockListUNK::PushBackUNK
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAXV?$allocator@PAX@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAXV?$allocator@PAX@std@@@std@@CAXXZ PROC ; std::vector<void *,std::allocator<void *> >::_Xlength, COMDAT

; 1761 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAXV?$allocator@PAX@std@@@std@@CAXXZ ENDP ; std::vector<void *,std::allocator<void *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 315  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 316  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\ChartObject\XScaleGridTime.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
