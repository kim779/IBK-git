; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30145.0 

	TITLE	D:\git\src\IBK\IBK_DRFN\#DRfn-CS\_Obj\ChartObject\ScaleDataList.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1CObject@@UAE@XZ				; CObject::~CObject
PUBLIC	?Serialize@CObject@@UAEXAAVCArchive@@@Z		; CObject::Serialize
PUBLIC	?AssertValid@CObject@@UBEXXZ			; CObject::AssertValid
PUBLIC	?Dump@CObject@@UBEXAAVCDumpContext@@@Z		; CObject::Dump
PUBLIC	??4CInsertingBlockHorzScaleData@@QAEAAV0@ABV0@@Z ; CInsertingBlockHorzScaleData::operator=
PUBLIC	??0CInsertingBlockHorzScaleData@@QAE@XZ		; CInsertingBlockHorzScaleData::CInsertingBlockHorzScaleData
PUBLIC	??0CInsertingBlockHorzScaleData@@QAE@_NABVCHorizontalScale@@@Z ; CInsertingBlockHorzScaleData::CInsertingBlockHorzScaleData
PUBLIC	?IsOnlyBottomBlockShow@CInsertingBlockHorzScaleData@@QBE_NXZ ; CInsertingBlockHorzScaleData::IsOnlyBottomBlockShow
PUBLIC	?GetHorizontalScale@CInsertingBlockHorzScaleData@@QBE?AVCHorizontalScale@@XZ ; CInsertingBlockHorzScaleData::GetHorizontalScale
PUBLIC	?GetHorizontalScale@CInsertingBlockHorzScaleData@@QAEAAVCHorizontalScale@@XZ ; CInsertingBlockHorzScaleData::GetHorizontalScale
PUBLIC	?SetOnlyBottomBlockShow@CInsertingBlockHorzScaleData@@QAEX_N@Z ; CInsertingBlockHorzScaleData::SetOnlyBottomBlockShow
PUBLIC	?SetHorizontalScale@CInsertingBlockHorzScaleData@@QAEXABVCHorizontalScale@@@Z ; CInsertingBlockHorzScaleData::SetHorizontalScale
PUBLIC	??0CMovingGraphVertScaleData@@QAE@XZ		; CMovingGraphVertScaleData::CMovingGraphVertScaleData
PUBLIC	??0CMovingGraphVertScaleData@@QAE@HABVCVerticalScale@@@Z ; CMovingGraphVertScaleData::CMovingGraphVertScaleData
PUBLIC	?GetVertScaleGroupIndex@CMovingGraphVertScaleData@@QBEHXZ ; CMovingGraphVertScaleData::GetVertScaleGroupIndex
PUBLIC	?GetVerticalScale@CMovingGraphVertScaleData@@QBE?AVCVerticalScale@@XZ ; CMovingGraphVertScaleData::GetVerticalScale
PUBLIC	?SetVertScaleGroupIndex@CMovingGraphVertScaleData@@QAEXH@Z ; CMovingGraphVertScaleData::SetVertScaleGroupIndex
PUBLIC	?SetVerticalScale@CMovingGraphVertScaleData@@QAEXABVCVerticalScale@@@Z ; CMovingGraphVertScaleData::SetVerticalScale
PUBLIC	??4CVerticalScaleGroupData@@QAEAAV0@ABV0@@Z	; CVerticalScaleGroupData::operator=
PUBLIC	??0CVerticalScaleGroupData@@QAE@XZ		; CVerticalScaleGroupData::CVerticalScaleGroupData
PUBLIC	??0CVerticalScaleGroupData@@QAE@ABVCVerticalScale@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CVerticalScaleGroupData::CVerticalScaleGroupData
PUBLIC	?GetVertScale@CVerticalScaleGroupData@@QAEAAVCVerticalScale@@XZ ; CVerticalScaleGroupData::GetVertScale
PUBLIC	?GetVertScale@CVerticalScaleGroupData@@QBE?AVCVerticalScale@@XZ ; CVerticalScaleGroupData::GetVertScale
PUBLIC	?GetVertScaleTitle@CVerticalScaleGroupData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; CVerticalScaleGroupData::GetVertScaleTitle
PUBLIC	?SetVertScale@CVerticalScaleGroupData@@QAEXABVCVerticalScale@@@Z ; CVerticalScaleGroupData::SetVertScale
PUBLIC	?SetVertScaleTitle@CVerticalScaleGroupData@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CVerticalScaleGroupData::SetVertScaleTitle
PUBLIC	??1CVerticalScaleGroupData@@QAE@XZ		; CVerticalScaleGroupData::~CVerticalScaleGroupData
PUBLIC	??4CVerticalScaleGroupDataList@@QAEAAV0@ABV0@@Z	; CVerticalScaleGroupDataList::operator=
PUBLIC	??0CVerticalScaleGroupDataList@@QAE@XZ		; CVerticalScaleGroupDataList::CVerticalScaleGroupDataList
PUBLIC	??0CVerticalScaleGroupDataList@@QAE@ABV0@@Z	; CVerticalScaleGroupDataList::CVerticalScaleGroupDataList
PUBLIC	?AddTail@CVerticalScaleGroupDataList@@QAEXVCVerticalScaleGroupData@@@Z ; CVerticalScaleGroupDataList::AddTail
PUBLIC	?RemoveAll@CVerticalScaleGroupDataList@@QAEXXZ	; CVerticalScaleGroupDataList::RemoveAll
PUBLIC	?SetFirstIndex@CVerticalScaleGroupDataList@@QAEXH@Z ; CVerticalScaleGroupDataList::SetFirstIndex
PUBLIC	?GetFirstIndex@CVerticalScaleGroupDataList@@QBEHXZ ; CVerticalScaleGroupDataList::GetFirstIndex
PUBLIC	?GetCount@CVerticalScaleGroupDataList@@QBEHXZ	; CVerticalScaleGroupDataList::GetCount
PUBLIC	?GetAt@CVerticalScaleGroupDataList@@QAEAAVCVerticalScaleGroupData@@H@Z ; CVerticalScaleGroupDataList::GetAt
PUBLIC	?GetAt@CVerticalScaleGroupDataList@@QBE?AVCVerticalScaleGroupData@@H@Z ; CVerticalScaleGroupDataList::GetAt
PUBLIC	??0?$CList@VCVerticalScaleGroupData@@AAV1@@@QAE@H@Z ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>
PUBLIC	?AddTail@?$CList@VCVerticalScaleGroupData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScaleGroupData@@@Z ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::AddTail
PUBLIC	?RemoveAll@?$CList@VCVerticalScaleGroupData@@AAV1@@@QAEXXZ ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::RemoveAll
PUBLIC	?FindIndex@?$CList@VCVerticalScaleGroupData@@AAV1@@@QBEPAU__POSITION@@H@Z ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::FindIndex
PUBLIC	?NewNode@?$CList@VCVerticalScaleGroupData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::NewNode
PUBLIC	??1?$CList@VCVerticalScaleGroupData@@AAV1@@@UAE@XZ ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::~CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>
PUBLIC	?Serialize@?$CList@VCVerticalScaleGroupData@@AAV1@@@UAEXAAVCArchive@@@Z ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::Serialize
PUBLIC	??_G?$CList@VCVerticalScaleGroupData@@AAV1@@@UAEPAXI@Z ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::`scalar deleting destructor'
PUBLIC	??4CHorizontalScalePtrData@@QAEAAV0@ABV0@@Z	; CHorizontalScalePtrData::operator=
PUBLIC	??0CHorizontalScalePtrData@@QAE@XZ		; CHorizontalScalePtrData::CHorizontalScalePtrData
PUBLIC	??0CHorizontalScalePtrData@@QAE@PAVCHorizontalScale@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CHorizontalScalePtrData::CHorizontalScalePtrData
PUBLIC	?GetHorzScale@CHorizontalScalePtrData@@QAEPAVCHorizontalScale@@XZ ; CHorizontalScalePtrData::GetHorzScale
PUBLIC	?GetHorzScale@CHorizontalScalePtrData@@QBEPAVCHorizontalScale@@XZ ; CHorizontalScalePtrData::GetHorzScale
PUBLIC	?GetHorzScaleTitle@CHorizontalScalePtrData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; CHorizontalScalePtrData::GetHorzScaleTitle
PUBLIC	??1CHorizontalScalePtrData@@QAE@XZ		; CHorizontalScalePtrData::~CHorizontalScalePtrData
PUBLIC	??4CHorizontalScalePtrDataList@@QAEAAV0@ABV0@@Z	; CHorizontalScalePtrDataList::operator=
PUBLIC	??0CHorizontalScalePtrDataList@@QAE@PAVCMainBlock@@@Z ; CHorizontalScalePtrDataList::CHorizontalScalePtrDataList
PUBLIC	??0CHorizontalScalePtrDataList@@QAE@ABV0@@Z	; CHorizontalScalePtrDataList::CHorizontalScalePtrDataList
PUBLIC	?AddTail@CHorizontalScalePtrDataList@@QAEXVCHorizontalScalePtrData@@@Z ; CHorizontalScalePtrDataList::AddTail
PUBLIC	?RemoveAll@CHorizontalScalePtrDataList@@QAEXXZ	; CHorizontalScalePtrDataList::RemoveAll
PUBLIC	?SetFirstIndex@CHorizontalScalePtrDataList@@QAEXH@Z ; CHorizontalScalePtrDataList::SetFirstIndex
PUBLIC	?SetMarginCount@CHorizontalScalePtrDataList@@QAEXH@Z ; CHorizontalScalePtrDataList::SetMarginCount
PUBLIC	?SetScaleColor@CHorizontalScalePtrDataList@@QAEXPAK0@Z ; CHorizontalScalePtrDataList::SetScaleColor
PUBLIC	?SetScaleColor@CHorizontalScalePtrDataList@@QAEXABK0@Z ; CHorizontalScalePtrDataList::SetScaleColor
PUBLIC	?SetHorzScale@CHorizontalScalePtrDataList@@QAEXHABVCHorizontalScale@@@Z ; CHorizontalScalePtrDataList::SetHorzScale
PUBLIC	?GetFirstIndex@CHorizontalScalePtrDataList@@QBEHXZ ; CHorizontalScalePtrDataList::GetFirstIndex
PUBLIC	?GetMarginCount@CHorizontalScalePtrDataList@@QBEHXZ ; CHorizontalScalePtrDataList::GetMarginCount
PUBLIC	?GetScaleGridColor@CHorizontalScalePtrDataList@@QBEPAKXZ ; CHorizontalScalePtrDataList::GetScaleGridColor
PUBLIC	?GetScaleTextColor@CHorizontalScalePtrDataList@@QBEPAKXZ ; CHorizontalScalePtrDataList::GetScaleTextColor
PUBLIC	?GetCount@CHorizontalScalePtrDataList@@QBEHXZ	; CHorizontalScalePtrDataList::GetCount
PUBLIC	?GetAt@CHorizontalScalePtrDataList@@QAEAAVCHorizontalScalePtrData@@H@Z ; CHorizontalScalePtrDataList::GetAt
PUBLIC	?GetAt@CHorizontalScalePtrDataList@@QBE?AVCHorizontalScalePtrData@@H@Z ; CHorizontalScalePtrDataList::GetAt
PUBLIC	??0?$CList@VCHorizontalScalePtrData@@AAV1@@@QAE@H@Z ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>
PUBLIC	?AddTail@?$CList@VCHorizontalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCHorizontalScalePtrData@@@Z ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::AddTail
PUBLIC	?RemoveAll@?$CList@VCHorizontalScalePtrData@@AAV1@@@QAEXXZ ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::RemoveAll
PUBLIC	?FindIndex@?$CList@VCHorizontalScalePtrData@@AAV1@@@QBEPAU__POSITION@@H@Z ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::FindIndex
PUBLIC	?NewNode@?$CList@VCHorizontalScalePtrData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::NewNode
PUBLIC	??1?$CList@VCHorizontalScalePtrData@@AAV1@@@UAE@XZ ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::~CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>
PUBLIC	?Serialize@?$CList@VCHorizontalScalePtrData@@AAV1@@@UAEXAAVCArchive@@@Z ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::Serialize
PUBLIC	??_G?$CList@VCHorizontalScalePtrData@@AAV1@@@UAEPAXI@Z ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::`scalar deleting destructor'
PUBLIC	??4CHorizontalScaleDataList@@QAEAAV0@ABV0@@Z	; CHorizontalScaleDataList::operator=
PUBLIC	??0CHorizontalScaleDataList@@QAE@XZ		; CHorizontalScaleDataList::CHorizontalScaleDataList
PUBLIC	??0CHorizontalScaleDataList@@QAE@ABV0@@Z	; CHorizontalScaleDataList::CHorizontalScaleDataList
PUBLIC	??0CHorizontalScaleDataList@@QAE@PBVCHorizontalScalePtrDataList@@@Z ; CHorizontalScaleDataList::CHorizontalScaleDataList
PUBLIC	?AddTail@CHorizontalScaleDataList@@QAEXVCHorizontalScale@@@Z ; CHorizontalScaleDataList::AddTail
PUBLIC	?RemoveAll@CHorizontalScaleDataList@@QAEXXZ	; CHorizontalScaleDataList::RemoveAll
PUBLIC	?GetScaleGridColor@CHorizontalScaleDataList@@QBEKXZ ; CHorizontalScaleDataList::GetScaleGridColor
PUBLIC	?GetScaleTextColor@CHorizontalScaleDataList@@QBEKXZ ; CHorizontalScaleDataList::GetScaleTextColor
PUBLIC	?GetCount@CHorizontalScaleDataList@@QBEHXZ	; CHorizontalScaleDataList::GetCount
PUBLIC	?GetAt@CHorizontalScaleDataList@@QAEAAVCHorizontalScale@@H@Z ; CHorizontalScaleDataList::GetAt
PUBLIC	?GetAt@CHorizontalScaleDataList@@QBE?AVCHorizontalScale@@H@Z ; CHorizontalScaleDataList::GetAt
PUBLIC	??0?$CList@VCHorizontalScale@@AAV1@@@QAE@H@Z	; CList<CHorizontalScale,CHorizontalScale &>::CList<CHorizontalScale,CHorizontalScale &>
PUBLIC	?AddTail@?$CList@VCHorizontalScale@@AAV1@@@QAEPAU__POSITION@@AAVCHorizontalScale@@@Z ; CList<CHorizontalScale,CHorizontalScale &>::AddTail
PUBLIC	?RemoveAll@?$CList@VCHorizontalScale@@AAV1@@@QAEXXZ ; CList<CHorizontalScale,CHorizontalScale &>::RemoveAll
PUBLIC	?FindIndex@?$CList@VCHorizontalScale@@AAV1@@@QBEPAU__POSITION@@H@Z ; CList<CHorizontalScale,CHorizontalScale &>::FindIndex
PUBLIC	?NewNode@?$CList@VCHorizontalScale@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<CHorizontalScale,CHorizontalScale &>::NewNode
PUBLIC	??1?$CList@VCHorizontalScale@@AAV1@@@UAE@XZ	; CList<CHorizontalScale,CHorizontalScale &>::~CList<CHorizontalScale,CHorizontalScale &>
PUBLIC	?Serialize@?$CList@VCHorizontalScale@@AAV1@@@UAEXAAVCArchive@@@Z ; CList<CHorizontalScale,CHorizontalScale &>::Serialize
PUBLIC	??_G?$CList@VCHorizontalScale@@AAV1@@@UAEPAXI@Z	; CList<CHorizontalScale,CHorizontalScale &>::`scalar deleting destructor'
PUBLIC	??4CVerticalScalePtrData@@QAEAAV0@ABV0@@Z	; CVerticalScalePtrData::operator=
PUBLIC	??0CVerticalScalePtrData@@QAE@XZ		; CVerticalScalePtrData::CVerticalScalePtrData
PUBLIC	??0CVerticalScalePtrData@@QAE@PAVCVerticalScale@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@1@Z ; CVerticalScalePtrData::CVerticalScalePtrData
PUBLIC	?GetVertScale@CVerticalScalePtrData@@QAEPAVCVerticalScale@@XZ ; CVerticalScalePtrData::GetVertScale
PUBLIC	?GetVertScale@CVerticalScalePtrData@@QBEPAVCVerticalScale@@XZ ; CVerticalScalePtrData::GetVertScale
PUBLIC	?GetVertScaleTitle@CVerticalScalePtrData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; CVerticalScalePtrData::GetVertScaleTitle
PUBLIC	??1CVerticalScalePtrData@@QAE@XZ		; CVerticalScalePtrData::~CVerticalScalePtrData
PUBLIC	??4CVerticalScalePtrDataList@@QAEAAV0@ABV0@@Z	; CVerticalScalePtrDataList::operator=
PUBLIC	??0CVerticalScalePtrDataList@@QAE@XZ		; CVerticalScalePtrDataList::CVerticalScalePtrDataList
PUBLIC	??0CVerticalScalePtrDataList@@QAE@ABV0@@Z	; CVerticalScalePtrDataList::CVerticalScalePtrDataList
PUBLIC	?AddTail@CVerticalScalePtrDataList@@QAEXVCVerticalScalePtrData@@@Z ; CVerticalScalePtrDataList::AddTail
PUBLIC	?RemoveAll@CVerticalScalePtrDataList@@QAEXXZ	; CVerticalScalePtrDataList::RemoveAll
PUBLIC	?SetFirstIndex@CVerticalScalePtrDataList@@QAEXH@Z ; CVerticalScalePtrDataList::SetFirstIndex
PUBLIC	?SetScaleColor@CVerticalScalePtrDataList@@QAEXPAK0@Z ; CVerticalScalePtrDataList::SetScaleColor
PUBLIC	?SetScaleColor@CVerticalScalePtrDataList@@QAEXABK0@Z ; CVerticalScalePtrDataList::SetScaleColor
PUBLIC	?SetEnableLogType@CVerticalScalePtrDataList@@QAEX_N@Z ; CVerticalScalePtrDataList::SetEnableLogType
PUBLIC	?SetLogType@CVerticalScalePtrDataList@@QAEXPA_N@Z ; CVerticalScalePtrDataList::SetLogType
PUBLIC	?SetLogType@CVerticalScalePtrDataList@@QAEX_N@Z	; CVerticalScalePtrDataList::SetLogType
PUBLIC	?SetVertScale@CVerticalScalePtrDataList@@QAEXHABVCVerticalScale@@@Z ; CVerticalScalePtrDataList::SetVertScale
PUBLIC	?GetFirstIndex@CVerticalScalePtrDataList@@QBEHXZ ; CVerticalScalePtrDataList::GetFirstIndex
PUBLIC	?GetScaleGridColor@CVerticalScalePtrDataList@@QBEPAKXZ ; CVerticalScalePtrDataList::GetScaleGridColor
PUBLIC	?GetScaleTextColor@CVerticalScalePtrDataList@@QBEPAKXZ ; CVerticalScalePtrDataList::GetScaleTextColor
PUBLIC	?IsEnableLogType@CVerticalScalePtrDataList@@QBE_NXZ ; CVerticalScalePtrDataList::IsEnableLogType
PUBLIC	?GetScaleLogType@CVerticalScalePtrDataList@@QBEPA_NXZ ; CVerticalScalePtrDataList::GetScaleLogType
PUBLIC	?GetCount@CVerticalScalePtrDataList@@QBEHXZ	; CVerticalScalePtrDataList::GetCount
PUBLIC	?GetAt@CVerticalScalePtrDataList@@QAEAAVCVerticalScalePtrData@@H@Z ; CVerticalScalePtrDataList::GetAt
PUBLIC	?GetAt@CVerticalScalePtrDataList@@QBE?AVCVerticalScalePtrData@@H@Z ; CVerticalScalePtrDataList::GetAt
PUBLIC	??0?$CList@VCVerticalScalePtrData@@AAV1@@@QAE@H@Z ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::CList<CVerticalScalePtrData,CVerticalScalePtrData &>
PUBLIC	?AddTail@?$CList@VCVerticalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScalePtrData@@@Z ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::AddTail
PUBLIC	?RemoveAll@?$CList@VCVerticalScalePtrData@@AAV1@@@QAEXXZ ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::RemoveAll
PUBLIC	?FindIndex@?$CList@VCVerticalScalePtrData@@AAV1@@@QBEPAU__POSITION@@H@Z ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::FindIndex
PUBLIC	?NewNode@?$CList@VCVerticalScalePtrData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::NewNode
PUBLIC	??1?$CList@VCVerticalScalePtrData@@AAV1@@@UAE@XZ ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::~CList<CVerticalScalePtrData,CVerticalScalePtrData &>
PUBLIC	?Serialize@?$CList@VCVerticalScalePtrData@@AAV1@@@UAEXAAVCArchive@@@Z ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::Serialize
PUBLIC	??_G?$CList@VCVerticalScalePtrData@@AAV1@@@UAEPAXI@Z ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::`scalar deleting destructor'
PUBLIC	??4CVerticalScaleDataList@@QAEAAV0@ABV0@@Z	; CVerticalScaleDataList::operator=
PUBLIC	??0CVerticalScaleDataList@@QAE@XZ		; CVerticalScaleDataList::CVerticalScaleDataList
PUBLIC	??0CVerticalScaleDataList@@QAE@ABV0@@Z		; CVerticalScaleDataList::CVerticalScaleDataList
PUBLIC	??0CVerticalScaleDataList@@QAE@PBVCVerticalScalePtrDataList@@@Z ; CVerticalScaleDataList::CVerticalScaleDataList
PUBLIC	?AddTail@CVerticalScaleDataList@@QAEXVCVerticalScale@@@Z ; CVerticalScaleDataList::AddTail
PUBLIC	?RemoveAll@CVerticalScaleDataList@@QAEXXZ	; CVerticalScaleDataList::RemoveAll
PUBLIC	?GetScaleGridColor@CVerticalScaleDataList@@QBEKXZ ; CVerticalScaleDataList::GetScaleGridColor
PUBLIC	?GetScaleTextColor@CVerticalScaleDataList@@QBEKXZ ; CVerticalScaleDataList::GetScaleTextColor
PUBLIC	?IsScaleLogType@CVerticalScaleDataList@@QBE_NXZ	; CVerticalScaleDataList::IsScaleLogType
PUBLIC	?GetCount@CVerticalScaleDataList@@QBEHXZ	; CVerticalScaleDataList::GetCount
PUBLIC	?GetAt@CVerticalScaleDataList@@QAEAAVCVerticalScale@@H@Z ; CVerticalScaleDataList::GetAt
PUBLIC	?GetAt@CVerticalScaleDataList@@QBE?AVCVerticalScale@@H@Z ; CVerticalScaleDataList::GetAt
PUBLIC	??0?$CList@VCVerticalScale@@AAV1@@@QAE@H@Z	; CList<CVerticalScale,CVerticalScale &>::CList<CVerticalScale,CVerticalScale &>
PUBLIC	?AddTail@?$CList@VCVerticalScale@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScale@@@Z ; CList<CVerticalScale,CVerticalScale &>::AddTail
PUBLIC	?RemoveAll@?$CList@VCVerticalScale@@AAV1@@@QAEXXZ ; CList<CVerticalScale,CVerticalScale &>::RemoveAll
PUBLIC	?FindIndex@?$CList@VCVerticalScale@@AAV1@@@QBEPAU__POSITION@@H@Z ; CList<CVerticalScale,CVerticalScale &>::FindIndex
PUBLIC	?NewNode@?$CList@VCVerticalScale@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<CVerticalScale,CVerticalScale &>::NewNode
PUBLIC	??1?$CList@VCVerticalScale@@AAV1@@@UAE@XZ	; CList<CVerticalScale,CVerticalScale &>::~CList<CVerticalScale,CVerticalScale &>
PUBLIC	?Serialize@?$CList@VCVerticalScale@@AAV1@@@UAEXAAVCArchive@@@Z ; CList<CVerticalScale,CVerticalScale &>::Serialize
PUBLIC	??_G?$CList@VCVerticalScale@@AAV1@@@UAEPAXI@Z	; CList<CVerticalScale,CVerticalScale &>::`scalar deleting destructor'
PUBLIC	??$SerializeElements@VCVerticalScaleGroupData@@@@YGXAAVCArchive@@PAVCVerticalScaleGroupData@@H@Z ; SerializeElements<CVerticalScaleGroupData>
PUBLIC	??$SerializeElements@VCHorizontalScalePtrData@@@@YGXAAVCArchive@@PAVCHorizontalScalePtrData@@H@Z ; SerializeElements<CHorizontalScalePtrData>
PUBLIC	??$SerializeElements@VCHorizontalScale@@@@YGXAAVCArchive@@PAVCHorizontalScale@@H@Z ; SerializeElements<CHorizontalScale>
PUBLIC	??$SerializeElements@VCVerticalScalePtrData@@@@YGXAAVCArchive@@PAVCVerticalScalePtrData@@H@Z ; SerializeElements<CVerticalScalePtrData>
PUBLIC	??$SerializeElements@VCVerticalScale@@@@YGXAAVCArchive@@PAVCVerticalScale@@H@Z ; SerializeElements<CVerticalScale>
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R3CObject@@8					; CObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObject@@8					; CObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CObject@@8			; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$CList@VCVerticalScaleGroupData@@AAV1@@@6B@ ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::`vftable'
PUBLIC	??_7?$CList@VCHorizontalScalePtrData@@AAV1@@@6B@ ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::`vftable'
PUBLIC	??_7?$CList@VCHorizontalScale@@AAV1@@@6B@	; CList<CHorizontalScale,CHorizontalScale &>::`vftable'
PUBLIC	??_7?$CList@VCVerticalScalePtrData@@AAV1@@@6B@	; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::`vftable'
PUBLIC	??_7?$CList@VCVerticalScale@@AAV1@@@6B@		; CList<CVerticalScale,CVerticalScale &>::`vftable'
PUBLIC	??_R4?$CList@VCVerticalScaleGroupData@@AAV1@@@6B@ ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CList@VCVerticalScaleGroupData@@AAV1@@@@8 ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &> `RTTI Type Descriptor'
PUBLIC	??_R3?$CList@VCVerticalScaleGroupData@@AAV1@@@8	; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CList@VCVerticalScaleGroupData@@AAV1@@@8	; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CList@VCVerticalScaleGroupData@@AAV1@@@8 ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CList@VCHorizontalScalePtrData@@AAV1@@@6B@ ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CList@VCHorizontalScalePtrData@@AAV1@@@@8 ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &> `RTTI Type Descriptor'
PUBLIC	??_R3?$CList@VCHorizontalScalePtrData@@AAV1@@@8	; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CList@VCHorizontalScalePtrData@@AAV1@@@8	; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CList@VCHorizontalScalePtrData@@AAV1@@@8 ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CList@VCHorizontalScale@@AAV1@@@6B@	; CList<CHorizontalScale,CHorizontalScale &>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CList@VCHorizontalScale@@AAV1@@@@8	; CList<CHorizontalScale,CHorizontalScale &> `RTTI Type Descriptor'
PUBLIC	??_R3?$CList@VCHorizontalScale@@AAV1@@@8	; CList<CHorizontalScale,CHorizontalScale &>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CList@VCHorizontalScale@@AAV1@@@8	; CList<CHorizontalScale,CHorizontalScale &>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CList@VCHorizontalScale@@AAV1@@@8 ; CList<CHorizontalScale,CHorizontalScale &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CList@VCVerticalScalePtrData@@AAV1@@@6B@	; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CList@VCVerticalScalePtrData@@AAV1@@@@8 ; CList<CVerticalScalePtrData,CVerticalScalePtrData &> `RTTI Type Descriptor'
PUBLIC	??_R3?$CList@VCVerticalScalePtrData@@AAV1@@@8	; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CList@VCVerticalScalePtrData@@AAV1@@@8	; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CList@VCVerticalScalePtrData@@AAV1@@@8 ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CList@VCVerticalScale@@AAV1@@@6B@	; CList<CVerticalScale,CVerticalScale &>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CList@VCVerticalScale@@AAV1@@@@8	; CList<CVerticalScale,CVerticalScale &> `RTTI Type Descriptor'
PUBLIC	??_R3?$CList@VCVerticalScale@@AAV1@@@8		; CList<CVerticalScale,CVerticalScale &>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CList@VCVerticalScale@@AAV1@@@8		; CList<CVerticalScale,CVerticalScale &>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CList@VCVerticalScale@@AAV1@@@8	; CList<CVerticalScale,CVerticalScale &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	?__global_delete@@YAXPAXI@Z:PROC		; __global_delete
EXTRN	___std_terminate:PROC
EXTRN	?AfxThrowInvalidArgException@@YGXXZ:PROC	; AfxThrowInvalidArgException
EXTRN	?AfxThrowArchiveException@@YGXHPBD@Z:PROC	; AfxThrowArchiveException
EXTRN	?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ:PROC ; CObject::GetRuntimeClass
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z:PROC
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z:PROC
EXTRN	?Read@CArchive@@QAEIPAXI@Z:PROC			; CArchive::Read
EXTRN	?Write@CArchive@@QAEXPBXI@Z:PROC		; CArchive::Write
EXTRN	?ReadCount@CArchive@@QAEKXZ:PROC		; CArchive::ReadCount
EXTRN	?WriteCount@CArchive@@QAEXK@Z:PROC		; CArchive::WriteCount
EXTRN	?Create@CPlex@@SGPAU1@AAPAU1@II@Z:PROC		; CPlex::Create
EXTRN	?FreeDataChain@CPlex@@QAEXXZ:PROC		; CPlex::FreeDataChain
EXTRN	__imp_??1CScaleCompart@@QAE@XZ:PROC
EXTRN	__imp_?SetGridType@CScale@@QAEXW4SCALEGRIDTYPE@CScaleBaseData@@@Z:PROC
EXTRN	__imp_?GetGridType@CScale@@QBE?AW4SCALEGRIDTYPE@CScaleBaseData@@XZ:PROC
EXTRN	__imp_??4CHorizontalScale@@QAEAAV0@ABV0@@Z:PROC
EXTRN	__imp_??0CHorizontalScale@@QAE@XZ:PROC
EXTRN	__imp_?SetScaleCompart@CHorizontalScale@@QAEXABVCScaleCompart@@@Z:PROC
EXTRN	__imp_?GetHorzScalePosition@CHorizontalScale@@QBE?AW4HORZSCALEPOSITION@CScaleBaseData@@XZ:PROC
EXTRN	__imp_?GetScaleCompart@CHorizontalScale@@QBE?AVCScaleCompart@@XZ:PROC
EXTRN	__imp_??1CHorizontalScale@@QAE@XZ:PROC
EXTRN	__imp_??0CHorizontalScale@@QAE@ABV0@@Z:PROC
EXTRN	__imp_??0CVerticalScale@@QAE@XZ:PROC
EXTRN	__imp_??4CVerticalScale@@QAEAAV0@ABV0@@Z:PROC
EXTRN	__imp_?SetVertScalePosition@CVerticalScale@@QAEXW4VERTSCALEPOSITION@CScaleBaseData@@@Z:PROC
EXTRN	__imp_?SetVertScaleUnitType@CVerticalScale@@QAEXW4VERTSCALEUNITTYPE@CScaleBaseData@@@Z:PROC
EXTRN	__imp_?GetVertScalePosition@CVerticalScale@@QBE?AW4VERTSCALEPOSITION@CScaleBaseData@@XZ:PROC
EXTRN	__imp_?GetVertScaleUnitType@CVerticalScale@@QBE?AW4VERTSCALEUNITTYPE@CScaleBaseData@@XZ:PROC
EXTRN	__imp_??1CVerticalScale@@QAE@XZ:PROC
EXTRN	__imp_??0CVerticalScale@@QAE@ABV0@@Z:PROC
EXTRN	??_E?$CList@VCVerticalScaleGroupData@@AAV1@@@UAEPAXI@Z:PROC ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::`vector deleting destructor'
EXTRN	??_E?$CList@VCHorizontalScalePtrData@@AAV1@@@UAEPAXI@Z:PROC ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::`vector deleting destructor'
EXTRN	??_E?$CList@VCHorizontalScale@@AAV1@@@UAEPAXI@Z:PROC ; CList<CHorizontalScale,CHorizontalScale &>::`vector deleting destructor'
EXTRN	??_E?$CList@VCVerticalScalePtrData@@AAV1@@@UAEPAXI@Z:PROC ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::`vector deleting destructor'
EXTRN	??_E?$CList@VCVerticalScale@@AAV1@@@UAEPAXI@Z:PROC ; CList<CVerticalScale,CVerticalScale &>::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ??_R1A@?0A@EA@?$CList@VCVerticalScale@@AAV1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CList@VCVerticalScale@@AAV1@@@8 DD FLAT:??_R0?AV?$CList@VCVerticalScale@@AAV1@@@@8 ; CList<CVerticalScale,CVerticalScale &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CList@VCVerticalScale@@AAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CList@VCVerticalScale@@AAV1@@@8
rdata$r	SEGMENT
??_R2?$CList@VCVerticalScale@@AAV1@@@8 DD FLAT:??_R1A@?0A@EA@?$CList@VCVerticalScale@@AAV1@@@8 ; CList<CVerticalScale,CVerticalScale &>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CList@VCVerticalScale@@AAV1@@@8
rdata$r	SEGMENT
??_R3?$CList@VCVerticalScale@@AAV1@@@8 DD 00H		; CList<CVerticalScale,CVerticalScale &>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CList@VCVerticalScale@@AAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CList@VCVerticalScale@@AAV1@@@@8
data$rs	SEGMENT
??_R0?AV?$CList@VCVerticalScale@@AAV1@@@@8 DD FLAT:??_7type_info@@6B@ ; CList<CVerticalScale,CVerticalScale &> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CList@VCVerticalScale@@AAV1@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CList@VCVerticalScale@@AAV1@@@6B@
rdata$r	SEGMENT
??_R4?$CList@VCVerticalScale@@AAV1@@@6B@ DD 00H		; CList<CVerticalScale,CVerticalScale &>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CList@VCVerticalScale@@AAV1@@@@8
	DD	FLAT:??_R3?$CList@VCVerticalScale@@AAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CList@VCVerticalScalePtrData@@AAV1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CList@VCVerticalScalePtrData@@AAV1@@@8 DD FLAT:??_R0?AV?$CList@VCVerticalScalePtrData@@AAV1@@@@8 ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CList@VCVerticalScalePtrData@@AAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CList@VCVerticalScalePtrData@@AAV1@@@8
rdata$r	SEGMENT
??_R2?$CList@VCVerticalScalePtrData@@AAV1@@@8 DD FLAT:??_R1A@?0A@EA@?$CList@VCVerticalScalePtrData@@AAV1@@@8 ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CList@VCVerticalScalePtrData@@AAV1@@@8
rdata$r	SEGMENT
??_R3?$CList@VCVerticalScalePtrData@@AAV1@@@8 DD 00H	; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CList@VCVerticalScalePtrData@@AAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CList@VCVerticalScalePtrData@@AAV1@@@@8
data$rs	SEGMENT
??_R0?AV?$CList@VCVerticalScalePtrData@@AAV1@@@@8 DD FLAT:??_7type_info@@6B@ ; CList<CVerticalScalePtrData,CVerticalScalePtrData &> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CList@VCVerticalScalePtrData@@AAV1@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CList@VCVerticalScalePtrData@@AAV1@@@6B@
rdata$r	SEGMENT
??_R4?$CList@VCVerticalScalePtrData@@AAV1@@@6B@ DD 00H	; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CList@VCVerticalScalePtrData@@AAV1@@@@8
	DD	FLAT:??_R3?$CList@VCVerticalScalePtrData@@AAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CList@VCHorizontalScale@@AAV1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CList@VCHorizontalScale@@AAV1@@@8 DD FLAT:??_R0?AV?$CList@VCHorizontalScale@@AAV1@@@@8 ; CList<CHorizontalScale,CHorizontalScale &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CList@VCHorizontalScale@@AAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CList@VCHorizontalScale@@AAV1@@@8
rdata$r	SEGMENT
??_R2?$CList@VCHorizontalScale@@AAV1@@@8 DD FLAT:??_R1A@?0A@EA@?$CList@VCHorizontalScale@@AAV1@@@8 ; CList<CHorizontalScale,CHorizontalScale &>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CList@VCHorizontalScale@@AAV1@@@8
rdata$r	SEGMENT
??_R3?$CList@VCHorizontalScale@@AAV1@@@8 DD 00H		; CList<CHorizontalScale,CHorizontalScale &>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CList@VCHorizontalScale@@AAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CList@VCHorizontalScale@@AAV1@@@@8
data$rs	SEGMENT
??_R0?AV?$CList@VCHorizontalScale@@AAV1@@@@8 DD FLAT:??_7type_info@@6B@ ; CList<CHorizontalScale,CHorizontalScale &> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CList@VCHorizontalScale@@AAV1@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CList@VCHorizontalScale@@AAV1@@@6B@
rdata$r	SEGMENT
??_R4?$CList@VCHorizontalScale@@AAV1@@@6B@ DD 00H	; CList<CHorizontalScale,CHorizontalScale &>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CList@VCHorizontalScale@@AAV1@@@@8
	DD	FLAT:??_R3?$CList@VCHorizontalScale@@AAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CList@VCHorizontalScalePtrData@@AAV1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CList@VCHorizontalScalePtrData@@AAV1@@@8 DD FLAT:??_R0?AV?$CList@VCHorizontalScalePtrData@@AAV1@@@@8 ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CList@VCHorizontalScalePtrData@@AAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CList@VCHorizontalScalePtrData@@AAV1@@@8
rdata$r	SEGMENT
??_R2?$CList@VCHorizontalScalePtrData@@AAV1@@@8 DD FLAT:??_R1A@?0A@EA@?$CList@VCHorizontalScalePtrData@@AAV1@@@8 ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CList@VCHorizontalScalePtrData@@AAV1@@@8
rdata$r	SEGMENT
??_R3?$CList@VCHorizontalScalePtrData@@AAV1@@@8 DD 00H	; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CList@VCHorizontalScalePtrData@@AAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CList@VCHorizontalScalePtrData@@AAV1@@@@8
data$rs	SEGMENT
??_R0?AV?$CList@VCHorizontalScalePtrData@@AAV1@@@@8 DD FLAT:??_7type_info@@6B@ ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CList@VCHorizontalScalePtrData@@AAV1@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CList@VCHorizontalScalePtrData@@AAV1@@@6B@
rdata$r	SEGMENT
??_R4?$CList@VCHorizontalScalePtrData@@AAV1@@@6B@ DD 00H ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CList@VCHorizontalScalePtrData@@AAV1@@@@8
	DD	FLAT:??_R3?$CList@VCHorizontalScalePtrData@@AAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CList@VCVerticalScaleGroupData@@AAV1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CList@VCVerticalScaleGroupData@@AAV1@@@8 DD FLAT:??_R0?AV?$CList@VCVerticalScaleGroupData@@AAV1@@@@8 ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CList@VCVerticalScaleGroupData@@AAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CList@VCVerticalScaleGroupData@@AAV1@@@8
rdata$r	SEGMENT
??_R2?$CList@VCVerticalScaleGroupData@@AAV1@@@8 DD FLAT:??_R1A@?0A@EA@?$CList@VCVerticalScaleGroupData@@AAV1@@@8 ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CList@VCVerticalScaleGroupData@@AAV1@@@8
rdata$r	SEGMENT
??_R3?$CList@VCVerticalScaleGroupData@@AAV1@@@8 DD 00H	; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CList@VCVerticalScaleGroupData@@AAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CList@VCVerticalScaleGroupData@@AAV1@@@@8
data$rs	SEGMENT
??_R0?AV?$CList@VCVerticalScaleGroupData@@AAV1@@@@8 DD FLAT:??_7type_info@@6B@ ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CList@VCVerticalScaleGroupData@@AAV1@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CList@VCVerticalScaleGroupData@@AAV1@@@6B@
rdata$r	SEGMENT
??_R4?$CList@VCVerticalScaleGroupData@@AAV1@@@6B@ DD 00H ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CList@VCVerticalScaleGroupData@@AAV1@@@@8
	DD	FLAT:??_R3?$CList@VCVerticalScaleGroupData@@AAV1@@@8
rdata$r	ENDS
;	COMDAT ??_7?$CList@VCVerticalScale@@AAV1@@@6B@
CONST	SEGMENT
??_7?$CList@VCVerticalScale@@AAV1@@@6B@ DD FLAT:??_R4?$CList@VCVerticalScale@@AAV1@@@6B@ ; CList<CVerticalScale,CVerticalScale &>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CList@VCVerticalScale@@AAV1@@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CList@VCVerticalScale@@AAV1@@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_7?$CList@VCVerticalScalePtrData@@AAV1@@@6B@
CONST	SEGMENT
??_7?$CList@VCVerticalScalePtrData@@AAV1@@@6B@ DD FLAT:??_R4?$CList@VCVerticalScalePtrData@@AAV1@@@6B@ ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CList@VCVerticalScalePtrData@@AAV1@@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CList@VCVerticalScalePtrData@@AAV1@@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_7?$CList@VCHorizontalScale@@AAV1@@@6B@
CONST	SEGMENT
??_7?$CList@VCHorizontalScale@@AAV1@@@6B@ DD FLAT:??_R4?$CList@VCHorizontalScale@@AAV1@@@6B@ ; CList<CHorizontalScale,CHorizontalScale &>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CList@VCHorizontalScale@@AAV1@@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CList@VCHorizontalScale@@AAV1@@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_7?$CList@VCHorizontalScalePtrData@@AAV1@@@6B@
CONST	SEGMENT
??_7?$CList@VCHorizontalScalePtrData@@AAV1@@@6B@ DD FLAT:??_R4?$CList@VCHorizontalScalePtrData@@AAV1@@@6B@ ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CList@VCHorizontalScalePtrData@@AAV1@@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CList@VCHorizontalScalePtrData@@AAV1@@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_7?$CList@VCVerticalScaleGroupData@@AAV1@@@6B@
CONST	SEGMENT
??_7?$CList@VCVerticalScaleGroupData@@AAV1@@@6B@ DD FLAT:??_R4?$CList@VCVerticalScaleGroupData@@AAV1@@@6B@ ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CList@VCVerticalScaleGroupData@@AAV1@@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CList@VCVerticalScaleGroupData@@AAV1@@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CObject@@8
rdata$r	SEGMENT
??_R2CObject@@8 DD FLAT:??_R1A@?0A@EA@CObject@@8	; CObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObject@@8
rdata$r	SEGMENT
??_R3CObject@@8 DD 00H					; CObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
data$rs	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
data$rs	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$CList@VCVerticalScale@@AAV1@@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_G?$CList@VCVerticalScale@@AAV1@@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$CList@VCVerticalScale@@AAV1@@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Serialize@?$CList@VCVerticalScale@@AAV1@@@UAEXAAVCArchive@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Serialize@?$CList@VCVerticalScale@@AAV1@@@UAEXAAVCArchive@@@Z$0
__ehfuncinfo$?Serialize@?$CList@VCVerticalScale@@AAV1@@@UAEXAAVCArchive@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Serialize@?$CList@VCVerticalScale@@AAV1@@@UAEXAAVCArchive@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CList@VCVerticalScale@@AAV1@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddTail@CVerticalScaleDataList@@QAEXVCVerticalScale@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddTail@CVerticalScaleDataList@@QAEXVCVerticalScale@@@Z$0
__ehfuncinfo$?AddTail@CVerticalScaleDataList@@QAEXVCVerticalScale@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddTail@CVerticalScaleDataList@@QAEXVCVerticalScale@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CVerticalScaleDataList@@QAE@PBVCVerticalScalePtrDataList@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CVerticalScaleDataList@@QAE@PBVCVerticalScalePtrDataList@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CVerticalScaleDataList@@QAE@PBVCVerticalScalePtrDataList@@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$??0CVerticalScaleDataList@@QAE@PBVCVerticalScalePtrDataList@@@Z$1
__ehfuncinfo$??0CVerticalScaleDataList@@QAE@PBVCVerticalScalePtrDataList@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CVerticalScaleDataList@@QAE@PBVCVerticalScalePtrDataList@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CVerticalScaleDataList@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CVerticalScaleDataList@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CVerticalScaleDataList@@QAE@ABV0@@Z$1
__ehfuncinfo$??0CVerticalScaleDataList@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CVerticalScaleDataList@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4CVerticalScaleDataList@@QAEAAV0@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4CVerticalScaleDataList@@QAEAAV0@ABV0@@Z$0
__ehfuncinfo$??4CVerticalScaleDataList@@QAEAAV0@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4CVerticalScaleDataList@@QAEAAV0@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$CList@VCVerticalScalePtrData@@AAV1@@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_G?$CList@VCVerticalScalePtrData@@AAV1@@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$CList@VCVerticalScalePtrData@@AAV1@@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Serialize@?$CList@VCVerticalScalePtrData@@AAV1@@@UAEXAAVCArchive@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Serialize@?$CList@VCVerticalScalePtrData@@AAV1@@@UAEXAAVCArchive@@@Z$0
__ehfuncinfo$?Serialize@?$CList@VCVerticalScalePtrData@@AAV1@@@UAEXAAVCArchive@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Serialize@?$CList@VCVerticalScalePtrData@@AAV1@@@UAEXAAVCArchive@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CList@VCVerticalScalePtrData@@AAV1@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddTail@?$CList@VCVerticalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScalePtrData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddTail@?$CList@VCVerticalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScalePtrData@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AddTail@?$CList@VCVerticalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScalePtrData@@@Z$3
__ehfuncinfo$?AddTail@?$CList@VCVerticalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScalePtrData@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?AddTail@?$CList@VCVerticalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScalePtrData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetAt@CVerticalScalePtrDataList@@QBE?AVCVerticalScalePtrData@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetAt@CVerticalScalePtrDataList@@QBE?AVCVerticalScalePtrData@@H@Z$1
__ehfuncinfo$?GetAt@CVerticalScalePtrDataList@@QBE?AVCVerticalScalePtrData@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetAt@CVerticalScalePtrDataList@@QBE?AVCVerticalScalePtrData@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddTail@CVerticalScalePtrDataList@@QAEXVCVerticalScalePtrData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddTail@CVerticalScalePtrDataList@@QAEXVCVerticalScalePtrData@@@Z$0
__ehfuncinfo$?AddTail@CVerticalScalePtrDataList@@QAEXVCVerticalScalePtrData@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddTail@CVerticalScalePtrDataList@@QAEXVCVerticalScalePtrData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CVerticalScalePtrDataList@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CVerticalScalePtrDataList@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CVerticalScalePtrDataList@@QAE@ABV0@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$??0CVerticalScalePtrDataList@@QAE@ABV0@@Z$1
__ehfuncinfo$??0CVerticalScalePtrDataList@@QAE@ABV0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CVerticalScalePtrDataList@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4CVerticalScalePtrDataList@@QAEAAV0@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4CVerticalScalePtrDataList@@QAEAAV0@ABV0@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??4CVerticalScalePtrDataList@@QAEAAV0@ABV0@@Z$0
__ehfuncinfo$??4CVerticalScalePtrDataList@@QAEAAV0@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??4CVerticalScalePtrDataList@@QAEAAV0@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CVerticalScalePtrData@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CVerticalScalePtrData@@QAE@ABV0@@Z$0
__ehfuncinfo$??0CVerticalScalePtrData@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CVerticalScalePtrData@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CVerticalScalePtrData@@QAE@PAVCVerticalScale@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CVerticalScalePtrData@@QAE@PAVCVerticalScale@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@1@Z$0
__ehfuncinfo$??0CVerticalScalePtrData@@QAE@PAVCVerticalScale@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@1@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CVerticalScalePtrData@@QAE@PAVCVerticalScale@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4CVerticalScalePtrData@@QAEAAV0@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4CVerticalScalePtrData@@QAEAAV0@ABV0@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??4CVerticalScalePtrData@@QAEAAV0@ABV0@@Z$1
__ehfuncinfo$??4CVerticalScalePtrData@@QAEAAV0@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??4CVerticalScalePtrData@@QAEAAV0@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$CList@VCHorizontalScale@@AAV1@@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_G?$CList@VCHorizontalScale@@AAV1@@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$CList@VCHorizontalScale@@AAV1@@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Serialize@?$CList@VCHorizontalScale@@AAV1@@@UAEXAAVCArchive@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Serialize@?$CList@VCHorizontalScale@@AAV1@@@UAEXAAVCArchive@@@Z$0
__ehfuncinfo$?Serialize@?$CList@VCHorizontalScale@@AAV1@@@UAEXAAVCArchive@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Serialize@?$CList@VCHorizontalScale@@AAV1@@@UAEXAAVCArchive@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CList@VCHorizontalScale@@AAV1@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddTail@CHorizontalScaleDataList@@QAEXVCHorizontalScale@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddTail@CHorizontalScaleDataList@@QAEXVCHorizontalScale@@@Z$0
__ehfuncinfo$?AddTail@CHorizontalScaleDataList@@QAEXVCHorizontalScale@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddTail@CHorizontalScaleDataList@@QAEXVCHorizontalScale@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CHorizontalScaleDataList@@QAE@PBVCHorizontalScalePtrDataList@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CHorizontalScaleDataList@@QAE@PBVCHorizontalScalePtrDataList@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CHorizontalScaleDataList@@QAE@PBVCHorizontalScalePtrDataList@@@Z$1
__ehfuncinfo$??0CHorizontalScaleDataList@@QAE@PBVCHorizontalScalePtrDataList@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CHorizontalScaleDataList@@QAE@PBVCHorizontalScalePtrDataList@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CHorizontalScaleDataList@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CHorizontalScaleDataList@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CHorizontalScaleDataList@@QAE@ABV0@@Z$1
__ehfuncinfo$??0CHorizontalScaleDataList@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CHorizontalScaleDataList@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4CHorizontalScaleDataList@@QAEAAV0@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4CHorizontalScaleDataList@@QAEAAV0@ABV0@@Z$0
__ehfuncinfo$??4CHorizontalScaleDataList@@QAEAAV0@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4CHorizontalScaleDataList@@QAEAAV0@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$CList@VCHorizontalScalePtrData@@AAV1@@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_G?$CList@VCHorizontalScalePtrData@@AAV1@@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$CList@VCHorizontalScalePtrData@@AAV1@@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Serialize@?$CList@VCHorizontalScalePtrData@@AAV1@@@UAEXAAVCArchive@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Serialize@?$CList@VCHorizontalScalePtrData@@AAV1@@@UAEXAAVCArchive@@@Z$0
__ehfuncinfo$?Serialize@?$CList@VCHorizontalScalePtrData@@AAV1@@@UAEXAAVCArchive@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Serialize@?$CList@VCHorizontalScalePtrData@@AAV1@@@UAEXAAVCArchive@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CList@VCHorizontalScalePtrData@@AAV1@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddTail@?$CList@VCHorizontalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCHorizontalScalePtrData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddTail@?$CList@VCHorizontalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCHorizontalScalePtrData@@@Z$1
__ehfuncinfo$?AddTail@?$CList@VCHorizontalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCHorizontalScalePtrData@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddTail@?$CList@VCHorizontalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCHorizontalScalePtrData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetHorzScale@CHorizontalScalePtrDataList@@QAEXHABVCHorizontalScale@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetHorzScale@CHorizontalScalePtrDataList@@QAEXHABVCHorizontalScale@@@Z$0
__ehfuncinfo$?SetHorzScale@CHorizontalScalePtrDataList@@QAEXHABVCHorizontalScale@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetHorzScale@CHorizontalScalePtrDataList@@QAEXHABVCHorizontalScale@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddTail@CHorizontalScalePtrDataList@@QAEXVCHorizontalScalePtrData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddTail@CHorizontalScalePtrDataList@@QAEXVCHorizontalScalePtrData@@@Z$0
__ehfuncinfo$?AddTail@CHorizontalScalePtrDataList@@QAEXVCHorizontalScalePtrData@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddTail@CHorizontalScalePtrDataList@@QAEXVCHorizontalScalePtrData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CHorizontalScalePtrDataList@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CHorizontalScalePtrDataList@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CHorizontalScalePtrDataList@@QAE@ABV0@@Z$1
__ehfuncinfo$??0CHorizontalScalePtrDataList@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CHorizontalScalePtrDataList@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4CHorizontalScalePtrDataList@@QAEAAV0@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4CHorizontalScalePtrDataList@@QAEAAV0@ABV0@@Z$0
__ehfuncinfo$??4CHorizontalScalePtrDataList@@QAEAAV0@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4CHorizontalScalePtrDataList@@QAEAAV0@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4CHorizontalScalePtrData@@QAEAAV0@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4CHorizontalScalePtrData@@QAEAAV0@ABV0@@Z$0
__ehfuncinfo$??4CHorizontalScalePtrData@@QAEAAV0@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4CHorizontalScalePtrData@@QAEAAV0@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$CList@VCVerticalScaleGroupData@@AAV1@@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_G?$CList@VCVerticalScaleGroupData@@AAV1@@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$CList@VCVerticalScaleGroupData@@AAV1@@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Serialize@?$CList@VCVerticalScaleGroupData@@AAV1@@@UAEXAAVCArchive@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Serialize@?$CList@VCVerticalScaleGroupData@@AAV1@@@UAEXAAVCArchive@@@Z$0
__ehfuncinfo$?Serialize@?$CList@VCVerticalScaleGroupData@@AAV1@@@UAEXAAVCArchive@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Serialize@?$CList@VCVerticalScaleGroupData@@AAV1@@@UAEXAAVCArchive@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CList@VCVerticalScaleGroupData@@AAV1@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?NewNode@?$CList@VCVerticalScaleGroupData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NewNode@?$CList@VCVerticalScaleGroupData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z$0
__ehfuncinfo$?NewNode@?$CList@VCVerticalScaleGroupData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?NewNode@?$CList@VCVerticalScaleGroupData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddTail@?$CList@VCVerticalScaleGroupData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScaleGroupData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddTail@?$CList@VCVerticalScaleGroupData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScaleGroupData@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AddTail@?$CList@VCVerticalScaleGroupData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScaleGroupData@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AddTail@?$CList@VCVerticalScaleGroupData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScaleGroupData@@@Z$3
__ehfuncinfo$?AddTail@?$CList@VCVerticalScaleGroupData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScaleGroupData@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?AddTail@?$CList@VCVerticalScaleGroupData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScaleGroupData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetAt@CVerticalScaleGroupDataList@@QBE?AVCVerticalScaleGroupData@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetAt@CVerticalScaleGroupDataList@@QBE?AVCVerticalScaleGroupData@@H@Z$1
__ehfuncinfo$?GetAt@CVerticalScaleGroupDataList@@QBE?AVCVerticalScaleGroupData@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetAt@CVerticalScaleGroupDataList@@QBE?AVCVerticalScaleGroupData@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddTail@CVerticalScaleGroupDataList@@QAEXVCVerticalScaleGroupData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddTail@CVerticalScaleGroupDataList@@QAEXVCVerticalScaleGroupData@@@Z$0
__ehfuncinfo$?AddTail@CVerticalScaleGroupDataList@@QAEXVCVerticalScaleGroupData@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddTail@CVerticalScaleGroupDataList@@QAEXVCVerticalScaleGroupData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CVerticalScaleGroupDataList@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CVerticalScaleGroupDataList@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CVerticalScaleGroupDataList@@QAE@ABV0@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$??0CVerticalScaleGroupDataList@@QAE@ABV0@@Z$1
__ehfuncinfo$??0CVerticalScaleGroupDataList@@QAE@ABV0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CVerticalScaleGroupDataList@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4CVerticalScaleGroupDataList@@QAEAAV0@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4CVerticalScaleGroupDataList@@QAEAAV0@ABV0@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??4CVerticalScaleGroupDataList@@QAEAAV0@ABV0@@Z$0
__ehfuncinfo$??4CVerticalScaleGroupDataList@@QAEAAV0@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??4CVerticalScaleGroupDataList@@QAEAAV0@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CVerticalScaleGroupData@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CVerticalScaleGroupData@@QAE@ABV0@@Z$0
__ehfuncinfo$??0CVerticalScaleGroupData@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CVerticalScaleGroupData@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CVerticalScaleGroupData@@QAE@ABVCVerticalScale@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CVerticalScaleGroupData@@QAE@ABVCVerticalScale@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z$0
__ehfuncinfo$??0CVerticalScaleGroupData@@QAE@ABVCVerticalScale@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CVerticalScaleGroupData@@QAE@ABVCVerticalScale@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CVerticalScaleGroupData@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CVerticalScaleGroupData@@QAE@XZ$0
__ehfuncinfo$??0CVerticalScaleGroupData@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CVerticalScaleGroupData@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4CVerticalScaleGroupData@@QAEAAV0@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4CVerticalScaleGroupData@@QAEAAV0@ABV0@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??4CVerticalScaleGroupData@@QAEAAV0@ABV0@@Z$1
__ehfuncinfo$??4CVerticalScaleGroupData@@QAEAAV0@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??4CVerticalScaleGroupData@@QAEAAV0@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4CInsertingBlockHorzScaleData@@QAEAAV0@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4CInsertingBlockHorzScaleData@@QAEAAV0@ABV0@@Z$0
__ehfuncinfo$??4CInsertingBlockHorzScaleData@@QAEAAV0@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4CInsertingBlockHorzScaleData@@QAEAAV0@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@VCVerticalScale@@@@YGXAAVCArchive@@PAVCVerticalScale@@H@Z
_TEXT	SEGMENT
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@VCVerticalScale@@@@YGXAAVCArchive@@PAVCVerticalScale@@H@Z PROC ; SerializeElements<CVerticalScale>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR _nCount$[ebp]
  0000b	57		 push	 edi
  0000c	85 f6		 test	 esi, esi
  0000e	74 04		 je	 SHORT $LN2@SerializeE
  00010	85 c9		 test	 ecx, ecx
  00012	74 79		 je	 SHORT $LN34@SerializeE
$LN2@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00014	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  00017	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0001a	f7 d0		 not	 eax
  0001c	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  0001e	74 30		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;
; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )

  00020	85 f6		 test	 esi, esi
  00022	74 25		 je	 SHORT $LN8@SerializeE
$LL5@SerializeE:

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00024	bb 17 5d 74 01	 mov	 ebx, 24403223		; 01745d17H
  00029	3b f3		 cmp	 esi, ebx
  0002b	0f 42 de	 cmovb	 ebx, esi

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0002e	6b fb 58	 imul	 edi, ebx, 88
  00031	57		 push	 edi
  00032	51		 push	 ecx
  00033	8b ca		 mov	 ecx, edx
  00035	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;
; 87   : 			pData += nElementsToWrite;

  0003a	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  0003d	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  00040	03 cf		 add	 ecx, edi
  00042	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  00045	2b f3		 sub	 esi, ebx
  00047	75 db		 jne	 SHORT $LL5@SerializeE
$LN8@SerializeE:
  00049	5f		 pop	 edi

; 105  : 		}
; 106  : 	}
; 107  : }

  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	5d		 pop	 ebp
  0004d	c2 0c 00	 ret	 12			; 0000000cH
$LN10@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  00050	85 f6		 test	 esi, esi
  00052	74 f5		 je	 SHORT $LN8@SerializeE
$LL7@SerializeE:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00054	bf 17 5d 74 01	 mov	 edi, 24403223		; 01745d17H
  00059	3b f7		 cmp	 esi, edi
  0005b	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0005e	6b df 58	 imul	 ebx, edi, 88
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00061	53		 push	 ebx
  00062	51		 push	 ecx
  00063	8b ca		 mov	 ecx, edx
  00065	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0006a	3b c3		 cmp	 eax, ebx
  0006c	75 16		 jne	 SHORT $LN23@SerializeE
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  0006e	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00071	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;
; 104  : 			pData += nElementsToRead;

  00074	03 cb		 add	 ecx, ebx
  00076	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  00079	2b f7		 sub	 esi, edi
  0007b	75 d7		 jne	 SHORT $LL7@SerializeE

; 105  : 		}
; 106  : 	}
; 107  : }

  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx
  00080	5d		 pop	 ebp
  00081	c2 0c 00	 ret	 12			; 0000000cH
$LN23@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 402  : 		AfxThrowArchiveException(CArchiveException::endOfFile);

  00084	6a 00		 push	 0
  00086	6a 03		 push	 3
  00088	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN34@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  0008d	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN32@SerializeE:
  00092	cc		 int	 3
??$SerializeElements@VCVerticalScale@@@@YGXAAVCArchive@@PAVCVerticalScale@@H@Z ENDP ; SerializeElements<CVerticalScale>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@VCVerticalScalePtrData@@@@YGXAAVCArchive@@PAVCVerticalScalePtrData@@H@Z
_TEXT	SEGMENT
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@VCVerticalScalePtrData@@@@YGXAAVCArchive@@PAVCVerticalScalePtrData@@H@Z PROC ; SerializeElements<CVerticalScalePtrData>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR _nCount$[ebp]
  0000b	57		 push	 edi
  0000c	85 f6		 test	 esi, esi
  0000e	74 08		 je	 SHORT $LN2@SerializeE
  00010	85 c9		 test	 ecx, ecx
  00012	0f 84 87 00 00
	00		 je	 $LN34@SerializeE
$LN2@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00018	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  0001b	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0001e	f7 d0		 not	 eax
  00020	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00022	74 3b		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;
; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )

  00024	85 f6		 test	 esi, esi
  00026	74 30		 je	 SHORT $LN8@SerializeE
  00028	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL5@SerializeE:

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00030	bb aa aa aa 0a	 mov	 ebx, 178956970		; 0aaaaaaaH
  00035	3b f3		 cmp	 esi, ebx
  00037	0f 42 de	 cmovb	 ebx, esi

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0003a	8d 3c 5b	 lea	 edi, DWORD PTR [ebx+ebx*2]
  0003d	c1 e7 02	 shl	 edi, 2
  00040	57		 push	 edi
  00041	51		 push	 ecx
  00042	8b ca		 mov	 ecx, edx
  00044	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;
; 87   : 			pData += nElementsToWrite;

  00049	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  0004c	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  0004f	03 cf		 add	 ecx, edi
  00051	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  00054	2b f3		 sub	 esi, ebx
  00056	75 d8		 jne	 SHORT $LL5@SerializeE
$LN8@SerializeE:
  00058	5f		 pop	 edi

; 105  : 		}
; 106  : 	}
; 107  : }

  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	5d		 pop	 ebp
  0005c	c2 0c 00	 ret	 12			; 0000000cH
$LN10@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  0005f	85 f6		 test	 esi, esi
  00061	74 f5		 je	 SHORT $LN8@SerializeE
$LL7@SerializeE:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00063	bf aa aa aa 0a	 mov	 edi, 178956970		; 0aaaaaaaH
  00068	3b f7		 cmp	 esi, edi
  0006a	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0006d	8d 1c 7f	 lea	 ebx, DWORD PTR [edi+edi*2]
  00070	c1 e3 02	 shl	 ebx, 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00073	53		 push	 ebx
  00074	51		 push	 ecx
  00075	8b ca		 mov	 ecx, edx
  00077	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0007c	3b c3		 cmp	 eax, ebx
  0007e	75 16		 jne	 SHORT $LN23@SerializeE
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  00080	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00083	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;
; 104  : 			pData += nElementsToRead;

  00086	03 cb		 add	 ecx, ebx
  00088	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  0008b	2b f7		 sub	 esi, edi
  0008d	75 d4		 jne	 SHORT $LL7@SerializeE

; 105  : 		}
; 106  : 	}
; 107  : }

  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	5d		 pop	 ebp
  00093	c2 0c 00	 ret	 12			; 0000000cH
$LN23@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 402  : 		AfxThrowArchiveException(CArchiveException::endOfFile);

  00096	6a 00		 push	 0
  00098	6a 03		 push	 3
  0009a	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN34@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  0009f	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN32@SerializeE:
  000a4	cc		 int	 3
??$SerializeElements@VCVerticalScalePtrData@@@@YGXAAVCArchive@@PAVCVerticalScalePtrData@@H@Z ENDP ; SerializeElements<CVerticalScalePtrData>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@VCHorizontalScale@@@@YGXAAVCArchive@@PAVCHorizontalScale@@H@Z
_TEXT	SEGMENT
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@VCHorizontalScale@@@@YGXAAVCArchive@@PAVCHorizontalScale@@H@Z PROC ; SerializeElements<CHorizontalScale>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR _nCount$[ebp]
  0000b	57		 push	 edi
  0000c	85 f6		 test	 esi, esi
  0000e	74 04		 je	 SHORT $LN2@SerializeE
  00010	85 c9		 test	 ecx, ecx
  00012	74 79		 je	 SHORT $LN34@SerializeE
$LN2@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00014	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  00017	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0001a	f7 d0		 not	 eax
  0001c	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  0001e	74 30		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;
; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )

  00020	85 f6		 test	 esi, esi
  00022	74 25		 je	 SHORT $LN8@SerializeE
$LL5@SerializeE:

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00024	bb 14 ae 47 01	 mov	 ebx, 21474836		; 0147ae14H
  00029	3b f3		 cmp	 esi, ebx
  0002b	0f 42 de	 cmovb	 ebx, esi

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0002e	6b fb 64	 imul	 edi, ebx, 100
  00031	57		 push	 edi
  00032	51		 push	 ecx
  00033	8b ca		 mov	 ecx, edx
  00035	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;
; 87   : 			pData += nElementsToWrite;

  0003a	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  0003d	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  00040	03 cf		 add	 ecx, edi
  00042	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  00045	2b f3		 sub	 esi, ebx
  00047	75 db		 jne	 SHORT $LL5@SerializeE
$LN8@SerializeE:
  00049	5f		 pop	 edi

; 105  : 		}
; 106  : 	}
; 107  : }

  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	5d		 pop	 ebp
  0004d	c2 0c 00	 ret	 12			; 0000000cH
$LN10@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  00050	85 f6		 test	 esi, esi
  00052	74 f5		 je	 SHORT $LN8@SerializeE
$LL7@SerializeE:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00054	bf 14 ae 47 01	 mov	 edi, 21474836		; 0147ae14H
  00059	3b f7		 cmp	 esi, edi
  0005b	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0005e	6b df 64	 imul	 ebx, edi, 100
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00061	53		 push	 ebx
  00062	51		 push	 ecx
  00063	8b ca		 mov	 ecx, edx
  00065	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0006a	3b c3		 cmp	 eax, ebx
  0006c	75 16		 jne	 SHORT $LN23@SerializeE
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  0006e	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00071	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;
; 104  : 			pData += nElementsToRead;

  00074	03 cb		 add	 ecx, ebx
  00076	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  00079	2b f7		 sub	 esi, edi
  0007b	75 d7		 jne	 SHORT $LL7@SerializeE

; 105  : 		}
; 106  : 	}
; 107  : }

  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx
  00080	5d		 pop	 ebp
  00081	c2 0c 00	 ret	 12			; 0000000cH
$LN23@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 402  : 		AfxThrowArchiveException(CArchiveException::endOfFile);

  00084	6a 00		 push	 0
  00086	6a 03		 push	 3
  00088	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN34@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  0008d	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN32@SerializeE:
  00092	cc		 int	 3
??$SerializeElements@VCHorizontalScale@@@@YGXAAVCArchive@@PAVCHorizontalScale@@H@Z ENDP ; SerializeElements<CHorizontalScale>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@VCHorizontalScalePtrData@@@@YGXAAVCArchive@@PAVCHorizontalScalePtrData@@H@Z
_TEXT	SEGMENT
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@VCHorizontalScalePtrData@@@@YGXAAVCArchive@@PAVCHorizontalScalePtrData@@H@Z PROC ; SerializeElements<CHorizontalScalePtrData>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR _nCount$[ebp]
  0000b	57		 push	 edi
  0000c	85 f6		 test	 esi, esi
  0000e	74 08		 je	 SHORT $LN2@SerializeE
  00010	85 c9		 test	 ecx, ecx
  00012	0f 84 89 00 00
	00		 je	 $LN34@SerializeE
$LN2@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00018	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  0001b	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0001e	f7 d0		 not	 eax
  00020	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00022	74 3c		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;
; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )

  00024	85 f6		 test	 esi, esi
  00026	74 31		 je	 SHORT $LN8@SerializeE
  00028	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL5@SerializeE:

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00030	bb ff ff ff 0f	 mov	 ebx, 268435455		; 0fffffffH
  00035	3b f3		 cmp	 esi, ebx
  00037	0f 42 de	 cmovb	 ebx, esi

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0003a	8d 3c dd 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*8]
  00041	57		 push	 edi
  00042	51		 push	 ecx
  00043	8b ca		 mov	 ecx, edx
  00045	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;
; 87   : 			pData += nElementsToWrite;

  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  00050	03 cf		 add	 ecx, edi
  00052	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  00055	2b f3		 sub	 esi, ebx
  00057	75 d7		 jne	 SHORT $LL5@SerializeE
$LN8@SerializeE:
  00059	5f		 pop	 edi

; 105  : 		}
; 106  : 	}
; 107  : }

  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	5d		 pop	 ebp
  0005d	c2 0c 00	 ret	 12			; 0000000cH
$LN10@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  00060	85 f6		 test	 esi, esi
  00062	74 f5		 je	 SHORT $LN8@SerializeE
$LL7@SerializeE:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00064	bf ff ff ff 0f	 mov	 edi, 268435455		; 0fffffffH
  00069	3b f7		 cmp	 esi, edi
  0006b	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0006e	8d 1c fd 00 00
	00 00		 lea	 ebx, DWORD PTR [edi*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00075	53		 push	 ebx
  00076	51		 push	 ecx
  00077	8b ca		 mov	 ecx, edx
  00079	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0007e	3b c3		 cmp	 eax, ebx
  00080	75 16		 jne	 SHORT $LN23@SerializeE
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  00082	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00085	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;
; 104  : 			pData += nElementsToRead;

  00088	03 cb		 add	 ecx, ebx
  0008a	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  0008d	2b f7		 sub	 esi, edi
  0008f	75 d3		 jne	 SHORT $LL7@SerializeE

; 105  : 		}
; 106  : 	}
; 107  : }

  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	5d		 pop	 ebp
  00095	c2 0c 00	 ret	 12			; 0000000cH
$LN23@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 402  : 		AfxThrowArchiveException(CArchiveException::endOfFile);

  00098	6a 00		 push	 0
  0009a	6a 03		 push	 3
  0009c	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN34@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  000a1	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN32@SerializeE:
  000a6	cc		 int	 3
??$SerializeElements@VCHorizontalScalePtrData@@@@YGXAAVCArchive@@PAVCHorizontalScalePtrData@@H@Z ENDP ; SerializeElements<CHorizontalScalePtrData>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@VCVerticalScaleGroupData@@@@YGXAAVCArchive@@PAVCVerticalScaleGroupData@@H@Z
_TEXT	SEGMENT
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@VCVerticalScaleGroupData@@@@YGXAAVCArchive@@PAVCVerticalScaleGroupData@@H@Z PROC ; SerializeElements<CVerticalScaleGroupData>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR _nCount$[ebp]
  0000b	57		 push	 edi
  0000c	85 f6		 test	 esi, esi
  0000e	74 08		 je	 SHORT $LN2@SerializeE
  00010	85 c9		 test	 ecx, ecx
  00012	0f 84 87 00 00
	00		 je	 $LN34@SerializeE
$LN2@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00018	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  0001b	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0001e	f7 d0		 not	 eax
  00020	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00022	74 3b		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;
; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )

  00024	85 f6		 test	 esi, esi
  00026	74 30		 je	 SHORT $LN8@SerializeE
  00028	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL5@SerializeE:

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00030	bb 55 55 55 01	 mov	 ebx, 22369621		; 01555555H
  00035	3b f3		 cmp	 esi, ebx
  00037	0f 42 de	 cmovb	 ebx, esi

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0003a	8d 3c 5b	 lea	 edi, DWORD PTR [ebx+ebx*2]
  0003d	c1 e7 05	 shl	 edi, 5
  00040	57		 push	 edi
  00041	51		 push	 ecx
  00042	8b ca		 mov	 ecx, edx
  00044	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;
; 87   : 			pData += nElementsToWrite;

  00049	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  0004c	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  0004f	03 cf		 add	 ecx, edi
  00051	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  00054	2b f3		 sub	 esi, ebx
  00056	75 d8		 jne	 SHORT $LL5@SerializeE
$LN8@SerializeE:
  00058	5f		 pop	 edi

; 105  : 		}
; 106  : 	}
; 107  : }

  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	5d		 pop	 ebp
  0005c	c2 0c 00	 ret	 12			; 0000000cH
$LN10@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  0005f	85 f6		 test	 esi, esi
  00061	74 f5		 je	 SHORT $LN8@SerializeE
$LL7@SerializeE:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00063	bf 55 55 55 01	 mov	 edi, 22369621		; 01555555H
  00068	3b f7		 cmp	 esi, edi
  0006a	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0006d	8d 1c 7f	 lea	 ebx, DWORD PTR [edi+edi*2]
  00070	c1 e3 05	 shl	 ebx, 5
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00073	53		 push	 ebx
  00074	51		 push	 ecx
  00075	8b ca		 mov	 ecx, edx
  00077	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0007c	3b c3		 cmp	 eax, ebx
  0007e	75 16		 jne	 SHORT $LN23@SerializeE
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  00080	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00083	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;
; 104  : 			pData += nElementsToRead;

  00086	03 cb		 add	 ecx, ebx
  00088	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  0008b	2b f7		 sub	 esi, edi
  0008d	75 d4		 jne	 SHORT $LL7@SerializeE

; 105  : 		}
; 106  : 	}
; 107  : }

  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	5d		 pop	 ebp
  00093	c2 0c 00	 ret	 12			; 0000000cH
$LN23@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 402  : 		AfxThrowArchiveException(CArchiveException::endOfFile);

  00096	6a 00		 push	 0
  00098	6a 03		 push	 3
  0009a	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN34@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  0009f	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN32@SerializeE:
  000a4	cc		 int	 3
??$SerializeElements@VCVerticalScaleGroupData@@@@YGXAAVCArchive@@PAVCVerticalScaleGroupData@@H@Z ENDP ; SerializeElements<CVerticalScaleGroupData>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_G?$CList@VCVerticalScale@@AAV1@@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$CList@VCVerticalScale@@AAV1@@@UAEPAXI@Z PROC	; CList<CVerticalScale,CVerticalScale &>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$CList@VCVerticalScale@@AAV1@@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 878  : {

  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@VCVerticalScale@@AAV1@@@6B@

; 879  : 	RemoveAll();

  00032	e8 00 00 00 00	 call	 ?RemoveAll@?$CList@VCVerticalScale@@AAV1@@@QAEXXZ ; CList<CVerticalScale,CVerticalScale &>::RemoveAll
  00037	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0003a	a8 01		 test	 al, 1
  0003c	74 2c		 je	 SHORT $LN12@scalar
  0003e	a8 04		 test	 al, 4
  00040	75 1d		 jne	 SHORT $LN3@scalar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 112  : 	{ ::operator delete(p); }

  00042	56		 push	 esi
  00043	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00048	83 c4 04	 add	 esp, 4
  0004b	8b c6		 mov	 eax, esi
  0004d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00050	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00057	59		 pop	 ecx
  00058	5e		 pop	 esi
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
$LN3@scalar:
  0005f	6a 1c		 push	 28			; 0000001cH
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  00067	83 c4 08	 add	 esp, 8
$LN12@scalar:
  0006a	8b c6		 mov	 eax, esi
  0006c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00076	59		 pop	 ecx
  00077	5e		 pop	 esi
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
  0007e	cc		 int	 3
  0007f	cc		 int	 3
  00080	cc		 int	 3
  00081	cc		 int	 3
  00082	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_G?$CList@VCVerticalScale@@AAV1@@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$CList@VCVerticalScale@@AAV1@@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$CList@VCVerticalScale@@AAV1@@@UAEPAXI@Z ENDP	; CList<CVerticalScale,CVerticalScale &>::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CList@VCVerticalScale@@AAV1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_newData$2 = -112					; size = 88
_nNewCount$1$ = -24					; size = 4
_nCount$1$ = -20					; size = 4
_pData$1$ = -20						; size = 4
_pNode$1$ = -20						; size = 4
_nCount$1$ = -16					; size = 4
_nElementsLeft$1$ = -16					; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ar$ = 8						; size = 4
?Serialize@?$CList@VCVerticalScale@@AAV1@@@UAEXAAVCArchive@@@Z PROC ; CList<CVerticalScale,CVerticalScale &>::Serialize, COMDAT
; _this$ = ecx

; 1169 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Serialize@?$CList@VCVerticalScale@@AAV1@@@UAEXAAVCArchive@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 64	 sub	 esp, 100		; 00000064H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d f0	 mov	 DWORD PTR _this$1$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00030	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00033	f7 d0		 not	 eax
  00035	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1174 : 	if (ar.IsStoring())

  00037	0f 84 b2 00 00
	00		 je	 $LN7@Serialize

; 1175 : 	{
; 1176 : 		ar.WriteCount(m_nCount);

  0003d	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00040	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00045	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00048	89 45 ec	 mov	 DWORD PTR _pNode$1$[ebp], eax
  0004b	85 c0		 test	 eax, eax
  0004d	0f 84 75 01 00
	00		 je	 $LN69@Serialize
$LL4@Serialize:

; 1178 : 		{
; 1179 : 			ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1180 : 			TYPE* pData;
; 1181 : 			/*
; 1182 : 			 * in some cases the & operator might be overloaded, and we cannot use it to obtain
; 1183 : 			 * the address of a given object.  We then use the following trick to get the address
; 1184 : 			 */
; 1185 : 			pData = reinterpret_cast< TYPE* >( &reinterpret_cast< int& >( static_cast< TYPE& >( pNode->data ) ) );

  00053	8d 70 08	 lea	 esi, DWORD PTR [eax+8]

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00056	85 f6		 test	 esi, esi
  00058	0f 84 87 01 00
	00		 je	 $LN61@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00061	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00064	f7 d0		 not	 eax
  00066	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00068	74 2f		 je	 SHORT $LN22@Serialize

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0006a	b8 01 00 00 00	 mov	 eax, 1
  0006f	89 45 f0	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
$LL17@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00072	bb 17 5d 74 01	 mov	 ebx, 24403223		; 01745d17H
  00077	3b c3		 cmp	 eax, ebx
  00079	0f 42 d8	 cmovb	 ebx, eax

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0007c	6b fb 58	 imul	 edi, ebx, 88
  0007f	57		 push	 edi
  00080	56		 push	 esi
  00081	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  00086	8b 45 f0	 mov	 eax, DWORD PTR _nElementsLeft$1$[ebp]

; 87   : 			pData += nElementsToWrite;

  00089	03 f7		 add	 esi, edi
  0008b	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  0008e	2b c3		 sub	 eax, ebx
  00090	89 45 f0	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
  00093	85 c0		 test	 eax, eax
  00095	75 db		 jne	 SHORT $LL17@Serialize

; 88   : 		}
; 89   : 	}

  00097	eb 32		 jmp	 SHORT $LN2@Serialize
$LN22@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  00099	bf 01 00 00 00	 mov	 edi, 1
  0009e	66 90		 npad	 2
$LL19@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  000a0	bb 17 5d 74 01	 mov	 ebx, 24403223		; 01745d17H
  000a5	3b fb		 cmp	 edi, ebx
  000a7	0f 42 df	 cmovb	 ebx, edi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  000aa	6b c3 58	 imul	 eax, ebx, 88
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  000ad	50		 push	 eax
  000ae	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  000af	89 45 f0	 mov	 DWORD PTR _nCount$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  000b2	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  000b7	8b 4d f0	 mov	 ecx, DWORD PTR _nCount$1$[ebp]
  000ba	3b c1		 cmp	 eax, ecx
  000bc	0f 85 1a 01 00
	00		 jne	 $LN60@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  000c2	03 f1		 add	 esi, ecx
  000c4	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;

  000c7	2b fb		 sub	 edi, ebx
  000c9	75 d5		 jne	 SHORT $LL19@Serialize
$LN2@Serialize:

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  000cb	8b 45 ec	 mov	 eax, DWORD PTR _pNode$1$[ebp]
  000ce	8b 00		 mov	 eax, DWORD PTR [eax]
  000d0	89 45 ec	 mov	 DWORD PTR _pNode$1$[ebp], eax
  000d3	85 c0		 test	 eax, eax
  000d5	0f 85 78 ff ff
	ff		 jne	 $LL4@Serialize

; 1198 : 	}
; 1199 : }

  000db	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000de	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e5	59		 pop	 ecx
  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi
  000e8	5b		 pop	 ebx
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 04 00	 ret	 4
$LN7@Serialize:

; 1186 : 			SerializeElements<TYPE>(ar, pData, 1);
; 1187 : 		}
; 1188 : 	}
; 1189 : 	else
; 1190 : 	{
; 1191 : 		DWORD_PTR nNewCount = ar.ReadCount();

  000ef	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount

; 1192 : 		while (nNewCount--)

  000f4	85 c0		 test	 eax, eax
  000f6	0f 84 cc 00 00
	00		 je	 $LN69@Serialize
  000fc	0f 1f 40 00	 npad	 4
$LL5@Serialize:

; 1194 : 			TYPE newData[1];

  00100	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_??1CVerticalScale@@QAE@XZ
  00106	48		 dec	 eax
  00107	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_??0CVerticalScale@@QAE@XZ
  0010d	89 45 e8	 mov	 DWORD PTR _nNewCount$1$[ebp], eax
  00110	8d 45 90	 lea	 eax, DWORD PTR _newData$2[ebp]
  00113	6a 01		 push	 1
  00115	6a 58		 push	 88			; 00000058H
  00117	50		 push	 eax
  00118	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0011d	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1194 : 			TYPE newData[1];

  00120	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00127	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0012a	f7 d0		 not	 eax
  0012c	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  0012e	74 35		 je	 SHORT $LN43@Serialize

; 79   : 		pData = pElements;

  00130	8d 45 90	 lea	 eax, DWORD PTR _newData$2[ebp]
  00133	bb 01 00 00 00	 mov	 ebx, 1
  00138	89 45 ec	 mov	 DWORD PTR _pData$1$[ebp], eax
  0013b	0f 1f 44 00 00	 npad	 5
$LL38@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00140	bf 17 5d 74 01	 mov	 edi, 24403223		; 01745d17H
  00145	3b df		 cmp	 ebx, edi
  00147	0f 42 fb	 cmovb	 edi, ebx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0014a	6b f7 58	 imul	 esi, edi, 88
  0014d	56		 push	 esi
  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 87   : 			pData += nElementsToWrite;

  00154	8b 45 ec	 mov	 eax, DWORD PTR _pData$1$[ebp]
  00157	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  0015a	03 c6		 add	 eax, esi
  0015c	89 45 ec	 mov	 DWORD PTR _pData$1$[ebp], eax
  0015f	2b df		 sub	 ebx, edi
  00161	75 dd		 jne	 SHORT $LL38@Serialize

; 88   : 		}
; 89   : 	}

  00163	eb 32		 jmp	 SHORT $LN41@Serialize
$LN43@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  00165	be 01 00 00 00	 mov	 esi, 1

; 96   : 		pData = pElements;

  0016a	8d 5d 90	 lea	 ebx, DWORD PTR _newData$2[ebp]
  0016d	0f 1f 00	 npad	 3
$LL40@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00170	bf 17 5d 74 01	 mov	 edi, 24403223		; 01745d17H
  00175	3b f7		 cmp	 esi, edi
  00177	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0017a	6b c7 58	 imul	 eax, edi, 88
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  0017d	50		 push	 eax
  0017e	53		 push	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0017f	89 45 ec	 mov	 DWORD PTR _nCount$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00182	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  00187	8b 4d ec	 mov	 ecx, DWORD PTR _nCount$1$[ebp]
  0018a	3b c1		 cmp	 eax, ecx
  0018c	75 4e		 jne	 SHORT $LN60@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  0018e	03 d9		 add	 ebx, ecx
  00190	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;

  00193	2b f7		 sub	 esi, edi
  00195	75 d9		 jne	 SHORT $LL40@Serialize
$LN41@Serialize:

; 1195 : 			SerializeElements<TYPE>(ar, newData, 1);
; 1196 : 			AddTail(newData[0]);

  00197	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0019a	8d 45 90	 lea	 eax, DWORD PTR _newData$2[ebp]
  0019d	50		 push	 eax
  0019e	e8 00 00 00 00	 call	 ?AddTail@?$CList@VCVerticalScale@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScale@@@Z ; CList<CVerticalScale,CVerticalScale &>::AddTail

; 1197 : 		}

  001a3	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_??1CVerticalScale@@QAE@XZ
  001a9	8d 45 90	 lea	 eax, DWORD PTR _newData$2[ebp]
  001ac	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001b3	6a 01		 push	 1
  001b5	6a 58		 push	 88			; 00000058H
  001b7	50		 push	 eax
  001b8	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  001bd	8b 45 e8	 mov	 eax, DWORD PTR _nNewCount$1$[ebp]
  001c0	85 c0		 test	 eax, eax
  001c2	0f 85 38 ff ff
	ff		 jne	 $LL5@Serialize
$LN69@Serialize:

; 1198 : 	}
; 1199 : }

  001c8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001cb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d2	59		 pop	 ecx
  001d3	5f		 pop	 edi
  001d4	5e		 pop	 esi
  001d5	5b		 pop	 ebx
  001d6	8b e5		 mov	 esp, ebp
  001d8	5d		 pop	 ebp
  001d9	c2 04 00	 ret	 4
$LN60@Serialize:
  001dc	6a 00		 push	 0
  001de	6a 03		 push	 3
  001e0	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN61@Serialize:

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  001e5	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN87@Serialize:
  001ea	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Serialize@?$CList@VCVerticalScale@@AAV1@@@UAEXAAVCArchive@@@Z$0:
  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_??1CVerticalScale@@QAE@XZ
  00005	50		 push	 eax
  00006	6a 01		 push	 1
  00008	6a 58		 push	 88			; 00000058H
  0000a	8d 45 90	 lea	 eax, DWORD PTR _newData$2[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00013	c3		 ret	 0
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
__ehhandler$?Serialize@?$CList@VCVerticalScale@@AAV1@@@UAEXAAVCArchive@@@Z:
  00019	90		 npad	 1
  0001a	90		 npad	 1
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00022	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Serialize@?$CList@VCVerticalScale@@AAV1@@@UAEXAAVCArchive@@@Z
  00031	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Serialize@?$CList@VCVerticalScale@@AAV1@@@UAEXAAVCArchive@@@Z ENDP ; CList<CVerticalScale,CVerticalScale &>::Serialize
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??1?$CList@VCVerticalScale@@AAV1@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CList@VCVerticalScale@@AAV1@@@UAE@XZ PROC		; CList<CVerticalScale,CVerticalScale &>::~CList<CVerticalScale,CVerticalScale &>, COMDAT
; _this$ = ecx

; 878  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CList@VCVerticalScale@@AAV1@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CList@VCVerticalScale@@AAV1@@@6B@

; 879  : 	RemoveAll();

  00028	e8 00 00 00 00	 call	 ?RemoveAll@?$CList@VCVerticalScale@@AAV1@@@QAEXXZ ; CList<CVerticalScale,CVerticalScale &>::RemoveAll

; 880  : 	ASSERT(m_nCount == 0);
; 881  : }

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00030	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00037	59		 pop	 ecx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
  0003c	cc		 int	 3
  0003d	cc		 int	 3
  0003e	cc		 int	 3
  0003f	cc		 int	 3
  00040	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CList@VCVerticalScale@@AAV1@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CList@VCVerticalScale@@AAV1@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CList@VCVerticalScale@@AAV1@@@UAE@XZ ENDP		; CList<CVerticalScale,CVerticalScale &>::~CList<CVerticalScale,CVerticalScale &>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?NewNode@?$CList@VCVerticalScale@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z
_TEXT	SEGMENT
_pPrev$ = 8						; size = 4
_pNext$ = 12						; size = 4
?NewNode@?$CList@VCVerticalScale@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z PROC ; CList<CVerticalScale,CVerticalScale &>::NewNode, COMDAT
; _this$ = ecx

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 902  : 	if (m_pNodeFree == NULL)

  00007	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0000b	75 34		 jne	 SHORT $LN7@NewNode

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  0000d	6a 60		 push	 96			; 00000060H
  0000f	ff 76 18	 push	 DWORD PTR [esi+24]
  00012	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001b	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0001e	83 c0 08	 add	 eax, 8
  00021	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  00024	c1 e1 05	 shl	 ecx, 5
  00027	83 c1 a0	 add	 ecx, -96		; ffffffa0H
  0002a	03 c1		 add	 eax, ecx

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  0002c	83 c2 ff	 add	 edx, -1
  0002f	78 10		 js	 SHORT $LN7@NewNode
$LL4@NewNode:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00031	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00034	89 08		 mov	 DWORD PTR [eax], ecx

; 915  : 			m_pNodeFree = pNode;

  00036	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00039	83 e8 60	 sub	 eax, 96			; 00000060H
  0003c	83 ea 01	 sub	 edx, 1
  0003f	79 f0		 jns	 SHORT $LL4@NewNode
$LN7@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00041	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  00044	85 ff		 test	 edi, edi
  00046	74 24		 je	 SHORT $LN17@NewNode

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00048	8b 07		 mov	 eax, DWORD PTR [edi]

; 922  : 	pNode->pPrev = pPrev;

  0004a	8b 4d 08	 mov	 ecx, DWORD PTR _pPrev$[ebp]
  0004d	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00050	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 923  : 	pNode->pNext = pNext;

  00053	8b 4d 0c	 mov	 ecx, DWORD PTR _pNext$[ebp]
  00056	89 0f		 mov	 DWORD PTR [edi], ecx

; 924  : 	m_nCount++;
; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;

  00058	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0005b	ff 46 0c	 inc	 DWORD PTR [esi+12]
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CVerticalScale@@QAE@XZ

; 930  : #pragma pop_macro("new")
; 931  : 	return pNode;

  00064	8b c7		 mov	 eax, edi
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi

; 932  : }

  00068	5d		 pop	 ebp
  00069	c2 08 00	 ret	 8
$LN17@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  0006c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN15@NewNode:
  00071	cc		 int	 3
?NewNode@?$CList@VCVerticalScale@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z ENDP ; CList<CVerticalScale,CVerticalScale &>::NewNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?FindIndex@?$CList@VCVerticalScale@@AAV1@@@QBEPAU__POSITION@@H@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?FindIndex@?$CList@VCVerticalScale@@AAV1@@@QBEPAU__POSITION@@H@Z PROC ; CList<CVerticalScale,CVerticalScale &>::FindIndex, COMDAT
; _this$ = ecx

; 1130 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1131 : 	ASSERT_VALID(this);
; 1132 : 
; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00003	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00006	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00009	7d 14		 jge	 SHORT $LN5@FindIndex
  0000b	85 d2		 test	 edx, edx
  0000d	78 10		 js	 SHORT $LN5@FindIndex

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0000f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1137 : 	while (nIndex--)

  00012	74 0d		 je	 SHORT $LN1@FindIndex
$LL2@FindIndex:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	83 ea 01	 sub	 edx, 1
  00019	75 f9		 jne	 SHORT $LL2@FindIndex

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;
; 1143 : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
$LN5@FindIndex:

; 1134 : 		return NULL;  // went too far

  0001f	33 c0		 xor	 eax, eax
$LN1@FindIndex:

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;
; 1143 : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?FindIndex@?$CList@VCVerticalScale@@AAV1@@@QBEPAU__POSITION@@H@Z ENDP ; CList<CVerticalScale,CVerticalScale &>::FindIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAll@?$CList@VCVerticalScale@@AAV1@@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@?$CList@VCVerticalScale@@AAV1@@@QAEXXZ PROC	; CList<CVerticalScale,CVerticalScale &>::RemoveAll, COMDAT
; _this$ = ecx

; 862  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 863  : 	ASSERT_VALID(this);
; 864  : 
; 865  : 	// destroy elements
; 866  : 	CNode* pNode;
; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00004	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00007	85 f6		 test	 esi, esi
  00009	74 14		 je	 SHORT $LN3@RemoveAll
  0000b	0f 1f 44 00 00	 npad	 5
$LL4@RemoveAll:

; 868  : 		pNode->data.~TYPE();

  00010	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CVerticalScale@@QAE@XZ
  00019	8b 36		 mov	 esi, DWORD PTR [esi]
  0001b	85 f6		 test	 esi, esi
  0001d	75 f1		 jne	 SHORT $LL4@RemoveAll
$LN3@RemoveAll:

; 869  : 
; 870  : 	m_nCount = 0;
; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 872  : 	m_pBlocks->FreeDataChain();

  0001f	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00022	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00029	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00030	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00037	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0003e	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00043	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi

; 874  : }

  0004c	c3		 ret	 0
?RemoveAll@?$CList@VCVerticalScale@@AAV1@@@QAEXXZ ENDP	; CList<CVerticalScale,CVerticalScale &>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?AddTail@?$CList@VCVerticalScale@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScale@@@Z
_TEXT	SEGMENT
_newElement$ = 8					; size = 4
?AddTail@?$CList@VCVerticalScale@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScale@@@Z PROC ; CList<CVerticalScale,CVerticalScale &>::AddTail, COMDAT
; _this$ = ecx

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 902  : 	if (m_pNodeFree == NULL)

  00008	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0

; 966  : 	ASSERT_VALID(this);
; 967  : 
; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  0000c	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 902  : 	if (m_pNodeFree == NULL)

  0000f	75 34		 jne	 SHORT $LN11@AddTail

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  00011	6a 60		 push	 96			; 00000060H
  00013	ff 76 18	 push	 DWORD PTR [esi+24]
  00016	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001f	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00022	83 c0 08	 add	 eax, 8
  00025	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  00028	c1 e1 05	 shl	 ecx, 5
  0002b	83 c1 a0	 add	 ecx, -96		; ffffffa0H
  0002e	03 c8		 add	 ecx, eax

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00030	83 c2 ff	 add	 edx, -1
  00033	78 10		 js	 SHORT $LN11@AddTail
$LL8@AddTail:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00035	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00038	89 01		 mov	 DWORD PTR [ecx], eax

; 915  : 			m_pNodeFree = pNode;

  0003a	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0003d	83 e9 60	 sub	 ecx, 96			; 00000060H
  00040	83 ea 01	 sub	 edx, 1
  00043	79 f0		 jns	 SHORT $LL8@AddTail
$LN11@AddTail:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00045	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00048	85 db		 test	 ebx, ebx
  0004a	74 4a		 je	 SHORT $LN22@AddTail

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  0004c	8b 03		 mov	 eax, DWORD PTR [ebx]

; 922  : 	pNode->pPrev = pPrev;
; 923  : 	pNode->pNext = pNext;
; 924  : 	m_nCount++;
; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;

  0004e	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  00051	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00054	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
  00057	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  0005d	ff 46 0c	 inc	 DWORD PTR [esi+12]
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CVerticalScale@@QAE@XZ

; 969  : 	pNewNode->data = newElement;

  00066	ff 75 08	 push	 DWORD PTR _newElement$[ebp]
  00069	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4CVerticalScale@@QAEAAV0@ABV0@@Z

; 970  : 	if (m_pNodeTail != NULL)

  00072	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00075	85 c0		 test	 eax, eax
  00077	74 0e		 je	 SHORT $LN2@AddTail

; 971  : 		m_pNodeTail->pNext = pNewNode;

  00079	89 18		 mov	 DWORD PTR [eax], ebx

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  0007b	8b c3		 mov	 eax, ebx
  0007d	5f		 pop	 edi
  0007e	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx

; 976  : }

  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
$LN2@AddTail:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00087	5f		 pop	 edi
  00088	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0008b	8b c3		 mov	 eax, ebx
  0008d	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx

; 976  : }

  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
$LN22@AddTail:

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00096	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN20@AddTail:
  0009b	cc		 int	 3
?AddTail@?$CList@VCVerticalScale@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScale@@@Z ENDP ; CList<CVerticalScale,CVerticalScale &>::AddTail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??0?$CList@VCVerticalScale@@AAV1@@@QAE@H@Z
_TEXT	SEGMENT
_nBlockSize$ = 8					; size = 4
??0?$CList@VCVerticalScale@@AAV1@@@QAE@H@Z PROC		; CList<CVerticalScale,CVerticalScale &>::CList<CVerticalScale,CVerticalScale &>, COMDAT
; _this$ = ecx

; 851  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;
; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 856  : 	m_pBlocks = NULL;
; 857  : 	m_nBlockSize = nBlockSize;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nBlockSize$[ebp]
  00006	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 858  : }

  00009	8b c1		 mov	 eax, ecx
  0000b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CList@VCVerticalScale@@AAV1@@@6B@
  00011	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00018	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0001f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00026	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0002d	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??0?$CList@VCVerticalScale@@AAV1@@@QAE@H@Z ENDP		; CList<CVerticalScale,CVerticalScale &>::CList<CVerticalScale,CVerticalScale &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetAt@CVerticalScaleDataList@@QBE?AVCVerticalScale@@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_nIndex$ = 12						; size = 4
?GetAt@CVerticalScaleDataList@@QBE?AVCVerticalScale@@H@Z PROC ; CVerticalScaleDataList::GetAt, COMDAT
; _this$ = ecx

; 789  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 790  : 	POSITION pos = m_vertScaleList.FindIndex(nIndex);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _nIndex$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00006	3b 41 18	 cmp	 eax, DWORD PTR [ecx+24]
  00009	7d 24		 jge	 SHORT $LN9@GetAt
  0000b	85 c0		 test	 eax, eax
  0000d	78 20		 js	 SHORT $LN9@GetAt

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0000f	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]

; 1137 : 	while (nIndex--)

  00012	74 1d		 je	 SHORT $LN5@GetAt
$LL6@GetAt:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00014	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00016	83 e8 01	 sub	 eax, 1
  00019	75 f9		 jne	 SHORT $LL6@GetAt
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 792  : 	return m_vertScaleList.GetAt(pos);

  0001b	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00021	50		 push	 eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CVerticalScale@@QAE@ABV0@@Z
  00028	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 793  : }

  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
$LN9@GetAt:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1134 : 		return NULL;  // went too far

  0002f	33 c9		 xor	 ecx, ecx
$LN5@GetAt:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 792  : 	return m_vertScaleList.GetAt(pos);

  00031	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00034	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00037	50		 push	 eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CVerticalScale@@QAE@ABV0@@Z
  0003e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 793  : }

  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
?GetAt@CVerticalScaleDataList@@QBE?AVCVerticalScale@@H@Z ENDP ; CVerticalScaleDataList::GetAt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetAt@CVerticalScaleDataList@@QAEAAVCVerticalScale@@H@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?GetAt@CVerticalScaleDataList@@QAEAAVCVerticalScale@@H@Z PROC ; CVerticalScaleDataList::GetAt, COMDAT
; _this$ = ecx

; 782  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 783  : 	POSITION pos = m_vertScaleList.FindIndex(nIndex);

  00003	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00006	3b 41 18	 cmp	 eax, DWORD PTR [ecx+24]
  00009	7d 17		 jge	 SHORT $LN7@GetAt
  0000b	85 c0		 test	 eax, eax
  0000d	78 13		 js	 SHORT $LN7@GetAt

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0000f	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]

; 1137 : 	while (nIndex--)

  00012	74 07		 je	 SHORT $LN10@GetAt
$LL4@GetAt:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00014	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00016	83 e8 01	 sub	 eax, 1
  00019	75 f9		 jne	 SHORT $LL4@GetAt
$LN10@GetAt:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 785  : 	return m_vertScaleList.GetAt(pos);

  0001b	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 786  : }

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
$LN7@GetAt:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1134 : 		return NULL;  // went too far

  00022	33 c0		 xor	 eax, eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 785  : 	return m_vertScaleList.GetAt(pos);

  00024	b8 08 00 00 00	 mov	 eax, 8

; 786  : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?GetAt@CVerticalScaleDataList@@QAEAAVCVerticalScale@@H@Z ENDP ; CVerticalScaleDataList::GetAt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetCount@CVerticalScaleDataList@@QBEHXZ
_TEXT	SEGMENT
?GetCount@CVerticalScaleDataList@@QBEHXZ PROC		; CVerticalScaleDataList::GetCount, COMDAT
; _this$ = ecx

; 773  : 	return m_vertScaleList.GetCount();

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]

; 774  : }

  00003	c3		 ret	 0
?GetCount@CVerticalScaleDataList@@QBEHXZ ENDP		; CVerticalScaleDataList::GetCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?IsScaleLogType@CVerticalScaleDataList@@QBE_NXZ
_TEXT	SEGMENT
?IsScaleLogType@CVerticalScaleDataList@@QBE_NXZ PROC	; CVerticalScaleDataList::IsScaleLogType, COMDAT
; _this$ = ecx

; 778  : 	return m_bLogType;

  00000	8a 41 08	 mov	 al, BYTE PTR [ecx+8]

; 779  : }

  00003	c3		 ret	 0
?IsScaleLogType@CVerticalScaleDataList@@QBE_NXZ ENDP	; CVerticalScaleDataList::IsScaleLogType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetScaleTextColor@CVerticalScaleDataList@@QBEKXZ
_TEXT	SEGMENT
?GetScaleTextColor@CVerticalScaleDataList@@QBEKXZ PROC	; CVerticalScaleDataList::GetScaleTextColor, COMDAT
; _this$ = ecx

; 768  : 	return m_scaleTextColor;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 769  : }

  00003	c3		 ret	 0
?GetScaleTextColor@CVerticalScaleDataList@@QBEKXZ ENDP	; CVerticalScaleDataList::GetScaleTextColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetScaleGridColor@CVerticalScaleDataList@@QBEKXZ
_TEXT	SEGMENT
?GetScaleGridColor@CVerticalScaleDataList@@QBEKXZ PROC	; CVerticalScaleDataList::GetScaleGridColor, COMDAT
; _this$ = ecx

; 763  : 	return m_scaleGridColor;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 764  : }

  00002	c3		 ret	 0
?GetScaleGridColor@CVerticalScaleDataList@@QBEKXZ ENDP	; CVerticalScaleDataList::GetScaleGridColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?RemoveAll@CVerticalScaleDataList@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@CVerticalScaleDataList@@QAEXXZ PROC		; CVerticalScaleDataList::RemoveAll, COMDAT
; _this$ = ecx

; 757  : 	m_vertScaleList.RemoveAll();

  00000	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00003	e9 00 00 00 00	 jmp	 ?RemoveAll@?$CList@VCVerticalScale@@AAV1@@@QAEXXZ ; CList<CVerticalScale,CVerticalScale &>::RemoveAll
?RemoveAll@CVerticalScaleDataList@@QAEXXZ ENDP		; CVerticalScaleDataList::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?AddTail@CVerticalScaleDataList@@QAEXVCVerticalScale@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_vertScale$ = 8						; size = 88
?AddTail@CVerticalScaleDataList@@QAEXVCVerticalScale@@@Z PROC ; CVerticalScaleDataList::AddTail, COMDAT
; _this$ = ecx

; 751  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AddTail@CVerticalScaleDataList@@QAEXVCVerticalScale@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 752  : 	m_vertScaleList.AddTail(vertScale);

  00022	8d 45 08	 lea	 eax, DWORD PTR _vertScale$[ebp]
  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	50		 push	 eax
  0002d	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00030	e8 00 00 00 00	 call	 ?AddTail@?$CList@VCVerticalScale@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScale@@@Z ; CList<CVerticalScale,CVerticalScale &>::AddTail

; 753  : }

  00035	8d 4d 08	 lea	 ecx, DWORD PTR _vertScale$[ebp]
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CVerticalScale@@QAE@XZ
  0003e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00041	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00048	59		 pop	 ecx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 58 00	 ret	 88			; 00000058H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddTail@CVerticalScaleDataList@@QAEXVCVerticalScale@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _vertScale$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CVerticalScale@@QAE@XZ
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
__ehhandler$?AddTail@CVerticalScaleDataList@@QAEXVCVerticalScale@@@Z:
  0000e	90		 npad	 1
  0000f	90		 npad	 1
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddTail@CVerticalScaleDataList@@QAEXVCVerticalScale@@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddTail@CVerticalScaleDataList@@QAEXVCVerticalScale@@@Z ENDP ; CVerticalScaleDataList::AddTail
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??0CVerticalScaleDataList@@QAE@PBVCVerticalScalePtrDataList@@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pVertScalePtrDataList$ = 8				; size = 4
??0CVerticalScaleDataList@@QAE@PBVCVerticalScalePtrDataList@@@Z PROC ; CVerticalScaleDataList::CVerticalScaleDataList, COMDAT
; _this$ = ecx

; 736  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CVerticalScaleDataList@@QAE@PBVCVerticalScalePtrDataList@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 851  : {

  0002d	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], OFFSET ??_7?$CList@VCVerticalScale@@AAV1@@@6B@

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;

  00034	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  0003b	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00042	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00049	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 856  : 	m_pBlocks = NULL;

  00050	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 857  : 	m_nBlockSize = nBlockSize;

  00057	c7 46 24 0a 00
	00 00		 mov	 DWORD PTR [esi+36], 10	; 0000000aH
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 737  : 	if(pVertScalePtrDataList == NULL)

  0005e	8b 5d 08	 mov	 ebx, DWORD PTR _pVertScalePtrDataList$[ebp]
  00061	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00068	85 db		 test	 ebx, ebx
  0006a	0f 84 8f 00 00
	00		 je	 $LN38@CVerticalS

; 738  : 		return;
; 739  : 
; 740  : 	m_scaleGridColor = *pVertScalePtrDataList->GetScaleGridColor();

  00070	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 741  : 	m_scaleTextColor = *pVertScalePtrDataList->GetScaleTextColor();
; 742  : 	m_bLogType = *pVertScalePtrDataList->GetScaleLogType();
; 743  : 	for(int nIndex = 0; nIndex < pVertScalePtrDataList->GetCount(); nIndex++){

  00073	33 ff		 xor	 edi, edi
  00075	8b 00		 mov	 eax, DWORD PTR [eax]
  00077	89 06		 mov	 DWORD PTR [esi], eax
  00079	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0007c	8b 00		 mov	 eax, DWORD PTR [eax]
  0007e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00081	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00084	8a 00		 mov	 al, BYTE PTR [eax]
  00086	88 46 08	 mov	 BYTE PTR [esi+8], al
  00089	8b 4b 20	 mov	 ecx, DWORD PTR [ebx+32]
  0008c	85 c9		 test	 ecx, ecx
  0008e	7e 6f		 jle	 SHORT $LN38@CVerticalS
$LL4@CVerticalS:

; 696  : 	POSITION pos = m_vertScalePtrDataList.FindIndex(nIndex);

  00090	8b c7		 mov	 eax, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00092	3b f9		 cmp	 edi, ecx
  00094	7d 13		 jge	 SHORT $LN19@CVerticalS
  00096	85 ff		 test	 edi, edi
  00098	78 0f		 js	 SHORT $LN19@CVerticalS

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0009a	8b 73 18	 mov	 esi, DWORD PTR [ebx+24]

; 1137 : 	while (nIndex--)

  0009d	74 0c		 je	 SHORT $LN15@CVerticalS
  0009f	90		 npad	 1
$LL16@CVerticalS:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  000a0	8b 36		 mov	 esi, DWORD PTR [esi]
  000a2	83 e8 01	 sub	 eax, 1
  000a5	75 f9		 jne	 SHORT $LL16@CVerticalS

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;

  000a7	eb 02		 jmp	 SHORT $LN15@CVerticalS
$LN19@CVerticalS:

; 1134 : 		return NULL;  // went too far

  000a9	33 f6		 xor	 esi, esi
$LN15@CVerticalS:
  000ab	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ae	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp+4]
  000b1	89 45 e4	 mov	 DWORD PTR $T2[ebp], eax
  000b4	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  000b7	50		 push	 eax
  000b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  000be	83 c6 10	 add	 esi, 16			; 00000010H
  000c1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000c5	56		 push	 esi
  000c6	8d 4d ec	 lea	 ecx, DWORD PTR $T2[ebp+8]
  000c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 744  : 		m_vertScaleList.AddTail(*pVertScalePtrDataList->GetAt(nIndex).GetVertScale());

  000cf	8b 75 f0	 mov	 esi, DWORD PTR _this$[ebp]
  000d2	ff 75 e4	 push	 DWORD PTR $T2[ebp]
  000d5	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000d9	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  000dc	e8 00 00 00 00	 call	 ?AddTail@?$CList@VCVerticalScale@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScale@@@Z ; CList<CVerticalScale,CVerticalScale &>::AddTail
  000e1	8d 4d ec	 lea	 ecx, DWORD PTR $T2[ebp+8]
  000e4	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000ee	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp+4]
  000f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000f7	8b 4b 20	 mov	 ecx, DWORD PTR [ebx+32]
  000fa	47		 inc	 edi
  000fb	3b f9		 cmp	 edi, ecx
  000fd	7c 91		 jl	 SHORT $LL4@CVerticalS
$LN38@CVerticalS:

; 745  : 	}
; 746  : }

  000ff	8b c6		 mov	 eax, esi
  00101	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00104	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010b	59		 pop	 ecx
  0010c	5f		 pop	 edi
  0010d	5e		 pop	 esi
  0010e	5b		 pop	 ebx
  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CVerticalScaleDataList@@QAE@PBVCVerticalScalePtrDataList@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1?$CList@VCVerticalScale@@AAV1@@@UAE@XZ ; CList<CVerticalScale,CVerticalScale &>::~CList<CVerticalScale,CVerticalScale &>
__unwindfunclet$??0CVerticalScaleDataList@@QAE@PBVCVerticalScalePtrDataList@@@Z$3:
  0000b	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp+4]
  0000e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$??0CVerticalScaleDataList@@QAE@PBVCVerticalScalePtrDataList@@@Z$1:
  00014	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  00017	e9 00 00 00 00	 jmp	 ??1CVerticalScalePtrData@@QAE@XZ
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
  0001f	cc		 int	 3
  00020	cc		 int	 3
__ehhandler$??0CVerticalScaleDataList@@QAE@PBVCVerticalScalePtrDataList@@@Z:
  00021	90		 npad	 1
  00022	90		 npad	 1
  00023	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00027	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002a	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CVerticalScaleDataList@@QAE@PBVCVerticalScalePtrDataList@@@Z
  00039	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CVerticalScaleDataList@@QAE@PBVCVerticalScalePtrDataList@@@Z ENDP ; CVerticalScaleDataList::CVerticalScaleDataList
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??0CVerticalScaleDataList@@QAE@ABV0@@Z
_TEXT	SEGMENT
$T2 = -104						; size = 88
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_vertScaleDataList$ = 8					; size = 4
??0CVerticalScaleDataList@@QAE@ABV0@@Z PROC		; CVerticalScaleDataList::CVerticalScaleDataList, COMDAT
; _this$ = ecx

; 727  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CVerticalScaleDataList@@QAE@ABV0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8d 59 0c	 lea	 ebx, DWORD PTR [ecx+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 851  : {

  0002e	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7?$CList@VCVerticalScale@@AAV1@@@6B@

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;

  00034	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  0003b	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  00042	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
  00049	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 856  : 	m_pBlocks = NULL;

  00050	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 857  : 	m_nBlockSize = nBlockSize;

  00057	c7 43 18 0a 00
	00 00		 mov	 DWORD PTR [ebx+24], 10	; 0000000aH
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 728  : 	m_scaleGridColor = vertScaleDataList.GetScaleGridColor();

  0005e	8b 7d 08	 mov	 edi, DWORD PTR _vertScaleDataList$[ebp]

; 729  : 	m_scaleTextColor = vertScaleDataList.GetScaleTextColor();
; 730  : 	m_bLogType = vertScaleDataList.IsScaleLogType();
; 731  : 	for(int nIndex = 0; nIndex < vertScaleDataList.GetCount(); nIndex++)

  00061	33 f6		 xor	 esi, esi
  00063	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006a	8b 07		 mov	 eax, DWORD PTR [edi]
  0006c	89 01		 mov	 DWORD PTR [ecx], eax
  0006e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00071	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00074	8a 47 08	 mov	 al, BYTE PTR [edi+8]
  00077	88 41 08	 mov	 BYTE PTR [ecx+8], al
  0007a	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  0007d	85 c0		 test	 eax, eax
  0007f	7e 62		 jle	 SHORT $LN29@CVerticalS
$LL4@CVerticalS:

; 790  : 	POSITION pos = m_vertScaleList.FindIndex(nIndex);

  00081	8b ce		 mov	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00083	3b f0		 cmp	 esi, eax
  00085	7d 12		 jge	 SHORT $LN18@CVerticalS
  00087	85 f6		 test	 esi, esi
  00089	78 0e		 js	 SHORT $LN18@CVerticalS

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0008b	8b 47 10	 mov	 eax, DWORD PTR [edi+16]

; 1137 : 	while (nIndex--)

  0008e	74 0b		 je	 SHORT $LN14@CVerticalS
$LL15@CVerticalS:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00090	8b 00		 mov	 eax, DWORD PTR [eax]
  00092	83 e9 01	 sub	 ecx, 1
  00095	75 f9		 jne	 SHORT $LL15@CVerticalS

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;

  00097	eb 02		 jmp	 SHORT $LN14@CVerticalS
$LN18@CVerticalS:

; 1134 : 		return NULL;  // went too far

  00099	33 c0		 xor	 eax, eax
$LN14@CVerticalS:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 792  : 	return m_vertScaleList.GetAt(pos);

  0009b	83 c0 08	 add	 eax, 8
  0009e	8d 4d 98	 lea	 ecx, DWORD PTR $T2[ebp]
  000a1	50		 push	 eax
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CVerticalScale@@QAE@ABV0@@Z

; 732  : 		m_vertScaleList.AddTail(vertScaleDataList.GetAt(nIndex));

  000a8	8d 45 98	 lea	 eax, DWORD PTR $T2[ebp]
  000ab	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000af	50		 push	 eax
  000b0	8b cb		 mov	 ecx, ebx
  000b2	e8 00 00 00 00	 call	 ?AddTail@?$CList@VCVerticalScale@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScale@@@Z ; CList<CVerticalScale,CVerticalScale &>::AddTail
  000b7	8d 4d 98	 lea	 ecx, DWORD PTR $T2[ebp]
  000ba	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CVerticalScale@@QAE@XZ
  000c4	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  000c7	46		 inc	 esi
  000c8	3b f0		 cmp	 esi, eax
  000ca	7c b5		 jl	 SHORT $LL4@CVerticalS

; 733  : }

  000cc	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d9	59		 pop	 ecx
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5b		 pop	 ebx
  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c2 04 00	 ret	 4
$LN29@CVerticalS:
  000e3	8b c1		 mov	 eax, ecx
  000e5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ef	59		 pop	 ecx
  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CVerticalScaleDataList@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1?$CList@VCVerticalScale@@AAV1@@@UAE@XZ ; CList<CVerticalScale,CVerticalScale &>::~CList<CVerticalScale,CVerticalScale &>
__unwindfunclet$??0CVerticalScaleDataList@@QAE@ABV0@@Z$1:
  0000b	8d 4d 98	 lea	 ecx, DWORD PTR $T2[ebp]
  0000e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CVerticalScale@@QAE@XZ
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
__ehhandler$??0CVerticalScaleDataList@@QAE@ABV0@@Z:
  00019	90		 npad	 1
  0001a	90		 npad	 1
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00022	8b 4a 94	 mov	 ecx, DWORD PTR [edx-108]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CVerticalScaleDataList@@QAE@ABV0@@Z
  00031	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CVerticalScaleDataList@@QAE@ABV0@@Z ENDP		; CVerticalScaleDataList::CVerticalScaleDataList
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??0CVerticalScaleDataList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CVerticalScaleDataList@@QAE@XZ PROC			; CVerticalScaleDataList::CVerticalScaleDataList, COMDAT
; _this$ = ecx

; 723  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 720  : 	m_scaleGridColor(RGB(202, 202, 202)),

  00004	c7 01 ca ca ca
	00		 mov	 DWORD PTR [ecx], 13290186 ; 00cacacaH

; 724  : }

  0000a	8b c1		 mov	 eax, ecx
  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00013	c6 41 08 00	 mov	 BYTE PTR [ecx+8], 0
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 851  : {

  0001a	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], OFFSET ??_7?$CList@VCVerticalScale@@AAV1@@@6B@

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;

  00021	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00028	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  0002f	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00036	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 856  : 	m_pBlocks = NULL;

  0003d	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 857  : 	m_nBlockSize = nBlockSize;

  00044	c7 41 24 0a 00
	00 00		 mov	 DWORD PTR [ecx+36], 10	; 0000000aH
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 724  : }

  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
??0CVerticalScaleDataList@@QAE@XZ ENDP			; CVerticalScaleDataList::CVerticalScaleDataList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??4CVerticalScaleDataList@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
$T2 = -104						; size = 88
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
tv234 = 8						; size = 4
_vertScaleDataList$ = 8					; size = 4
??4CVerticalScaleDataList@@QAEAAV0@ABV0@@Z PROC		; CVerticalScaleDataList::operator=, COMDAT
; _this$ = ecx

; 706  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??4CVerticalScaleDataList@@QAEAAV0@ABV0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d f0	 mov	 DWORD PTR _this$1$[ebp], ebx

; 707  : 	if(this == &vertScaleDataList)

  0002d	8b 7d 08	 mov	 edi, DWORD PTR _vertScaleDataList$[ebp]
  00030	3b df		 cmp	 ebx, edi
  00032	0f 84 86 00 00
	00		 je	 $LN28@operator

; 708  : 		return *this;
; 709  : 
; 710  : 	m_scaleGridColor = vertScaleDataList.GetScaleGridColor();

  00038	8b 07		 mov	 eax, DWORD PTR [edi]

; 711  : 	m_scaleTextColor = vertScaleDataList.GetScaleTextColor();
; 712  : 	m_bLogType = vertScaleDataList.IsScaleLogType();
; 713  : 	for(int nIndex = 0; nIndex < vertScaleDataList.GetCount(); nIndex++)

  0003a	33 f6		 xor	 esi, esi
  0003c	89 03		 mov	 DWORD PTR [ebx], eax
  0003e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00041	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00044	8a 47 08	 mov	 al, BYTE PTR [edi+8]
  00047	88 43 08	 mov	 BYTE PTR [ebx+8], al
  0004a	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  0004d	85 c0		 test	 eax, eax
  0004f	7e 6d		 jle	 SHORT $LN28@operator
  00051	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  00054	8b d9		 mov	 ebx, ecx
$LL4@operator:

; 790  : 	POSITION pos = m_vertScaleList.FindIndex(nIndex);

  00056	8b ce		 mov	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00058	3b f0		 cmp	 esi, eax
  0005a	7d 12		 jge	 SHORT $LN16@operator
  0005c	85 f6		 test	 esi, esi
  0005e	78 0e		 js	 SHORT $LN16@operator

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  00060	8b 47 10	 mov	 eax, DWORD PTR [edi+16]

; 1137 : 	while (nIndex--)

  00063	74 0b		 je	 SHORT $LN12@operator
$LL13@operator:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00065	8b 00		 mov	 eax, DWORD PTR [eax]
  00067	83 e9 01	 sub	 ecx, 1
  0006a	75 f9		 jne	 SHORT $LL13@operator

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;

  0006c	eb 02		 jmp	 SHORT $LN12@operator
$LN16@operator:

; 1134 : 		return NULL;  // went too far

  0006e	33 c0		 xor	 eax, eax
$LN12@operator:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 792  : 	return m_vertScaleList.GetAt(pos);

  00070	83 c0 08	 add	 eax, 8
  00073	8d 4d 98	 lea	 ecx, DWORD PTR $T2[ebp]
  00076	50		 push	 eax
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CVerticalScale@@QAE@ABV0@@Z

; 714  : 		m_vertScaleList.AddTail(vertScaleDataList.GetAt(nIndex));

  0007d	8d 45 98	 lea	 eax, DWORD PTR $T2[ebp]
  00080	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00087	50		 push	 eax
  00088	8b cb		 mov	 ecx, ebx
  0008a	e8 00 00 00 00	 call	 ?AddTail@?$CList@VCVerticalScale@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScale@@@Z ; CList<CVerticalScale,CVerticalScale &>::AddTail
  0008f	8d 4d 98	 lea	 ecx, DWORD PTR $T2[ebp]
  00092	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CVerticalScale@@QAE@XZ
  0009f	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  000a2	46		 inc	 esi
  000a3	3b f0		 cmp	 esi, eax
  000a5	7c af		 jl	 SHORT $LL4@operator

; 715  : 
; 716  : 	return *this;

  000a7	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]

; 717  : }

  000aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b4	59		 pop	 ecx
  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c2 04 00	 ret	 4
$LN28@operator:
  000be	8b c3		 mov	 eax, ebx
  000c0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ca	59		 pop	 ecx
  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4CVerticalScaleDataList@@QAEAAV0@ABV0@@Z$0:
  00000	8d 4d 98	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CVerticalScale@@QAE@XZ
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
__ehhandler$??4CVerticalScaleDataList@@QAEAAV0@ABV0@@Z:
  0000e	90		 npad	 1
  0000f	90		 npad	 1
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a 94	 mov	 ecx, DWORD PTR [edx-108]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??4CVerticalScaleDataList@@QAEAAV0@ABV0@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??4CVerticalScaleDataList@@QAEAAV0@ABV0@@Z ENDP		; CVerticalScaleDataList::operator=
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_G?$CList@VCVerticalScalePtrData@@AAV1@@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$CList@VCVerticalScalePtrData@@AAV1@@@UAEPAXI@Z PROC ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$CList@VCVerticalScalePtrData@@AAV1@@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 878  : {

  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@VCVerticalScalePtrData@@AAV1@@@6B@

; 879  : 	RemoveAll();

  00032	e8 00 00 00 00	 call	 ?RemoveAll@?$CList@VCVerticalScalePtrData@@AAV1@@@QAEXXZ ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::RemoveAll
  00037	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0003a	a8 01		 test	 al, 1
  0003c	74 2c		 je	 SHORT $LN12@scalar
  0003e	a8 04		 test	 al, 4
  00040	75 1d		 jne	 SHORT $LN3@scalar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 112  : 	{ ::operator delete(p); }

  00042	56		 push	 esi
  00043	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00048	83 c4 04	 add	 esp, 4
  0004b	8b c6		 mov	 eax, esi
  0004d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00050	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00057	59		 pop	 ecx
  00058	5e		 pop	 esi
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
$LN3@scalar:
  0005f	6a 1c		 push	 28			; 0000001cH
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  00067	83 c4 08	 add	 esp, 8
$LN12@scalar:
  0006a	8b c6		 mov	 eax, esi
  0006c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00076	59		 pop	 ecx
  00077	5e		 pop	 esi
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
  0007e	cc		 int	 3
  0007f	cc		 int	 3
  00080	cc		 int	 3
  00081	cc		 int	 3
  00082	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_G?$CList@VCVerticalScalePtrData@@AAV1@@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$CList@VCVerticalScalePtrData@@AAV1@@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$CList@VCVerticalScalePtrData@@AAV1@@@UAEPAXI@Z ENDP ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CList@VCVerticalScalePtrData@@AAV1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_newData$2 = -36					; size = 12
_nNewCount$1$ = -24					; size = 4
_pData$1$ = -20						; size = 4
_pData$1$ = -20						; size = 4
_pNode$1$ = -20						; size = 4
_nCount$1$ = -16					; size = 4
_nElementsLeft$1$ = -16					; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ar$ = 8						; size = 4
?Serialize@?$CList@VCVerticalScalePtrData@@AAV1@@@UAEXAAVCArchive@@@Z PROC ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::Serialize, COMDAT
; _this$ = ecx

; 1169 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Serialize@?$CList@VCVerticalScalePtrData@@AAV1@@@UAEXAAVCArchive@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d f0	 mov	 DWORD PTR _this$1$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00030	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00033	f7 d0		 not	 eax
  00035	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1174 : 	if (ar.IsStoring())

  00037	0f 84 b6 00 00
	00		 je	 $LN7@Serialize

; 1175 : 	{
; 1176 : 		ar.WriteCount(m_nCount);

  0003d	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00040	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00045	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00048	89 45 ec	 mov	 DWORD PTR _pNode$1$[ebp], eax
  0004b	85 c0		 test	 eax, eax
  0004d	0f 84 77 01 00
	00		 je	 $LN69@Serialize
$LL4@Serialize:

; 1178 : 		{
; 1179 : 			ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1180 : 			TYPE* pData;
; 1181 : 			/*
; 1182 : 			 * in some cases the & operator might be overloaded, and we cannot use it to obtain
; 1183 : 			 * the address of a given object.  We then use the following trick to get the address
; 1184 : 			 */
; 1185 : 			pData = reinterpret_cast< TYPE* >( &reinterpret_cast< int& >( static_cast< TYPE& >( pNode->data ) ) );

  00053	8d 70 08	 lea	 esi, DWORD PTR [eax+8]

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00056	85 f6		 test	 esi, esi
  00058	0f 84 89 01 00
	00		 je	 $LN61@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00061	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00064	f7 d0		 not	 eax
  00066	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00068	74 32		 je	 SHORT $LN22@Serialize

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0006a	b8 01 00 00 00	 mov	 eax, 1
  0006f	89 45 f0	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
$LL17@Serialize:

; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00072	bb aa aa aa 0a	 mov	 ebx, 178956970		; 0aaaaaaaH
  00077	3b c3		 cmp	 eax, ebx
  00079	0f 42 d8	 cmovb	 ebx, eax

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0007c	8d 3c 5b	 lea	 edi, DWORD PTR [ebx+ebx*2]
  0007f	c1 e7 02	 shl	 edi, 2
  00082	57		 push	 edi
  00083	56		 push	 esi
  00084	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  00089	8b 45 f0	 mov	 eax, DWORD PTR _nElementsLeft$1$[ebp]

; 87   : 			pData += nElementsToWrite;

  0008c	03 f7		 add	 esi, edi
  0008e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00091	2b c3		 sub	 eax, ebx
  00093	89 45 f0	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
  00096	85 c0		 test	 eax, eax
  00098	75 d8		 jne	 SHORT $LL17@Serialize

; 88   : 		}
; 89   : 	}

  0009a	eb 33		 jmp	 SHORT $LN2@Serialize
$LN22@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  0009c	bf 01 00 00 00	 mov	 edi, 1
$LL19@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  000a1	bb aa aa aa 0a	 mov	 ebx, 178956970		; 0aaaaaaaH
  000a6	3b fb		 cmp	 edi, ebx
  000a8	0f 42 df	 cmovb	 ebx, edi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  000ab	8d 04 5b	 lea	 eax, DWORD PTR [ebx+ebx*2]
  000ae	c1 e0 02	 shl	 eax, 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  000b1	50		 push	 eax
  000b2	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  000b3	89 45 f0	 mov	 DWORD PTR _nCount$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  000b6	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  000bb	8b 4d f0	 mov	 ecx, DWORD PTR _nCount$1$[ebp]
  000be	3b c1		 cmp	 eax, ecx
  000c0	0f 85 18 01 00
	00		 jne	 $LN60@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  000c6	03 f1		 add	 esi, ecx
  000c8	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;

  000cb	2b fb		 sub	 edi, ebx
  000cd	75 d2		 jne	 SHORT $LL19@Serialize
$LN2@Serialize:

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  000cf	8b 45 ec	 mov	 eax, DWORD PTR _pNode$1$[ebp]
  000d2	8b 00		 mov	 eax, DWORD PTR [eax]
  000d4	89 45 ec	 mov	 DWORD PTR _pNode$1$[ebp], eax
  000d7	85 c0		 test	 eax, eax
  000d9	0f 85 74 ff ff
	ff		 jne	 $LL4@Serialize

; 1198 : 	}
; 1199 : }

  000df	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e9	59		 pop	 ecx
  000ea	5f		 pop	 edi
  000eb	5e		 pop	 esi
  000ec	5b		 pop	 ebx
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 04 00	 ret	 4
$LN7@Serialize:

; 1186 : 			SerializeElements<TYPE>(ar, pData, 1);
; 1187 : 		}
; 1188 : 	}
; 1189 : 	else
; 1190 : 	{
; 1191 : 		DWORD_PTR nNewCount = ar.ReadCount();

  000f3	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount

; 1192 : 		while (nNewCount--)

  000f8	85 c0		 test	 eax, eax
  000fa	0f 84 ca 00 00
	00		 je	 $LN69@Serialize
$LL5@Serialize:

; 1194 : 			TYPE newData[1];

  00100	68 00 00 00 00	 push	 OFFSET ??1CVerticalScalePtrData@@QAE@XZ
  00105	68 00 00 00 00	 push	 OFFSET ??0CVerticalScalePtrData@@QAE@XZ ; CVerticalScalePtrData::CVerticalScalePtrData
  0010a	48		 dec	 eax
  0010b	6a 01		 push	 1
  0010d	89 45 e8	 mov	 DWORD PTR _nNewCount$1$[ebp], eax
  00110	8d 45 dc	 lea	 eax, DWORD PTR _newData$2[ebp]
  00113	6a 0c		 push	 12			; 0000000cH
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0011b	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1194 : 			TYPE newData[1];

  0011e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00125	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00128	f7 d0		 not	 eax
  0012a	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  0012c	8d 45 dc	 lea	 eax, DWORD PTR _newData$2[ebp]
  0012f	89 45 ec	 mov	 DWORD PTR _pData$1$[ebp], eax
  00132	74 34		 je	 SHORT $LN43@Serialize

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  00134	bb 01 00 00 00	 mov	 ebx, 1
  00139	0f 1f 80 00 00
	00 00		 npad	 7
$LL38@Serialize:

; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00140	bf aa aa aa 0a	 mov	 edi, 178956970		; 0aaaaaaaH
  00145	3b df		 cmp	 ebx, edi
  00147	0f 42 fb	 cmovb	 edi, ebx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0014a	8d 34 7f	 lea	 esi, DWORD PTR [edi+edi*2]
  0014d	c1 e6 02	 shl	 esi, 2
  00150	56		 push	 esi
  00151	50		 push	 eax
  00152	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 87   : 			pData += nElementsToWrite;

  00157	8b 45 ec	 mov	 eax, DWORD PTR _pData$1$[ebp]
  0015a	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  0015d	03 c6		 add	 eax, esi
  0015f	89 45 ec	 mov	 DWORD PTR _pData$1$[ebp], eax
  00162	2b df		 sub	 ebx, edi
  00164	75 da		 jne	 SHORT $LL38@Serialize

; 88   : 		}
; 89   : 	}

  00166	eb 32		 jmp	 SHORT $LN41@Serialize
$LN43@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  00168	be 01 00 00 00	 mov	 esi, 1
  0016d	0f 1f 00	 npad	 3
$LL40@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00170	bf aa aa aa 0a	 mov	 edi, 178956970		; 0aaaaaaaH
  00175	3b f7		 cmp	 esi, edi
  00177	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0017a	8d 1c 7f	 lea	 ebx, DWORD PTR [edi+edi*2]
  0017d	c1 e3 02	 shl	 ebx, 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00180	53		 push	 ebx
  00181	50		 push	 eax
  00182	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  00187	3b c3		 cmp	 eax, ebx
  00189	75 53		 jne	 SHORT $LN60@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  0018b	8b 45 ec	 mov	 eax, DWORD PTR _pData$1$[ebp]
  0018e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]

; 104  : 			pData += nElementsToRead;

  00191	03 c3		 add	 eax, ebx
  00193	89 45 ec	 mov	 DWORD PTR _pData$1$[ebp], eax
  00196	2b f7		 sub	 esi, edi
  00198	75 d6		 jne	 SHORT $LL40@Serialize
$LN41@Serialize:

; 1195 : 			SerializeElements<TYPE>(ar, newData, 1);
; 1196 : 			AddTail(newData[0]);

  0019a	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0019d	8d 45 dc	 lea	 eax, DWORD PTR _newData$2[ebp]
  001a0	50		 push	 eax
  001a1	e8 00 00 00 00	 call	 ?AddTail@?$CList@VCVerticalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScalePtrData@@@Z ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::AddTail

; 1197 : 		}

  001a6	68 00 00 00 00	 push	 OFFSET ??1CVerticalScalePtrData@@QAE@XZ
  001ab	6a 01		 push	 1
  001ad	6a 0c		 push	 12			; 0000000cH
  001af	8d 45 dc	 lea	 eax, DWORD PTR _newData$2[ebp]
  001b2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001b9	50		 push	 eax
  001ba	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  001bf	8b 45 e8	 mov	 eax, DWORD PTR _nNewCount$1$[ebp]
  001c2	85 c0		 test	 eax, eax
  001c4	0f 85 36 ff ff
	ff		 jne	 $LL5@Serialize
$LN69@Serialize:

; 1198 : 	}
; 1199 : }

  001ca	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001cd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d4	59		 pop	 ecx
  001d5	5f		 pop	 edi
  001d6	5e		 pop	 esi
  001d7	5b		 pop	 ebx
  001d8	8b e5		 mov	 esp, ebp
  001da	5d		 pop	 ebp
  001db	c2 04 00	 ret	 4
$LN60@Serialize:
  001de	6a 00		 push	 0
  001e0	6a 03		 push	 3
  001e2	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN61@Serialize:

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  001e7	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN87@Serialize:
  001ec	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Serialize@?$CList@VCVerticalScalePtrData@@AAV1@@@UAEXAAVCArchive@@@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ??1CVerticalScalePtrData@@QAE@XZ
  00005	6a 01		 push	 1
  00007	6a 0c		 push	 12			; 0000000cH
  00009	8d 45 dc	 lea	 eax, DWORD PTR _newData$2[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00012	c3		 ret	 0
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$?Serialize@?$CList@VCVerticalScalePtrData@@AAV1@@@UAEXAAVCArchive@@@Z:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Serialize@?$CList@VCVerticalScalePtrData@@AAV1@@@UAEXAAVCArchive@@@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Serialize@?$CList@VCVerticalScalePtrData@@AAV1@@@UAEXAAVCArchive@@@Z ENDP ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::Serialize
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??1?$CList@VCVerticalScalePtrData@@AAV1@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CList@VCVerticalScalePtrData@@AAV1@@@UAE@XZ PROC	; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::~CList<CVerticalScalePtrData,CVerticalScalePtrData &>, COMDAT
; _this$ = ecx

; 878  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CList@VCVerticalScalePtrData@@AAV1@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CList@VCVerticalScalePtrData@@AAV1@@@6B@

; 879  : 	RemoveAll();

  00028	e8 00 00 00 00	 call	 ?RemoveAll@?$CList@VCVerticalScalePtrData@@AAV1@@@QAEXXZ ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::RemoveAll

; 880  : 	ASSERT(m_nCount == 0);
; 881  : }

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00030	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00037	59		 pop	 ecx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
  0003c	cc		 int	 3
  0003d	cc		 int	 3
  0003e	cc		 int	 3
  0003f	cc		 int	 3
  00040	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CList@VCVerticalScalePtrData@@AAV1@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CList@VCVerticalScalePtrData@@AAV1@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CList@VCVerticalScalePtrData@@AAV1@@@UAE@XZ ENDP	; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::~CList<CVerticalScalePtrData,CVerticalScalePtrData &>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?NewNode@?$CList@VCVerticalScalePtrData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z
_TEXT	SEGMENT
_pPrev$ = 8						; size = 4
_pNext$ = 12						; size = 4
?NewNode@?$CList@VCVerticalScalePtrData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z PROC ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::NewNode, COMDAT
; _this$ = ecx

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 902  : 	if (m_pNodeFree == NULL)

  00007	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0000b	75 33		 jne	 SHORT $LN7@NewNode

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  0000d	6a 14		 push	 20			; 00000014H
  0000f	ff 76 18	 push	 DWORD PTR [esi+24]
  00012	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001b	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0001e	83 c0 08	 add	 eax, 8
  00021	8d 0c 92	 lea	 ecx, DWORD PTR [edx+edx*4]
  00024	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00027	83 c0 ec	 add	 eax, -20		; ffffffecH

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  0002a	83 c2 ff	 add	 edx, -1
  0002d	78 11		 js	 SHORT $LN7@NewNode
  0002f	90		 npad	 1
$LL4@NewNode:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	89 08		 mov	 DWORD PTR [eax], ecx

; 915  : 			m_pNodeFree = pNode;

  00035	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00038	83 e8 14	 sub	 eax, 20			; 00000014H
  0003b	83 ea 01	 sub	 edx, 1
  0003e	79 f0		 jns	 SHORT $LL4@NewNode
$LN7@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00040	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  00043	85 ff		 test	 edi, edi
  00045	74 39		 je	 SHORT $LN21@NewNode

; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00047	8b 07		 mov	 eax, DWORD PTR [edi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 515  : 	m_strVertScaleTitle("")

  00049	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  0004c	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 922  : 	pNode->pPrev = pPrev;

  0004f	8b 45 08	 mov	 eax, DWORD PTR _pPrev$[ebp]
  00052	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 923  : 	pNode->pNext = pNext;

  00055	8b 45 0c	 mov	 eax, DWORD PTR _pNext$[ebp]
  00058	89 07		 mov	 DWORD PTR [edi], eax

; 924  : 	m_nCount++;

  0005a	ff 46 0c	 inc	 DWORD PTR [esi+12]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 515  : 	m_strVertScaleTitle("")

  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00062	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z

; 516  : {

  0006f	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 931  : 	return pNode;

  00078	8b c7		 mov	 eax, edi
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi

; 932  : }

  0007c	5d		 pop	 ebp
  0007d	c2 08 00	 ret	 8
$LN21@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00080	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN19@NewNode:
  00085	cc		 int	 3
?NewNode@?$CList@VCVerticalScalePtrData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z ENDP ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::NewNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?FindIndex@?$CList@VCVerticalScalePtrData@@AAV1@@@QBEPAU__POSITION@@H@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?FindIndex@?$CList@VCVerticalScalePtrData@@AAV1@@@QBEPAU__POSITION@@H@Z PROC ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::FindIndex, COMDAT
; _this$ = ecx

; 1130 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1131 : 	ASSERT_VALID(this);
; 1132 : 
; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00003	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00006	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00009	7d 14		 jge	 SHORT $LN5@FindIndex
  0000b	85 d2		 test	 edx, edx
  0000d	78 10		 js	 SHORT $LN5@FindIndex

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0000f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1137 : 	while (nIndex--)

  00012	74 0d		 je	 SHORT $LN1@FindIndex
$LL2@FindIndex:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	83 ea 01	 sub	 edx, 1
  00019	75 f9		 jne	 SHORT $LL2@FindIndex

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;
; 1143 : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
$LN5@FindIndex:

; 1134 : 		return NULL;  // went too far

  0001f	33 c0		 xor	 eax, eax
$LN1@FindIndex:

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;
; 1143 : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?FindIndex@?$CList@VCVerticalScalePtrData@@AAV1@@@QBEPAU__POSITION@@H@Z ENDP ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::FindIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAll@?$CList@VCVerticalScalePtrData@@AAV1@@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@?$CList@VCVerticalScalePtrData@@AAV1@@@QAEXXZ PROC ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::RemoveAll, COMDAT
; _this$ = ecx

; 862  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 863  : 	ASSERT_VALID(this);
; 864  : 
; 865  : 	// destroy elements
; 866  : 	CNode* pNode;
; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00004	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00007	85 f6		 test	 esi, esi
  00009	74 1d		 je	 SHORT $LN3@RemoveAll
  0000b	0f 1f 44 00 00	 npad	 5
$LL4@RemoveAll:

; 868  : 		pNode->data.~TYPE();

  00010	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00019	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00022	8b 36		 mov	 esi, DWORD PTR [esi]
  00024	85 f6		 test	 esi, esi
  00026	75 e8		 jne	 SHORT $LL4@RemoveAll
$LN3@RemoveAll:

; 869  : 
; 870  : 	m_nCount = 0;
; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 872  : 	m_pBlocks->FreeDataChain();

  00028	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  0002b	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00032	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00039	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00040	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00047	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0004c	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi

; 874  : }

  00055	c3		 ret	 0
?RemoveAll@?$CList@VCVerticalScalePtrData@@AAV1@@@QAEXXZ ENDP ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?AddTail@?$CList@VCVerticalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScalePtrData@@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T3 = 8							; size = 4
_newElement$ = 8					; size = 4
?AddTail@?$CList@VCVerticalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScalePtrData@@@Z PROC ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::AddTail, COMDAT
; _this$ = ecx

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AddTail@?$CList@VCVerticalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScalePtrData@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx

; 902  : 	if (m_pNodeFree == NULL)

  00028	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0

; 966  : 	ASSERT_VALID(this);
; 967  : 
; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  0002c	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]

; 902  : 	if (m_pNodeFree == NULL)

  0002f	75 32		 jne	 SHORT $LN11@AddTail

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  00031	6a 14		 push	 20			; 00000014H
  00033	ff 76 18	 push	 DWORD PTR [esi+24]
  00036	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0003f	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00042	8d 0c 95 fd ff
	ff ff		 lea	 ecx, DWORD PTR [edx*4-3]
  00049	03 ca		 add	 ecx, edx

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  0004b	83 c2 ff	 add	 edx, -1
  0004e	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  00051	78 10		 js	 SHORT $LN11@AddTail
$LL8@AddTail:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00053	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00056	89 01		 mov	 DWORD PTR [ecx], eax

; 915  : 			m_pNodeFree = pNode;

  00058	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0005b	83 e9 14	 sub	 ecx, 20			; 00000014H
  0005e	83 ea 01	 sub	 edx, 1
  00061	79 f0		 jns	 SHORT $LL8@AddTail
$LN11@AddTail:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00063	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  00066	85 ff		 test	 edi, edi
  00068	0f 84 c1 00 00
	00		 je	 $LN40@AddTail

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  0006e	8b 07		 mov	 eax, DWORD PTR [edi]
  00070	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 922  : 	pNode->pPrev = pPrev;

  00073	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;

  00076	8d 5f 08	 lea	 ebx, DWORD PTR [edi+8]
  00079	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 515  : 	m_strVertScaleTitle("")

  0007f	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 924  : 	m_nCount++;

  00082	ff 46 0c	 inc	 DWORD PTR [esi+12]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 515  : 	m_strVertScaleTitle("")

  00085	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0008a	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z

; 516  : {

  00096	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 502  : 	if(this == &vertScalePtrData)

  0009f	8b 4d 08	 mov	 ecx, DWORD PTR _newElement$[ebp]
  000a2	3b d9		 cmp	 ebx, ecx
  000a4	74 62		 je	 SHORT $LN20@AddTail

; 503  : 		return *this;
; 504  : 
; 505  : 	m_pVertScale = vertScalePtrData.GetVertScale();

  000a6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000a8	89 03		 mov	 DWORD PTR [ebx], eax

; 540  : 	return m_strVertScaleTitle;

  000aa	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  000ad	50		 push	 eax
  000ae	8d 4d f0	 lea	 ecx, DWORD PTR $T2[ebp]
  000b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z

; 506  : 	m_strVertScaleTitle = vertScalePtrData.GetVertScaleTitle();

  000b7	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  000ba	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000c1	50		 push	 eax
  000c2	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  000cb	8d 4d f0	 lea	 ecx, DWORD PTR $T2[ebp]
  000ce	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.h

; 206  : 	CString GetVertScalePacketType( void) const		{	return m_strPacketType;		}	// (2008/12/12 - Seung-Won, Bae) for octal number.

  000db	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]
  000de	8d 4d 08	 lea	 ecx, DWORD PTR $T3[ebp]
  000e1	83 c0 08	 add	 eax, 8
  000e4	50		 push	 eax
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 508  : 	m_strPacketType	= vertScalePtrData.GetVertScalePacketType();

  000eb	8d 45 08	 lea	 eax, DWORD PTR $T3[ebp]
  000ee	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000f5	50		 push	 eax
  000f6	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  000f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  000ff	8d 4d 08	 lea	 ecx, DWORD PTR $T3[ebp]
  00102	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN20@AddTail:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 970  : 	if (m_pNodeTail != NULL)

  00108	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0010b	85 c0		 test	 eax, eax
  0010d	74 04		 je	 SHORT $LN2@AddTail

; 971  : 		m_pNodeTail->pNext = pNewNode;

  0010f	89 38		 mov	 DWORD PTR [eax], edi
  00111	eb 03		 jmp	 SHORT $LN3@AddTail
$LN2@AddTail:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;

  00113	89 7e 04	 mov	 DWORD PTR [esi+4], edi
$LN3@AddTail:

; 974  : 	m_pNodeTail = pNewNode;

  00116	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 975  : 	return (POSITION) pNewNode;

  00119	8b c7		 mov	 eax, edi

; 976  : }

  0011b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0011e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00125	59		 pop	 ecx
  00126	5f		 pop	 edi
  00127	5e		 pop	 esi
  00128	5b		 pop	 ebx
  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	c2 04 00	 ret	 4
$LN40@AddTail:

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  0012f	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN38@AddTail:
  00134	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddTail@?$CList@VCVerticalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScalePtrData@@@Z$2:
  00000	8d 4d f0	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?AddTail@?$CList@VCVerticalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScalePtrData@@@Z$3:
  00009	8d 4d 08	 lea	 ecx, DWORD PTR $T3[ebp]
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
__ehhandler$?AddTail@?$CList@VCVerticalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScalePtrData@@@Z:
  00017	90		 npad	 1
  00018	90		 npad	 1
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddTail@?$CList@VCVerticalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScalePtrData@@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddTail@?$CList@VCVerticalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScalePtrData@@@Z ENDP ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::AddTail
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??0?$CList@VCVerticalScalePtrData@@AAV1@@@QAE@H@Z
_TEXT	SEGMENT
_nBlockSize$ = 8					; size = 4
??0?$CList@VCVerticalScalePtrData@@AAV1@@@QAE@H@Z PROC	; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::CList<CVerticalScalePtrData,CVerticalScalePtrData &>, COMDAT
; _this$ = ecx

; 851  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;
; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 856  : 	m_pBlocks = NULL;
; 857  : 	m_nBlockSize = nBlockSize;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nBlockSize$[ebp]
  00006	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 858  : }

  00009	8b c1		 mov	 eax, ecx
  0000b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CList@VCVerticalScalePtrData@@AAV1@@@6B@
  00011	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00018	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0001f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00026	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0002d	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??0?$CList@VCVerticalScalePtrData@@AAV1@@@QAE@H@Z ENDP	; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::CList<CVerticalScalePtrData,CVerticalScalePtrData &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetAt@CVerticalScalePtrDataList@@QBE?AVCVerticalScalePtrData@@H@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_nIndex$ = 12						; size = 4
?GetAt@CVerticalScalePtrDataList@@QBE?AVCVerticalScalePtrData@@H@Z PROC ; CVerticalScalePtrDataList::GetAt, COMDAT
; _this$ = ecx

; 695  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetAt@CVerticalScalePtrDataList@@QBE?AVCVerticalScalePtrData@@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 696  : 	POSITION pos = m_vertScalePtrDataList.FindIndex(nIndex);

  00024	8b 45 0c	 mov	 eax, DWORD PTR _nIndex$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00027	3b 41 20	 cmp	 eax, DWORD PTR [ecx+32]
  0002a	7d 12		 jge	 SHORT $LN9@GetAt
  0002c	85 c0		 test	 eax, eax
  0002e	78 0e		 js	 SHORT $LN9@GetAt

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  00030	8b 79 18	 mov	 edi, DWORD PTR [ecx+24]

; 1137 : 	while (nIndex--)

  00033	74 0b		 je	 SHORT $LN5@GetAt
$LL6@GetAt:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00035	8b 3f		 mov	 edi, DWORD PTR [edi]
  00037	83 e8 01	 sub	 eax, 1
  0003a	75 f9		 jne	 SHORT $LL6@GetAt

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;

  0003c	eb 02		 jmp	 SHORT $LN5@GetAt
$LN9@GetAt:

; 1134 : 		return NULL;  // went too far

  0003e	33 ff		 xor	 edi, edi
$LN5@GetAt:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 698  : 	return m_vertScalePtrDataList.GetAt(pos);

  00040	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00043	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00046	89 06		 mov	 DWORD PTR [esi], eax
  00048	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0004b	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  0004e	50		 push	 eax
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00055	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00058	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005f	51		 push	 ecx
  00060	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00069	8b c6		 mov	 eax, esi

; 699  : }

  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetAt@CVerticalScalePtrDataList@@QBE?AVCVerticalScalePtrData@@H@Z$1:
  00000	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?GetAt@CVerticalScalePtrDataList@@QBE?AVCVerticalScalePtrData@@H@Z:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetAt@CVerticalScalePtrDataList@@QBE?AVCVerticalScalePtrData@@H@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetAt@CVerticalScalePtrDataList@@QBE?AVCVerticalScalePtrData@@H@Z ENDP ; CVerticalScalePtrDataList::GetAt
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetAt@CVerticalScalePtrDataList@@QAEAAVCVerticalScalePtrData@@H@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?GetAt@CVerticalScalePtrDataList@@QAEAAVCVerticalScalePtrData@@H@Z PROC ; CVerticalScalePtrDataList::GetAt, COMDAT
; _this$ = ecx

; 688  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	POSITION pos = m_vertScalePtrDataList.FindIndex(nIndex);

  00003	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00006	3b 41 20	 cmp	 eax, DWORD PTR [ecx+32]
  00009	7d 17		 jge	 SHORT $LN7@GetAt
  0000b	85 c0		 test	 eax, eax
  0000d	78 13		 js	 SHORT $LN7@GetAt

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0000f	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]

; 1137 : 	while (nIndex--)

  00012	74 07		 je	 SHORT $LN10@GetAt
$LL4@GetAt:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00014	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00016	83 e8 01	 sub	 eax, 1
  00019	75 f9		 jne	 SHORT $LL4@GetAt
$LN10@GetAt:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 691  : 	return m_vertScalePtrDataList.GetAt(pos);

  0001b	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 692  : }

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
$LN7@GetAt:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1134 : 		return NULL;  // went too far

  00022	33 c0		 xor	 eax, eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 691  : 	return m_vertScalePtrDataList.GetAt(pos);

  00024	b8 08 00 00 00	 mov	 eax, 8

; 692  : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?GetAt@CVerticalScalePtrDataList@@QAEAAVCVerticalScalePtrData@@H@Z ENDP ; CVerticalScalePtrDataList::GetAt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetCount@CVerticalScalePtrDataList@@QBEHXZ
_TEXT	SEGMENT
?GetCount@CVerticalScalePtrDataList@@QBEHXZ PROC	; CVerticalScalePtrDataList::GetCount, COMDAT
; _this$ = ecx

; 684  : 	return m_vertScalePtrDataList.GetCount();

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]

; 685  : }

  00003	c3		 ret	 0
?GetCount@CVerticalScalePtrDataList@@QBEHXZ ENDP	; CVerticalScalePtrDataList::GetCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetScaleLogType@CVerticalScalePtrDataList@@QBEPA_NXZ
_TEXT	SEGMENT
?GetScaleLogType@CVerticalScalePtrDataList@@QBEPA_NXZ PROC ; CVerticalScalePtrDataList::GetScaleLogType, COMDAT
; _this$ = ecx

; 679  : 	return m_pbLogType;

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 680  : }

  00003	c3		 ret	 0
?GetScaleLogType@CVerticalScalePtrDataList@@QBEPA_NXZ ENDP ; CVerticalScalePtrDataList::GetScaleLogType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?IsEnableLogType@CVerticalScalePtrDataList@@QBE_NXZ
_TEXT	SEGMENT
?IsEnableLogType@CVerticalScalePtrDataList@@QBE_NXZ PROC ; CVerticalScalePtrDataList::IsEnableLogType, COMDAT
; _this$ = ecx

; 674  : 	return m_bEnableLogType;

  00000	8a 41 0c	 mov	 al, BYTE PTR [ecx+12]

; 675  : }

  00003	c3		 ret	 0
?IsEnableLogType@CVerticalScalePtrDataList@@QBE_NXZ ENDP ; CVerticalScalePtrDataList::IsEnableLogType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetScaleTextColor@CVerticalScalePtrDataList@@QBEPAKXZ
_TEXT	SEGMENT
?GetScaleTextColor@CVerticalScalePtrDataList@@QBEPAKXZ PROC ; CVerticalScalePtrDataList::GetScaleTextColor, COMDAT
; _this$ = ecx

; 669  : 	return m_pScaleTextColor;

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 670  : }

  00003	c3		 ret	 0
?GetScaleTextColor@CVerticalScalePtrDataList@@QBEPAKXZ ENDP ; CVerticalScalePtrDataList::GetScaleTextColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetScaleGridColor@CVerticalScalePtrDataList@@QBEPAKXZ
_TEXT	SEGMENT
?GetScaleGridColor@CVerticalScalePtrDataList@@QBEPAKXZ PROC ; CVerticalScalePtrDataList::GetScaleGridColor, COMDAT
; _this$ = ecx

; 664  : 	return m_pScaleGridColor;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 665  : }

  00003	c3		 ret	 0
?GetScaleGridColor@CVerticalScalePtrDataList@@QBEPAKXZ ENDP ; CVerticalScalePtrDataList::GetScaleGridColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetFirstIndex@CVerticalScalePtrDataList@@QBEHXZ
_TEXT	SEGMENT
?GetFirstIndex@CVerticalScalePtrDataList@@QBEHXZ PROC	; CVerticalScalePtrDataList::GetFirstIndex, COMDAT
; _this$ = ecx

; 659  : 	return m_nFirstIndex;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 660  : }

  00002	c3		 ret	 0
?GetFirstIndex@CVerticalScalePtrDataList@@QBEHXZ ENDP	; CVerticalScalePtrDataList::GetFirstIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleBaseData.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?SetVertScale@CVerticalScalePtrDataList@@QAEXHABVCVerticalScale@@@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
_vertScale$ = 12					; size = 4
?SetVertScale@CVerticalScalePtrDataList@@QAEXHABVCVerticalScale@@@Z PROC ; CVerticalScalePtrDataList::SetVertScale, COMDAT
; _this$ = ecx

; 633  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	POSITION pos = m_vertScalePtrDataList.FindIndex(nIndex);

  00003	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00006	3b 41 20	 cmp	 eax, DWORD PTR [ecx+32]
  00009	7d 12		 jge	 SHORT $LN10@SetVertSca
  0000b	85 c0		 test	 eax, eax
  0000d	78 0e		 js	 SHORT $LN10@SetVertSca

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0000f	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]

; 1137 : 	while (nIndex--)

  00012	74 0b		 je	 SHORT $LN6@SetVertSca
$LL7@SetVertSca:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00014	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00016	83 e8 01	 sub	 eax, 1
  00019	75 f9		 jne	 SHORT $LL7@SetVertSca

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;

  0001b	eb 02		 jmp	 SHORT $LN6@SetVertSca
$LN10@SetVertSca:

; 1134 : 		return NULL;  // went too far

  0001d	33 c9		 xor	 ecx, ecx
$LN6@SetVertSca:
  0001f	57		 push	 edi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 634  : 	CVerticalScale* pVertScale = GetAt(nIndex).GetVertScale();

  00020	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]

; 635  : 	if(pVertScale == NULL)

  00023	85 ff		 test	 edi, edi
  00025	74 78		 je	 SHORT $LN1@SetVertSca

; 636  : 		return;
; 637  : 
; 638  : 	pVertScale->SetVertScalePosition(vertScale.GetVertScalePosition());

  00027	56		 push	 esi
  00028	8b 75 0c	 mov	 esi, DWORD PTR _vertScale$[ebp]
  0002b	8b ce		 mov	 ecx, esi
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetVertScalePosition@CVerticalScale@@QBE?AW4VERTSCALEPOSITION@CScaleBaseData@@XZ
  00033	50		 push	 eax
  00034	8b cf		 mov	 ecx, edi
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetVertScalePosition@CVerticalScale@@QAEXW4VERTSCALEPOSITION@CScaleBaseData@@@Z

; 639  : 	pVertScale->SetGridType(vertScale.GetGridType());

  0003c	8b ce		 mov	 ecx, esi
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetGridType@CScale@@QBE?AW4SCALEGRIDTYPE@CScaleBaseData@@XZ
  00044	50		 push	 eax
  00045	8b cf		 mov	 ecx, edi
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetGridType@CScale@@QAEXW4SCALEGRIDTYPE@CScaleBaseData@@@Z

; 640  : 	pVertScale->SetVertScaleUnitType(vertScale.GetVertScaleUnitType());

  0004d	8b ce		 mov	 ecx, esi
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetVertScaleUnitType@CVerticalScale@@QBE?AW4VERTSCALEUNITTYPE@CScaleBaseData@@XZ
  00055	50		 push	 eax
  00056	8b cf		 mov	 ecx, edi
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetVertScaleUnitType@CVerticalScale@@QAEXW4VERTSCALEUNITTYPE@CScaleBaseData@@@Z
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleBaseData.h

; 202  : 	void							SetVertScaleMinMaxLock( BOOL p_bMinMaxLock)								{	m_bMinMaxLock = p_bMinMaxLock;	}

  0005e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00061	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 205  : 	void							SetVertScaleMinMaxType( CScaleBaseData::VERTMINMAXTYPE p_eMinMaxType) 	{	m_eMinMaxType = p_eMinMaxType;	}

  00064	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00067	89 47 18	 mov	 DWORD PTR [edi+24], eax

; 208  : 	void							SetVertScaleMin( double p_dMin)											{	m_dMin = p_dMin;	}

  0006a	f2 0f 10 46 20	 movsd	 xmm0, QWORD PTR [esi+32]
  0006f	f2 0f 11 47 20	 movsd	 QWORD PTR [edi+32], xmm0

; 211  : 	void							SetVertScaleMax( double p_dMax)											{	m_dMax = p_dMax;	}

  00074	f2 0f 10 46 28	 movsd	 xmm0, QWORD PTR [esi+40]
  00079	f2 0f 11 47 28	 movsd	 QWORD PTR [edi+40], xmm0

; 220  : 	void		SetVertScaleHoGaNumber( double p_dHogaNumber)			{	m_dHogaNumber = p_dHogaNumber;	}

  0007e	f2 0f 10 46 40	 movsd	 xmm0, QWORD PTR [esi+64]
  00083	f2 0f 11 47 40	 movsd	 QWORD PTR [edi+64], xmm0

; 221  : 	void		SetVertScaleUserNumber( double p_dUserNumber)			{	m_dUserNumber = p_dUserNumber;	}

  00088	f2 0f 10 46 38	 movsd	 xmm0, QWORD PTR [esi+56]
  0008d	f2 0f 11 47 38	 movsd	 QWORD PTR [edi+56], xmm0

; 222  : 	void		SetVertUserHogaScaleType( int p_nUserHogaType)		{	m_nUserHogaType = p_nUserHogaType;	}

  00092	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  00095	89 47 48	 mov	 DWORD PTR [edi+72], eax

; 232  : 	void	SetVertScaleInvertType(const bool bIsVertScaleInvertType)	{	m_bIsVertScaleInvertType = bIsVertScaleInvertType;	}

  00098	8a 46 34	 mov	 al, BYTE PTR [esi+52]
  0009b	88 47 34	 mov	 BYTE PTR [edi+52], al
  0009e	5e		 pop	 esi
$LN1@SetVertSca:
  0009f	5f		 pop	 edi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 654  : }

  000a0	5d		 pop	 ebp
  000a1	c2 08 00	 ret	 8
?SetVertScale@CVerticalScalePtrDataList@@QAEXHABVCVerticalScale@@@Z ENDP ; CVerticalScalePtrDataList::SetVertScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?SetLogType@CVerticalScalePtrDataList@@QAEX_N@Z
_TEXT	SEGMENT
_bIsLog$ = 8						; size = 1
?SetLogType@CVerticalScalePtrDataList@@QAEX_N@Z PROC	; CVerticalScalePtrDataList::SetLogType, COMDAT
; _this$ = ecx

; 628  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 629  : 	if( m_pbLogType != NULL) *m_pbLogType = bIsLog;

  00003	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00006	85 c9		 test	 ecx, ecx
  00008	74 05		 je	 SHORT $LN2@SetLogType
  0000a	8a 45 08	 mov	 al, BYTE PTR _bIsLog$[ebp]
  0000d	88 01		 mov	 BYTE PTR [ecx], al
$LN2@SetLogType:

; 630  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?SetLogType@CVerticalScalePtrDataList@@QAEX_N@Z ENDP	; CVerticalScalePtrDataList::SetLogType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?SetLogType@CVerticalScalePtrDataList@@QAEXPA_N@Z
_TEXT	SEGMENT
_pIsLog$ = 8						; size = 4
?SetLogType@CVerticalScalePtrDataList@@QAEXPA_N@Z PROC	; CVerticalScalePtrDataList::SetLogType, COMDAT
; _this$ = ecx

; 623  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 624  : 	m_pbLogType = pIsLog;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pIsLog$[ebp]
  00006	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 625  : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetLogType@CVerticalScalePtrDataList@@QAEXPA_N@Z ENDP	; CVerticalScalePtrDataList::SetLogType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?SetEnableLogType@CVerticalScalePtrDataList@@QAEX_N@Z
_TEXT	SEGMENT
_bIsEnable$ = 8						; size = 1
?SetEnableLogType@CVerticalScalePtrDataList@@QAEX_N@Z PROC ; CVerticalScalePtrDataList::SetEnableLogType, COMDAT
; _this$ = ecx

; 618  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 619  : 	m_bEnableLogType = bIsEnable;

  00003	8a 45 08	 mov	 al, BYTE PTR _bIsEnable$[ebp]
  00006	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 620  : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetEnableLogType@CVerticalScalePtrDataList@@QAEX_N@Z ENDP ; CVerticalScalePtrDataList::SetEnableLogType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?SetScaleColor@CVerticalScalePtrDataList@@QAEXABK0@Z
_TEXT	SEGMENT
_gridColor$ = 8						; size = 4
_textColor$ = 12					; size = 4
?SetScaleColor@CVerticalScalePtrDataList@@QAEXABK0@Z PROC ; CVerticalScalePtrDataList::SetScaleColor, COMDAT
; _this$ = ecx

; 610  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 611  : 	if(m_pScaleGridColor != NULL)

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	85 d2		 test	 edx, edx
  00008	74 07		 je	 SHORT $LN2@SetScaleCo

; 612  : 		*m_pScaleGridColor = gridColor;

  0000a	8b 45 08	 mov	 eax, DWORD PTR _gridColor$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
$LN2@SetScaleCo:

; 613  : 	if(m_pScaleTextColor != NULL)

  00011	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00014	85 c9		 test	 ecx, ecx
  00016	74 07		 je	 SHORT $LN3@SetScaleCo

; 614  : 		*m_pScaleTextColor = textColor;

  00018	8b 45 0c	 mov	 eax, DWORD PTR _textColor$[ebp]
  0001b	8b 00		 mov	 eax, DWORD PTR [eax]
  0001d	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@SetScaleCo:

; 615  : }

  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?SetScaleColor@CVerticalScalePtrDataList@@QAEXABK0@Z ENDP ; CVerticalScalePtrDataList::SetScaleColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?SetScaleColor@CVerticalScalePtrDataList@@QAEXPAK0@Z
_TEXT	SEGMENT
_pGridColor$ = 8					; size = 4
_pTextColor$ = 12					; size = 4
?SetScaleColor@CVerticalScalePtrDataList@@QAEXPAK0@Z PROC ; CVerticalScalePtrDataList::SetScaleColor, COMDAT
; _this$ = ecx

; 604  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 605  : 	m_pScaleGridColor = pGridColor;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pGridColor$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 606  : 	m_pScaleTextColor = pTextColor;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _pTextColor$[ebp]
  0000c	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 607  : }

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?SetScaleColor@CVerticalScalePtrDataList@@QAEXPAK0@Z ENDP ; CVerticalScalePtrDataList::SetScaleColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?SetFirstIndex@CVerticalScalePtrDataList@@QAEXH@Z
_TEXT	SEGMENT
_nFirstIndex$ = 8					; size = 4
?SetFirstIndex@CVerticalScalePtrDataList@@QAEXH@Z PROC	; CVerticalScalePtrDataList::SetFirstIndex, COMDAT
; _this$ = ecx

; 599  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 	m_nFirstIndex = nFirstIndex;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nFirstIndex$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 601  : }

  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
?SetFirstIndex@CVerticalScalePtrDataList@@QAEXH@Z ENDP	; CVerticalScalePtrDataList::SetFirstIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?RemoveAll@CVerticalScalePtrDataList@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@CVerticalScalePtrDataList@@QAEXXZ PROC	; CVerticalScalePtrDataList::RemoveAll, COMDAT
; _this$ = ecx

; 594  : 	m_vertScalePtrDataList.RemoveAll();

  00000	83 c1 14	 add	 ecx, 20			; 00000014H
  00003	e9 00 00 00 00	 jmp	 ?RemoveAll@?$CList@VCVerticalScalePtrData@@AAV1@@@QAEXXZ ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::RemoveAll
?RemoveAll@CVerticalScalePtrDataList@@QAEXXZ ENDP	; CVerticalScalePtrDataList::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?AddTail@CVerticalScalePtrDataList@@QAEXVCVerticalScalePtrData@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_vertScalePtrData$ = 8					; size = 12
?AddTail@CVerticalScalePtrDataList@@QAEXVCVerticalScalePtrData@@@Z PROC ; CVerticalScalePtrDataList::AddTail, COMDAT
; _this$ = ecx

; 588  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AddTail@CVerticalScalePtrDataList@@QAEXVCVerticalScalePtrData@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 589  : 	m_vertScalePtrDataList.AddTail(vertScalePtrData);

  00022	8d 45 08	 lea	 eax, DWORD PTR _vertScalePtrData$[ebp]
  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	50		 push	 eax
  0002d	83 c1 14	 add	 ecx, 20			; 00000014H
  00030	e8 00 00 00 00	 call	 ?AddTail@?$CList@VCVerticalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScalePtrData@@@Z ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::AddTail
  00035	8d 4d 10	 lea	 ecx, DWORD PTR _vertScalePtrData$[ebp+8]
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0003e	8d 4d 0c	 lea	 ecx, DWORD PTR _vertScalePtrData$[ebp+4]
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 590  : }

  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddTail@CVerticalScalePtrDataList@@QAEXVCVerticalScalePtrData@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _vertScalePtrData$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CVerticalScalePtrData@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?AddTail@CVerticalScalePtrDataList@@QAEXVCVerticalScalePtrData@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddTail@CVerticalScalePtrDataList@@QAEXVCVerticalScalePtrData@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddTail@CVerticalScalePtrDataList@@QAEXVCVerticalScalePtrData@@@Z ENDP ; CVerticalScalePtrDataList::AddTail
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??0CVerticalScalePtrDataList@@QAE@ABV0@@Z
_TEXT	SEGMENT
$T2 = -32						; size = 12
_this$ = -20						; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_vertScalePtrDataList$ = 8				; size = 4
??0CVerticalScalePtrDataList@@QAE@ABV0@@Z PROC		; CVerticalScalePtrDataList::CVerticalScalePtrDataList, COMDAT
; _this$ = ecx

; 574  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CVerticalScalePtrDataList@@QAE@ABV0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d1		 mov	 edx, ecx
  0002a	89 55 ec	 mov	 DWORD PTR _this$[ebp], edx
  0002d	8d 42 14	 lea	 eax, DWORD PTR [edx+20]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 851  : {

  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CList@VCVerticalScalePtrData@@AAV1@@@6B@
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 574  : {

  00036	89 45 f0	 mov	 DWORD PTR _this$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 854  : 	m_nCount = 0;

  00039	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00040	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  00047	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0004e	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 856  : 	m_pBlocks = NULL;

  00055	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 857  : 	m_nBlockSize = nBlockSize;

  0005c	c7 40 18 0a 00
	00 00		 mov	 DWORD PTR [eax+24], 10	; 0000000aH
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 575  : 	m_nFirstIndex = vertScalePtrDataList.GetFirstIndex();

  00063	8b 5d 08	 mov	 ebx, DWORD PTR _vertScalePtrDataList$[ebp]

; 576  : 	m_pScaleGridColor = vertScalePtrDataList.GetScaleGridColor();
; 577  : 	m_pScaleTextColor = vertScalePtrDataList.GetScaleTextColor();
; 578  : 	m_bEnableLogType = vertScalePtrDataList.IsEnableLogType();
; 579  : 	m_pbLogType = vertScalePtrDataList.GetScaleLogType();
; 580  : 	for(int nIndex = 0; nIndex < vertScalePtrDataList.GetCount(); nIndex++){

  00066	33 ff		 xor	 edi, edi
  00068	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00071	89 02		 mov	 DWORD PTR [edx], eax
  00073	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00076	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00079	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0007c	89 42 08	 mov	 DWORD PTR [edx+8], eax
  0007f	8a 43 0c	 mov	 al, BYTE PTR [ebx+12]
  00082	88 42 0c	 mov	 BYTE PTR [edx+12], al
  00085	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00088	89 42 10	 mov	 DWORD PTR [edx+16], eax
  0008b	8b 4b 20	 mov	 ecx, DWORD PTR [ebx+32]
  0008e	85 c9		 test	 ecx, ecx
  00090	0f 8e 83 00 00
	00		 jle	 $LN36@CVerticalS
$LL4@CVerticalS:

; 696  : 	POSITION pos = m_vertScalePtrDataList.FindIndex(nIndex);

  00096	8b c7		 mov	 eax, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00098	3b f9		 cmp	 edi, ecx
  0009a	7d 12		 jge	 SHORT $LN18@CVerticalS
  0009c	85 ff		 test	 edi, edi
  0009e	78 0e		 js	 SHORT $LN18@CVerticalS

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  000a0	8b 73 18	 mov	 esi, DWORD PTR [ebx+24]

; 1137 : 	while (nIndex--)

  000a3	74 0b		 je	 SHORT $LN14@CVerticalS
$LL15@CVerticalS:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  000a5	8b 36		 mov	 esi, DWORD PTR [esi]
  000a7	83 e8 01	 sub	 eax, 1
  000aa	75 f9		 jne	 SHORT $LL15@CVerticalS

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;

  000ac	eb 02		 jmp	 SHORT $LN14@CVerticalS
$LN18@CVerticalS:

; 1134 : 		return NULL;  // went too far

  000ae	33 f6		 xor	 esi, esi
$LN14@CVerticalS:
  000b0	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b3	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp+4]
  000b6	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
  000b9	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  000bc	50		 push	 eax
  000bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  000c3	83 c6 10	 add	 esi, 16			; 00000010H
  000c6	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000ca	56		 push	 esi
  000cb	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp+8]
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 581  : 		m_vertScalePtrDataList.AddTail(vertScalePtrDataList.GetAt(nIndex));

  000d4	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000d7	8d 45 e0	 lea	 eax, DWORD PTR $T2[ebp]
  000da	50		 push	 eax
  000db	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000df	e8 00 00 00 00	 call	 ?AddTail@?$CList@VCVerticalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScalePtrData@@@Z ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::AddTail
  000e4	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp+8]
  000e7	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000f1	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp+4]
  000f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000fa	8b 4b 20	 mov	 ecx, DWORD PTR [ebx+32]
  000fd	47		 inc	 edi
  000fe	3b f9		 cmp	 edi, ecx
  00100	7c 94		 jl	 SHORT $LL4@CVerticalS

; 582  : 	}
; 583  : }

  00102	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00105	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00108	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010f	59		 pop	 ecx
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 04 00	 ret	 4
$LN36@CVerticalS:
  00119	8b c2		 mov	 eax, edx
  0011b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0011e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00125	59		 pop	 ecx
  00126	5f		 pop	 edi
  00127	5e		 pop	 esi
  00128	5b		 pop	 ebx
  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CVerticalScalePtrDataList@@QAE@ABV0@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 14	 add	 ecx, 20			; 00000014H
  00006	e9 00 00 00 00	 jmp	 ??1?$CList@VCVerticalScalePtrData@@AAV1@@@UAE@XZ ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::~CList<CVerticalScalePtrData,CVerticalScalePtrData &>
__unwindfunclet$??0CVerticalScalePtrDataList@@QAE@ABV0@@Z$3:
  0000b	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp+4]
  0000e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$??0CVerticalScalePtrDataList@@QAE@ABV0@@Z$1:
  00014	8d 4d e0	 lea	 ecx, DWORD PTR $T2[ebp]
  00017	e9 00 00 00 00	 jmp	 ??1CVerticalScalePtrData@@QAE@XZ
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
  0001f	cc		 int	 3
  00020	cc		 int	 3
__ehhandler$??0CVerticalScalePtrDataList@@QAE@ABV0@@Z:
  00021	90		 npad	 1
  00022	90		 npad	 1
  00023	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00027	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002a	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CVerticalScalePtrDataList@@QAE@ABV0@@Z
  00039	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CVerticalScalePtrDataList@@QAE@ABV0@@Z ENDP		; CVerticalScalePtrDataList::CVerticalScalePtrDataList
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??0CVerticalScalePtrDataList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CVerticalScalePtrDataList@@QAE@XZ PROC		; CVerticalScalePtrDataList::CVerticalScalePtrDataList, COMDAT
; _this$ = ecx

; 570  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 565  : 	m_nFirstIndex(0),

  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 571  : }

  0000a	8b c1		 mov	 eax, ecx
  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00013	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0001a	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  0001e	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00025	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 851  : {

  00028	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], OFFSET ??_7?$CList@VCVerticalScalePtrData@@AAV1@@@6B@

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;

  0002f	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00036	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
  0003d	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  00044	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 856  : 	m_pBlocks = NULL;

  0004b	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 857  : 	m_nBlockSize = nBlockSize;

  00052	c7 41 2c 0a 00
	00 00		 mov	 DWORD PTR [ecx+44], 10	; 0000000aH
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 571  : }

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
??0CVerticalScalePtrDataList@@QAE@XZ ENDP		; CVerticalScalePtrDataList::CVerticalScalePtrDataList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??4CVerticalScalePtrDataList@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 12
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
tv283 = 8						; size = 4
_vertScalePtrDataList$ = 8				; size = 4
??4CVerticalScalePtrDataList@@QAEAAV0@ABV0@@Z PROC	; CVerticalScalePtrDataList::operator=, COMDAT
; _this$ = ecx

; 548  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??4CVerticalScalePtrDataList@@QAEAAV0@ABV0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$1$[ebp], ecx

; 549  : 	if(this == &vertScalePtrDataList)

  0002b	8b 5d 08	 mov	 ebx, DWORD PTR _vertScalePtrDataList$[ebp]
  0002e	3b cb		 cmp	 ecx, ebx
  00030	0f 84 bb 00 00
	00		 je	 $LN35@operator

; 550  : 		return *this;
; 551  : 
; 552  : 	m_nFirstIndex = vertScalePtrDataList.GetFirstIndex();

  00036	8b 03		 mov	 eax, DWORD PTR [ebx]

; 553  : 	m_pScaleGridColor = vertScalePtrDataList.GetScaleGridColor();
; 554  : 	m_pScaleTextColor = vertScalePtrDataList.GetScaleTextColor();
; 555  : 	m_bEnableLogType = vertScalePtrDataList.IsEnableLogType();
; 556  : 	m_pbLogType = vertScalePtrDataList.GetScaleLogType();
; 557  : 	for(int nIndex = 0; nIndex < vertScalePtrDataList.GetCount(); nIndex++){

  00038	33 ff		 xor	 edi, edi
  0003a	89 01		 mov	 DWORD PTR [ecx], eax
  0003c	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0003f	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00042	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00045	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00048	8a 43 0c	 mov	 al, BYTE PTR [ebx+12]
  0004b	88 41 0c	 mov	 BYTE PTR [ecx+12], al
  0004e	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00051	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00054	8b 53 20	 mov	 edx, DWORD PTR [ebx+32]
  00057	85 d2		 test	 edx, edx
  00059	0f 8e 92 00 00
	00		 jle	 $LN35@operator
  0005f	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  00062	89 45 08	 mov	 DWORD PTR tv283[ebp], eax
$LL4@operator:

; 696  : 	POSITION pos = m_vertScalePtrDataList.FindIndex(nIndex);

  00065	8b c7		 mov	 eax, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00067	3b fa		 cmp	 edi, edx
  00069	7d 12		 jge	 SHORT $LN16@operator
  0006b	85 ff		 test	 edi, edi
  0006d	78 0e		 js	 SHORT $LN16@operator

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0006f	8b 73 18	 mov	 esi, DWORD PTR [ebx+24]

; 1137 : 	while (nIndex--)

  00072	74 0b		 je	 SHORT $LN12@operator
$LL13@operator:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00074	8b 36		 mov	 esi, DWORD PTR [esi]
  00076	83 e8 01	 sub	 eax, 1
  00079	75 f9		 jne	 SHORT $LL13@operator

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;

  0007b	eb 02		 jmp	 SHORT $LN12@operator
$LN16@operator:

; 1134 : 		return NULL;  // went too far

  0007d	33 f6		 xor	 esi, esi
$LN12@operator:
  0007f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00082	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp+4]
  00085	89 45 e4	 mov	 DWORD PTR $T2[ebp], eax
  00088	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0008b	50		 push	 eax
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00092	83 c6 10	 add	 esi, 16			; 00000010H
  00095	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0009c	56		 push	 esi
  0009d	8d 4d ec	 lea	 ecx, DWORD PTR $T2[ebp+8]
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 558  : 		m_vertScalePtrDataList.AddTail(vertScalePtrDataList.GetAt(nIndex));

  000a6	8b 4d 08	 mov	 ecx, DWORD PTR tv283[ebp]
  000a9	8d 45 e4	 lea	 eax, DWORD PTR $T2[ebp]
  000ac	50		 push	 eax
  000ad	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000b4	e8 00 00 00 00	 call	 ?AddTail@?$CList@VCVerticalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScalePtrData@@@Z ; CList<CVerticalScalePtrData,CVerticalScalePtrData &>::AddTail
  000b9	8d 4d ec	 lea	 ecx, DWORD PTR $T2[ebp+8]
  000bc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000c9	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp+4]
  000cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000d2	8b 53 20	 mov	 edx, DWORD PTR [ebx+32]
  000d5	47		 inc	 edi
  000d6	3b fa		 cmp	 edi, edx
  000d8	7c 8b		 jl	 SHORT $LL4@operator

; 559  : 	}
; 560  : 
; 561  : 	return *this;

  000da	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]

; 562  : }

  000dd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e7	59		 pop	 ecx
  000e8	5f		 pop	 edi
  000e9	5e		 pop	 esi
  000ea	5b		 pop	 ebx
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c2 04 00	 ret	 4
$LN35@operator:
  000f1	8b c1		 mov	 eax, ecx
  000f3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fd	59		 pop	 ecx
  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	5b		 pop	 ebx
  00101	8b e5		 mov	 esp, ebp
  00103	5d		 pop	 ebp
  00104	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4CVerticalScalePtrDataList@@QAEAAV0@ABV0@@Z$2:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp+4]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$??4CVerticalScalePtrDataList@@QAEAAV0@ABV0@@Z$0:
  00009	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  0000c	e9 00 00 00 00	 jmp	 ??1CVerticalScalePtrData@@QAE@XZ
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
__ehhandler$??4CVerticalScalePtrDataList@@QAEAAV0@ABV0@@Z:
  00016	90		 npad	 1
  00017	90		 npad	 1
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??4CVerticalScalePtrDataList@@QAEAAV0@ABV0@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??4CVerticalScalePtrDataList@@QAEAAV0@ABV0@@Z ENDP	; CVerticalScalePtrDataList::operator=
; Function compile flags: /Ogtp
;	COMDAT ??1CVerticalScalePtrData@@QAE@XZ
_TEXT	SEGMENT
??1CVerticalScalePtrData@@QAE@XZ PROC			; CVerticalScalePtrData::~CVerticalScalePtrData, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0000c	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0000f	5e		 pop	 esi
  00010	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
??1CVerticalScalePtrData@@QAE@XZ ENDP			; CVerticalScalePtrData::~CVerticalScalePtrData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetVertScaleTitle@CVerticalScalePtrData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetVertScaleTitle@CVerticalScalePtrData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ PROC ; CVerticalScalePtrData::GetVertScaleTitle, COMDAT
; _this$ = ecx

; 539  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 540  : 	return m_strVertScaleTitle;

  00003	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00010	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 541  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?GetVertScaleTitle@CVerticalScalePtrData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ENDP ; CVerticalScalePtrData::GetVertScaleTitle
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetVertScale@CVerticalScalePtrData@@QBEPAVCVerticalScale@@XZ
_TEXT	SEGMENT
?GetVertScale@CVerticalScalePtrData@@QBEPAVCVerticalScale@@XZ PROC ; CVerticalScalePtrData::GetVertScale, COMDAT
; _this$ = ecx

; 535  : 	return m_pVertScale;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 536  : }

  00002	c3		 ret	 0
?GetVertScale@CVerticalScalePtrData@@QBEPAVCVerticalScale@@XZ ENDP ; CVerticalScalePtrData::GetVertScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetVertScale@CVerticalScalePtrData@@QAEPAVCVerticalScale@@XZ
_TEXT	SEGMENT
?GetVertScale@CVerticalScalePtrData@@QAEPAVCVerticalScale@@XZ PROC ; CVerticalScalePtrData::GetVertScale, COMDAT
; _this$ = ecx

; 530  : 	return m_pVertScale;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 531  : }

  00002	c3		 ret	 0
?GetVertScale@CVerticalScalePtrData@@QAEPAVCVerticalScale@@XZ ENDP ; CVerticalScalePtrData::GetVertScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??0CVerticalScalePtrData@@QAE@PAVCVerticalScale@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@1@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pVertScale$ = 8					; size = 4
_vertScaleTitle$ = 12					; size = 4
_vertPacketType$ = 16					; size = 4
??0CVerticalScalePtrData@@QAE@PAVCVerticalScale@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@1@Z PROC ; CVerticalScalePtrData::CVerticalScalePtrData, COMDAT
; _this$ = ecx

; 524  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CVerticalScalePtrData@@QAE@PAVCVerticalScale@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@1@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 520  : 	m_pVertScale( pVertScale),

  00029	8b 45 08	 mov	 eax, DWORD PTR _pVertScale$[ebp]

; 521  : 	m_strVertScaleTitle( vertScaleTitle),

  0002c	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0002f	ff 75 0c	 push	 DWORD PTR _vertScaleTitle$[ebp]
  00032	89 06		 mov	 DWORD PTR [esi], eax
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z

; 522  : 	// (2008/12/12 - Seung-Won, Bae) for octal number.
; 523  : 	m_strPacketType( vertPacketType)

  0003a	ff 75 10	 push	 DWORD PTR _vertPacketType$[ebp]
  0003d	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z

; 525  : }

  0004d	8b c6		 mov	 eax, esi
  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00059	59		 pop	 ecx
  0005a	5e		 pop	 esi
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CVerticalScalePtrData@@QAE@PAVCVerticalScale@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@1@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$??0CVerticalScalePtrData@@QAE@PAVCVerticalScale@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@1@Z:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CVerticalScalePtrData@@QAE@PAVCVerticalScale@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@1@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CVerticalScalePtrData@@QAE@PAVCVerticalScale@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@1@Z ENDP ; CVerticalScalePtrData::CVerticalScalePtrData
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??0CVerticalScalePtrData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CVerticalScalePtrData@@QAE@XZ PROC			; CVerticalScalePtrData::CVerticalScalePtrData, COMDAT
; _this$ = ecx

; 516  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 515  : 	m_strVertScaleTitle("")

  00007	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0000c	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000f	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z

; 516  : {

  0001e	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 517  : }

  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??0CVerticalScalePtrData@@QAE@XZ ENDP			; CVerticalScalePtrData::CVerticalScalePtrData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??4CVerticalScalePtrData@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T3 = 8							; size = 4
_vertScalePtrData$ = 8					; size = 4
??4CVerticalScalePtrData@@QAEAAV0@ABV0@@Z PROC		; CVerticalScalePtrData::operator=, COMDAT
; _this$ = ecx

; 501  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??4CVerticalScalePtrData@@QAEAAV0@ABV0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx

; 502  : 	if(this == &vertScalePtrData)

  00027	8b 7d 08	 mov	 edi, DWORD PTR _vertScalePtrData$[ebp]
  0002a	3b f7		 cmp	 esi, edi
  0002c	74 5f		 je	 SHORT $LN15@operator

; 503  : 		return *this;
; 504  : 
; 505  : 	m_pVertScale = vertScalePtrData.GetVertScale();

  0002e	8b 07		 mov	 eax, DWORD PTR [edi]

; 540  : 	return m_strVertScaleTitle;

  00030	8d 4d 08	 lea	 ecx, DWORD PTR $T3[ebp]

; 503  : 		return *this;
; 504  : 
; 505  : 	m_pVertScale = vertScalePtrData.GetVertScale();

  00033	89 06		 mov	 DWORD PTR [esi], eax

; 540  : 	return m_strVertScaleTitle;

  00035	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00038	50		 push	 eax
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z

; 506  : 	m_strVertScaleTitle = vertScalePtrData.GetVertScaleTitle();

  0003f	8d 45 08	 lea	 eax, DWORD PTR $T3[ebp]
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00049	50		 push	 eax
  0004a	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  00053	8d 4d 08	 lea	 ecx, DWORD PTR $T3[ebp]
  00056	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.h

; 206  : 	CString GetVertScalePacketType( void) const		{	return m_strPacketType;		}	// (2008/12/12 - Seung-Won, Bae) for octal number.

  00063	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00066	50		 push	 eax
  00067	8d 4d f0	 lea	 ecx, DWORD PTR $T2[ebp]
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 508  : 	m_strPacketType	= vertScalePtrData.GetVertScalePacketType();

  00070	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  00073	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0007a	50		 push	 eax
  0007b	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  00084	8d 4d f0	 lea	 ecx, DWORD PTR $T2[ebp]
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN15@operator:

; 509  : 	return *this;
; 510  : }

  0008d	8b c6		 mov	 eax, esi
  0008f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00092	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00099	59		 pop	 ecx
  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4CVerticalScalePtrData@@QAEAAV0@ABV0@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$??4CVerticalScalePtrData@@QAEAAV0@ABV0@@Z$1:
  00009	8d 4d f0	 lea	 ecx, DWORD PTR $T2[ebp]
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
__ehhandler$??4CVerticalScalePtrData@@QAEAAV0@ABV0@@Z:
  00017	90		 npad	 1
  00018	90		 npad	 1
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??4CVerticalScalePtrData@@QAEAAV0@ABV0@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??4CVerticalScalePtrData@@QAEAAV0@ABV0@@Z ENDP		; CVerticalScalePtrData::operator=
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_G?$CList@VCHorizontalScale@@AAV1@@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$CList@VCHorizontalScale@@AAV1@@@UAEPAXI@Z PROC	; CList<CHorizontalScale,CHorizontalScale &>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$CList@VCHorizontalScale@@AAV1@@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 878  : {

  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@VCHorizontalScale@@AAV1@@@6B@

; 879  : 	RemoveAll();

  00032	e8 00 00 00 00	 call	 ?RemoveAll@?$CList@VCHorizontalScale@@AAV1@@@QAEXXZ ; CList<CHorizontalScale,CHorizontalScale &>::RemoveAll
  00037	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0003a	a8 01		 test	 al, 1
  0003c	74 2c		 je	 SHORT $LN12@scalar
  0003e	a8 04		 test	 al, 4
  00040	75 1d		 jne	 SHORT $LN3@scalar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 112  : 	{ ::operator delete(p); }

  00042	56		 push	 esi
  00043	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00048	83 c4 04	 add	 esp, 4
  0004b	8b c6		 mov	 eax, esi
  0004d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00050	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00057	59		 pop	 ecx
  00058	5e		 pop	 esi
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
$LN3@scalar:
  0005f	6a 1c		 push	 28			; 0000001cH
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  00067	83 c4 08	 add	 esp, 8
$LN12@scalar:
  0006a	8b c6		 mov	 eax, esi
  0006c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00076	59		 pop	 ecx
  00077	5e		 pop	 esi
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
  0007e	cc		 int	 3
  0007f	cc		 int	 3
  00080	cc		 int	 3
  00081	cc		 int	 3
  00082	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_G?$CList@VCHorizontalScale@@AAV1@@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$CList@VCHorizontalScale@@AAV1@@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$CList@VCHorizontalScale@@AAV1@@@UAEPAXI@Z ENDP	; CList<CHorizontalScale,CHorizontalScale &>::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CList@VCHorizontalScale@@AAV1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_newData$2 = -124					; size = 100
_nNewCount$1$ = -24					; size = 4
_nCount$1$ = -20					; size = 4
_pData$1$ = -20						; size = 4
_pNode$1$ = -20						; size = 4
_nCount$1$ = -16					; size = 4
_nElementsLeft$1$ = -16					; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ar$ = 8						; size = 4
?Serialize@?$CList@VCHorizontalScale@@AAV1@@@UAEXAAVCArchive@@@Z PROC ; CList<CHorizontalScale,CHorizontalScale &>::Serialize, COMDAT
; _this$ = ecx

; 1169 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Serialize@?$CList@VCHorizontalScale@@AAV1@@@UAEXAAVCArchive@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 70	 sub	 esp, 112		; 00000070H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d f0	 mov	 DWORD PTR _this$1$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00030	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00033	f7 d0		 not	 eax
  00035	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1174 : 	if (ar.IsStoring())

  00037	0f 84 b2 00 00
	00		 je	 $LN7@Serialize

; 1175 : 	{
; 1176 : 		ar.WriteCount(m_nCount);

  0003d	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00040	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00045	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00048	89 45 ec	 mov	 DWORD PTR _pNode$1$[ebp], eax
  0004b	85 c0		 test	 eax, eax
  0004d	0f 84 75 01 00
	00		 je	 $LN69@Serialize
$LL4@Serialize:

; 1178 : 		{
; 1179 : 			ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1180 : 			TYPE* pData;
; 1181 : 			/*
; 1182 : 			 * in some cases the & operator might be overloaded, and we cannot use it to obtain
; 1183 : 			 * the address of a given object.  We then use the following trick to get the address
; 1184 : 			 */
; 1185 : 			pData = reinterpret_cast< TYPE* >( &reinterpret_cast< int& >( static_cast< TYPE& >( pNode->data ) ) );

  00053	8d 70 08	 lea	 esi, DWORD PTR [eax+8]

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00056	85 f6		 test	 esi, esi
  00058	0f 84 87 01 00
	00		 je	 $LN61@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00061	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00064	f7 d0		 not	 eax
  00066	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00068	74 2f		 je	 SHORT $LN22@Serialize

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0006a	b8 01 00 00 00	 mov	 eax, 1
  0006f	89 45 f0	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
$LL17@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00072	bb 14 ae 47 01	 mov	 ebx, 21474836		; 0147ae14H
  00077	3b c3		 cmp	 eax, ebx
  00079	0f 42 d8	 cmovb	 ebx, eax

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0007c	6b fb 64	 imul	 edi, ebx, 100
  0007f	57		 push	 edi
  00080	56		 push	 esi
  00081	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  00086	8b 45 f0	 mov	 eax, DWORD PTR _nElementsLeft$1$[ebp]

; 87   : 			pData += nElementsToWrite;

  00089	03 f7		 add	 esi, edi
  0008b	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  0008e	2b c3		 sub	 eax, ebx
  00090	89 45 f0	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
  00093	85 c0		 test	 eax, eax
  00095	75 db		 jne	 SHORT $LL17@Serialize

; 88   : 		}
; 89   : 	}

  00097	eb 32		 jmp	 SHORT $LN2@Serialize
$LN22@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  00099	bf 01 00 00 00	 mov	 edi, 1
  0009e	66 90		 npad	 2
$LL19@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  000a0	bb 14 ae 47 01	 mov	 ebx, 21474836		; 0147ae14H
  000a5	3b fb		 cmp	 edi, ebx
  000a7	0f 42 df	 cmovb	 ebx, edi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  000aa	6b c3 64	 imul	 eax, ebx, 100
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  000ad	50		 push	 eax
  000ae	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  000af	89 45 f0	 mov	 DWORD PTR _nCount$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  000b2	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  000b7	8b 4d f0	 mov	 ecx, DWORD PTR _nCount$1$[ebp]
  000ba	3b c1		 cmp	 eax, ecx
  000bc	0f 85 1a 01 00
	00		 jne	 $LN60@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  000c2	03 f1		 add	 esi, ecx
  000c4	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;

  000c7	2b fb		 sub	 edi, ebx
  000c9	75 d5		 jne	 SHORT $LL19@Serialize
$LN2@Serialize:

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  000cb	8b 45 ec	 mov	 eax, DWORD PTR _pNode$1$[ebp]
  000ce	8b 00		 mov	 eax, DWORD PTR [eax]
  000d0	89 45 ec	 mov	 DWORD PTR _pNode$1$[ebp], eax
  000d3	85 c0		 test	 eax, eax
  000d5	0f 85 78 ff ff
	ff		 jne	 $LL4@Serialize

; 1198 : 	}
; 1199 : }

  000db	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000de	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e5	59		 pop	 ecx
  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi
  000e8	5b		 pop	 ebx
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 04 00	 ret	 4
$LN7@Serialize:

; 1186 : 			SerializeElements<TYPE>(ar, pData, 1);
; 1187 : 		}
; 1188 : 	}
; 1189 : 	else
; 1190 : 	{
; 1191 : 		DWORD_PTR nNewCount = ar.ReadCount();

  000ef	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount

; 1192 : 		while (nNewCount--)

  000f4	85 c0		 test	 eax, eax
  000f6	0f 84 cc 00 00
	00		 je	 $LN69@Serialize
  000fc	0f 1f 40 00	 npad	 4
$LL5@Serialize:

; 1194 : 			TYPE newData[1];

  00100	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_??1CHorizontalScale@@QAE@XZ
  00106	48		 dec	 eax
  00107	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_??0CHorizontalScale@@QAE@XZ
  0010d	89 45 e8	 mov	 DWORD PTR _nNewCount$1$[ebp], eax
  00110	8d 45 84	 lea	 eax, DWORD PTR _newData$2[ebp]
  00113	6a 01		 push	 1
  00115	6a 64		 push	 100			; 00000064H
  00117	50		 push	 eax
  00118	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0011d	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1194 : 			TYPE newData[1];

  00120	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00127	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0012a	f7 d0		 not	 eax
  0012c	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  0012e	74 35		 je	 SHORT $LN43@Serialize

; 79   : 		pData = pElements;

  00130	8d 45 84	 lea	 eax, DWORD PTR _newData$2[ebp]
  00133	bb 01 00 00 00	 mov	 ebx, 1
  00138	89 45 ec	 mov	 DWORD PTR _pData$1$[ebp], eax
  0013b	0f 1f 44 00 00	 npad	 5
$LL38@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00140	bf 14 ae 47 01	 mov	 edi, 21474836		; 0147ae14H
  00145	3b df		 cmp	 ebx, edi
  00147	0f 42 fb	 cmovb	 edi, ebx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0014a	6b f7 64	 imul	 esi, edi, 100
  0014d	56		 push	 esi
  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 87   : 			pData += nElementsToWrite;

  00154	8b 45 ec	 mov	 eax, DWORD PTR _pData$1$[ebp]
  00157	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  0015a	03 c6		 add	 eax, esi
  0015c	89 45 ec	 mov	 DWORD PTR _pData$1$[ebp], eax
  0015f	2b df		 sub	 ebx, edi
  00161	75 dd		 jne	 SHORT $LL38@Serialize

; 88   : 		}
; 89   : 	}

  00163	eb 32		 jmp	 SHORT $LN41@Serialize
$LN43@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  00165	be 01 00 00 00	 mov	 esi, 1

; 96   : 		pData = pElements;

  0016a	8d 5d 84	 lea	 ebx, DWORD PTR _newData$2[ebp]
  0016d	0f 1f 00	 npad	 3
$LL40@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00170	bf 14 ae 47 01	 mov	 edi, 21474836		; 0147ae14H
  00175	3b f7		 cmp	 esi, edi
  00177	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0017a	6b c7 64	 imul	 eax, edi, 100
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  0017d	50		 push	 eax
  0017e	53		 push	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0017f	89 45 ec	 mov	 DWORD PTR _nCount$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00182	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  00187	8b 4d ec	 mov	 ecx, DWORD PTR _nCount$1$[ebp]
  0018a	3b c1		 cmp	 eax, ecx
  0018c	75 4e		 jne	 SHORT $LN60@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  0018e	03 d9		 add	 ebx, ecx
  00190	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;

  00193	2b f7		 sub	 esi, edi
  00195	75 d9		 jne	 SHORT $LL40@Serialize
$LN41@Serialize:

; 1195 : 			SerializeElements<TYPE>(ar, newData, 1);
; 1196 : 			AddTail(newData[0]);

  00197	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0019a	8d 45 84	 lea	 eax, DWORD PTR _newData$2[ebp]
  0019d	50		 push	 eax
  0019e	e8 00 00 00 00	 call	 ?AddTail@?$CList@VCHorizontalScale@@AAV1@@@QAEPAU__POSITION@@AAVCHorizontalScale@@@Z ; CList<CHorizontalScale,CHorizontalScale &>::AddTail

; 1197 : 		}

  001a3	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_??1CHorizontalScale@@QAE@XZ
  001a9	8d 45 84	 lea	 eax, DWORD PTR _newData$2[ebp]
  001ac	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001b3	6a 01		 push	 1
  001b5	6a 64		 push	 100			; 00000064H
  001b7	50		 push	 eax
  001b8	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  001bd	8b 45 e8	 mov	 eax, DWORD PTR _nNewCount$1$[ebp]
  001c0	85 c0		 test	 eax, eax
  001c2	0f 85 38 ff ff
	ff		 jne	 $LL5@Serialize
$LN69@Serialize:

; 1198 : 	}
; 1199 : }

  001c8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001cb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d2	59		 pop	 ecx
  001d3	5f		 pop	 edi
  001d4	5e		 pop	 esi
  001d5	5b		 pop	 ebx
  001d6	8b e5		 mov	 esp, ebp
  001d8	5d		 pop	 ebp
  001d9	c2 04 00	 ret	 4
$LN60@Serialize:
  001dc	6a 00		 push	 0
  001de	6a 03		 push	 3
  001e0	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN61@Serialize:

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  001e5	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN87@Serialize:
  001ea	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Serialize@?$CList@VCHorizontalScale@@AAV1@@@UAEXAAVCArchive@@@Z$0:
  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_??1CHorizontalScale@@QAE@XZ
  00005	50		 push	 eax
  00006	6a 01		 push	 1
  00008	6a 64		 push	 100			; 00000064H
  0000a	8d 45 84	 lea	 eax, DWORD PTR _newData$2[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00013	c3		 ret	 0
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
__ehhandler$?Serialize@?$CList@VCHorizontalScale@@AAV1@@@UAEXAAVCArchive@@@Z:
  00019	90		 npad	 1
  0001a	90		 npad	 1
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00022	8b 4a 80	 mov	 ecx, DWORD PTR [edx-128]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Serialize@?$CList@VCHorizontalScale@@AAV1@@@UAEXAAVCArchive@@@Z
  00031	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Serialize@?$CList@VCHorizontalScale@@AAV1@@@UAEXAAVCArchive@@@Z ENDP ; CList<CHorizontalScale,CHorizontalScale &>::Serialize
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??1?$CList@VCHorizontalScale@@AAV1@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CList@VCHorizontalScale@@AAV1@@@UAE@XZ PROC	; CList<CHorizontalScale,CHorizontalScale &>::~CList<CHorizontalScale,CHorizontalScale &>, COMDAT
; _this$ = ecx

; 878  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CList@VCHorizontalScale@@AAV1@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CList@VCHorizontalScale@@AAV1@@@6B@

; 879  : 	RemoveAll();

  00028	e8 00 00 00 00	 call	 ?RemoveAll@?$CList@VCHorizontalScale@@AAV1@@@QAEXXZ ; CList<CHorizontalScale,CHorizontalScale &>::RemoveAll

; 880  : 	ASSERT(m_nCount == 0);
; 881  : }

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00030	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00037	59		 pop	 ecx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
  0003c	cc		 int	 3
  0003d	cc		 int	 3
  0003e	cc		 int	 3
  0003f	cc		 int	 3
  00040	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CList@VCHorizontalScale@@AAV1@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CList@VCHorizontalScale@@AAV1@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CList@VCHorizontalScale@@AAV1@@@UAE@XZ ENDP	; CList<CHorizontalScale,CHorizontalScale &>::~CList<CHorizontalScale,CHorizontalScale &>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?NewNode@?$CList@VCHorizontalScale@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z
_TEXT	SEGMENT
_pPrev$ = 8						; size = 4
_pNext$ = 12						; size = 4
?NewNode@?$CList@VCHorizontalScale@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z PROC ; CList<CHorizontalScale,CHorizontalScale &>::NewNode, COMDAT
; _this$ = ecx

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 902  : 	if (m_pNodeFree == NULL)

  00007	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0000b	75 33		 jne	 SHORT $LN7@NewNode

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  0000d	6a 6c		 push	 108			; 0000006cH
  0000f	ff 76 18	 push	 DWORD PTR [esi+24]
  00012	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001b	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0001e	83 c0 08	 add	 eax, 8
  00021	6b ca 6c	 imul	 ecx, edx, 108
  00024	83 c1 94	 add	 ecx, -108		; ffffff94H
  00027	03 c1		 add	 eax, ecx

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00029	83 c2 ff	 add	 edx, -1
  0002c	78 12		 js	 SHORT $LN7@NewNode
  0002e	66 90		 npad	 2
$LL4@NewNode:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	89 08		 mov	 DWORD PTR [eax], ecx

; 915  : 			m_pNodeFree = pNode;

  00035	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00038	83 e8 6c	 sub	 eax, 108		; 0000006cH
  0003b	83 ea 01	 sub	 edx, 1
  0003e	79 f0		 jns	 SHORT $LL4@NewNode
$LN7@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00040	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  00043	85 ff		 test	 edi, edi
  00045	74 24		 je	 SHORT $LN17@NewNode

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00047	8b 07		 mov	 eax, DWORD PTR [edi]

; 922  : 	pNode->pPrev = pPrev;

  00049	8b 4d 08	 mov	 ecx, DWORD PTR _pPrev$[ebp]
  0004c	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0004f	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 923  : 	pNode->pNext = pNext;

  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _pNext$[ebp]
  00055	89 0f		 mov	 DWORD PTR [edi], ecx

; 924  : 	m_nCount++;
; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;

  00057	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0005a	ff 46 0c	 inc	 DWORD PTR [esi+12]
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CHorizontalScale@@QAE@XZ

; 930  : #pragma pop_macro("new")
; 931  : 	return pNode;

  00063	8b c7		 mov	 eax, edi
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi

; 932  : }

  00067	5d		 pop	 ebp
  00068	c2 08 00	 ret	 8
$LN17@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  0006b	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN15@NewNode:
  00070	cc		 int	 3
?NewNode@?$CList@VCHorizontalScale@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z ENDP ; CList<CHorizontalScale,CHorizontalScale &>::NewNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?FindIndex@?$CList@VCHorizontalScale@@AAV1@@@QBEPAU__POSITION@@H@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?FindIndex@?$CList@VCHorizontalScale@@AAV1@@@QBEPAU__POSITION@@H@Z PROC ; CList<CHorizontalScale,CHorizontalScale &>::FindIndex, COMDAT
; _this$ = ecx

; 1130 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1131 : 	ASSERT_VALID(this);
; 1132 : 
; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00003	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00006	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00009	7d 14		 jge	 SHORT $LN5@FindIndex
  0000b	85 d2		 test	 edx, edx
  0000d	78 10		 js	 SHORT $LN5@FindIndex

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0000f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1137 : 	while (nIndex--)

  00012	74 0d		 je	 SHORT $LN1@FindIndex
$LL2@FindIndex:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	83 ea 01	 sub	 edx, 1
  00019	75 f9		 jne	 SHORT $LL2@FindIndex

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;
; 1143 : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
$LN5@FindIndex:

; 1134 : 		return NULL;  // went too far

  0001f	33 c0		 xor	 eax, eax
$LN1@FindIndex:

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;
; 1143 : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?FindIndex@?$CList@VCHorizontalScale@@AAV1@@@QBEPAU__POSITION@@H@Z ENDP ; CList<CHorizontalScale,CHorizontalScale &>::FindIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAll@?$CList@VCHorizontalScale@@AAV1@@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@?$CList@VCHorizontalScale@@AAV1@@@QAEXXZ PROC ; CList<CHorizontalScale,CHorizontalScale &>::RemoveAll, COMDAT
; _this$ = ecx

; 862  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 863  : 	ASSERT_VALID(this);
; 864  : 
; 865  : 	// destroy elements
; 866  : 	CNode* pNode;
; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00004	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00007	85 f6		 test	 esi, esi
  00009	74 14		 je	 SHORT $LN3@RemoveAll
  0000b	0f 1f 44 00 00	 npad	 5
$LL4@RemoveAll:

; 868  : 		pNode->data.~TYPE();

  00010	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CHorizontalScale@@QAE@XZ
  00019	8b 36		 mov	 esi, DWORD PTR [esi]
  0001b	85 f6		 test	 esi, esi
  0001d	75 f1		 jne	 SHORT $LL4@RemoveAll
$LN3@RemoveAll:

; 869  : 
; 870  : 	m_nCount = 0;
; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 872  : 	m_pBlocks->FreeDataChain();

  0001f	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00022	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00029	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00030	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00037	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0003e	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00043	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi

; 874  : }

  0004c	c3		 ret	 0
?RemoveAll@?$CList@VCHorizontalScale@@AAV1@@@QAEXXZ ENDP ; CList<CHorizontalScale,CHorizontalScale &>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?AddTail@?$CList@VCHorizontalScale@@AAV1@@@QAEPAU__POSITION@@AAVCHorizontalScale@@@Z
_TEXT	SEGMENT
_newElement$ = 8					; size = 4
?AddTail@?$CList@VCHorizontalScale@@AAV1@@@QAEPAU__POSITION@@AAVCHorizontalScale@@@Z PROC ; CList<CHorizontalScale,CHorizontalScale &>::AddTail, COMDAT
; _this$ = ecx

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 902  : 	if (m_pNodeFree == NULL)

  00008	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0

; 966  : 	ASSERT_VALID(this);
; 967  : 
; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  0000c	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 902  : 	if (m_pNodeFree == NULL)

  0000f	75 31		 jne	 SHORT $LN11@AddTail

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  00011	6a 6c		 push	 108			; 0000006cH
  00013	ff 76 18	 push	 DWORD PTR [esi+24]
  00016	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001f	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00022	83 c0 08	 add	 eax, 8
  00025	6b ca 6c	 imul	 ecx, edx, 108
  00028	83 c1 94	 add	 ecx, -108		; ffffff94H
  0002b	03 c8		 add	 ecx, eax

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  0002d	83 c2 ff	 add	 edx, -1
  00030	78 10		 js	 SHORT $LN11@AddTail
$LL8@AddTail:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00032	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00035	89 01		 mov	 DWORD PTR [ecx], eax

; 915  : 			m_pNodeFree = pNode;

  00037	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0003a	83 e9 6c	 sub	 ecx, 108		; 0000006cH
  0003d	83 ea 01	 sub	 edx, 1
  00040	79 f0		 jns	 SHORT $LL8@AddTail
$LN11@AddTail:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00042	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00045	85 db		 test	 ebx, ebx
  00047	74 4a		 je	 SHORT $LN22@AddTail

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00049	8b 03		 mov	 eax, DWORD PTR [ebx]

; 922  : 	pNode->pPrev = pPrev;
; 923  : 	pNode->pNext = pNext;
; 924  : 	m_nCount++;
; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;

  0004b	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0004e	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00051	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
  00054	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  0005a	ff 46 0c	 inc	 DWORD PTR [esi+12]
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CHorizontalScale@@QAE@XZ

; 969  : 	pNewNode->data = newElement;

  00063	ff 75 08	 push	 DWORD PTR _newElement$[ebp]
  00066	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4CHorizontalScale@@QAEAAV0@ABV0@@Z

; 970  : 	if (m_pNodeTail != NULL)

  0006f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00072	85 c0		 test	 eax, eax
  00074	74 0e		 je	 SHORT $LN2@AddTail

; 971  : 		m_pNodeTail->pNext = pNewNode;

  00076	89 18		 mov	 DWORD PTR [eax], ebx

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00078	8b c3		 mov	 eax, ebx
  0007a	5f		 pop	 edi
  0007b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx

; 976  : }

  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
$LN2@AddTail:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00084	5f		 pop	 edi
  00085	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  00088	8b c3		 mov	 eax, ebx
  0008a	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx

; 976  : }

  0008f	5d		 pop	 ebp
  00090	c2 04 00	 ret	 4
$LN22@AddTail:

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00093	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN20@AddTail:
  00098	cc		 int	 3
?AddTail@?$CList@VCHorizontalScale@@AAV1@@@QAEPAU__POSITION@@AAVCHorizontalScale@@@Z ENDP ; CList<CHorizontalScale,CHorizontalScale &>::AddTail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??0?$CList@VCHorizontalScale@@AAV1@@@QAE@H@Z
_TEXT	SEGMENT
_nBlockSize$ = 8					; size = 4
??0?$CList@VCHorizontalScale@@AAV1@@@QAE@H@Z PROC	; CList<CHorizontalScale,CHorizontalScale &>::CList<CHorizontalScale,CHorizontalScale &>, COMDAT
; _this$ = ecx

; 851  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;
; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 856  : 	m_pBlocks = NULL;
; 857  : 	m_nBlockSize = nBlockSize;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nBlockSize$[ebp]
  00006	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 858  : }

  00009	8b c1		 mov	 eax, ecx
  0000b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CList@VCHorizontalScale@@AAV1@@@6B@
  00011	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00018	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0001f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00026	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0002d	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??0?$CList@VCHorizontalScale@@AAV1@@@QAE@H@Z ENDP	; CList<CHorizontalScale,CHorizontalScale &>::CList<CHorizontalScale,CHorizontalScale &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetAt@CHorizontalScaleDataList@@QBE?AVCHorizontalScale@@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_nIndex$ = 12						; size = 4
?GetAt@CHorizontalScaleDataList@@QBE?AVCHorizontalScale@@H@Z PROC ; CHorizontalScaleDataList::GetAt, COMDAT
; _this$ = ecx

; 490  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 491  : 	POSITION pos = m_horzScaleList.FindIndex(nIndex);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _nIndex$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00006	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]
  00009	7d 24		 jge	 SHORT $LN9@GetAt
  0000b	85 c0		 test	 eax, eax
  0000d	78 20		 js	 SHORT $LN9@GetAt

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0000f	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]

; 1137 : 	while (nIndex--)

  00012	74 1d		 je	 SHORT $LN5@GetAt
$LL6@GetAt:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00014	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00016	83 e8 01	 sub	 eax, 1
  00019	75 f9		 jne	 SHORT $LL6@GetAt
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 493  : 	return m_horzScaleList.GetAt(pos);

  0001b	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00021	50		 push	 eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CHorizontalScale@@QAE@ABV0@@Z
  00028	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 494  : }

  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
$LN9@GetAt:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1134 : 		return NULL;  // went too far

  0002f	33 c9		 xor	 ecx, ecx
$LN5@GetAt:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 493  : 	return m_horzScaleList.GetAt(pos);

  00031	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00034	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00037	50		 push	 eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CHorizontalScale@@QAE@ABV0@@Z
  0003e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 494  : }

  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
?GetAt@CHorizontalScaleDataList@@QBE?AVCHorizontalScale@@H@Z ENDP ; CHorizontalScaleDataList::GetAt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetAt@CHorizontalScaleDataList@@QAEAAVCHorizontalScale@@H@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?GetAt@CHorizontalScaleDataList@@QAEAAVCHorizontalScale@@H@Z PROC ; CHorizontalScaleDataList::GetAt, COMDAT
; _this$ = ecx

; 483  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 484  : 	POSITION pos = m_horzScaleList.FindIndex(nIndex);

  00003	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00006	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]
  00009	7d 17		 jge	 SHORT $LN7@GetAt
  0000b	85 c0		 test	 eax, eax
  0000d	78 13		 js	 SHORT $LN7@GetAt

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0000f	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]

; 1137 : 	while (nIndex--)

  00012	74 07		 je	 SHORT $LN10@GetAt
$LL4@GetAt:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00014	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00016	83 e8 01	 sub	 eax, 1
  00019	75 f9		 jne	 SHORT $LL4@GetAt
$LN10@GetAt:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 486  : 	return m_horzScaleList.GetAt(pos);

  0001b	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 487  : }

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
$LN7@GetAt:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1134 : 		return NULL;  // went too far

  00022	33 c0		 xor	 eax, eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 486  : 	return m_horzScaleList.GetAt(pos);

  00024	b8 08 00 00 00	 mov	 eax, 8

; 487  : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?GetAt@CHorizontalScaleDataList@@QAEAAVCHorizontalScale@@H@Z ENDP ; CHorizontalScaleDataList::GetAt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetCount@CHorizontalScaleDataList@@QBEHXZ
_TEXT	SEGMENT
?GetCount@CHorizontalScaleDataList@@QBEHXZ PROC		; CHorizontalScaleDataList::GetCount, COMDAT
; _this$ = ecx

; 479  : 	return m_horzScaleList.GetCount();

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 480  : }

  00003	c3		 ret	 0
?GetCount@CHorizontalScaleDataList@@QBEHXZ ENDP		; CHorizontalScaleDataList::GetCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetScaleTextColor@CHorizontalScaleDataList@@QBEKXZ
_TEXT	SEGMENT
?GetScaleTextColor@CHorizontalScaleDataList@@QBEKXZ PROC ; CHorizontalScaleDataList::GetScaleTextColor, COMDAT
; _this$ = ecx

; 474  : 	return m_scaleTextColor;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 475  : }

  00003	c3		 ret	 0
?GetScaleTextColor@CHorizontalScaleDataList@@QBEKXZ ENDP ; CHorizontalScaleDataList::GetScaleTextColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetScaleGridColor@CHorizontalScaleDataList@@QBEKXZ
_TEXT	SEGMENT
?GetScaleGridColor@CHorizontalScaleDataList@@QBEKXZ PROC ; CHorizontalScaleDataList::GetScaleGridColor, COMDAT
; _this$ = ecx

; 469  : 	return m_scaleGridColor;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 470  : }

  00002	c3		 ret	 0
?GetScaleGridColor@CHorizontalScaleDataList@@QBEKXZ ENDP ; CHorizontalScaleDataList::GetScaleGridColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?RemoveAll@CHorizontalScaleDataList@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@CHorizontalScaleDataList@@QAEXXZ PROC	; CHorizontalScaleDataList::RemoveAll, COMDAT
; _this$ = ecx

; 463  : 	m_horzScaleList.RemoveAll();

  00000	83 c1 08	 add	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ?RemoveAll@?$CList@VCHorizontalScale@@AAV1@@@QAEXXZ ; CList<CHorizontalScale,CHorizontalScale &>::RemoveAll
?RemoveAll@CHorizontalScaleDataList@@QAEXXZ ENDP	; CHorizontalScaleDataList::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?AddTail@CHorizontalScaleDataList@@QAEXVCHorizontalScale@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_horzScale$ = 8						; size = 100
?AddTail@CHorizontalScaleDataList@@QAEXVCHorizontalScale@@@Z PROC ; CHorizontalScaleDataList::AddTail, COMDAT
; _this$ = ecx

; 457  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AddTail@CHorizontalScaleDataList@@QAEXVCHorizontalScale@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 458  : 	m_horzScaleList.AddTail(horzScale);

  00022	8d 45 08	 lea	 eax, DWORD PTR _horzScale$[ebp]
  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	50		 push	 eax
  0002d	83 c1 08	 add	 ecx, 8
  00030	e8 00 00 00 00	 call	 ?AddTail@?$CList@VCHorizontalScale@@AAV1@@@QAEPAU__POSITION@@AAVCHorizontalScale@@@Z ; CList<CHorizontalScale,CHorizontalScale &>::AddTail

; 459  : }

  00035	8d 4d 08	 lea	 ecx, DWORD PTR _horzScale$[ebp]
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CHorizontalScale@@QAE@XZ
  0003e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00041	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00048	59		 pop	 ecx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 64 00	 ret	 100			; 00000064H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddTail@CHorizontalScaleDataList@@QAEXVCHorizontalScale@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _horzScale$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CHorizontalScale@@QAE@XZ
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
__ehhandler$?AddTail@CHorizontalScaleDataList@@QAEXVCHorizontalScale@@@Z:
  0000e	90		 npad	 1
  0000f	90		 npad	 1
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddTail@CHorizontalScaleDataList@@QAEXVCHorizontalScale@@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddTail@CHorizontalScaleDataList@@QAEXVCHorizontalScale@@@Z ENDP ; CHorizontalScaleDataList::AddTail
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??0CHorizontalScaleDataList@@QAE@PBVCHorizontalScalePtrDataList@@@Z
_TEXT	SEGMENT
$T2 = -24						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pHorzScalePtrDataList$ = 8				; size = 4
??0CHorizontalScaleDataList@@QAE@PBVCHorizontalScalePtrDataList@@@Z PROC ; CHorizontalScaleDataList::CHorizontalScaleDataList, COMDAT
; _this$ = ecx

; 440  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CHorizontalScaleDataList@@QAE@PBVCHorizontalScalePtrDataList@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8d 59 08	 lea	 ebx, DWORD PTR [ecx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 851  : {

  0002e	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7?$CList@VCHorizontalScale@@AAV1@@@6B@

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;

  00034	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  0003b	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  00042	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
  00049	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 856  : 	m_pBlocks = NULL;

  00050	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 857  : 	m_nBlockSize = nBlockSize;

  00057	c7 43 18 0a 00
	00 00		 mov	 DWORD PTR [ebx+24], 10	; 0000000aH
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 441  : 	if(pHorzScalePtrDataList == NULL)

  0005e	8b 7d 08	 mov	 edi, DWORD PTR _pHorzScalePtrDataList$[ebp]
  00061	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00068	85 ff		 test	 edi, edi
  0006a	0f 84 88 00 00
	00		 je	 $LN39@CHorizonta

; 442  : 		return;
; 443  : 
; 444  : 	if(pHorzScalePtrDataList->GetScaleGridColor() != NULL)

  00070	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00073	85 c0		 test	 eax, eax
  00075	74 04		 je	 SHORT $LN6@CHorizonta

; 445  : 		m_scaleGridColor = *pHorzScalePtrDataList->GetScaleGridColor();

  00077	8b 00		 mov	 eax, DWORD PTR [eax]
  00079	89 01		 mov	 DWORD PTR [ecx], eax
$LN6@CHorizonta:

; 446  : 	if(pHorzScalePtrDataList->GetScaleTextColor() != NULL)

  0007b	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0007e	85 c0		 test	 eax, eax
  00080	74 05		 je	 SHORT $LN7@CHorizonta

; 447  : 		m_scaleTextColor = *pHorzScalePtrDataList->GetScaleTextColor();

  00082	8b 00		 mov	 eax, DWORD PTR [eax]
  00084	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN7@CHorizonta:

; 448  : 
; 449  : 	for(int nIndex = 0; nIndex < pHorzScalePtrDataList->GetCount(); nIndex++){

  00087	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0008a	33 f6		 xor	 esi, esi
  0008c	85 c0		 test	 eax, eax
  0008e	7e 68		 jle	 SHORT $LN39@CHorizonta
$LL4@CHorizonta:

; 401  : 	POSITION pos = m_horzScalePtrDataList.FindIndex(nIndex);

  00090	8b ce		 mov	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00092	3b f0		 cmp	 esi, eax
  00094	7d 13		 jge	 SHORT $LN21@CHorizonta
  00096	85 f6		 test	 esi, esi
  00098	78 0f		 js	 SHORT $LN21@CHorizonta

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0009a	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 1137 : 	while (nIndex--)

  0009d	74 0c		 je	 SHORT $LN17@CHorizonta
  0009f	90		 npad	 1
$LL18@CHorizonta:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  000a0	8b 00		 mov	 eax, DWORD PTR [eax]
  000a2	83 e9 01	 sub	 ecx, 1
  000a5	75 f9		 jne	 SHORT $LL18@CHorizonta

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;

  000a7	eb 02		 jmp	 SHORT $LN17@CHorizonta
$LN21@CHorizonta:

; 1134 : 		return NULL;  // went too far

  000a9	33 c0		 xor	 eax, eax
$LN17@CHorizonta:
  000ab	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000ae	83 c0 0c	 add	 eax, 12			; 0000000cH
  000b1	89 4d e8	 mov	 DWORD PTR $T2[ebp], ecx
  000b4	8d 4d ec	 lea	 ecx, DWORD PTR $T2[ebp+4]
  000b7	50		 push	 eax
  000b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 450  : 		m_horzScaleList.AddTail(*pHorzScalePtrDataList->GetAt(nIndex).GetHorzScale());

  000be	ff 75 e8	 push	 DWORD PTR $T2[ebp]
  000c1	8b cb		 mov	 ecx, ebx
  000c3	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000c7	e8 00 00 00 00	 call	 ?AddTail@?$CList@VCHorizontalScale@@AAV1@@@QAEPAU__POSITION@@AAVCHorizontalScale@@@Z ; CList<CHorizontalScale,CHorizontalScale &>::AddTail
  000cc	8d 4d ec	 lea	 ecx, DWORD PTR $T2[ebp+4]
  000cf	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000d9	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  000dc	46		 inc	 esi
  000dd	3b f0		 cmp	 esi, eax
  000df	7c af		 jl	 SHORT $LL4@CHorizonta

; 451  : 	}
; 452  : }

  000e1	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000e4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ee	59		 pop	 ecx
  000ef	5f		 pop	 edi
  000f0	5e		 pop	 esi
  000f1	5b		 pop	 ebx
  000f2	8b e5		 mov	 esp, ebp
  000f4	5d		 pop	 ebp
  000f5	c2 04 00	 ret	 4
$LN39@CHorizonta:
  000f8	8b c1		 mov	 eax, ecx
  000fa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00104	59		 pop	 ecx
  00105	5f		 pop	 edi
  00106	5e		 pop	 esi
  00107	5b		 pop	 ebx
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CHorizontalScaleDataList@@QAE@PBVCHorizontalScalePtrDataList@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1?$CList@VCHorizontalScale@@AAV1@@@UAE@XZ ; CList<CHorizontalScale,CHorizontalScale &>::~CList<CHorizontalScale,CHorizontalScale &>
__unwindfunclet$??0CHorizontalScaleDataList@@QAE@PBVCHorizontalScalePtrDataList@@@Z$1:
  0000b	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1CHorizontalScalePtrData@@QAE@XZ
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$??0CHorizontalScaleDataList@@QAE@PBVCHorizontalScalePtrDataList@@@Z:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CHorizontalScaleDataList@@QAE@PBVCHorizontalScalePtrDataList@@@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CHorizontalScaleDataList@@QAE@PBVCHorizontalScalePtrDataList@@@Z ENDP ; CHorizontalScaleDataList::CHorizontalScaleDataList
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??0CHorizontalScaleDataList@@QAE@ABV0@@Z
_TEXT	SEGMENT
$T2 = -116						; size = 100
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_horzScaleDataList$ = 8					; size = 4
??0CHorizontalScaleDataList@@QAE@ABV0@@Z PROC		; CHorizontalScaleDataList::CHorizontalScaleDataList, COMDAT
; _this$ = ecx

; 431  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CHorizontalScaleDataList@@QAE@ABV0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8d 59 08	 lea	 ebx, DWORD PTR [ecx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 851  : {

  0002e	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7?$CList@VCHorizontalScale@@AAV1@@@6B@

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;

  00034	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  0003b	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  00042	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
  00049	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 856  : 	m_pBlocks = NULL;

  00050	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 857  : 	m_nBlockSize = nBlockSize;

  00057	c7 43 18 0a 00
	00 00		 mov	 DWORD PTR [ebx+24], 10	; 0000000aH
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 432  : 	m_scaleGridColor = horzScaleDataList.GetScaleGridColor();

  0005e	8b 7d 08	 mov	 edi, DWORD PTR _horzScaleDataList$[ebp]

; 433  : 	m_scaleTextColor = horzScaleDataList.GetScaleTextColor();
; 434  : 	for(int nIndex = 0; nIndex < horzScaleDataList.GetCount(); nIndex++){

  00061	33 f6		 xor	 esi, esi
  00063	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006a	8b 07		 mov	 eax, DWORD PTR [edi]
  0006c	89 01		 mov	 DWORD PTR [ecx], eax
  0006e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00071	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00074	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00077	85 c0		 test	 eax, eax
  00079	7e 68		 jle	 SHORT $LN29@CHorizonta
  0007b	0f 1f 44 00 00	 npad	 5
$LL4@CHorizonta:

; 491  : 	POSITION pos = m_horzScaleList.FindIndex(nIndex);

  00080	8b ce		 mov	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00082	3b f0		 cmp	 esi, eax
  00084	7d 13		 jge	 SHORT $LN18@CHorizonta
  00086	85 f6		 test	 esi, esi
  00088	78 0f		 js	 SHORT $LN18@CHorizonta

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0008a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 1137 : 	while (nIndex--)

  0008d	74 0c		 je	 SHORT $LN14@CHorizonta
  0008f	90		 npad	 1
$LL15@CHorizonta:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00090	8b 00		 mov	 eax, DWORD PTR [eax]
  00092	83 e9 01	 sub	 ecx, 1
  00095	75 f9		 jne	 SHORT $LL15@CHorizonta

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;

  00097	eb 02		 jmp	 SHORT $LN14@CHorizonta
$LN18@CHorizonta:

; 1134 : 		return NULL;  // went too far

  00099	33 c0		 xor	 eax, eax
$LN14@CHorizonta:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 493  : 	return m_horzScaleList.GetAt(pos);

  0009b	83 c0 08	 add	 eax, 8
  0009e	8d 4d 8c	 lea	 ecx, DWORD PTR $T2[ebp]
  000a1	50		 push	 eax
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CHorizontalScale@@QAE@ABV0@@Z

; 435  : 		m_horzScaleList.AddTail(horzScaleDataList.GetAt(nIndex));

  000a8	8d 45 8c	 lea	 eax, DWORD PTR $T2[ebp]
  000ab	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000af	50		 push	 eax
  000b0	8b cb		 mov	 ecx, ebx
  000b2	e8 00 00 00 00	 call	 ?AddTail@?$CList@VCHorizontalScale@@AAV1@@@QAEPAU__POSITION@@AAVCHorizontalScale@@@Z ; CList<CHorizontalScale,CHorizontalScale &>::AddTail
  000b7	8d 4d 8c	 lea	 ecx, DWORD PTR $T2[ebp]
  000ba	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CHorizontalScale@@QAE@XZ
  000c4	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  000c7	46		 inc	 esi
  000c8	3b f0		 cmp	 esi, eax
  000ca	7c b4		 jl	 SHORT $LL4@CHorizonta

; 436  : 	}
; 437  : }

  000cc	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d9	59		 pop	 ecx
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5b		 pop	 ebx
  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c2 04 00	 ret	 4
$LN29@CHorizonta:
  000e3	8b c1		 mov	 eax, ecx
  000e5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ef	59		 pop	 ecx
  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CHorizontalScaleDataList@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1?$CList@VCHorizontalScale@@AAV1@@@UAE@XZ ; CList<CHorizontalScale,CHorizontalScale &>::~CList<CHorizontalScale,CHorizontalScale &>
__unwindfunclet$??0CHorizontalScaleDataList@@QAE@ABV0@@Z$1:
  0000b	8d 4d 8c	 lea	 ecx, DWORD PTR $T2[ebp]
  0000e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CHorizontalScale@@QAE@XZ
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
__ehhandler$??0CHorizontalScaleDataList@@QAE@ABV0@@Z:
  00019	90		 npad	 1
  0001a	90		 npad	 1
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00022	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CHorizontalScaleDataList@@QAE@ABV0@@Z
  00031	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CHorizontalScaleDataList@@QAE@ABV0@@Z ENDP		; CHorizontalScaleDataList::CHorizontalScaleDataList
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??0CHorizontalScaleDataList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CHorizontalScaleDataList@@QAE@XZ PROC		; CHorizontalScaleDataList::CHorizontalScaleDataList, COMDAT
; _this$ = ecx

; 427  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 425  : 	m_scaleGridColor(RGB(202, 202, 202)),

  00004	c7 01 ca ca ca
	00		 mov	 DWORD PTR [ecx], 13290186 ; 00cacacaH

; 428  : }

  0000a	8b c1		 mov	 eax, ecx
  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00013	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 851  : {

  00016	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], OFFSET ??_7?$CList@VCHorizontalScale@@AAV1@@@6B@

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;

  0001d	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00024	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  0002b	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00032	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 856  : 	m_pBlocks = NULL;

  00039	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 857  : 	m_nBlockSize = nBlockSize;

  00040	c7 41 20 0a 00
	00 00		 mov	 DWORD PTR [ecx+32], 10	; 0000000aH
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 428  : }

  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
??0CHorizontalScaleDataList@@QAE@XZ ENDP		; CHorizontalScaleDataList::CHorizontalScaleDataList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??4CHorizontalScaleDataList@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
$T2 = -116						; size = 100
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
tv228 = 8						; size = 4
_horzScaleDataList$ = 8					; size = 4
??4CHorizontalScaleDataList@@QAEAAV0@ABV0@@Z PROC	; CHorizontalScaleDataList::operator=, COMDAT
; _this$ = ecx

; 411  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??4CHorizontalScaleDataList@@QAEAAV0@ABV0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d f0	 mov	 DWORD PTR _this$1$[ebp], ebx

; 412  : 	if(this == &horzScaleDataList)

  0002d	8b 7d 08	 mov	 edi, DWORD PTR _horzScaleDataList$[ebp]
  00030	3b df		 cmp	 ebx, edi
  00032	0f 84 81 00 00
	00		 je	 $LN28@operator

; 413  : 		return *this;
; 414  : 
; 415  : 	m_scaleGridColor = horzScaleDataList.GetScaleGridColor();

  00038	8b 07		 mov	 eax, DWORD PTR [edi]

; 416  : 	m_scaleTextColor = horzScaleDataList.GetScaleTextColor();
; 417  : 	for(int nIndex = 0; nIndex < horzScaleDataList.GetCount(); nIndex++){

  0003a	33 f6		 xor	 esi, esi
  0003c	89 03		 mov	 DWORD PTR [ebx], eax
  0003e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00041	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00044	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00047	85 c0		 test	 eax, eax
  00049	7e 6e		 jle	 SHORT $LN28@operator
  0004b	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0004e	8b d9		 mov	 ebx, ecx
$LL4@operator:

; 491  : 	POSITION pos = m_horzScaleList.FindIndex(nIndex);

  00050	8b ce		 mov	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00052	3b f0		 cmp	 esi, eax
  00054	7d 13		 jge	 SHORT $LN16@operator
  00056	85 f6		 test	 esi, esi
  00058	78 0f		 js	 SHORT $LN16@operator

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0005a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 1137 : 	while (nIndex--)

  0005d	74 0c		 je	 SHORT $LN12@operator
  0005f	90		 npad	 1
$LL13@operator:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00060	8b 00		 mov	 eax, DWORD PTR [eax]
  00062	83 e9 01	 sub	 ecx, 1
  00065	75 f9		 jne	 SHORT $LL13@operator

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;

  00067	eb 02		 jmp	 SHORT $LN12@operator
$LN16@operator:

; 1134 : 		return NULL;  // went too far

  00069	33 c0		 xor	 eax, eax
$LN12@operator:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 493  : 	return m_horzScaleList.GetAt(pos);

  0006b	83 c0 08	 add	 eax, 8
  0006e	8d 4d 8c	 lea	 ecx, DWORD PTR $T2[ebp]
  00071	50		 push	 eax
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CHorizontalScale@@QAE@ABV0@@Z

; 418  : 		m_horzScaleList.AddTail(horzScaleDataList.GetAt(nIndex));

  00078	8d 45 8c	 lea	 eax, DWORD PTR $T2[ebp]
  0007b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00082	50		 push	 eax
  00083	8b cb		 mov	 ecx, ebx
  00085	e8 00 00 00 00	 call	 ?AddTail@?$CList@VCHorizontalScale@@AAV1@@@QAEPAU__POSITION@@AAVCHorizontalScale@@@Z ; CList<CHorizontalScale,CHorizontalScale &>::AddTail
  0008a	8d 4d 8c	 lea	 ecx, DWORD PTR $T2[ebp]
  0008d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CHorizontalScale@@QAE@XZ
  0009a	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0009d	46		 inc	 esi
  0009e	3b f0		 cmp	 esi, eax
  000a0	7c ae		 jl	 SHORT $LL4@operator

; 419  : 	}
; 420  : 
; 421  : 	return *this;

  000a2	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]

; 422  : }

  000a5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000af	59		 pop	 ecx
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 04 00	 ret	 4
$LN28@operator:
  000b9	8b c3		 mov	 eax, ebx
  000bb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000be	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c5	59		 pop	 ecx
  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi
  000c8	5b		 pop	 ebx
  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4CHorizontalScaleDataList@@QAEAAV0@ABV0@@Z$0:
  00000	8d 4d 8c	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CHorizontalScale@@QAE@XZ
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
__ehhandler$??4CHorizontalScaleDataList@@QAEAAV0@ABV0@@Z:
  0000e	90		 npad	 1
  0000f	90		 npad	 1
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??4CHorizontalScaleDataList@@QAEAAV0@ABV0@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??4CHorizontalScaleDataList@@QAEAAV0@ABV0@@Z ENDP	; CHorizontalScaleDataList::operator=
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_G?$CList@VCHorizontalScalePtrData@@AAV1@@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$CList@VCHorizontalScalePtrData@@AAV1@@@UAEPAXI@Z PROC ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$CList@VCHorizontalScalePtrData@@AAV1@@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 878  : {

  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@VCHorizontalScalePtrData@@AAV1@@@6B@

; 879  : 	RemoveAll();

  00032	e8 00 00 00 00	 call	 ?RemoveAll@?$CList@VCHorizontalScalePtrData@@AAV1@@@QAEXXZ ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::RemoveAll
  00037	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0003a	a8 01		 test	 al, 1
  0003c	74 2c		 je	 SHORT $LN12@scalar
  0003e	a8 04		 test	 al, 4
  00040	75 1d		 jne	 SHORT $LN3@scalar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 112  : 	{ ::operator delete(p); }

  00042	56		 push	 esi
  00043	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00048	83 c4 04	 add	 esp, 4
  0004b	8b c6		 mov	 eax, esi
  0004d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00050	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00057	59		 pop	 ecx
  00058	5e		 pop	 esi
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
$LN3@scalar:
  0005f	6a 1c		 push	 28			; 0000001cH
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  00067	83 c4 08	 add	 esp, 8
$LN12@scalar:
  0006a	8b c6		 mov	 eax, esi
  0006c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00076	59		 pop	 ecx
  00077	5e		 pop	 esi
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
  0007e	cc		 int	 3
  0007f	cc		 int	 3
  00080	cc		 int	 3
  00081	cc		 int	 3
  00082	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_G?$CList@VCHorizontalScalePtrData@@AAV1@@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$CList@VCHorizontalScalePtrData@@AAV1@@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$CList@VCHorizontalScalePtrData@@AAV1@@@UAEPAXI@Z ENDP ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CList@VCHorizontalScalePtrData@@AAV1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_newData$2 = -32					; size = 8
_nNewCount$1$ = -24					; size = 4
_pData$1$ = -20						; size = 4
_pNode$1$ = -20						; size = 4
_nElementsLeft$1$ = -16					; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ar$ = 8						; size = 4
?Serialize@?$CList@VCHorizontalScalePtrData@@AAV1@@@UAEXAAVCArchive@@@Z PROC ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::Serialize, COMDAT
; _this$ = ecx

; 1169 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Serialize@?$CList@VCHorizontalScalePtrData@@AAV1@@@UAEXAAVCArchive@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d f0	 mov	 DWORD PTR _this$1$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00030	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00033	f7 d0		 not	 eax
  00035	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1174 : 	if (ar.IsStoring())

  00037	0f 84 b9 00 00
	00		 je	 $LN7@Serialize

; 1175 : 	{
; 1176 : 		ar.WriteCount(m_nCount);

  0003d	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00040	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00045	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00048	89 45 ec	 mov	 DWORD PTR _pNode$1$[ebp], eax
  0004b	85 c0		 test	 eax, eax
  0004d	0f 84 7a 01 00
	00		 je	 $LN69@Serialize
$LL4@Serialize:

; 1178 : 		{
; 1179 : 			ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1180 : 			TYPE* pData;
; 1181 : 			/*
; 1182 : 			 * in some cases the & operator might be overloaded, and we cannot use it to obtain
; 1183 : 			 * the address of a given object.  We then use the following trick to get the address
; 1184 : 			 */
; 1185 : 			pData = reinterpret_cast< TYPE* >( &reinterpret_cast< int& >( static_cast< TYPE& >( pNode->data ) ) );

  00053	8d 70 08	 lea	 esi, DWORD PTR [eax+8]

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00056	85 f6		 test	 esi, esi
  00058	0f 84 8c 01 00
	00		 je	 $LN61@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00061	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00064	f7 d0		 not	 eax
  00066	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00068	74 33		 je	 SHORT $LN22@Serialize

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0006a	b8 01 00 00 00	 mov	 eax, 1
  0006f	89 45 f0	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
$LL17@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00072	bb ff ff ff 0f	 mov	 ebx, 268435455		; 0fffffffH
  00077	3b c3		 cmp	 eax, ebx
  00079	0f 42 d8	 cmovb	 ebx, eax

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0007c	8d 3c dd 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*8]
  00083	57		 push	 edi
  00084	56		 push	 esi
  00085	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  0008a	8b 45 f0	 mov	 eax, DWORD PTR _nElementsLeft$1$[ebp]

; 87   : 			pData += nElementsToWrite;

  0008d	03 f7		 add	 esi, edi
  0008f	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00092	2b c3		 sub	 eax, ebx
  00094	89 45 f0	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
  00097	85 c0		 test	 eax, eax
  00099	75 d7		 jne	 SHORT $LL17@Serialize

; 88   : 		}
; 89   : 	}

  0009b	eb 35		 jmp	 SHORT $LN2@Serialize
$LN22@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  0009d	bf 01 00 00 00	 mov	 edi, 1
$LL19@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  000a2	bb ff ff ff 0f	 mov	 ebx, 268435455		; 0fffffffH
  000a7	3b fb		 cmp	 edi, ebx
  000a9	0f 42 df	 cmovb	 ebx, edi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  000ac	8d 04 dd 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  000b3	50		 push	 eax
  000b4	56		 push	 esi
  000b5	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  000ba	8d 0c dd 00 00
	00 00		 lea	 ecx, DWORD PTR [ebx*8]
  000c1	3b c1		 cmp	 eax, ecx
  000c3	0f 85 18 01 00
	00		 jne	 $LN60@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  000c9	03 f1		 add	 esi, ecx
  000cb	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;

  000ce	2b fb		 sub	 edi, ebx
  000d0	75 d0		 jne	 SHORT $LL19@Serialize
$LN2@Serialize:

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  000d2	8b 45 ec	 mov	 eax, DWORD PTR _pNode$1$[ebp]
  000d5	8b 00		 mov	 eax, DWORD PTR [eax]
  000d7	89 45 ec	 mov	 DWORD PTR _pNode$1$[ebp], eax
  000da	85 c0		 test	 eax, eax
  000dc	0f 85 71 ff ff
	ff		 jne	 $LL4@Serialize

; 1198 : 	}
; 1199 : }

  000e2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ec	59		 pop	 ecx
  000ed	5f		 pop	 edi
  000ee	5e		 pop	 esi
  000ef	5b		 pop	 ebx
  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c2 04 00	 ret	 4
$LN7@Serialize:

; 1186 : 			SerializeElements<TYPE>(ar, pData, 1);
; 1187 : 		}
; 1188 : 	}
; 1189 : 	else
; 1190 : 	{
; 1191 : 		DWORD_PTR nNewCount = ar.ReadCount();

  000f6	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount

; 1192 : 		while (nNewCount--)

  000fb	85 c0		 test	 eax, eax
  000fd	0f 84 ca 00 00
	00		 je	 $LN69@Serialize
$LL5@Serialize:

; 1194 : 			TYPE newData[1];

  00103	68 00 00 00 00	 push	 OFFSET ??1CHorizontalScalePtrData@@QAE@XZ
  00108	68 00 00 00 00	 push	 OFFSET ??0CHorizontalScalePtrData@@QAE@XZ ; CHorizontalScalePtrData::CHorizontalScalePtrData
  0010d	48		 dec	 eax
  0010e	6a 01		 push	 1
  00110	89 45 e8	 mov	 DWORD PTR _nNewCount$1$[ebp], eax
  00113	8d 45 e0	 lea	 eax, DWORD PTR _newData$2[ebp]
  00116	6a 08		 push	 8
  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0011e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1194 : 			TYPE newData[1];

  00121	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00128	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0012b	f7 d0		 not	 eax
  0012d	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  0012f	74 38		 je	 SHORT $LN43@Serialize

; 79   : 		pData = pElements;

  00131	8d 45 e0	 lea	 eax, DWORD PTR _newData$2[ebp]
  00134	bb 01 00 00 00	 mov	 ebx, 1
  00139	89 45 ec	 mov	 DWORD PTR _pData$1$[ebp], eax
  0013c	0f 1f 40 00	 npad	 4
$LL38@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00140	bf ff ff ff 0f	 mov	 edi, 268435455		; 0fffffffH
  00145	3b df		 cmp	 ebx, edi
  00147	0f 42 fb	 cmovb	 edi, ebx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0014a	8d 34 fd 00 00
	00 00		 lea	 esi, DWORD PTR [edi*8]
  00151	56		 push	 esi
  00152	50		 push	 eax
  00153	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 87   : 			pData += nElementsToWrite;

  00158	8b 45 ec	 mov	 eax, DWORD PTR _pData$1$[ebp]
  0015b	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  0015e	03 c6		 add	 eax, esi
  00160	89 45 ec	 mov	 DWORD PTR _pData$1$[ebp], eax
  00163	2b df		 sub	 ebx, edi
  00165	75 d9		 jne	 SHORT $LL38@Serialize

; 88   : 		}
; 89   : 	}

  00167	eb 34		 jmp	 SHORT $LN41@Serialize
$LN43@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  00169	be 01 00 00 00	 mov	 esi, 1

; 96   : 		pData = pElements;

  0016e	8d 7d e0	 lea	 edi, DWORD PTR _newData$2[ebp]
$LL40@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00171	bb ff ff ff 0f	 mov	 ebx, 268435455		; 0fffffffH
  00176	3b f3		 cmp	 esi, ebx
  00178	0f 42 de	 cmovb	 ebx, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0017b	8d 04 dd 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00182	50		 push	 eax
  00183	57		 push	 edi
  00184	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  00189	8d 0c dd 00 00
	00 00		 lea	 ecx, DWORD PTR [ebx*8]
  00190	3b c1		 cmp	 eax, ecx
  00192	75 4d		 jne	 SHORT $LN60@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  00194	03 f9		 add	 edi, ecx
  00196	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;

  00199	2b f3		 sub	 esi, ebx
  0019b	75 d4		 jne	 SHORT $LL40@Serialize
$LN41@Serialize:

; 1195 : 			SerializeElements<TYPE>(ar, newData, 1);
; 1196 : 			AddTail(newData[0]);

  0019d	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001a0	8d 45 e0	 lea	 eax, DWORD PTR _newData$2[ebp]
  001a3	50		 push	 eax
  001a4	e8 00 00 00 00	 call	 ?AddTail@?$CList@VCHorizontalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCHorizontalScalePtrData@@@Z ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::AddTail

; 1197 : 		}

  001a9	68 00 00 00 00	 push	 OFFSET ??1CHorizontalScalePtrData@@QAE@XZ
  001ae	6a 01		 push	 1
  001b0	6a 08		 push	 8
  001b2	8d 45 e0	 lea	 eax, DWORD PTR _newData$2[ebp]
  001b5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001bc	50		 push	 eax
  001bd	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  001c2	8b 45 e8	 mov	 eax, DWORD PTR _nNewCount$1$[ebp]
  001c5	85 c0		 test	 eax, eax
  001c7	0f 85 36 ff ff
	ff		 jne	 $LL5@Serialize
$LN69@Serialize:

; 1198 : 	}
; 1199 : }

  001cd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001d0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d7	59		 pop	 ecx
  001d8	5f		 pop	 edi
  001d9	5e		 pop	 esi
  001da	5b		 pop	 ebx
  001db	8b e5		 mov	 esp, ebp
  001dd	5d		 pop	 ebp
  001de	c2 04 00	 ret	 4
$LN60@Serialize:
  001e1	6a 00		 push	 0
  001e3	6a 03		 push	 3
  001e5	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN61@Serialize:

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  001ea	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN87@Serialize:
  001ef	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Serialize@?$CList@VCHorizontalScalePtrData@@AAV1@@@UAEXAAVCArchive@@@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ??1CHorizontalScalePtrData@@QAE@XZ
  00005	6a 01		 push	 1
  00007	6a 08		 push	 8
  00009	8d 45 e0	 lea	 eax, DWORD PTR _newData$2[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00012	c3		 ret	 0
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$?Serialize@?$CList@VCHorizontalScalePtrData@@AAV1@@@UAEXAAVCArchive@@@Z:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Serialize@?$CList@VCHorizontalScalePtrData@@AAV1@@@UAEXAAVCArchive@@@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Serialize@?$CList@VCHorizontalScalePtrData@@AAV1@@@UAEXAAVCArchive@@@Z ENDP ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::Serialize
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??1?$CList@VCHorizontalScalePtrData@@AAV1@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CList@VCHorizontalScalePtrData@@AAV1@@@UAE@XZ PROC	; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::~CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>, COMDAT
; _this$ = ecx

; 878  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CList@VCHorizontalScalePtrData@@AAV1@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CList@VCHorizontalScalePtrData@@AAV1@@@6B@

; 879  : 	RemoveAll();

  00028	e8 00 00 00 00	 call	 ?RemoveAll@?$CList@VCHorizontalScalePtrData@@AAV1@@@QAEXXZ ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::RemoveAll

; 880  : 	ASSERT(m_nCount == 0);
; 881  : }

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00030	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00037	59		 pop	 ecx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
  0003c	cc		 int	 3
  0003d	cc		 int	 3
  0003e	cc		 int	 3
  0003f	cc		 int	 3
  00040	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CList@VCHorizontalScalePtrData@@AAV1@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CList@VCHorizontalScalePtrData@@AAV1@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CList@VCHorizontalScalePtrData@@AAV1@@@UAE@XZ ENDP	; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::~CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?NewNode@?$CList@VCHorizontalScalePtrData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z
_TEXT	SEGMENT
_pPrev$ = 8						; size = 4
_pNext$ = 12						; size = 4
?NewNode@?$CList@VCHorizontalScalePtrData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z PROC ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::NewNode, COMDAT
; _this$ = ecx

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 902  : 	if (m_pNodeFree == NULL)

  00007	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0000b	75 33		 jne	 SHORT $LN7@NewNode

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  0000d	6a 10		 push	 16			; 00000010H
  0000f	ff 76 18	 push	 DWORD PTR [esi+24]
  00012	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001b	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0001e	83 c0 08	 add	 eax, 8
  00021	8b ca		 mov	 ecx, edx
  00023	c1 e1 04	 shl	 ecx, 4
  00026	83 c1 f0	 add	 ecx, -16		; fffffff0H
  00029	03 c1		 add	 eax, ecx

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  0002b	83 c2 ff	 add	 edx, -1
  0002e	78 10		 js	 SHORT $LN7@NewNode
$LL4@NewNode:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	89 08		 mov	 DWORD PTR [eax], ecx

; 915  : 			m_pNodeFree = pNode;

  00035	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00038	83 e8 10	 sub	 eax, 16			; 00000010H
  0003b	83 ea 01	 sub	 edx, 1
  0003e	79 f0		 jns	 SHORT $LL4@NewNode
$LN7@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00040	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  00043	85 ff		 test	 edi, edi
  00045	74 30		 je	 SHORT $LN20@NewNode

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00047	8b 07		 mov	 eax, DWORD PTR [edi]

; 923  : 	pNode->pNext = pNext;

  00049	8b 4d 0c	 mov	 ecx, DWORD PTR _pNext$[ebp]
  0004c	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0004f	8b 45 08	 mov	 eax, DWORD PTR _pPrev$[ebp]
  00052	89 0f		 mov	 DWORD PTR [edi], ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 239  : 	m_strHorzScaleTitle("")

  00054	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 922  : 	pNode->pPrev = pPrev;

  00057	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 924  : 	m_nCount++;

  0005a	ff 46 0c	 inc	 DWORD PTR [esi+12]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 239  : 	m_strHorzScaleTitle("")

  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00062	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 931  : 	return pNode;

  0006f	8b c7		 mov	 eax, edi
  00071	5f		 pop	 edi
  00072	5e		 pop	 esi

; 932  : }

  00073	5d		 pop	 ebp
  00074	c2 08 00	 ret	 8
$LN20@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00077	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN18@NewNode:
  0007c	cc		 int	 3
?NewNode@?$CList@VCHorizontalScalePtrData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z ENDP ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::NewNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?FindIndex@?$CList@VCHorizontalScalePtrData@@AAV1@@@QBEPAU__POSITION@@H@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?FindIndex@?$CList@VCHorizontalScalePtrData@@AAV1@@@QBEPAU__POSITION@@H@Z PROC ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::FindIndex, COMDAT
; _this$ = ecx

; 1130 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1131 : 	ASSERT_VALID(this);
; 1132 : 
; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00003	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00006	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00009	7d 14		 jge	 SHORT $LN5@FindIndex
  0000b	85 d2		 test	 edx, edx
  0000d	78 10		 js	 SHORT $LN5@FindIndex

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0000f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1137 : 	while (nIndex--)

  00012	74 0d		 je	 SHORT $LN1@FindIndex
$LL2@FindIndex:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	83 ea 01	 sub	 edx, 1
  00019	75 f9		 jne	 SHORT $LL2@FindIndex

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;
; 1143 : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
$LN5@FindIndex:

; 1134 : 		return NULL;  // went too far

  0001f	33 c0		 xor	 eax, eax
$LN1@FindIndex:

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;
; 1143 : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?FindIndex@?$CList@VCHorizontalScalePtrData@@AAV1@@@QBEPAU__POSITION@@H@Z ENDP ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::FindIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAll@?$CList@VCHorizontalScalePtrData@@AAV1@@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@?$CList@VCHorizontalScalePtrData@@AAV1@@@QAEXXZ PROC ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::RemoveAll, COMDAT
; _this$ = ecx

; 862  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 863  : 	ASSERT_VALID(this);
; 864  : 
; 865  : 	// destroy elements
; 866  : 	CNode* pNode;
; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00004	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00007	85 f6		 test	 esi, esi
  00009	74 14		 je	 SHORT $LN3@RemoveAll
  0000b	0f 1f 44 00 00	 npad	 5
$LL4@RemoveAll:

; 868  : 		pNode->data.~TYPE();

  00010	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00019	8b 36		 mov	 esi, DWORD PTR [esi]
  0001b	85 f6		 test	 esi, esi
  0001d	75 f1		 jne	 SHORT $LL4@RemoveAll
$LN3@RemoveAll:

; 869  : 
; 870  : 	m_nCount = 0;
; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 872  : 	m_pBlocks->FreeDataChain();

  0001f	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00022	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00029	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00030	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00037	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0003e	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00043	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi

; 874  : }

  0004c	c3		 ret	 0
?RemoveAll@?$CList@VCHorizontalScalePtrData@@AAV1@@@QAEXXZ ENDP ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?AddTail@?$CList@VCHorizontalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCHorizontalScalePtrData@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
$T2 = 8							; size = 4
_newElement$ = 8					; size = 4
?AddTail@?$CList@VCHorizontalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCHorizontalScalePtrData@@@Z PROC ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::AddTail, COMDAT
; _this$ = ecx

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AddTail@?$CList@VCHorizontalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCHorizontalScalePtrData@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx

; 902  : 	if (m_pNodeFree == NULL)

  00027	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0

; 966  : 	ASSERT_VALID(this);
; 967  : 
; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  0002b	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]

; 902  : 	if (m_pNodeFree == NULL)

  0002e	75 30		 jne	 SHORT $LN11@AddTail

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  00030	6a 10		 push	 16			; 00000010H
  00032	ff 76 18	 push	 DWORD PTR [esi+24]
  00035	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0003e	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00041	8b ca		 mov	 ecx, edx
  00043	c1 e1 04	 shl	 ecx, 4
  00046	83 c1 f8	 add	 ecx, -8			; fffffff8H
  00049	03 c8		 add	 ecx, eax

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  0004b	83 c2 ff	 add	 edx, -1
  0004e	78 10		 js	 SHORT $LN11@AddTail
$LL8@AddTail:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00050	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00053	89 01		 mov	 DWORD PTR [ecx], eax

; 915  : 			m_pNodeFree = pNode;

  00055	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00058	83 e9 10	 sub	 ecx, 16			; 00000010H
  0005b	83 ea 01	 sub	 edx, 1
  0005e	79 f0		 jns	 SHORT $LL8@AddTail
$LN11@AddTail:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00060	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  00063	85 ff		 test	 edi, edi
  00065	0f 84 84 00 00
	00		 je	 $LN34@AddTail

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  0006b	8b 07		 mov	 eax, DWORD PTR [edi]
  0006d	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 922  : 	pNode->pPrev = pPrev;

  00070	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;

  00073	8d 5f 08	 lea	 ebx, DWORD PTR [edi+8]
  00076	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 239  : 	m_strHorzScaleTitle("")

  0007c	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 924  : 	m_nCount++;

  0007f	ff 46 0c	 inc	 DWORD PTR [esi+12]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 239  : 	m_strHorzScaleTitle("")

  00082	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00087	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  0008d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z

; 228  : 	if(this == &horzScalePtrData)

  00093	8b 55 08	 mov	 edx, DWORD PTR _newElement$[ebp]
  00096	3b da		 cmp	 ebx, edx
  00098	74 2e		 je	 SHORT $LN19@AddTail

; 229  : 		return *this;
; 230  : 
; 231  : 	m_pHorzScale = horzScalePtrData.GetHorzScale();

  0009a	8b 02		 mov	 eax, DWORD PTR [edx]

; 262  : 	return m_strHorzScaleTitle;

  0009c	8d 4d 08	 lea	 ecx, DWORD PTR $T2[ebp]

; 231  : 	m_pHorzScale = horzScalePtrData.GetHorzScale();

  0009f	89 03		 mov	 DWORD PTR [ebx], eax

; 262  : 	return m_strHorzScaleTitle;

  000a1	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  000a4	50		 push	 eax
  000a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z

; 232  : 	m_strHorzScaleTitle = horzScalePtrData.GetHorzScaleTitle();

  000ab	8d 45 08	 lea	 eax, DWORD PTR $T2[ebp]
  000ae	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000b5	50		 push	 eax
  000b6	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  000b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  000bf	8d 4d 08	 lea	 ecx, DWORD PTR $T2[ebp]
  000c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN19@AddTail:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 970  : 	if (m_pNodeTail != NULL)

  000c8	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000cb	85 c0		 test	 eax, eax
  000cd	74 04		 je	 SHORT $LN2@AddTail

; 971  : 		m_pNodeTail->pNext = pNewNode;

  000cf	89 38		 mov	 DWORD PTR [eax], edi
  000d1	eb 03		 jmp	 SHORT $LN3@AddTail
$LN2@AddTail:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;

  000d3	89 7e 04	 mov	 DWORD PTR [esi+4], edi
$LN3@AddTail:

; 974  : 	m_pNodeTail = pNewNode;

  000d6	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 975  : 	return (POSITION) pNewNode;

  000d9	8b c7		 mov	 eax, edi

; 976  : }

  000db	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000de	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e5	59		 pop	 ecx
  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi
  000e8	5b		 pop	 ebx
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 04 00	 ret	 4
$LN34@AddTail:

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  000ef	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN32@AddTail:
  000f4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddTail@?$CList@VCHorizontalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCHorizontalScalePtrData@@@Z$1:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
__ehhandler$?AddTail@?$CList@VCHorizontalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCHorizontalScalePtrData@@@Z:
  0000e	90		 npad	 1
  0000f	90		 npad	 1
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddTail@?$CList@VCHorizontalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCHorizontalScalePtrData@@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddTail@?$CList@VCHorizontalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCHorizontalScalePtrData@@@Z ENDP ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::AddTail
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??0?$CList@VCHorizontalScalePtrData@@AAV1@@@QAE@H@Z
_TEXT	SEGMENT
_nBlockSize$ = 8					; size = 4
??0?$CList@VCHorizontalScalePtrData@@AAV1@@@QAE@H@Z PROC ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>, COMDAT
; _this$ = ecx

; 851  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;
; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 856  : 	m_pBlocks = NULL;
; 857  : 	m_nBlockSize = nBlockSize;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nBlockSize$[ebp]
  00006	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 858  : }

  00009	8b c1		 mov	 eax, ecx
  0000b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CList@VCHorizontalScalePtrData@@AAV1@@@6B@
  00011	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00018	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0001f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00026	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0002d	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??0?$CList@VCHorizontalScalePtrData@@AAV1@@@QAE@H@Z ENDP ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetAt@CHorizontalScalePtrDataList@@QBE?AVCHorizontalScalePtrData@@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_nIndex$ = 12						; size = 4
?GetAt@CHorizontalScalePtrDataList@@QBE?AVCHorizontalScalePtrData@@H@Z PROC ; CHorizontalScalePtrDataList::GetAt, COMDAT
; _this$ = ecx

; 400  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 401  : 	POSITION pos = m_horzScalePtrDataList.FindIndex(nIndex);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _nIndex$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00006	3b 41 1c	 cmp	 eax, DWORD PTR [ecx+28]
  00009	7d 12		 jge	 SHORT $LN9@GetAt
  0000b	85 c0		 test	 eax, eax
  0000d	78 0e		 js	 SHORT $LN9@GetAt

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0000f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]

; 1137 : 	while (nIndex--)

  00012	74 0b		 je	 SHORT $LN5@GetAt
$LL6@GetAt:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00014	8b 12		 mov	 edx, DWORD PTR [edx]
  00016	83 e8 01	 sub	 eax, 1
  00019	75 f9		 jne	 SHORT $LL6@GetAt

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;

  0001b	eb 02		 jmp	 SHORT $LN5@GetAt
$LN9@GetAt:

; 1134 : 		return NULL;  // went too far

  0001d	33 d2		 xor	 edx, edx
$LN5@GetAt:
  0001f	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00022	56		 push	 esi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 403  : 	return m_horzScalePtrDataList.GetAt(pos);

  00023	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00026	89 0e		 mov	 DWORD PTR [esi], ecx
  00028	8d 4a 0c	 lea	 ecx, DWORD PTR [edx+12]
  0002b	51		 push	 ecx
  0002c	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00035	8b c6		 mov	 eax, esi
  00037	5e		 pop	 esi

; 404  : }

  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
?GetAt@CHorizontalScalePtrDataList@@QBE?AVCHorizontalScalePtrData@@H@Z ENDP ; CHorizontalScalePtrDataList::GetAt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetAt@CHorizontalScalePtrDataList@@QAEAAVCHorizontalScalePtrData@@H@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?GetAt@CHorizontalScalePtrDataList@@QAEAAVCHorizontalScalePtrData@@H@Z PROC ; CHorizontalScalePtrDataList::GetAt, COMDAT
; _this$ = ecx

; 393  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 394  : 	POSITION pos = m_horzScalePtrDataList.FindIndex(nIndex);

  00003	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00006	3b 41 1c	 cmp	 eax, DWORD PTR [ecx+28]
  00009	7d 17		 jge	 SHORT $LN7@GetAt
  0000b	85 c0		 test	 eax, eax
  0000d	78 13		 js	 SHORT $LN7@GetAt

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0000f	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]

; 1137 : 	while (nIndex--)

  00012	74 07		 je	 SHORT $LN10@GetAt
$LL4@GetAt:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00014	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00016	83 e8 01	 sub	 eax, 1
  00019	75 f9		 jne	 SHORT $LL4@GetAt
$LN10@GetAt:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 396  : 	return m_horzScalePtrDataList.GetAt(pos);

  0001b	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 397  : }

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
$LN7@GetAt:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1134 : 		return NULL;  // went too far

  00022	33 c0		 xor	 eax, eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 396  : 	return m_horzScalePtrDataList.GetAt(pos);

  00024	b8 08 00 00 00	 mov	 eax, 8

; 397  : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?GetAt@CHorizontalScalePtrDataList@@QAEAAVCHorizontalScalePtrData@@H@Z ENDP ; CHorizontalScalePtrDataList::GetAt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetCount@CHorizontalScalePtrDataList@@QBEHXZ
_TEXT	SEGMENT
?GetCount@CHorizontalScalePtrDataList@@QBEHXZ PROC	; CHorizontalScalePtrDataList::GetCount, COMDAT
; _this$ = ecx

; 389  : 	return m_horzScalePtrDataList.GetCount();

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]

; 390  : }

  00003	c3		 ret	 0
?GetCount@CHorizontalScalePtrDataList@@QBEHXZ ENDP	; CHorizontalScalePtrDataList::GetCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetScaleTextColor@CHorizontalScalePtrDataList@@QBEPAKXZ
_TEXT	SEGMENT
?GetScaleTextColor@CHorizontalScalePtrDataList@@QBEPAKXZ PROC ; CHorizontalScalePtrDataList::GetScaleTextColor, COMDAT
; _this$ = ecx

; 384  : 	return m_pScaleTextColor;

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 385  : }

  00003	c3		 ret	 0
?GetScaleTextColor@CHorizontalScalePtrDataList@@QBEPAKXZ ENDP ; CHorizontalScalePtrDataList::GetScaleTextColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetScaleGridColor@CHorizontalScalePtrDataList@@QBEPAKXZ
_TEXT	SEGMENT
?GetScaleGridColor@CHorizontalScalePtrDataList@@QBEPAKXZ PROC ; CHorizontalScalePtrDataList::GetScaleGridColor, COMDAT
; _this$ = ecx

; 379  : 	return m_pScaleGridColor;

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 380  : }

  00003	c3		 ret	 0
?GetScaleGridColor@CHorizontalScalePtrDataList@@QBEPAKXZ ENDP ; CHorizontalScalePtrDataList::GetScaleGridColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetMarginCount@CHorizontalScalePtrDataList@@QBEHXZ
_TEXT	SEGMENT
?GetMarginCount@CHorizontalScalePtrDataList@@QBEHXZ PROC ; CHorizontalScalePtrDataList::GetMarginCount, COMDAT
; _this$ = ecx

; 374  : 	return m_nMarginCount;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 375  : }

  00003	c3		 ret	 0
?GetMarginCount@CHorizontalScalePtrDataList@@QBEHXZ ENDP ; CHorizontalScalePtrDataList::GetMarginCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetFirstIndex@CHorizontalScalePtrDataList@@QBEHXZ
_TEXT	SEGMENT
?GetFirstIndex@CHorizontalScalePtrDataList@@QBEHXZ PROC	; CHorizontalScalePtrDataList::GetFirstIndex, COMDAT
; _this$ = ecx

; 369  : 	return m_nFirstIndex;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 370  : }

  00002	c3		 ret	 0
?GetFirstIndex@CHorizontalScalePtrDataList@@QBEHXZ ENDP	; CHorizontalScalePtrDataList::GetFirstIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?SetHorzScale@CHorizontalScalePtrDataList@@QAEXHABVCHorizontalScale@@@Z
_TEXT	SEGMENT
$T2 = -24						; size = 12
__$EHRec$ = -12						; size = 12
_nIndex$ = 8						; size = 4
_horzScale$ = 12					; size = 4
?SetHorzScale@CHorizontalScalePtrDataList@@QAEXHABVCHorizontalScale@@@Z PROC ; CHorizontalScalePtrDataList::SetHorzScale, COMDAT
; _this$ = ecx

; 353  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetHorzScale@CHorizontalScalePtrDataList@@QAEXHABVCHorizontalScale@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx

; 394  : 	POSITION pos = m_horzScalePtrDataList.FindIndex(nIndex);

  0002a	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  0002d	3b 46 1c	 cmp	 eax, DWORD PTR [esi+28]
  00030	7d 17		 jge	 SHORT $LN12@SetHorzSca
  00032	85 c0		 test	 eax, eax
  00034	78 13		 js	 SHORT $LN12@SetHorzSca

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  00036	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 1137 : 	while (nIndex--)

  00039	74 10		 je	 SHORT $LN8@SetHorzSca
  0003b	0f 1f 44 00 00	 npad	 5
$LL9@SetHorzSca:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00040	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00042	83 e8 01	 sub	 eax, 1
  00045	75 f9		 jne	 SHORT $LL9@SetHorzSca

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;

  00047	eb 02		 jmp	 SHORT $LN8@SetHorzSca
$LN12@SetHorzSca:

; 1134 : 		return NULL;  // went too far

  00049	33 c9		 xor	 ecx, ecx
$LN8@SetHorzSca:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 354  : 	CHorizontalScale* pHorzScale = GetAt(nIndex).GetHorzScale();

  0004b	8b 59 08	 mov	 ebx, DWORD PTR [ecx+8]

; 355  : 	if(pHorzScale == NULL)

  0004e	85 db		 test	 ebx, ebx
  00050	74 5a		 je	 SHORT $LN1@SetHorzSca

; 356  : 		return;
; 357  : 
; 358  : 	// (2009/9/6 - Seung-Won, Bae) Do not support CHorizontalScale::SetHorzScalePosition() as public.
; 359  : 	//		To rearrange the row positions. Use CMainBlockImp::SetHorzScalePosition().
; 360  : 	if( m_pMainBlock) m_pMainBlock->SetHorzScalePosition( *pHorzScale, horzScale.GetHorzScalePosition());

  00052	83 7e 2c 00	 cmp	 DWORD PTR [esi+44], 0
  00056	8b 45 0c	 mov	 eax, DWORD PTR _horzScale$[ebp]
  00059	74 1a		 je	 SHORT $LN3@SetHorzSca
  0005b	8b 76 2c	 mov	 esi, DWORD PTR [esi+44]
  0005e	8b c8		 mov	 ecx, eax
  00060	8b 3e		 mov	 edi, DWORD PTR [esi]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHorzScalePosition@CHorizontalScale@@QBE?AW4HORZSCALEPOSITION@CScaleBaseData@@XZ
  00068	50		 push	 eax
  00069	53		 push	 ebx
  0006a	8b ce		 mov	 ecx, esi
  0006c	ff 97 d8 00 00
	00		 call	 DWORD PTR [edi+216]
  00072	8b 45 0c	 mov	 eax, DWORD PTR _horzScale$[ebp]
$LN3@SetHorzSca:

; 361  : 
; 362  : 	pHorzScale->SetGridType(horzScale.GetGridType());

  00075	8b c8		 mov	 ecx, eax
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetGridType@CScale@@QBE?AW4SCALEGRIDTYPE@CScaleBaseData@@XZ
  0007d	50		 push	 eax
  0007e	8b cb		 mov	 ecx, ebx
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetGridType@CScale@@QAEXW4SCALEGRIDTYPE@CScaleBaseData@@@Z

; 363  : 	pHorzScale->SetScaleCompart(horzScale.GetScaleCompart());

  00086	8b 4d 0c	 mov	 ecx, DWORD PTR _horzScale$[ebp]
  00089	8d 45 e8	 lea	 eax, DWORD PTR $T2[ebp]
  0008c	50		 push	 eax
  0008d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetScaleCompart@CHorizontalScale@@QBE?AVCScaleCompart@@XZ
  00093	50		 push	 eax
  00094	8b cb		 mov	 ecx, ebx
  00096	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetScaleCompart@CHorizontalScale@@QAEXABVCScaleCompart@@@Z
  000a3	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp]
  000a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CScaleCompart@@QAE@XZ
$LN1@SetHorzSca:

; 364  : }

  000ac	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000af	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b6	59		 pop	 ecx
  000b7	5f		 pop	 edi
  000b8	5e		 pop	 esi
  000b9	5b		 pop	 ebx
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetHorzScale@CHorizontalScalePtrDataList@@QAEXHABVCHorizontalScale@@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CScaleCompart@@QAE@XZ
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
__ehhandler$?SetHorzScale@CHorizontalScalePtrDataList@@QAEXHABVCHorizontalScale@@@Z:
  0000e	90		 npad	 1
  0000f	90		 npad	 1
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetHorzScale@CHorizontalScalePtrDataList@@QAEXHABVCHorizontalScale@@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetHorzScale@CHorizontalScalePtrDataList@@QAEXHABVCHorizontalScale@@@Z ENDP ; CHorizontalScalePtrDataList::SetHorzScale
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?SetScaleColor@CHorizontalScalePtrDataList@@QAEXABK0@Z
_TEXT	SEGMENT
_gridColor$ = 8						; size = 4
_textColor$ = 12					; size = 4
?SetScaleColor@CHorizontalScalePtrDataList@@QAEXABK0@Z PROC ; CHorizontalScalePtrDataList::SetScaleColor, COMDAT
; _this$ = ecx

; 345  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 346  : 	if(m_pScaleGridColor != NULL)

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	85 d2		 test	 edx, edx
  00008	74 07		 je	 SHORT $LN2@SetScaleCo

; 347  : 		*m_pScaleGridColor = gridColor;

  0000a	8b 45 08	 mov	 eax, DWORD PTR _gridColor$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
$LN2@SetScaleCo:

; 348  : 	if(m_pScaleTextColor != NULL)

  00011	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00014	85 c9		 test	 ecx, ecx
  00016	74 07		 je	 SHORT $LN3@SetScaleCo

; 349  : 		*m_pScaleTextColor = textColor;

  00018	8b 45 0c	 mov	 eax, DWORD PTR _textColor$[ebp]
  0001b	8b 00		 mov	 eax, DWORD PTR [eax]
  0001d	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@SetScaleCo:

; 350  : }

  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?SetScaleColor@CHorizontalScalePtrDataList@@QAEXABK0@Z ENDP ; CHorizontalScalePtrDataList::SetScaleColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?SetScaleColor@CHorizontalScalePtrDataList@@QAEXPAK0@Z
_TEXT	SEGMENT
_pGridColor$ = 8					; size = 4
_pTextColor$ = 12					; size = 4
?SetScaleColor@CHorizontalScalePtrDataList@@QAEXPAK0@Z PROC ; CHorizontalScalePtrDataList::SetScaleColor, COMDAT
; _this$ = ecx

; 339  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 340  : 	m_pScaleGridColor = pGridColor;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pGridColor$[ebp]
  00006	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 341  : 	m_pScaleTextColor = pTextColor;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _pTextColor$[ebp]
  0000c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 342  : }

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?SetScaleColor@CHorizontalScalePtrDataList@@QAEXPAK0@Z ENDP ; CHorizontalScalePtrDataList::SetScaleColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?SetMarginCount@CHorizontalScalePtrDataList@@QAEXH@Z
_TEXT	SEGMENT
_nMarginCount$ = 8					; size = 4
?SetMarginCount@CHorizontalScalePtrDataList@@QAEXH@Z PROC ; CHorizontalScalePtrDataList::SetMarginCount, COMDAT
; _this$ = ecx

; 334  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 335  : 	m_nMarginCount = nMarginCount;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nMarginCount$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 336  : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetMarginCount@CHorizontalScalePtrDataList@@QAEXH@Z ENDP ; CHorizontalScalePtrDataList::SetMarginCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?SetFirstIndex@CHorizontalScalePtrDataList@@QAEXH@Z
_TEXT	SEGMENT
_nFirstIndex$ = 8					; size = 4
?SetFirstIndex@CHorizontalScalePtrDataList@@QAEXH@Z PROC ; CHorizontalScalePtrDataList::SetFirstIndex, COMDAT
; _this$ = ecx

; 329  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 330  : 	m_nFirstIndex = nFirstIndex;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nFirstIndex$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 331  : }

  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
?SetFirstIndex@CHorizontalScalePtrDataList@@QAEXH@Z ENDP ; CHorizontalScalePtrDataList::SetFirstIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?RemoveAll@CHorizontalScalePtrDataList@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@CHorizontalScalePtrDataList@@QAEXXZ PROC	; CHorizontalScalePtrDataList::RemoveAll, COMDAT
; _this$ = ecx

; 324  : 	m_horzScalePtrDataList.RemoveAll();

  00000	83 c1 10	 add	 ecx, 16			; 00000010H
  00003	e9 00 00 00 00	 jmp	 ?RemoveAll@?$CList@VCHorizontalScalePtrData@@AAV1@@@QAEXXZ ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::RemoveAll
?RemoveAll@CHorizontalScalePtrDataList@@QAEXXZ ENDP	; CHorizontalScalePtrDataList::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?AddTail@CHorizontalScalePtrDataList@@QAEXVCHorizontalScalePtrData@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_horzScalePtrData$ = 8					; size = 8
?AddTail@CHorizontalScalePtrDataList@@QAEXVCHorizontalScalePtrData@@@Z PROC ; CHorizontalScalePtrDataList::AddTail, COMDAT
; _this$ = ecx

; 318  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AddTail@CHorizontalScalePtrDataList@@QAEXVCHorizontalScalePtrData@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 319  : 	m_horzScalePtrDataList.AddTail(horzScalePtrData);

  00022	8d 45 08	 lea	 eax, DWORD PTR _horzScalePtrData$[ebp]
  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	50		 push	 eax
  0002d	83 c1 10	 add	 ecx, 16			; 00000010H
  00030	e8 00 00 00 00	 call	 ?AddTail@?$CList@VCHorizontalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCHorizontalScalePtrData@@@Z ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::AddTail
  00035	8d 4d 0c	 lea	 ecx, DWORD PTR _horzScalePtrData$[ebp+4]
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 320  : }

  0003e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00041	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00048	59		 pop	 ecx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddTail@CHorizontalScalePtrDataList@@QAEXVCHorizontalScalePtrData@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _horzScalePtrData$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CHorizontalScalePtrData@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?AddTail@CHorizontalScalePtrDataList@@QAEXVCHorizontalScalePtrData@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddTail@CHorizontalScalePtrDataList@@QAEXVCHorizontalScalePtrData@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddTail@CHorizontalScalePtrDataList@@QAEXVCHorizontalScalePtrData@@@Z ENDP ; CHorizontalScalePtrDataList::AddTail
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??0CHorizontalScalePtrDataList@@QAE@ABV0@@Z
_TEXT	SEGMENT
$T2 = -24						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_horzScalePtrDataList$ = 8				; size = 4
??0CHorizontalScalePtrDataList@@QAE@ABV0@@Z PROC	; CHorizontalScalePtrDataList::CHorizontalScalePtrDataList, COMDAT
; _this$ = ecx

; 301  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CHorizontalScalePtrDataList@@QAE@ABV0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8d 59 10	 lea	 ebx, DWORD PTR [ecx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 851  : {

  0002e	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7?$CList@VCHorizontalScalePtrData@@AAV1@@@6B@

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;

  00034	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  0003b	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  00042	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
  00049	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 856  : 	m_pBlocks = NULL;

  00050	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 857  : 	m_nBlockSize = nBlockSize;

  00057	c7 43 18 0a 00
	00 00		 mov	 DWORD PTR [ebx+24], 10	; 0000000aH
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 302  : 	m_nFirstIndex = horzScalePtrDataList.GetFirstIndex();

  0005e	8b 7d 08	 mov	 edi, DWORD PTR _horzScalePtrDataList$[ebp]

; 303  : 	m_nMarginCount = horzScalePtrDataList.GetMarginCount();
; 304  : 	m_pScaleGridColor = horzScalePtrDataList.GetScaleGridColor();
; 305  : 	m_pScaleTextColor = horzScalePtrDataList.GetScaleTextColor();
; 306  : 	for(int nIndex = 0; nIndex < horzScalePtrDataList.GetCount(); nIndex++){

  00061	33 f6		 xor	 esi, esi
  00063	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006a	8b 07		 mov	 eax, DWORD PTR [edi]
  0006c	89 01		 mov	 DWORD PTR [ecx], eax
  0006e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00071	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00074	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00077	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0007a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0007d	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00080	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00083	85 c0		 test	 eax, eax
  00085	7e 54		 jle	 SHORT $LN3@CHorizonta
$LL4@CHorizonta:

; 401  : 	POSITION pos = m_horzScalePtrDataList.FindIndex(nIndex);

  00087	8b ce		 mov	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00089	3b f0		 cmp	 esi, eax
  0008b	7d 12		 jge	 SHORT $LN18@CHorizonta
  0008d	85 f6		 test	 esi, esi
  0008f	78 0e		 js	 SHORT $LN18@CHorizonta

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  00091	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 1137 : 	while (nIndex--)

  00094	74 0b		 je	 SHORT $LN14@CHorizonta
$LL15@CHorizonta:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00096	8b 00		 mov	 eax, DWORD PTR [eax]
  00098	83 e9 01	 sub	 ecx, 1
  0009b	75 f9		 jne	 SHORT $LL15@CHorizonta

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;

  0009d	eb 02		 jmp	 SHORT $LN14@CHorizonta
$LN18@CHorizonta:

; 1134 : 		return NULL;  // went too far

  0009f	33 c0		 xor	 eax, eax
$LN14@CHorizonta:
  000a1	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000a4	83 c0 0c	 add	 eax, 12			; 0000000cH
  000a7	89 4d e8	 mov	 DWORD PTR $T2[ebp], ecx
  000aa	8d 4d ec	 lea	 ecx, DWORD PTR $T2[ebp+4]
  000ad	50		 push	 eax
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 307  : 		m_horzScalePtrDataList.AddTail(horzScalePtrDataList.GetAt(nIndex));

  000b4	8d 45 e8	 lea	 eax, DWORD PTR $T2[ebp]
  000b7	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000bb	50		 push	 eax
  000bc	8b cb		 mov	 ecx, ebx
  000be	e8 00 00 00 00	 call	 ?AddTail@?$CList@VCHorizontalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCHorizontalScalePtrData@@@Z ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::AddTail
  000c3	8d 4d ec	 lea	 ecx, DWORD PTR $T2[ebp+4]
  000c6	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000d0	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  000d3	46		 inc	 esi
  000d4	3b f0		 cmp	 esi, eax
  000d6	7c af		 jl	 SHORT $LL4@CHorizonta
  000d8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
$LN3@CHorizonta:

; 308  : 	}
; 309  : 
; 310  : 	// (2009/9/6 - Seung-Won, Bae) Do not support CHorizontalScale::SetHorzScalePosition() as public.
; 311  : 	//		To rearrange the row positions. Use CMainBlockImp::SetHorzScalePosition().
; 312  : 	m_pMainBlock = horzScalePtrDataList.m_pMainBlock;

  000db	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  000de	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 313  : }

  000e1	8b c1		 mov	 eax, ecx
  000e3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ed	59		 pop	 ecx
  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	5b		 pop	 ebx
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CHorizontalScalePtrDataList@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 10	 add	 ecx, 16			; 00000010H
  00006	e9 00 00 00 00	 jmp	 ??1?$CList@VCHorizontalScalePtrData@@AAV1@@@UAE@XZ ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::~CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>
__unwindfunclet$??0CHorizontalScalePtrDataList@@QAE@ABV0@@Z$1:
  0000b	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1CHorizontalScalePtrData@@QAE@XZ
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$??0CHorizontalScalePtrDataList@@QAE@ABV0@@Z:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CHorizontalScalePtrDataList@@QAE@ABV0@@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CHorizontalScalePtrDataList@@QAE@ABV0@@Z ENDP	; CHorizontalScalePtrDataList::CHorizontalScalePtrDataList
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??0CHorizontalScalePtrDataList@@QAE@PAVCMainBlock@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p_pMainBlock$ = 8					; size = 4
??0CHorizontalScalePtrDataList@@QAE@PAVCMainBlock@@@Z PROC ; CHorizontalScalePtrDataList::CHorizontalScalePtrDataList, COMDAT
; _this$ = ecx

; 294  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 297  : 	m_pMainBlock = p_pMainBlock;

  00004	8b 45 08	 mov	 eax, DWORD PTR _p_pMainBlock$[ebp]
  00007	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0000d	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00014	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0001b	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 851  : {

  00022	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET ??_7?$CList@VCHorizontalScalePtrData@@AAV1@@@6B@

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;

  00029	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00030	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0
  00037	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  0003e	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 856  : 	m_pBlocks = NULL;

  00045	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0

; 857  : 	m_nBlockSize = nBlockSize;

  0004c	c7 41 28 0a 00
	00 00		 mov	 DWORD PTR [ecx+40], 10	; 0000000aH
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 297  : 	m_pMainBlock = p_pMainBlock;

  00053	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 298  : }

  00056	8b c1		 mov	 eax, ecx
  00058	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
??0CHorizontalScalePtrDataList@@QAE@PAVCMainBlock@@@Z ENDP ; CHorizontalScalePtrDataList::CHorizontalScalePtrDataList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??4CHorizontalScalePtrDataList@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
$T2 = -24						; size = 8
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
tv284 = 8						; size = 4
_horzScalePtrDataList$ = 8				; size = 4
??4CHorizontalScalePtrDataList@@QAEAAV0@ABV0@@Z PROC	; CHorizontalScalePtrDataList::operator=, COMDAT
; _this$ = ecx

; 270  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??4CHorizontalScalePtrDataList@@QAEAAV0@ABV0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d f0	 mov	 DWORD PTR _this$1$[ebp], ebx

; 271  : 	if(this == &horzScalePtrDataList)

  0002d	8b 7d 08	 mov	 edi, DWORD PTR _horzScalePtrDataList$[ebp]
  00030	3b df		 cmp	 ebx, edi
  00032	0f 84 89 00 00
	00		 je	 $LN34@operator

; 272  : 		return *this;
; 273  : 
; 274  : 	m_nFirstIndex = horzScalePtrDataList.GetFirstIndex();

  00038	8b 07		 mov	 eax, DWORD PTR [edi]

; 275  : 	m_nMarginCount = horzScalePtrDataList.GetMarginCount();
; 276  : 	m_pScaleGridColor = horzScalePtrDataList.GetScaleGridColor();
; 277  : 	m_pScaleTextColor = horzScalePtrDataList.GetScaleTextColor();
; 278  : 	for(int nIndex = 0; nIndex < horzScalePtrDataList.GetCount(); nIndex++){

  0003a	33 f6		 xor	 esi, esi
  0003c	89 03		 mov	 DWORD PTR [ebx], eax
  0003e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00041	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00044	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00047	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  0004a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0004d	89 43 0c	 mov	 DWORD PTR [ebx+12], eax
  00050	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00053	85 c0		 test	 eax, eax
  00055	7e 64		 jle	 SHORT $LN3@operator
  00057	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  0005a	8b d9		 mov	 ebx, ecx
  0005c	0f 1f 40 00	 npad	 4
$LL4@operator:

; 401  : 	POSITION pos = m_horzScalePtrDataList.FindIndex(nIndex);

  00060	8b ce		 mov	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00062	3b f0		 cmp	 esi, eax
  00064	7d 13		 jge	 SHORT $LN16@operator
  00066	85 f6		 test	 esi, esi
  00068	78 0f		 js	 SHORT $LN16@operator

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0006a	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 1137 : 	while (nIndex--)

  0006d	74 0c		 je	 SHORT $LN12@operator
  0006f	90		 npad	 1
$LL13@operator:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00070	8b 00		 mov	 eax, DWORD PTR [eax]
  00072	83 e9 01	 sub	 ecx, 1
  00075	75 f9		 jne	 SHORT $LL13@operator

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;

  00077	eb 02		 jmp	 SHORT $LN12@operator
$LN16@operator:

; 1134 : 		return NULL;  // went too far

  00079	33 c0		 xor	 eax, eax
$LN12@operator:
  0007b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0007e	83 c0 0c	 add	 eax, 12			; 0000000cH
  00081	89 4d e8	 mov	 DWORD PTR $T2[ebp], ecx
  00084	8d 4d ec	 lea	 ecx, DWORD PTR $T2[ebp+4]
  00087	50		 push	 eax
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 279  : 		m_horzScalePtrDataList.AddTail(horzScalePtrDataList.GetAt(nIndex));

  0008e	8d 45 e8	 lea	 eax, DWORD PTR $T2[ebp]
  00091	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00098	50		 push	 eax
  00099	8b cb		 mov	 ecx, ebx
  0009b	e8 00 00 00 00	 call	 ?AddTail@?$CList@VCHorizontalScalePtrData@@AAV1@@@QAEPAU__POSITION@@AAVCHorizontalScalePtrData@@@Z ; CList<CHorizontalScalePtrData,CHorizontalScalePtrData &>::AddTail
  000a0	8d 4d ec	 lea	 ecx, DWORD PTR $T2[ebp+4]
  000a3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000b0	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  000b3	46		 inc	 esi
  000b4	3b f0		 cmp	 esi, eax
  000b6	7c a8		 jl	 SHORT $LL4@operator
  000b8	8b 5d f0	 mov	 ebx, DWORD PTR _this$1$[ebp]
$LN3@operator:

; 280  : 	}
; 281  : 
; 282  : 	// (2009/9/6 - Seung-Won, Bae) Do not support CHorizontalScale::SetHorzScalePosition() as public.
; 283  : 	//		To rearrange the row positions. Use CMainBlockImp::SetHorzScalePosition().
; 284  : 	m_pMainBlock = horzScalePtrDataList.m_pMainBlock;

  000bb	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  000be	89 43 2c	 mov	 DWORD PTR [ebx+44], eax
$LN34@operator:

; 285  : 
; 286  : 	return *this;
; 287  : }

  000c1	8b c3		 mov	 eax, ebx
  000c3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cd	59		 pop	 ecx
  000ce	5f		 pop	 edi
  000cf	5e		 pop	 esi
  000d0	5b		 pop	 ebx
  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4CHorizontalScalePtrDataList@@QAEAAV0@ABV0@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CHorizontalScalePtrData@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??4CHorizontalScalePtrDataList@@QAEAAV0@ABV0@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??4CHorizontalScalePtrDataList@@QAEAAV0@ABV0@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??4CHorizontalScalePtrDataList@@QAEAAV0@ABV0@@Z ENDP	; CHorizontalScalePtrDataList::operator=
; Function compile flags: /Ogtp
;	COMDAT ??1CHorizontalScalePtrData@@QAE@XZ
_TEXT	SEGMENT
??1CHorizontalScalePtrData@@QAE@XZ PROC			; CHorizontalScalePtrData::~CHorizontalScalePtrData, COMDAT
; _this$ = ecx
  00000	83 c1 04	 add	 ecx, 4
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
??1CHorizontalScalePtrData@@QAE@XZ ENDP			; CHorizontalScalePtrData::~CHorizontalScalePtrData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetHorzScaleTitle@CHorizontalScalePtrData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetHorzScaleTitle@CHorizontalScalePtrData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ PROC ; CHorizontalScalePtrData::GetHorzScaleTitle, COMDAT
; _this$ = ecx

; 261  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 262  : 	return m_strHorzScaleTitle;

  00003	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00010	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 263  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?GetHorzScaleTitle@CHorizontalScalePtrData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ENDP ; CHorizontalScalePtrData::GetHorzScaleTitle
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetHorzScale@CHorizontalScalePtrData@@QBEPAVCHorizontalScale@@XZ
_TEXT	SEGMENT
?GetHorzScale@CHorizontalScalePtrData@@QBEPAVCHorizontalScale@@XZ PROC ; CHorizontalScalePtrData::GetHorzScale, COMDAT
; _this$ = ecx

; 257  : 	return m_pHorzScale;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 258  : }

  00002	c3		 ret	 0
?GetHorzScale@CHorizontalScalePtrData@@QBEPAVCHorizontalScale@@XZ ENDP ; CHorizontalScalePtrData::GetHorzScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetHorzScale@CHorizontalScalePtrData@@QAEPAVCHorizontalScale@@XZ
_TEXT	SEGMENT
?GetHorzScale@CHorizontalScalePtrData@@QAEPAVCHorizontalScale@@XZ PROC ; CHorizontalScalePtrData::GetHorzScale, COMDAT
; _this$ = ecx

; 252  : 	return m_pHorzScale;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 253  : }

  00002	c3		 ret	 0
?GetHorzScale@CHorizontalScalePtrData@@QAEPAVCHorizontalScale@@XZ ENDP ; CHorizontalScalePtrData::GetHorzScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??0CHorizontalScalePtrData@@QAE@PAVCHorizontalScale@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pHorzScale$ = 8					; size = 4
_horzScaleTitle$ = 12					; size = 4
??0CHorizontalScalePtrData@@QAE@PAVCHorizontalScale@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC ; CHorizontalScalePtrData::CHorizontalScalePtrData, COMDAT
; _this$ = ecx

; 246  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 244  : 	m_pHorzScale(pHorzScale),

  00004	8b 45 08	 mov	 eax, DWORD PTR _pHorzScale$[ebp]
  00007	56		 push	 esi

; 245  : 	m_strHorzScaleTitle(horzScaleTitle)

  00008	ff 75 0c	 push	 DWORD PTR _horzScaleTitle$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00010	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00013	89 06		 mov	 DWORD PTR [esi], eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z

; 247  : }

  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
??0CHorizontalScalePtrData@@QAE@PAVCHorizontalScale@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CHorizontalScalePtrData::CHorizontalScalePtrData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??0CHorizontalScalePtrData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CHorizontalScalePtrData@@QAE@XZ PROC			; CHorizontalScalePtrData::CHorizontalScalePtrData, COMDAT
; _this$ = ecx

; 240  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 239  : 	m_strHorzScaleTitle("")

  00007	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0000c	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000f	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z

; 241  : }

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??0CHorizontalScalePtrData@@QAE@XZ ENDP			; CHorizontalScalePtrData::CHorizontalScalePtrData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??4CHorizontalScalePtrData@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
$T2 = 8							; size = 4
_horzScalePtrData$ = 8					; size = 4
??4CHorizontalScalePtrData@@QAEAAV0@ABV0@@Z PROC	; CHorizontalScalePtrData::operator=, COMDAT
; _this$ = ecx

; 227  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??4CHorizontalScalePtrData@@QAEAAV0@ABV0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 228  : 	if(this == &horzScalePtrData)

  00025	8b 4d 08	 mov	 ecx, DWORD PTR _horzScalePtrData$[ebp]
  00028	3b f1		 cmp	 esi, ecx
  0002a	74 2e		 je	 SHORT $LN10@operator

; 229  : 		return *this;
; 230  : 
; 231  : 	m_pHorzScale = horzScalePtrData.GetHorzScale();

  0002c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002e	89 06		 mov	 DWORD PTR [esi], eax

; 262  : 	return m_strHorzScaleTitle;

  00030	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00033	50		 push	 eax
  00034	8d 4d 08	 lea	 ecx, DWORD PTR $T2[ebp]
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z

; 232  : 	m_strHorzScaleTitle = horzScalePtrData.GetHorzScaleTitle();

  0003d	8d 45 08	 lea	 eax, DWORD PTR $T2[ebp]
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00047	50		 push	 eax
  00048	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  00051	8d 4d 08	 lea	 ecx, DWORD PTR $T2[ebp]
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN10@operator:

; 233  : 	return *this;
; 234  : }

  0005a	8b c6		 mov	 eax, esi
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00066	59		 pop	 ecx
  00067	5e		 pop	 esi
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4CHorizontalScalePtrData@@QAEAAV0@ABV0@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
__ehhandler$??4CHorizontalScalePtrData@@QAEAAV0@ABV0@@Z:
  0000e	90		 npad	 1
  0000f	90		 npad	 1
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??4CHorizontalScalePtrData@@QAEAAV0@ABV0@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??4CHorizontalScalePtrData@@QAEAAV0@ABV0@@Z ENDP	; CHorizontalScalePtrData::operator=
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_G?$CList@VCVerticalScaleGroupData@@AAV1@@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$CList@VCVerticalScaleGroupData@@AAV1@@@UAEPAXI@Z PROC ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$CList@VCVerticalScaleGroupData@@AAV1@@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 878  : {

  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@VCVerticalScaleGroupData@@AAV1@@@6B@

; 879  : 	RemoveAll();

  00032	e8 00 00 00 00	 call	 ?RemoveAll@?$CList@VCVerticalScaleGroupData@@AAV1@@@QAEXXZ ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::RemoveAll
  00037	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0003a	a8 01		 test	 al, 1
  0003c	74 2c		 je	 SHORT $LN12@scalar
  0003e	a8 04		 test	 al, 4
  00040	75 1d		 jne	 SHORT $LN3@scalar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 112  : 	{ ::operator delete(p); }

  00042	56		 push	 esi
  00043	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00048	83 c4 04	 add	 esp, 4
  0004b	8b c6		 mov	 eax, esi
  0004d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00050	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00057	59		 pop	 ecx
  00058	5e		 pop	 esi
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
$LN3@scalar:
  0005f	6a 1c		 push	 28			; 0000001cH
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  00067	83 c4 08	 add	 esp, 8
$LN12@scalar:
  0006a	8b c6		 mov	 eax, esi
  0006c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00076	59		 pop	 ecx
  00077	5e		 pop	 esi
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
  0007e	cc		 int	 3
  0007f	cc		 int	 3
  00080	cc		 int	 3
  00081	cc		 int	 3
  00082	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_G?$CList@VCVerticalScaleGroupData@@AAV1@@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$CList@VCVerticalScaleGroupData@@AAV1@@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$CList@VCVerticalScaleGroupData@@AAV1@@@UAEPAXI@Z ENDP ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CList@VCVerticalScaleGroupData@@AAV1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_newData$2 = -120					; size = 96
_nNewCount$1$ = -24					; size = 4
_pData$1$ = -20						; size = 4
_pData$1$ = -20						; size = 4
_pNode$1$ = -20						; size = 4
_nCount$1$ = -16					; size = 4
_nElementsLeft$1$ = -16					; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ar$ = 8						; size = 4
?Serialize@?$CList@VCVerticalScaleGroupData@@AAV1@@@UAEXAAVCArchive@@@Z PROC ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::Serialize, COMDAT
; _this$ = ecx

; 1169 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Serialize@?$CList@VCVerticalScaleGroupData@@AAV1@@@UAEXAAVCArchive@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d f0	 mov	 DWORD PTR _this$1$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00030	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00033	f7 d0		 not	 eax
  00035	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1174 : 	if (ar.IsStoring())

  00037	0f 84 b6 00 00
	00		 je	 $LN7@Serialize

; 1175 : 	{
; 1176 : 		ar.WriteCount(m_nCount);

  0003d	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00040	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00045	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00048	89 45 ec	 mov	 DWORD PTR _pNode$1$[ebp], eax
  0004b	85 c0		 test	 eax, eax
  0004d	0f 84 77 01 00
	00		 je	 $LN69@Serialize
$LL4@Serialize:

; 1178 : 		{
; 1179 : 			ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1180 : 			TYPE* pData;
; 1181 : 			/*
; 1182 : 			 * in some cases the & operator might be overloaded, and we cannot use it to obtain
; 1183 : 			 * the address of a given object.  We then use the following trick to get the address
; 1184 : 			 */
; 1185 : 			pData = reinterpret_cast< TYPE* >( &reinterpret_cast< int& >( static_cast< TYPE& >( pNode->data ) ) );

  00053	8d 70 08	 lea	 esi, DWORD PTR [eax+8]

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00056	85 f6		 test	 esi, esi
  00058	0f 84 89 01 00
	00		 je	 $LN61@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00061	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00064	f7 d0		 not	 eax
  00066	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00068	74 32		 je	 SHORT $LN22@Serialize

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0006a	b8 01 00 00 00	 mov	 eax, 1
  0006f	89 45 f0	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
$LL17@Serialize:

; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00072	bb 55 55 55 01	 mov	 ebx, 22369621		; 01555555H
  00077	3b c3		 cmp	 eax, ebx
  00079	0f 42 d8	 cmovb	 ebx, eax

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0007c	8d 3c 5b	 lea	 edi, DWORD PTR [ebx+ebx*2]
  0007f	c1 e7 05	 shl	 edi, 5
  00082	57		 push	 edi
  00083	56		 push	 esi
  00084	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  00089	8b 45 f0	 mov	 eax, DWORD PTR _nElementsLeft$1$[ebp]

; 87   : 			pData += nElementsToWrite;

  0008c	03 f7		 add	 esi, edi
  0008e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00091	2b c3		 sub	 eax, ebx
  00093	89 45 f0	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
  00096	85 c0		 test	 eax, eax
  00098	75 d8		 jne	 SHORT $LL17@Serialize

; 88   : 		}
; 89   : 	}

  0009a	eb 33		 jmp	 SHORT $LN2@Serialize
$LN22@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  0009c	bf 01 00 00 00	 mov	 edi, 1
$LL19@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  000a1	bb 55 55 55 01	 mov	 ebx, 22369621		; 01555555H
  000a6	3b fb		 cmp	 edi, ebx
  000a8	0f 42 df	 cmovb	 ebx, edi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  000ab	8d 04 5b	 lea	 eax, DWORD PTR [ebx+ebx*2]
  000ae	c1 e0 05	 shl	 eax, 5
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  000b1	50		 push	 eax
  000b2	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  000b3	89 45 f0	 mov	 DWORD PTR _nCount$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  000b6	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  000bb	8b 4d f0	 mov	 ecx, DWORD PTR _nCount$1$[ebp]
  000be	3b c1		 cmp	 eax, ecx
  000c0	0f 85 18 01 00
	00		 jne	 $LN60@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  000c6	03 f1		 add	 esi, ecx
  000c8	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;

  000cb	2b fb		 sub	 edi, ebx
  000cd	75 d2		 jne	 SHORT $LL19@Serialize
$LN2@Serialize:

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  000cf	8b 45 ec	 mov	 eax, DWORD PTR _pNode$1$[ebp]
  000d2	8b 00		 mov	 eax, DWORD PTR [eax]
  000d4	89 45 ec	 mov	 DWORD PTR _pNode$1$[ebp], eax
  000d7	85 c0		 test	 eax, eax
  000d9	0f 85 74 ff ff
	ff		 jne	 $LL4@Serialize

; 1198 : 	}
; 1199 : }

  000df	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e9	59		 pop	 ecx
  000ea	5f		 pop	 edi
  000eb	5e		 pop	 esi
  000ec	5b		 pop	 ebx
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 04 00	 ret	 4
$LN7@Serialize:

; 1186 : 			SerializeElements<TYPE>(ar, pData, 1);
; 1187 : 		}
; 1188 : 	}
; 1189 : 	else
; 1190 : 	{
; 1191 : 		DWORD_PTR nNewCount = ar.ReadCount();

  000f3	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount

; 1192 : 		while (nNewCount--)

  000f8	85 c0		 test	 eax, eax
  000fa	0f 84 ca 00 00
	00		 je	 $LN69@Serialize
$LL5@Serialize:

; 1194 : 			TYPE newData[1];

  00100	68 00 00 00 00	 push	 OFFSET ??1CVerticalScaleGroupData@@QAE@XZ
  00105	68 00 00 00 00	 push	 OFFSET ??0CVerticalScaleGroupData@@QAE@XZ ; CVerticalScaleGroupData::CVerticalScaleGroupData
  0010a	48		 dec	 eax
  0010b	6a 01		 push	 1
  0010d	89 45 e8	 mov	 DWORD PTR _nNewCount$1$[ebp], eax
  00110	8d 45 88	 lea	 eax, DWORD PTR _newData$2[ebp]
  00113	6a 60		 push	 96			; 00000060H
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0011b	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1194 : 			TYPE newData[1];

  0011e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00125	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00128	f7 d0		 not	 eax
  0012a	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  0012c	8d 45 88	 lea	 eax, DWORD PTR _newData$2[ebp]
  0012f	89 45 ec	 mov	 DWORD PTR _pData$1$[ebp], eax
  00132	74 34		 je	 SHORT $LN43@Serialize

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  00134	bb 01 00 00 00	 mov	 ebx, 1
  00139	0f 1f 80 00 00
	00 00		 npad	 7
$LL38@Serialize:

; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00140	bf 55 55 55 01	 mov	 edi, 22369621		; 01555555H
  00145	3b df		 cmp	 ebx, edi
  00147	0f 42 fb	 cmovb	 edi, ebx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0014a	8d 34 7f	 lea	 esi, DWORD PTR [edi+edi*2]
  0014d	c1 e6 05	 shl	 esi, 5
  00150	56		 push	 esi
  00151	50		 push	 eax
  00152	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 87   : 			pData += nElementsToWrite;

  00157	8b 45 ec	 mov	 eax, DWORD PTR _pData$1$[ebp]
  0015a	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  0015d	03 c6		 add	 eax, esi
  0015f	89 45 ec	 mov	 DWORD PTR _pData$1$[ebp], eax
  00162	2b df		 sub	 ebx, edi
  00164	75 da		 jne	 SHORT $LL38@Serialize

; 88   : 		}
; 89   : 	}

  00166	eb 32		 jmp	 SHORT $LN41@Serialize
$LN43@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  00168	be 01 00 00 00	 mov	 esi, 1
  0016d	0f 1f 00	 npad	 3
$LL40@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00170	bf 55 55 55 01	 mov	 edi, 22369621		; 01555555H
  00175	3b f7		 cmp	 esi, edi
  00177	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0017a	8d 1c 7f	 lea	 ebx, DWORD PTR [edi+edi*2]
  0017d	c1 e3 05	 shl	 ebx, 5
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00180	53		 push	 ebx
  00181	50		 push	 eax
  00182	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  00187	3b c3		 cmp	 eax, ebx
  00189	75 53		 jne	 SHORT $LN60@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  0018b	8b 45 ec	 mov	 eax, DWORD PTR _pData$1$[ebp]
  0018e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]

; 104  : 			pData += nElementsToRead;

  00191	03 c3		 add	 eax, ebx
  00193	89 45 ec	 mov	 DWORD PTR _pData$1$[ebp], eax
  00196	2b f7		 sub	 esi, edi
  00198	75 d6		 jne	 SHORT $LL40@Serialize
$LN41@Serialize:

; 1195 : 			SerializeElements<TYPE>(ar, newData, 1);
; 1196 : 			AddTail(newData[0]);

  0019a	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0019d	8d 45 88	 lea	 eax, DWORD PTR _newData$2[ebp]
  001a0	50		 push	 eax
  001a1	e8 00 00 00 00	 call	 ?AddTail@?$CList@VCVerticalScaleGroupData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScaleGroupData@@@Z ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::AddTail

; 1197 : 		}

  001a6	68 00 00 00 00	 push	 OFFSET ??1CVerticalScaleGroupData@@QAE@XZ
  001ab	6a 01		 push	 1
  001ad	6a 60		 push	 96			; 00000060H
  001af	8d 45 88	 lea	 eax, DWORD PTR _newData$2[ebp]
  001b2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001b9	50		 push	 eax
  001ba	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  001bf	8b 45 e8	 mov	 eax, DWORD PTR _nNewCount$1$[ebp]
  001c2	85 c0		 test	 eax, eax
  001c4	0f 85 36 ff ff
	ff		 jne	 $LL5@Serialize
$LN69@Serialize:

; 1198 : 	}
; 1199 : }

  001ca	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001cd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d4	59		 pop	 ecx
  001d5	5f		 pop	 edi
  001d6	5e		 pop	 esi
  001d7	5b		 pop	 ebx
  001d8	8b e5		 mov	 esp, ebp
  001da	5d		 pop	 ebp
  001db	c2 04 00	 ret	 4
$LN60@Serialize:
  001de	6a 00		 push	 0
  001e0	6a 03		 push	 3
  001e2	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN61@Serialize:

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  001e7	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN87@Serialize:
  001ec	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Serialize@?$CList@VCVerticalScaleGroupData@@AAV1@@@UAEXAAVCArchive@@@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ??1CVerticalScaleGroupData@@QAE@XZ
  00005	6a 01		 push	 1
  00007	6a 60		 push	 96			; 00000060H
  00009	8d 45 88	 lea	 eax, DWORD PTR _newData$2[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00012	c3		 ret	 0
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$?Serialize@?$CList@VCVerticalScaleGroupData@@AAV1@@@UAEXAAVCArchive@@@Z:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a 84	 mov	 ecx, DWORD PTR [edx-124]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Serialize@?$CList@VCVerticalScaleGroupData@@AAV1@@@UAEXAAVCArchive@@@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Serialize@?$CList@VCVerticalScaleGroupData@@AAV1@@@UAEXAAVCArchive@@@Z ENDP ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::Serialize
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??1?$CList@VCVerticalScaleGroupData@@AAV1@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CList@VCVerticalScaleGroupData@@AAV1@@@UAE@XZ PROC	; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::~CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>, COMDAT
; _this$ = ecx

; 878  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CList@VCVerticalScaleGroupData@@AAV1@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CList@VCVerticalScaleGroupData@@AAV1@@@6B@

; 879  : 	RemoveAll();

  00028	e8 00 00 00 00	 call	 ?RemoveAll@?$CList@VCVerticalScaleGroupData@@AAV1@@@QAEXXZ ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::RemoveAll

; 880  : 	ASSERT(m_nCount == 0);
; 881  : }

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00030	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00037	59		 pop	 ecx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
  0003c	cc		 int	 3
  0003d	cc		 int	 3
  0003e	cc		 int	 3
  0003f	cc		 int	 3
  00040	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CList@VCVerticalScaleGroupData@@AAV1@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CList@VCVerticalScaleGroupData@@AAV1@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CList@VCVerticalScaleGroupData@@AAV1@@@UAE@XZ ENDP	; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::~CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?NewNode@?$CList@VCVerticalScaleGroupData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
$T2 = 8							; size = 4
_pPrev$ = 8						; size = 4
_pNext$ = 12						; size = 4
?NewNode@?$CList@VCVerticalScaleGroupData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z PROC ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::NewNode, COMDAT
; _this$ = ecx

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?NewNode@?$CList@VCVerticalScaleGroupData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 902  : 	if (m_pNodeFree == NULL)

  00026	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0002a	75 34		 jne	 SHORT $LN7@NewNode

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  0002c	6a 68		 push	 104			; 00000068H
  0002e	ff 76 18	 push	 DWORD PTR [esi+24]
  00031	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0003a	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0003d	6b ca 68	 imul	 ecx, edx, 104
  00040	83 c1 a0	 add	 ecx, -96		; ffffffa0H
  00043	03 c1		 add	 eax, ecx

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00045	83 c2 ff	 add	 edx, -1
  00048	78 16		 js	 SHORT $LN7@NewNode
  0004a	66 0f 1f 44 00
	00		 npad	 6
$LL4@NewNode:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00050	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00053	89 08		 mov	 DWORD PTR [eax], ecx

; 915  : 			m_pNodeFree = pNode;

  00055	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00058	83 e8 68	 sub	 eax, 104		; 00000068H
  0005b	83 ea 01	 sub	 edx, 1
  0005e	79 f0		 jns	 SHORT $LL4@NewNode
$LN7@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00060	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  00063	85 ff		 test	 edi, edi
  00065	74 4b		 je	 SHORT $LN22@NewNode

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00067	8b 07		 mov	 eax, DWORD PTR [edi]
  00069	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 922  : 	pNode->pPrev = pPrev;

  0006c	8b 45 08	 mov	 eax, DWORD PTR _pPrev$[ebp]
  0006f	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 923  : 	pNode->pNext = pNext;

  00072	8b 45 0c	 mov	 eax, DWORD PTR _pNext$[ebp]
  00075	89 07		 mov	 DWORD PTR [edi], eax

; 924  : 	m_nCount++;

  00077	ff 46 0c	 inc	 DWORD PTR [esi+12]

; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;

  0007a	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 114  : {

  0007d	8b ce		 mov	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;

  0007f	89 75 08	 mov	 DWORD PTR $T2[ebp], esi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 114  : {

  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CVerticalScale@@QAE@XZ
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0008d	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  00090	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 931  : 	return pNode;

  0009d	8b c7		 mov	 eax, edi

; 932  : }

  0009f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a9	59		 pop	 ecx
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 08 00	 ret	 8
$LN22@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  000b2	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN20@NewNode:
  000b7	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?NewNode@?$CList@VCVerticalScaleGroupData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z$0:
  00000	8b 4d 08	 mov	 ecx, DWORD PTR $T2[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CVerticalScale@@QAE@XZ
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
__ehhandler$?NewNode@?$CList@VCVerticalScaleGroupData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z:
  0000e	90		 npad	 1
  0000f	90		 npad	 1
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?NewNode@?$CList@VCVerticalScaleGroupData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?NewNode@?$CList@VCVerticalScaleGroupData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z ENDP ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::NewNode
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?FindIndex@?$CList@VCVerticalScaleGroupData@@AAV1@@@QBEPAU__POSITION@@H@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?FindIndex@?$CList@VCVerticalScaleGroupData@@AAV1@@@QBEPAU__POSITION@@H@Z PROC ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::FindIndex, COMDAT
; _this$ = ecx

; 1130 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1131 : 	ASSERT_VALID(this);
; 1132 : 
; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00003	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00006	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00009	7d 14		 jge	 SHORT $LN5@FindIndex
  0000b	85 d2		 test	 edx, edx
  0000d	78 10		 js	 SHORT $LN5@FindIndex

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0000f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1137 : 	while (nIndex--)

  00012	74 0d		 je	 SHORT $LN1@FindIndex
$LL2@FindIndex:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	83 ea 01	 sub	 edx, 1
  00019	75 f9		 jne	 SHORT $LL2@FindIndex

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;
; 1143 : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
$LN5@FindIndex:

; 1134 : 		return NULL;  // went too far

  0001f	33 c0		 xor	 eax, eax
$LN1@FindIndex:

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;
; 1143 : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?FindIndex@?$CList@VCVerticalScaleGroupData@@AAV1@@@QBEPAU__POSITION@@H@Z ENDP ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::FindIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAll@?$CList@VCVerticalScaleGroupData@@AAV1@@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@?$CList@VCVerticalScaleGroupData@@AAV1@@@QAEXXZ PROC ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::RemoveAll, COMDAT
; _this$ = ecx

; 862  : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi

; 863  : 	ASSERT_VALID(this);
; 864  : 
; 865  : 	// destroy elements
; 866  : 	CNode* pNode;
; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00004	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00007	85 f6		 test	 esi, esi
  00009	74 1e		 je	 SHORT $LN3@RemoveAll
  0000b	57		 push	 edi
  0000c	0f 1f 40 00	 npad	 4
$LL4@RemoveAll:
  00010	8d 4e 60	 lea	 ecx, DWORD PTR [esi+96]
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00019	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CVerticalScale@@QAE@XZ
  00022	8b 36		 mov	 esi, DWORD PTR [esi]
  00024	85 f6		 test	 esi, esi
  00026	75 e8		 jne	 SHORT $LL4@RemoveAll
  00028	5f		 pop	 edi
$LN3@RemoveAll:

; 868  : 		pNode->data.~TYPE();
; 869  : 
; 870  : 	m_nCount = 0;
; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 872  : 	m_pBlocks->FreeDataChain();

  00029	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  0002c	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0
  00033	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  0003a	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
  00041	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  00048	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0004d	5e		 pop	 esi
  0004e	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
  00055	5b		 pop	 ebx

; 874  : }

  00056	c3		 ret	 0
?RemoveAll@?$CList@VCVerticalScaleGroupData@@AAV1@@@QAEXXZ ENDP ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?AddTail@?$CList@VCVerticalScaleGroupData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScaleGroupData@@@Z
_TEXT	SEGMENT
$T2 = -104						; size = 88
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T4 = 8							; size = 4
_newElement$ = 8					; size = 4
?AddTail@?$CList@VCVerticalScaleGroupData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScaleGroupData@@@Z PROC ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::AddTail, COMDAT
; _this$ = ecx

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AddTail@?$CList@VCVerticalScaleGroupData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScaleGroupData@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx

; 902  : 	if (m_pNodeFree == NULL)

  0002a	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0

; 966  : 	ASSERT_VALID(this);
; 967  : 
; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  0002e	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]

; 902  : 	if (m_pNodeFree == NULL)

  00031	75 2e		 jne	 SHORT $LN11@AddTail

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  00033	6a 68		 push	 104			; 00000068H
  00035	ff 76 18	 push	 DWORD PTR [esi+24]
  00038	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  00041	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00044	6b ca 68	 imul	 ecx, edx, 104
  00047	83 c1 a0	 add	 ecx, -96		; ffffffa0H
  0004a	03 c8		 add	 ecx, eax

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  0004c	83 c2 ff	 add	 edx, -1
  0004f	78 10		 js	 SHORT $LN11@AddTail
$LL8@AddTail:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00051	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00054	89 01		 mov	 DWORD PTR [ecx], eax

; 915  : 			m_pNodeFree = pNode;

  00056	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00059	83 e9 68	 sub	 ecx, 104		; 00000068H
  0005c	83 ea 01	 sub	 edx, 1
  0005f	79 f0		 jns	 SHORT $LL8@AddTail
$LN11@AddTail:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00061	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  00064	85 ff		 test	 edi, edi
  00066	0f 84 c3 00 00
	00		 je	 $LN40@AddTail

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  0006c	8b 07		 mov	 eax, DWORD PTR [edi]
  0006e	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 922  : 	pNode->pPrev = pPrev;

  00071	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;

  00074	8d 5f 08	 lea	 ebx, DWORD PTR [edi+8]
  00077	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 114  : {

  0007d	8b cb		 mov	 ecx, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 924  : 	m_nCount++;

  0007f	ff 46 0c	 inc	 DWORD PTR [esi+12]

; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;

  00082	89 5d f0	 mov	 DWORD PTR $T3[ebp], ebx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 114  : {

  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CVerticalScale@@QAE@XZ
  0008b	8d 4b 58	 lea	 ecx, DWORD PTR [ebx+88]
  0008e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00095	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z

; 103  : 	if(this == &vertScaleGroupData)

  000a0	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]

; 115  : }

  000a3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 103  : 	if(this == &vertScaleGroupData)

  000aa	3b d8		 cmp	 ebx, eax
  000ac	74 5a		 je	 SHORT $LN20@AddTail

; 131  : 	return m_vertScale;

  000ae	50		 push	 eax
  000af	8d 4d 98	 lea	 ecx, DWORD PTR $T2[ebp]
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CVerticalScale@@QAE@ABV0@@Z

; 106  : 	m_vertScale = vertScaleGroupData.GetVertScale();

  000b8	8d 45 98	 lea	 eax, DWORD PTR $T2[ebp]
  000bb	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000c2	50		 push	 eax
  000c3	8b cb		 mov	 ecx, ebx
  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4CVerticalScale@@QAEAAV0@ABV0@@Z
  000cb	8d 4d 98	 lea	 ecx, DWORD PTR $T2[ebp]
  000ce	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CVerticalScale@@QAE@XZ

; 136  : 	return m_strVertScaleTitle;

  000db	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]
  000de	8d 4d 08	 lea	 ecx, DWORD PTR $T4[ebp]
  000e1	83 c0 58	 add	 eax, 88			; 00000058H
  000e4	50		 push	 eax
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z

; 107  : 	m_strVertScaleTitle = vertScaleGroupData.GetVertScaleTitle();

  000eb	8d 45 08	 lea	 eax, DWORD PTR $T4[ebp]
  000ee	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000f5	50		 push	 eax
  000f6	8d 4b 58	 lea	 ecx, DWORD PTR [ebx+88]
  000f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  000ff	8d 4d 08	 lea	 ecx, DWORD PTR $T4[ebp]
  00102	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN20@AddTail:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 970  : 	if (m_pNodeTail != NULL)

  00108	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0010b	85 c0		 test	 eax, eax
  0010d	74 04		 je	 SHORT $LN2@AddTail

; 971  : 		m_pNodeTail->pNext = pNewNode;

  0010f	89 38		 mov	 DWORD PTR [eax], edi
  00111	eb 03		 jmp	 SHORT $LN3@AddTail
$LN2@AddTail:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;

  00113	89 7e 04	 mov	 DWORD PTR [esi+4], edi
$LN3@AddTail:

; 974  : 	m_pNodeTail = pNewNode;

  00116	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 975  : 	return (POSITION) pNewNode;

  00119	8b c7		 mov	 eax, edi

; 976  : }

  0011b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0011e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00125	59		 pop	 ecx
  00126	5f		 pop	 edi
  00127	5e		 pop	 esi
  00128	5b		 pop	 ebx
  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	c2 04 00	 ret	 4
$LN40@AddTail:

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  0012f	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN38@AddTail:
  00134	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddTail@?$CList@VCVerticalScaleGroupData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScaleGroupData@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR $T3[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CVerticalScale@@QAE@XZ
__unwindfunclet$?AddTail@?$CList@VCVerticalScaleGroupData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScaleGroupData@@@Z$2:
  00009	8d 4d 98	 lea	 ecx, DWORD PTR $T2[ebp]
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CVerticalScale@@QAE@XZ
__unwindfunclet$?AddTail@?$CList@VCVerticalScaleGroupData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScaleGroupData@@@Z$3:
  00012	8d 4d 08	 lea	 ecx, DWORD PTR $T4[ebp]
  00015	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
  0001f	cc		 int	 3
__ehhandler$?AddTail@?$CList@VCVerticalScaleGroupData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScaleGroupData@@@Z:
  00020	90		 npad	 1
  00021	90		 npad	 1
  00022	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00026	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00029	8b 4a 94	 mov	 ecx, DWORD PTR [edx-108]
  0002c	33 c8		 xor	 ecx, eax
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddTail@?$CList@VCVerticalScaleGroupData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScaleGroupData@@@Z
  00038	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddTail@?$CList@VCVerticalScaleGroupData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScaleGroupData@@@Z ENDP ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::AddTail
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??0?$CList@VCVerticalScaleGroupData@@AAV1@@@QAE@H@Z
_TEXT	SEGMENT
_nBlockSize$ = 8					; size = 4
??0?$CList@VCVerticalScaleGroupData@@AAV1@@@QAE@H@Z PROC ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>, COMDAT
; _this$ = ecx

; 851  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;
; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 856  : 	m_pBlocks = NULL;
; 857  : 	m_nBlockSize = nBlockSize;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nBlockSize$[ebp]
  00006	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 858  : }

  00009	8b c1		 mov	 eax, ecx
  0000b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CList@VCVerticalScaleGroupData@@AAV1@@@6B@
  00011	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00018	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0001f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00026	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0002d	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??0?$CList@VCVerticalScaleGroupData@@AAV1@@@QAE@H@Z ENDP ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetAt@CVerticalScaleGroupDataList@@QBE?AVCVerticalScaleGroupData@@H@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_nIndex$ = 12						; size = 4
?GetAt@CVerticalScaleGroupDataList@@QBE?AVCVerticalScaleGroupData@@H@Z PROC ; CVerticalScaleGroupDataList::GetAt, COMDAT
; _this$ = ecx

; 216  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetAt@CVerticalScaleGroupDataList@@QBE?AVCVerticalScaleGroupData@@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 217  : 	POSITION pos = m_vertScaleGroupDataList.FindIndex(nIndex);

  00024	8b 45 0c	 mov	 eax, DWORD PTR _nIndex$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00027	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0002a	7d 12		 jge	 SHORT $LN9@GetAt
  0002c	85 c0		 test	 eax, eax
  0002e	78 0e		 js	 SHORT $LN9@GetAt

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  00030	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]

; 1137 : 	while (nIndex--)

  00033	74 0b		 je	 SHORT $LN5@GetAt
$LL6@GetAt:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00035	8b 36		 mov	 esi, DWORD PTR [esi]
  00037	83 e8 01	 sub	 eax, 1
  0003a	75 f9		 jne	 SHORT $LL6@GetAt

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;

  0003c	eb 02		 jmp	 SHORT $LN5@GetAt
$LN9@GetAt:

; 1134 : 		return NULL;  // went too far

  0003e	33 f6		 xor	 esi, esi
$LN5@GetAt:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 219  : 	return m_vertScaleGroupDataList.GetAt(pos);

  00040	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00043	83 c6 08	 add	 esi, 8
  00046	56		 push	 esi
  00047	8b cf		 mov	 ecx, edi
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CVerticalScale@@QAE@ABV0@@Z
  0004f	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00059	51		 push	 ecx
  0005a	8d 4f 58	 lea	 ecx, DWORD PTR [edi+88]
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00063	8b c7		 mov	 eax, edi

; 220  : }

  00065	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00068	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006f	59		 pop	 ecx
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetAt@CVerticalScaleGroupDataList@@QBE?AVCVerticalScaleGroupData@@H@Z$1:
  00000	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CVerticalScale@@QAE@XZ
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
__ehhandler$?GetAt@CVerticalScaleGroupDataList@@QBE?AVCVerticalScaleGroupData@@H@Z:
  0000e	90		 npad	 1
  0000f	90		 npad	 1
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetAt@CVerticalScaleGroupDataList@@QBE?AVCVerticalScaleGroupData@@H@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetAt@CVerticalScaleGroupDataList@@QBE?AVCVerticalScaleGroupData@@H@Z ENDP ; CVerticalScaleGroupDataList::GetAt
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetAt@CVerticalScaleGroupDataList@@QAEAAVCVerticalScaleGroupData@@H@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?GetAt@CVerticalScaleGroupDataList@@QAEAAVCVerticalScaleGroupData@@H@Z PROC ; CVerticalScaleGroupDataList::GetAt, COMDAT
; _this$ = ecx

; 209  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 210  : 	POSITION pos = m_vertScaleGroupDataList.FindIndex(nIndex);

  00003	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00006	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  00009	7d 17		 jge	 SHORT $LN7@GetAt
  0000b	85 c0		 test	 eax, eax
  0000d	78 13		 js	 SHORT $LN7@GetAt

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0000f	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 1137 : 	while (nIndex--)

  00012	74 07		 je	 SHORT $LN10@GetAt
$LL4@GetAt:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00014	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00016	83 e8 01	 sub	 eax, 1
  00019	75 f9		 jne	 SHORT $LL4@GetAt
$LN10@GetAt:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 212  : 	return m_vertScaleGroupDataList.GetAt(pos);

  0001b	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 213  : }

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
$LN7@GetAt:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1134 : 		return NULL;  // went too far

  00022	33 c0		 xor	 eax, eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 212  : 	return m_vertScaleGroupDataList.GetAt(pos);

  00024	b8 08 00 00 00	 mov	 eax, 8

; 213  : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?GetAt@CVerticalScaleGroupDataList@@QAEAAVCVerticalScaleGroupData@@H@Z ENDP ; CVerticalScaleGroupDataList::GetAt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetCount@CVerticalScaleGroupDataList@@QBEHXZ
_TEXT	SEGMENT
?GetCount@CVerticalScaleGroupDataList@@QBEHXZ PROC	; CVerticalScaleGroupDataList::GetCount, COMDAT
; _this$ = ecx

; 205  : 	return m_vertScaleGroupDataList.GetCount();

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 206  : }

  00003	c3		 ret	 0
?GetCount@CVerticalScaleGroupDataList@@QBEHXZ ENDP	; CVerticalScaleGroupDataList::GetCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetFirstIndex@CVerticalScaleGroupDataList@@QBEHXZ
_TEXT	SEGMENT
?GetFirstIndex@CVerticalScaleGroupDataList@@QBEHXZ PROC	; CVerticalScaleGroupDataList::GetFirstIndex, COMDAT
; _this$ = ecx

; 200  : 	return m_nFirstIndex;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 201  : }

  00002	c3		 ret	 0
?GetFirstIndex@CVerticalScaleGroupDataList@@QBEHXZ ENDP	; CVerticalScaleGroupDataList::GetFirstIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?SetFirstIndex@CVerticalScaleGroupDataList@@QAEXH@Z
_TEXT	SEGMENT
_nFirstIndex$ = 8					; size = 4
?SetFirstIndex@CVerticalScaleGroupDataList@@QAEXH@Z PROC ; CVerticalScaleGroupDataList::SetFirstIndex, COMDAT
; _this$ = ecx

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 194  : 	m_nFirstIndex = nFirstIndex;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nFirstIndex$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 195  : }

  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
?SetFirstIndex@CVerticalScaleGroupDataList@@QAEXH@Z ENDP ; CVerticalScaleGroupDataList::SetFirstIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?RemoveAll@CVerticalScaleGroupDataList@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@CVerticalScaleGroupDataList@@QAEXXZ PROC	; CVerticalScaleGroupDataList::RemoveAll, COMDAT
; _this$ = ecx

; 188  : 	m_vertScaleGroupDataList.RemoveAll();

  00000	83 c1 04	 add	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?RemoveAll@?$CList@VCVerticalScaleGroupData@@AAV1@@@QAEXXZ ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::RemoveAll
?RemoveAll@CVerticalScaleGroupDataList@@QAEXXZ ENDP	; CVerticalScaleGroupDataList::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?AddTail@CVerticalScaleGroupDataList@@QAEXVCVerticalScaleGroupData@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_vertScaleGroupData$ = 8				; size = 96
?AddTail@CVerticalScaleGroupDataList@@QAEXVCVerticalScaleGroupData@@@Z PROC ; CVerticalScaleGroupDataList::AddTail, COMDAT
; _this$ = ecx

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AddTail@CVerticalScaleGroupDataList@@QAEXVCVerticalScaleGroupData@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 183  : 	m_vertScaleGroupDataList.AddTail(vertScaleGroupData);

  00022	8d 45 08	 lea	 eax, DWORD PTR _vertScaleGroupData$[ebp]
  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	50		 push	 eax
  0002d	83 c1 04	 add	 ecx, 4
  00030	e8 00 00 00 00	 call	 ?AddTail@?$CList@VCVerticalScaleGroupData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScaleGroupData@@@Z ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::AddTail
  00035	8d 4d 60	 lea	 ecx, DWORD PTR _vertScaleGroupData$[ebp+88]
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0003e	8d 4d 08	 lea	 ecx, DWORD PTR _vertScaleGroupData$[ebp]
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CVerticalScale@@QAE@XZ

; 184  : }

  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 60 00	 ret	 96			; 00000060H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddTail@CVerticalScaleGroupDataList@@QAEXVCVerticalScaleGroupData@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _vertScaleGroupData$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CVerticalScaleGroupData@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?AddTail@CVerticalScaleGroupDataList@@QAEXVCVerticalScaleGroupData@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddTail@CVerticalScaleGroupDataList@@QAEXVCVerticalScaleGroupData@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddTail@CVerticalScaleGroupDataList@@QAEXVCVerticalScaleGroupData@@@Z ENDP ; CVerticalScaleGroupDataList::AddTail
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??0CVerticalScaleGroupDataList@@QAE@ABV0@@Z
_TEXT	SEGMENT
$T2 = -112						; size = 96
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_vertScaleGroupData$ = 8				; size = 4
??0CVerticalScaleGroupDataList@@QAE@ABV0@@Z PROC	; CVerticalScaleGroupDataList::CVerticalScaleGroupDataList, COMDAT
; _this$ = ecx

; 172  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CVerticalScaleGroupDataList@@QAE@ABV0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 64	 sub	 esp, 100		; 00000064H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 851  : {

  0002d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$CList@VCVerticalScaleGroupData@@AAV1@@@6B@

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;

  00034	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  0003b	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00042	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00049	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 856  : 	m_pBlocks = NULL;

  00050	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 857  : 	m_nBlockSize = nBlockSize;

  00057	c7 46 1c 0a 00
	00 00		 mov	 DWORD PTR [esi+28], 10	; 0000000aH
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 173  : 	m_nFirstIndex = vertScaleGroupData.GetFirstIndex();

  0005e	8b 5d 08	 mov	 ebx, DWORD PTR _vertScaleGroupData$[ebp]

; 174  : 	for(int nIndex = 0; nIndex < vertScaleGroupData.GetCount(); nIndex++){

  00061	33 ff		 xor	 edi, edi
  00063	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0006c	89 06		 mov	 DWORD PTR [esi], eax
  0006e	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00071	85 c0		 test	 eax, eax
  00073	7e 69		 jle	 SHORT $LN36@CVerticalS
$LL4@CVerticalS:

; 217  : 	POSITION pos = m_vertScaleGroupDataList.FindIndex(nIndex);

  00075	8b cf		 mov	 ecx, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00077	3b f8		 cmp	 edi, eax
  00079	7d 12		 jge	 SHORT $LN18@CVerticalS
  0007b	85 ff		 test	 edi, edi
  0007d	78 0e		 js	 SHORT $LN18@CVerticalS

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0007f	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]

; 1137 : 	while (nIndex--)

  00082	74 0b		 je	 SHORT $LN14@CVerticalS
$LL15@CVerticalS:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00084	8b 00		 mov	 eax, DWORD PTR [eax]
  00086	83 e9 01	 sub	 ecx, 1
  00089	75 f9		 jne	 SHORT $LL15@CVerticalS

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;

  0008b	eb 02		 jmp	 SHORT $LN14@CVerticalS
$LN18@CVerticalS:

; 1134 : 		return NULL;  // went too far

  0008d	33 c0		 xor	 eax, eax
$LN14@CVerticalS:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 219  : 	return m_vertScaleGroupDataList.GetAt(pos);

  0008f	8d 70 08	 lea	 esi, DWORD PTR [eax+8]
  00092	56		 push	 esi
  00093	8d 4d 90	 lea	 ecx, DWORD PTR $T2[ebp]
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CVerticalScale@@QAE@ABV0@@Z
  0009c	8d 46 58	 lea	 eax, DWORD PTR [esi+88]
  0009f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000a3	50		 push	 eax
  000a4	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp+88]
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z

; 175  : 		m_vertScaleGroupDataList.AddTail(vertScaleGroupData.GetAt(nIndex));

  000ad	8b 75 f0	 mov	 esi, DWORD PTR _this$[ebp]
  000b0	8d 45 90	 lea	 eax, DWORD PTR $T2[ebp]
  000b3	50		 push	 eax
  000b4	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000b8	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  000bb	e8 00 00 00 00	 call	 ?AddTail@?$CList@VCVerticalScaleGroupData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScaleGroupData@@@Z ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::AddTail
  000c0	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp+88]
  000c3	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000cd	8d 4d 90	 lea	 ecx, DWORD PTR $T2[ebp]
  000d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CVerticalScale@@QAE@XZ
  000d6	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  000d9	47		 inc	 edi
  000da	3b f8		 cmp	 edi, eax
  000dc	7c 97		 jl	 SHORT $LL4@CVerticalS
$LN36@CVerticalS:

; 176  : 	}
; 177  : }

  000de	8b c6		 mov	 eax, esi
  000e0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ea	59		 pop	 ecx
  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	5b		 pop	 ebx
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CVerticalScaleGroupDataList@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$CList@VCVerticalScaleGroupData@@AAV1@@@UAE@XZ ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::~CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>
__unwindfunclet$??0CVerticalScaleGroupDataList@@QAE@ABV0@@Z$3:
  0000b	8d 4d 90	 lea	 ecx, DWORD PTR $T2[ebp]
  0000e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CVerticalScale@@QAE@XZ
__unwindfunclet$??0CVerticalScaleGroupDataList@@QAE@ABV0@@Z$1:
  00014	8d 4d 90	 lea	 ecx, DWORD PTR $T2[ebp]
  00017	e9 00 00 00 00	 jmp	 ??1CVerticalScaleGroupData@@QAE@XZ
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
  0001f	cc		 int	 3
  00020	cc		 int	 3
__ehhandler$??0CVerticalScaleGroupDataList@@QAE@ABV0@@Z:
  00021	90		 npad	 1
  00022	90		 npad	 1
  00023	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00027	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002a	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CVerticalScaleGroupDataList@@QAE@ABV0@@Z
  00039	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CVerticalScaleGroupDataList@@QAE@ABV0@@Z ENDP	; CVerticalScaleGroupDataList::CVerticalScaleGroupDataList
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??0CVerticalScaleGroupDataList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CVerticalScaleGroupDataList@@QAE@XZ PROC		; CVerticalScaleGroupDataList::CVerticalScaleGroupDataList, COMDAT
; _this$ = ecx

; 168  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 167  : 	m_nFirstIndex(0)

  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 169  : }

  0000a	8b c1		 mov	 eax, ecx
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 851  : {

  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_7?$CList@VCVerticalScaleGroupData@@AAV1@@@6B@

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;

  00016	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  0001d	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00024	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0002b	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 856  : 	m_pBlocks = NULL;

  00032	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 857  : 	m_nBlockSize = nBlockSize;

  00039	c7 41 1c 0a 00
	00 00		 mov	 DWORD PTR [ecx+28], 10	; 0000000aH
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 169  : }

  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??0CVerticalScaleGroupDataList@@QAE@XZ ENDP		; CVerticalScaleGroupDataList::CVerticalScaleGroupDataList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??4CVerticalScaleGroupDataList@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
$T2 = -112						; size = 96
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
tv223 = 8						; size = 4
_vertScaleGroupData$ = 8				; size = 4
??4CVerticalScaleGroupDataList@@QAEAAV0@ABV0@@Z PROC	; CVerticalScaleGroupDataList::operator=, COMDAT
; _this$ = ecx

; 154  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??4CVerticalScaleGroupDataList@@QAEAAV0@ABV0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 64	 sub	 esp, 100		; 00000064H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$1$[ebp], ecx

; 155  : 	if(this == &vertScaleGroupData)

  0002b	8b 5d 08	 mov	 ebx, DWORD PTR _vertScaleGroupData$[ebp]
  0002e	3b cb		 cmp	 ecx, ebx
  00030	0f 84 a1 00 00
	00		 je	 $LN35@operator

; 156  : 		return *this;
; 157  : 
; 158  : 	m_nFirstIndex = vertScaleGroupData.GetFirstIndex();

  00036	8b 03		 mov	 eax, DWORD PTR [ebx]

; 159  : 	for(int nIndex = 0; nIndex < vertScaleGroupData.GetCount(); nIndex++){

  00038	33 ff		 xor	 edi, edi
  0003a	89 01		 mov	 DWORD PTR [ecx], eax
  0003c	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0003f	85 c0		 test	 eax, eax
  00041	0f 8e 90 00 00
	00		 jle	 $LN35@operator
  00047	83 c1 04	 add	 ecx, 4
  0004a	89 4d 08	 mov	 DWORD PTR tv223[ebp], ecx
  0004d	0f 1f 00	 npad	 3
$LL4@operator:

; 217  : 	POSITION pos = m_vertScaleGroupDataList.FindIndex(nIndex);

  00050	8b cf		 mov	 ecx, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00052	3b f8		 cmp	 edi, eax
  00054	7d 13		 jge	 SHORT $LN16@operator
  00056	85 ff		 test	 edi, edi
  00058	78 0f		 js	 SHORT $LN16@operator

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0005a	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]

; 1137 : 	while (nIndex--)

  0005d	74 0c		 je	 SHORT $LN12@operator
  0005f	90		 npad	 1
$LL13@operator:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00060	8b 00		 mov	 eax, DWORD PTR [eax]
  00062	83 e9 01	 sub	 ecx, 1
  00065	75 f9		 jne	 SHORT $LL13@operator

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;

  00067	eb 02		 jmp	 SHORT $LN12@operator
$LN16@operator:

; 1134 : 		return NULL;  // went too far

  00069	33 c0		 xor	 eax, eax
$LN12@operator:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp

; 219  : 	return m_vertScaleGroupDataList.GetAt(pos);

  0006b	8d 70 08	 lea	 esi, DWORD PTR [eax+8]
  0006e	56		 push	 esi
  0006f	8d 4d 90	 lea	 ecx, DWORD PTR $T2[ebp]
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CVerticalScale@@QAE@ABV0@@Z
  00078	8d 46 58	 lea	 eax, DWORD PTR [esi+88]
  0007b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00082	50		 push	 eax
  00083	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp+88]
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z

; 160  : 		m_vertScaleGroupDataList.AddTail(vertScaleGroupData.GetAt(nIndex));

  0008c	8b 4d 08	 mov	 ecx, DWORD PTR tv223[ebp]
  0008f	8d 45 90	 lea	 eax, DWORD PTR $T2[ebp]
  00092	50		 push	 eax
  00093	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0009a	e8 00 00 00 00	 call	 ?AddTail@?$CList@VCVerticalScaleGroupData@@AAV1@@@QAEPAU__POSITION@@AAVCVerticalScaleGroupData@@@Z ; CList<CVerticalScaleGroupData,CVerticalScaleGroupData &>::AddTail
  0009f	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp+88]
  000a2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000af	8d 4d 90	 lea	 ecx, DWORD PTR $T2[ebp]
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CVerticalScale@@QAE@XZ
  000b8	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  000bb	47		 inc	 edi
  000bc	3b f8		 cmp	 edi, eax
  000be	7c 90		 jl	 SHORT $LL4@operator

; 161  : 	}
; 162  : 
; 163  : 	return *this;

  000c0	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]

; 164  : }

  000c3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cd	59		 pop	 ecx
  000ce	5f		 pop	 edi
  000cf	5e		 pop	 esi
  000d0	5b		 pop	 ebx
  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c2 04 00	 ret	 4
$LN35@operator:
  000d7	8b c1		 mov	 eax, ecx
  000d9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000dc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e3	59		 pop	 ecx
  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx
  000e7	8b e5		 mov	 esp, ebp
  000e9	5d		 pop	 ebp
  000ea	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4CVerticalScaleGroupDataList@@QAEAAV0@ABV0@@Z$2:
  00000	8d 4d 90	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CVerticalScale@@QAE@XZ
__unwindfunclet$??4CVerticalScaleGroupDataList@@QAEAAV0@ABV0@@Z$0:
  00009	8d 4d 90	 lea	 ecx, DWORD PTR $T2[ebp]
  0000c	e9 00 00 00 00	 jmp	 ??1CVerticalScaleGroupData@@QAE@XZ
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
__ehhandler$??4CVerticalScaleGroupDataList@@QAEAAV0@ABV0@@Z:
  00016	90		 npad	 1
  00017	90		 npad	 1
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??4CVerticalScaleGroupDataList@@QAEAAV0@ABV0@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??4CVerticalScaleGroupDataList@@QAEAAV0@ABV0@@Z ENDP	; CVerticalScaleGroupDataList::operator=
; Function compile flags: /Ogtp
;	COMDAT ??1CVerticalScaleGroupData@@QAE@XZ
_TEXT	SEGMENT
??1CVerticalScaleGroupData@@QAE@XZ PROC			; CVerticalScaleGroupData::~CVerticalScaleGroupData, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0000c	8b ce		 mov	 ecx, esi
  0000e	5e		 pop	 esi
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CVerticalScale@@QAE@XZ
??1CVerticalScaleGroupData@@QAE@XZ ENDP			; CVerticalScaleGroupData::~CVerticalScaleGroupData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?SetVertScaleTitle@CVerticalScaleGroupData@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
_TEXT	SEGMENT
_vertScaleTitle$ = 8					; size = 4
?SetVertScaleTitle@CVerticalScaleGroupData@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC ; CVerticalScaleGroupData::SetVertScaleTitle, COMDAT
; _this$ = ecx

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 146  : 	m_strVertScaleTitle = vertScaleTitle;

  00003	83 c1 58	 add	 ecx, 88			; 00000058H

; 147  : }

  00006	5d		 pop	 ebp

; 146  : 	m_strVertScaleTitle = vertScaleTitle;

  00007	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
?SetVertScaleTitle@CVerticalScaleGroupData@@QAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CVerticalScaleGroupData::SetVertScaleTitle
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?SetVertScale@CVerticalScaleGroupData@@QAEXABVCVerticalScale@@@Z
_TEXT	SEGMENT
_vertScale$ = 8						; size = 4
?SetVertScale@CVerticalScaleGroupData@@QAEXABVCVerticalScale@@@Z PROC ; CVerticalScaleGroupData::SetVertScale, COMDAT
; _this$ = ecx

; 140  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 142  : }

  00003	5d		 pop	 ebp

; 141  : 	m_vertScale = vertScale;

  00004	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??4CVerticalScale@@QAEAAV0@ABV0@@Z
?SetVertScale@CVerticalScaleGroupData@@QAEXABVCVerticalScale@@@Z ENDP ; CVerticalScaleGroupData::SetVertScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetVertScaleTitle@CVerticalScaleGroupData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetVertScaleTitle@CVerticalScaleGroupData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ PROC ; CVerticalScaleGroupData::GetVertScaleTitle, COMDAT
; _this$ = ecx

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 136  : 	return m_strVertScaleTitle;

  00003	8d 41 58	 lea	 eax, DWORD PTR [ecx+88]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00010	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 137  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?GetVertScaleTitle@CVerticalScaleGroupData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ENDP ; CVerticalScaleGroupData::GetVertScaleTitle
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetVertScale@CVerticalScaleGroupData@@QBE?AVCVerticalScale@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetVertScale@CVerticalScaleGroupData@@QBE?AVCVerticalScale@@XZ PROC ; CVerticalScaleGroupData::GetVertScale, COMDAT
; _this$ = ecx

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 131  : 	return m_vertScale;

  00003	51		 push	 ecx
  00004	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CVerticalScale@@QAE@ABV0@@Z
  0000d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 132  : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?GetVertScale@CVerticalScaleGroupData@@QBE?AVCVerticalScale@@XZ ENDP ; CVerticalScaleGroupData::GetVertScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetVertScale@CVerticalScaleGroupData@@QAEAAVCVerticalScale@@XZ
_TEXT	SEGMENT
?GetVertScale@CVerticalScaleGroupData@@QAEAAVCVerticalScale@@XZ PROC ; CVerticalScaleGroupData::GetVertScale, COMDAT
; _this$ = ecx

; 126  : 	return m_vertScale;

  00000	8b c1		 mov	 eax, ecx

; 127  : }

  00002	c3		 ret	 0
?GetVertScale@CVerticalScaleGroupData@@QAEAAVCVerticalScale@@XZ ENDP ; CVerticalScaleGroupData::GetVertScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??0CVerticalScaleGroupData@@QAE@ABVCVerticalScale@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_vertScale$ = 8						; size = 4
_vertScaleTitle$ = 12					; size = 4
??0CVerticalScaleGroupData@@QAE@ABVCVerticalScale@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC ; CVerticalScaleGroupData::CVerticalScaleGroupData, COMDAT
; _this$ = ecx

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CVerticalScaleGroupData@@QAE@ABVCVerticalScale@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 118  : 	m_vertScale(vertScale),

  00029	ff 75 08	 push	 DWORD PTR _vertScale$[ebp]
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CVerticalScale@@QAE@ABV0@@Z

; 119  : 	m_strVertScaleTitle(vertScaleTitle)

  00032	ff 75 0c	 push	 DWORD PTR _vertScaleTitle$[ebp]
  00035	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z

; 121  : }

  00045	8b c6		 mov	 eax, esi
  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	5e		 pop	 esi
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CVerticalScaleGroupData@@QAE@ABVCVerticalScale@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CVerticalScale@@QAE@XZ
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
__ehhandler$??0CVerticalScaleGroupData@@QAE@ABVCVerticalScale@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z:
  0000e	90		 npad	 1
  0000f	90		 npad	 1
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CVerticalScaleGroupData@@QAE@ABVCVerticalScale@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CVerticalScaleGroupData@@QAE@ABVCVerticalScale@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CVerticalScaleGroupData::CVerticalScaleGroupData
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??0CVerticalScaleGroupData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CVerticalScaleGroupData@@QAE@XZ PROC			; CVerticalScaleGroupData::CVerticalScaleGroupData, COMDAT
; _this$ = ecx

; 114  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CVerticalScaleGroupData@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CVerticalScale@@QAE@XZ
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00034	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z

; 115  : }

  00044	8b c6		 mov	 eax, esi
  00046	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00049	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00050	59		 pop	 ecx
  00051	5e		 pop	 esi
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CVerticalScaleGroupData@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CVerticalScale@@QAE@XZ
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
__ehhandler$??0CVerticalScaleGroupData@@QAE@XZ:
  0000e	90		 npad	 1
  0000f	90		 npad	 1
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CVerticalScaleGroupData@@QAE@XZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CVerticalScaleGroupData@@QAE@XZ ENDP			; CVerticalScaleGroupData::CVerticalScaleGroupData
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??4CVerticalScaleGroupData@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
$T2 = -100						; size = 88
__$EHRec$ = -12						; size = 12
$T3 = 8							; size = 4
_vertScaleGroupData$ = 8				; size = 4
??4CVerticalScaleGroupData@@QAEAAV0@ABV0@@Z PROC	; CVerticalScaleGroupData::operator=, COMDAT
; _this$ = ecx

; 102  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??4CVerticalScaleGroupData@@QAEAAV0@ABV0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f1		 mov	 esi, ecx

; 103  : 	if(this == &vertScaleGroupData)

  00029	8b 7d 08	 mov	 edi, DWORD PTR _vertScaleGroupData$[ebp]
  0002c	3b f7		 cmp	 esi, edi
  0002e	74 57		 je	 SHORT $LN15@operator

; 131  : 	return m_vertScale;

  00030	57		 push	 edi
  00031	8d 4d 9c	 lea	 ecx, DWORD PTR $T2[ebp]
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CVerticalScale@@QAE@ABV0@@Z

; 104  : 		return *this;
; 105  : 
; 106  : 	m_vertScale = vertScaleGroupData.GetVertScale();

  0003a	8d 45 9c	 lea	 eax, DWORD PTR $T2[ebp]
  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00044	50		 push	 eax
  00045	8b ce		 mov	 ecx, esi
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4CVerticalScale@@QAEAAV0@ABV0@@Z
  0004d	8d 4d 9c	 lea	 ecx, DWORD PTR $T2[ebp]
  00050	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CVerticalScale@@QAE@XZ

; 136  : 	return m_strVertScaleTitle;

  0005d	8d 47 58	 lea	 eax, DWORD PTR [edi+88]
  00060	50		 push	 eax
  00061	8d 4d 08	 lea	 ecx, DWORD PTR $T3[ebp]
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z

; 107  : 	m_strVertScaleTitle = vertScaleGroupData.GetVertScaleTitle();

  0006a	8d 45 08	 lea	 eax, DWORD PTR $T3[ebp]
  0006d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00074	50		 push	 eax
  00075	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  0007e	8d 4d 08	 lea	 ecx, DWORD PTR $T3[ebp]
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN15@operator:

; 108  : 	return *this;
; 109  : }

  00087	8b c6		 mov	 eax, esi
  00089	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00093	59		 pop	 ecx
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4CVerticalScaleGroupData@@QAEAAV0@ABV0@@Z$0:
  00000	8d 4d 9c	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CVerticalScale@@QAE@XZ
__unwindfunclet$??4CVerticalScaleGroupData@@QAEAAV0@ABV0@@Z$1:
  00009	8d 4d 08	 lea	 ecx, DWORD PTR $T3[ebp]
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
__ehhandler$??4CVerticalScaleGroupData@@QAEAAV0@ABV0@@Z:
  00017	90		 npad	 1
  00018	90		 npad	 1
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??4CVerticalScaleGroupData@@QAEAAV0@ABV0@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??4CVerticalScaleGroupData@@QAEAAV0@ABV0@@Z ENDP	; CVerticalScaleGroupData::operator=
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?SetVerticalScale@CMovingGraphVertScaleData@@QAEXABVCVerticalScale@@@Z
_TEXT	SEGMENT
_verticalScale$ = 8					; size = 4
?SetVerticalScale@CMovingGraphVertScaleData@@QAEXABVCVerticalScale@@@Z PROC ; CMovingGraphVertScaleData::SetVerticalScale, COMDAT
; _this$ = ecx

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 94   : 	m_vertScale = verticalScale;

  00003	83 c1 08	 add	 ecx, 8

; 95   : }

  00006	5d		 pop	 ebp

; 94   : 	m_vertScale = verticalScale;

  00007	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??4CVerticalScale@@QAEAAV0@ABV0@@Z
?SetVerticalScale@CMovingGraphVertScaleData@@QAEXABVCVerticalScale@@@Z ENDP ; CMovingGraphVertScaleData::SetVerticalScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?SetVertScaleGroupIndex@CMovingGraphVertScaleData@@QAEXH@Z
_TEXT	SEGMENT
_nVertScaleGroupIndex$ = 8				; size = 4
?SetVertScaleGroupIndex@CMovingGraphVertScaleData@@QAEXH@Z PROC ; CMovingGraphVertScaleData::SetVertScaleGroupIndex, COMDAT
; _this$ = ecx

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   : 	m_nVertScaleGroupIndex = nVertScaleGroupIndex;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nVertScaleGroupIndex$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 90   : }

  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
?SetVertScaleGroupIndex@CMovingGraphVertScaleData@@QAEXH@Z ENDP ; CMovingGraphVertScaleData::SetVertScaleGroupIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetVerticalScale@CMovingGraphVertScaleData@@QBE?AVCVerticalScale@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetVerticalScale@CMovingGraphVertScaleData@@QBE?AVCVerticalScale@@XZ PROC ; CMovingGraphVertScaleData::GetVerticalScale, COMDAT
; _this$ = ecx

; 83   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 84   : 	return m_vertScale;

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CVerticalScale@@QAE@ABV0@@Z
  00010	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 85   : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?GetVerticalScale@CMovingGraphVertScaleData@@QBE?AVCVerticalScale@@XZ ENDP ; CMovingGraphVertScaleData::GetVerticalScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetVertScaleGroupIndex@CMovingGraphVertScaleData@@QBEHXZ
_TEXT	SEGMENT
?GetVertScaleGroupIndex@CMovingGraphVertScaleData@@QBEHXZ PROC ; CMovingGraphVertScaleData::GetVertScaleGroupIndex, COMDAT
; _this$ = ecx

; 79   : 	return m_nVertScaleGroupIndex;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 80   : }

  00002	c3		 ret	 0
?GetVertScaleGroupIndex@CMovingGraphVertScaleData@@QBEHXZ ENDP ; CMovingGraphVertScaleData::GetVertScaleGroupIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??0CMovingGraphVertScaleData@@QAE@HABVCVerticalScale@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nVertScaleGroupIndex$ = 8				; size = 4
_verticalScale$ = 12					; size = 4
??0CMovingGraphVertScaleData@@QAE@HABVCVerticalScale@@@Z PROC ; CMovingGraphVertScaleData::CMovingGraphVertScaleData, COMDAT
; _this$ = ecx

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 72   : 	m_nVertScaleGroupIndex(nVertScaleGroupIndex),

  00004	8b 45 08	 mov	 eax, DWORD PTR _nVertScaleGroupIndex$[ebp]
  00007	56		 push	 esi

; 73   : 	m_vertScale(verticalScale)

  00008	ff 75 0c	 push	 DWORD PTR _verticalScale$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00010	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00013	89 06		 mov	 DWORD PTR [esi], eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CVerticalScale@@QAE@ABV0@@Z

; 75   : }

  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
??0CMovingGraphVertScaleData@@QAE@HABVCVerticalScale@@@Z ENDP ; CMovingGraphVertScaleData::CMovingGraphVertScaleData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??0CMovingGraphVertScaleData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMovingGraphVertScaleData@@QAE@XZ PROC		; CMovingGraphVertScaleData::CMovingGraphVertScaleData, COMDAT
; _this$ = ecx

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CVerticalScale@@QAE@XZ

; 69   : }

  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??0CMovingGraphVertScaleData@@QAE@XZ ENDP		; CMovingGraphVertScaleData::CMovingGraphVertScaleData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?SetHorizontalScale@CInsertingBlockHorzScaleData@@QAEXABVCHorizontalScale@@@Z
_TEXT	SEGMENT
_horzScale$ = 8						; size = 4
?SetHorizontalScale@CInsertingBlockHorzScaleData@@QAEXABVCHorizontalScale@@@Z PROC ; CInsertingBlockHorzScaleData::SetHorizontalScale, COMDAT
; _this$ = ecx

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 59   : 	m_horzScale = horzScale;

  00003	83 c1 04	 add	 ecx, 4

; 60   : }

  00006	5d		 pop	 ebp

; 59   : 	m_horzScale = horzScale;

  00007	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??4CHorizontalScale@@QAEAAV0@ABV0@@Z
?SetHorizontalScale@CInsertingBlockHorzScaleData@@QAEXABVCHorizontalScale@@@Z ENDP ; CInsertingBlockHorzScaleData::SetHorizontalScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?SetOnlyBottomBlockShow@CInsertingBlockHorzScaleData@@QAEX_N@Z
_TEXT	SEGMENT
_bOnlyBottomBlockShow$ = 8				; size = 1
?SetOnlyBottomBlockShow@CInsertingBlockHorzScaleData@@QAEX_N@Z PROC ; CInsertingBlockHorzScaleData::SetOnlyBottomBlockShow, COMDAT
; _this$ = ecx

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 54   : 	m_bOnlyBottomBlockShow = bOnlyBottomBlockShow;

  00003	8a 45 08	 mov	 al, BYTE PTR _bOnlyBottomBlockShow$[ebp]
  00006	88 01		 mov	 BYTE PTR [ecx], al

; 55   : }

  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
?SetOnlyBottomBlockShow@CInsertingBlockHorzScaleData@@QAEX_N@Z ENDP ; CInsertingBlockHorzScaleData::SetOnlyBottomBlockShow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetHorizontalScale@CInsertingBlockHorzScaleData@@QAEAAVCHorizontalScale@@XZ
_TEXT	SEGMENT
?GetHorizontalScale@CInsertingBlockHorzScaleData@@QAEAAVCHorizontalScale@@XZ PROC ; CInsertingBlockHorzScaleData::GetHorizontalScale, COMDAT
; _this$ = ecx

; 49   : 	return m_horzScale;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 50   : }

  00003	c3		 ret	 0
?GetHorizontalScale@CInsertingBlockHorzScaleData@@QAEAAVCHorizontalScale@@XZ ENDP ; CInsertingBlockHorzScaleData::GetHorizontalScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?GetHorizontalScale@CInsertingBlockHorzScaleData@@QBE?AVCHorizontalScale@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetHorizontalScale@CInsertingBlockHorzScaleData@@QBE?AVCHorizontalScale@@XZ PROC ; CInsertingBlockHorzScaleData::GetHorizontalScale, COMDAT
; _this$ = ecx

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 44   : 	return m_horzScale;

  00003	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CHorizontalScale@@QAE@ABV0@@Z
  00010	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 45   : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?GetHorizontalScale@CInsertingBlockHorzScaleData@@QBE?AVCHorizontalScale@@XZ ENDP ; CInsertingBlockHorzScaleData::GetHorizontalScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?IsOnlyBottomBlockShow@CInsertingBlockHorzScaleData@@QBE_NXZ
_TEXT	SEGMENT
?IsOnlyBottomBlockShow@CInsertingBlockHorzScaleData@@QBE_NXZ PROC ; CInsertingBlockHorzScaleData::IsOnlyBottomBlockShow, COMDAT
; _this$ = ecx

; 39   : 	return m_bOnlyBottomBlockShow;

  00000	8a 01		 mov	 al, BYTE PTR [ecx]

; 40   : }

  00002	c3		 ret	 0
?IsOnlyBottomBlockShow@CInsertingBlockHorzScaleData@@QBE_NXZ ENDP ; CInsertingBlockHorzScaleData::IsOnlyBottomBlockShow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??0CInsertingBlockHorzScaleData@@QAE@_NABVCHorizontalScale@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bOnlyBottomBlockShow$ = 8				; size = 1
_horzScale$ = 12					; size = 4
??0CInsertingBlockHorzScaleData@@QAE@_NABVCHorizontalScale@@@Z PROC ; CInsertingBlockHorzScaleData::CInsertingBlockHorzScaleData, COMDAT
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 32   : 	m_bOnlyBottomBlockShow(bOnlyBottomBlockShow),

  00004	8a 45 08	 mov	 al, BYTE PTR _bOnlyBottomBlockShow$[ebp]
  00007	56		 push	 esi

; 33   : 	m_horzScale(horzScale)

  00008	ff 75 0c	 push	 DWORD PTR _horzScale$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00010	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00013	88 06		 mov	 BYTE PTR [esi], al
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CHorizontalScale@@QAE@ABV0@@Z

; 35   : }

  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
??0CInsertingBlockHorzScaleData@@QAE@_NABVCHorizontalScale@@@Z ENDP ; CInsertingBlockHorzScaleData::CInsertingBlockHorzScaleData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??0CInsertingBlockHorzScaleData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CInsertingBlockHorzScaleData@@QAE@XZ PROC		; CInsertingBlockHorzScaleData::CInsertingBlockHorzScaleData, COMDAT
; _this$ = ecx

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0000d	c6 06 00	 mov	 BYTE PTR [esi], 0
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CHorizontalScale@@QAE@XZ

; 29   : }

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??0CInsertingBlockHorzScaleData@@QAE@XZ ENDP		; CInsertingBlockHorzScaleData::CInsertingBlockHorzScaleData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ??4CInsertingBlockHorzScaleData@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
$T2 = -112						; size = 100
__$EHRec$ = -12						; size = 12
_data$ = 8						; size = 4
??4CInsertingBlockHorzScaleData@@QAEAAV0@ABV0@@Z PROC	; CInsertingBlockHorzScaleData::operator=, COMDAT
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??4CInsertingBlockHorzScaleData@@QAEAAV0@ABV0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 64	 sub	 esp, 100		; 00000064H
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx

; 18   : 	if(this == &data)

  00028	8b 4d 08	 mov	 ecx, DWORD PTR _data$[ebp]
  0002b	3b f1		 cmp	 esi, ecx
  0002d	74 2e		 je	 SHORT $LN10@operator

; 19   : 		return *this;
; 20   : 
; 21   : 	m_bOnlyBottomBlockShow = data.IsOnlyBottomBlockShow();

  0002f	8a 01		 mov	 al, BYTE PTR [ecx]
  00031	88 06		 mov	 BYTE PTR [esi], al

; 44   : 	return m_horzScale;

  00033	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00036	50		 push	 eax
  00037	8d 4d 90	 lea	 ecx, DWORD PTR $T2[ebp]
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CHorizontalScale@@QAE@ABV0@@Z

; 22   : 	m_horzScale = data.GetHorizontalScale();

  00040	8d 45 90	 lea	 eax, DWORD PTR $T2[ebp]
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	50		 push	 eax
  0004b	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4CHorizontalScale@@QAEAAV0@ABV0@@Z
  00054	8d 4d 90	 lea	 ecx, DWORD PTR $T2[ebp]
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CHorizontalScale@@QAE@XZ
$LN10@operator:

; 23   : 	return *this;
; 24   : }

  0005d	8b c6		 mov	 eax, esi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5e		 pop	 esi
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4CInsertingBlockHorzScaleData@@QAEAAV0@ABV0@@Z$0:
  00000	8d 4d 90	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CHorizontalScale@@QAE@XZ
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
__ehhandler$??4CInsertingBlockHorzScaleData@@QAEAAV0@ABV0@@Z:
  0000e	90		 npad	 1
  0000f	90		 npad	 1
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a 94	 mov	 ecx, DWORD PTR [edx-108]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??4CInsertingBlockHorzScaleData@@QAEAAV0@ABV0@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??4CInsertingBlockHorzScaleData@@QAEAAV0@ABV0@@Z ENDP	; CInsertingBlockHorzScaleData::operator=
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z PROC		; CObject::Dump, COMDAT
; _this$ = ecx

; 122  : 	{ /* no dumping in release builds */ }

  00000	c2 04 00	 ret	 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z ENDP		; CObject::Dump
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT
?AssertValid@CObject@@UBEXXZ PROC			; CObject::AssertValid, COMDAT
; _this$ = ecx

; 120  : 	{ /* no asserts in release builds */ }

  00000	c2 00 00	 ret	 0
?AssertValid@CObject@@UBEXXZ ENDP			; CObject::AssertValid
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z PROC		; CObject::Serialize, COMDAT
; _this$ = ecx

; 106  : 	{ /* CObject does not serialize anything by default */ }

  00000	c2 04 00	 ret	 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z ENDP		; CObject::Serialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT
??1CObject@@UAE@XZ PROC					; CObject::~CObject, COMDAT
; _this$ = ecx

; 104  : 	{ }

  00000	c2 00 00	 ret	 0
??1CObject@@UAE@XZ ENDP					; CObject::~CObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\ScaleDataList.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
