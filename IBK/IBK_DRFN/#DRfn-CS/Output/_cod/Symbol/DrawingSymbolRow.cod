; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30145.0 

	TITLE	D:\git\src\IBK\IBK_DRFN\#DRfn-CS\_Obj\Symbol\DrawingSymbolRow.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1CObject@@UAE@XZ				; CObject::~CObject
PUBLIC	?Serialize@CObject@@UAEXAAVCArchive@@@Z		; CObject::Serialize
PUBLIC	?AssertValid@CObject@@UBEXXZ			; CObject::AssertValid
PUBLIC	?Dump@CObject@@UBEXAAVCDumpContext@@@Z		; CObject::Dump
PUBLIC	??0?$CList@PAVCDrawingSymbol@@PAV1@@@QAE@H@Z	; CList<CDrawingSymbol *,CDrawingSymbol *>::CList<CDrawingSymbol *,CDrawingSymbol *>
PUBLIC	?AddTail@?$CList@PAVCDrawingSymbol@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingSymbol@@@Z ; CList<CDrawingSymbol *,CDrawingSymbol *>::AddTail
PUBLIC	?RemoveAll@?$CList@PAVCDrawingSymbol@@PAV1@@@QAEXXZ ; CList<CDrawingSymbol *,CDrawingSymbol *>::RemoveAll
PUBLIC	?RemoveAt@?$CList@PAVCDrawingSymbol@@PAV1@@@QAEXPAU__POSITION@@@Z ; CList<CDrawingSymbol *,CDrawingSymbol *>::RemoveAt
PUBLIC	?FindIndex@?$CList@PAVCDrawingSymbol@@PAV1@@@QBEPAU__POSITION@@H@Z ; CList<CDrawingSymbol *,CDrawingSymbol *>::FindIndex
PUBLIC	?NewNode@?$CList@PAVCDrawingSymbol@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<CDrawingSymbol *,CDrawingSymbol *>::NewNode
PUBLIC	?FreeNode@?$CList@PAVCDrawingSymbol@@PAV1@@@IAEXPAUCNode@1@@Z ; CList<CDrawingSymbol *,CDrawingSymbol *>::FreeNode
PUBLIC	??1?$CList@PAVCDrawingSymbol@@PAV1@@@UAE@XZ	; CList<CDrawingSymbol *,CDrawingSymbol *>::~CList<CDrawingSymbol *,CDrawingSymbol *>
PUBLIC	?Serialize@?$CList@PAVCDrawingSymbol@@PAV1@@@UAEXAAVCArchive@@@Z ; CList<CDrawingSymbol *,CDrawingSymbol *>::Serialize
PUBLIC	??_G?$CList@PAVCDrawingSymbol@@PAV1@@@UAEPAXI@Z	; CList<CDrawingSymbol *,CDrawingSymbol *>::`scalar deleting destructor'
PUBLIC	?GetElementList@CDrawingSymbolRow@@QAEXAAV?$CList@PAVCDrawingSymbol@@PAV1@@@@Z ; CDrawingSymbolRow::GetElementList
PUBLIC	??0CDrawingSymbolRow@@QAE@XZ			; CDrawingSymbolRow::CDrawingSymbolRow
PUBLIC	??1CDrawingSymbolRow@@UAE@XZ			; CDrawingSymbolRow::~CDrawingSymbolRow
PUBLIC	?Add@CDrawingSymbolRow@@QAEPAVCDrawingSymbol@@PAV2@@Z ; CDrawingSymbolRow::Add
PUBLIC	?Find@CDrawingSymbolRow@@QAEPAVCDrawingSymbol@@ABVCPoint@@HHPAUIChartManager133101@@@Z ; CDrawingSymbolRow::Find
PUBLIC	?GetTail@CDrawingSymbolRow@@QAEPAVCDrawingSymbol@@XZ ; CDrawingSymbolRow::GetTail
PUBLIC	?DeleteCurrentDrawingSymbol@CDrawingSymbolRow@@QAE_NPBVCDrawingSymbol@@@Z ; CDrawingSymbolRow::DeleteCurrentDrawingSymbol
PUBLIC	?DeleteCurrentDrawingSymbol@CDrawingSymbolRow@@QAE_NJH@Z ; CDrawingSymbolRow::DeleteCurrentDrawingSymbol
PUBLIC	?DeleteAllDrawingSymbol@CDrawingSymbolRow@@QAEXXZ ; CDrawingSymbolRow::DeleteAllDrawingSymbol
PUBLIC	?GetCount@CDrawingSymbolRow@@QAEHXZ		; CDrawingSymbolRow::GetCount
PUBLIC	?GetGraphRegion@CDrawingSymbolRow@@QAE?AVCRect@@HHABVCRegion_AllBlock@@@Z ; CDrawingSymbolRow::GetGraphRegion
PUBLIC	?GetAt@CDrawingSymbolRow@@QAEPAVCDrawingSymbol@@H@Z ; CDrawingSymbolRow::GetAt
PUBLIC	?GetSavedSymbolsData@CDrawingSymbolRow@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCOrder@@@Z ; CDrawingSymbolRow::GetSavedSymbolsData
PUBLIC	?OnDraw@CDrawingSymbolRow@@QAEXPAVCDC@@PAUIChartManager133101@@PAVCDrawingSymbol@@HHABVCRegion_AllBlock@@@Z ; CDrawingSymbolRow::OnDraw
PUBLIC	?CopyElement@CDrawingSymbolRow@@QAEJPAVCDrawingSymbol@@@Z ; CDrawingSymbolRow::CopyElement
PUBLIC	?MoveElement@CDrawingSymbolRow@@QAEJPAVCDrawingSymbol@@@Z ; CDrawingSymbolRow::MoveElement
PUBLIC	?ChangeAllSymbolsColor@CDrawingSymbolRow@@QAEXABK0@Z ; CDrawingSymbolRow::ChangeAllSymbolsColor
PUBLIC	?IsInSameSymbol@CDrawingSymbolRow@@QBE_NPBVCDrawingSymbol@@@Z ; CDrawingSymbolRow::IsInSameSymbol
PUBLIC	??_GCDrawingSymbolRow@@UAEPAXI@Z		; CDrawingSymbolRow::`scalar deleting destructor'
PUBLIC	??$SerializeElements@PAVCDrawingSymbol@@@@YGXAAVCArchive@@PAPAVCDrawingSymbol@@H@Z ; SerializeElements<CDrawingSymbol *>
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R3CObject@@8					; CObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObject@@8					; CObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CObject@@8			; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$CList@PAVCDrawingSymbol@@PAV1@@@6B@	; CList<CDrawingSymbol *,CDrawingSymbol *>::`vftable'
PUBLIC	??_7CDrawingSymbolRow@@6B@			; CDrawingSymbolRow::`vftable'
PUBLIC	??_R4?$CList@PAVCDrawingSymbol@@PAV1@@@6B@	; CList<CDrawingSymbol *,CDrawingSymbol *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CList@PAVCDrawingSymbol@@PAV1@@@@8	; CList<CDrawingSymbol *,CDrawingSymbol *> `RTTI Type Descriptor'
PUBLIC	??_R3?$CList@PAVCDrawingSymbol@@PAV1@@@8	; CList<CDrawingSymbol *,CDrawingSymbol *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CList@PAVCDrawingSymbol@@PAV1@@@8	; CList<CDrawingSymbol *,CDrawingSymbol *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CList@PAVCDrawingSymbol@@PAV1@@@8 ; CList<CDrawingSymbol *,CDrawingSymbol *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CDrawingSymbolRow@@6B@			; CDrawingSymbolRow::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDrawingSymbolRow@@@8			; CDrawingSymbolRow `RTTI Type Descriptor'
PUBLIC	??_R3CDrawingSymbolRow@@8			; CDrawingSymbolRow::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDrawingSymbolRow@@8			; CDrawingSymbolRow::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDrawingSymbolRow@@8		; CDrawingSymbolRow::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@fff0000000000000
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	?__global_delete@@YAXPAXI@Z:PROC		; __global_delete
EXTRN	___std_terminate:PROC
EXTRN	?AfxThrowInvalidArgException@@YGXXZ:PROC	; AfxThrowInvalidArgException
EXTRN	?AfxThrowArchiveException@@YGXHPBD@Z:PROC	; AfxThrowArchiveException
EXTRN	?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ:PROC ; CObject::GetRuntimeClass
EXTRN	?Read@CArchive@@QAEIPAXI@Z:PROC			; CArchive::Read
EXTRN	?Write@CArchive@@QAEXPBXI@Z:PROC		; CArchive::Write
EXTRN	?ReadCount@CArchive@@QAEKXZ:PROC		; CArchive::ReadCount
EXTRN	?WriteCount@CArchive@@QAEXK@Z:PROC		; CArchive::WriteCount
EXTRN	?Create@CPlex@@SGPAU1@AAPAU1@II@Z:PROC		; CPlex::Create
EXTRN	?FreeDataChain@CPlex@@QAEXXZ:PROC		; CPlex::FreeDataChain
EXTRN	??_E?$CList@PAVCDrawingSymbol@@PAV1@@@UAEPAXI@Z:PROC ; CList<CDrawingSymbol *,CDrawingSymbol *>::`vector deleting destructor'
EXTRN	??_ECDrawingSymbolRow@@UAEPAXI@Z:PROC		; CDrawingSymbolRow::`vector deleting destructor'
EXTRN	??0CCoordinateCalculatorData@@QAE@PAUIChartManager133101@@@Z:PROC ; CCoordinateCalculatorData::CCoordinateCalculatorData
EXTRN	??1CCoordinateCalculatorData@@QAE@XZ:PROC	; CCoordinateCalculatorData::~CCoordinateCalculatorData
EXTRN	?GetDisplayDataMin_ScaleType@CCoordinateCalculatorData@@QBENXZ:PROC ; CCoordinateCalculatorData::GetDisplayDataMin_ScaleType
EXTRN	?GetDisplayDataMax_ScaleType@CCoordinateCalculatorData@@QBENXZ:PROC ; CCoordinateCalculatorData::GetDisplayDataMax_ScaleType
EXTRN	?GetCoordinateCalculatorData@CCoordinateCalculatorData@@QAEXABVCPoint@@@Z:PROC ; CCoordinateCalculatorData::GetCoordinateCalculatorData
EXTRN	?GetCoordinateCalculatorData@CCoordinateCalculatorData@@QAEXABVCBlockIndex@@@Z:PROC ; CCoordinateCalculatorData::GetCoordinateCalculatorData
EXTRN	?SetTextColor@CDrawingSymbol@@QAEXABK@Z:PROC	; CDrawingSymbol::SetTextColor
EXTRN	?SetColor@CDrawingSymbol@@QAEXABK@Z:PROC	; CDrawingSymbol::SetColor
EXTRN	?Copy@CDrawingSymbolFactory@@SAPAVCDrawingSymbol@@PAV2@@Z:PROC ; CDrawingSymbolFactory::Copy
EXTRN	?Remove@CDrawingSymbolFactory@@SAXPAVCDrawingSymbol@@@Z:PROC ; CDrawingSymbolFactory::Remove
EXTRN	??0CRegion_AllBlock@@QAE@XZ:PROC		; CRegion_AllBlock::CRegion_AllBlock
EXTRN	??1CRegion_AllBlock@@UAE@XZ:PROC		; CRegion_AllBlock::~CRegion_AllBlock
EXTRN	?SetDrawingRegions@CRegion_AllBlock@@QAEXPAUIChartManager133101@@@Z:PROC ; CRegion_AllBlock::SetDrawingRegions
EXTRN	?GetBlockRegion@CRegion_AllBlock@@QBE?AVCRect@@HH@Z:PROC ; CRegion_AllBlock::GetBlockRegion
EXTRN	?GetSavedSymbolsData@CElementSaverBuilder@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCOrder@@PAV?$CList@PAVCDrawingSymbol@@PAV1@@@@Z:PROC ; CElementSaverBuilder::GetSavedSymbolsData
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@fff0000000000000
CONST	SEGMENT
__real@fff0000000000000 DQ 0fff0000000000000r	; -inf
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CDrawingSymbolRow@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDrawingSymbolRow@@8 DD FLAT:??_R0?AVCDrawingSymbolRow@@@8 ; CDrawingSymbolRow::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDrawingSymbolRow@@8
rdata$r	ENDS
;	COMDAT ??_R2CDrawingSymbolRow@@8
rdata$r	SEGMENT
??_R2CDrawingSymbolRow@@8 DD FLAT:??_R1A@?0A@EA@CDrawingSymbolRow@@8 ; CDrawingSymbolRow::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CDrawingSymbolRow@@8
rdata$r	SEGMENT
??_R3CDrawingSymbolRow@@8 DD 00H			; CDrawingSymbolRow::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CDrawingSymbolRow@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDrawingSymbolRow@@@8
data$rs	SEGMENT
??_R0?AVCDrawingSymbolRow@@@8 DD FLAT:??_7type_info@@6B@ ; CDrawingSymbolRow `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDrawingSymbolRow@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CDrawingSymbolRow@@6B@
rdata$r	SEGMENT
??_R4CDrawingSymbolRow@@6B@ DD 00H			; CDrawingSymbolRow::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDrawingSymbolRow@@@8
	DD	FLAT:??_R3CDrawingSymbolRow@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CList@PAVCDrawingSymbol@@PAV1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CList@PAVCDrawingSymbol@@PAV1@@@8 DD FLAT:??_R0?AV?$CList@PAVCDrawingSymbol@@PAV1@@@@8 ; CList<CDrawingSymbol *,CDrawingSymbol *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CList@PAVCDrawingSymbol@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CList@PAVCDrawingSymbol@@PAV1@@@8
rdata$r	SEGMENT
??_R2?$CList@PAVCDrawingSymbol@@PAV1@@@8 DD FLAT:??_R1A@?0A@EA@?$CList@PAVCDrawingSymbol@@PAV1@@@8 ; CList<CDrawingSymbol *,CDrawingSymbol *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CList@PAVCDrawingSymbol@@PAV1@@@8
rdata$r	SEGMENT
??_R3?$CList@PAVCDrawingSymbol@@PAV1@@@8 DD 00H		; CList<CDrawingSymbol *,CDrawingSymbol *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CList@PAVCDrawingSymbol@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CList@PAVCDrawingSymbol@@PAV1@@@@8
data$rs	SEGMENT
??_R0?AV?$CList@PAVCDrawingSymbol@@PAV1@@@@8 DD FLAT:??_7type_info@@6B@ ; CList<CDrawingSymbol *,CDrawingSymbol *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CList@PAVCDrawingSymbol@@PAV1@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CList@PAVCDrawingSymbol@@PAV1@@@6B@
rdata$r	SEGMENT
??_R4?$CList@PAVCDrawingSymbol@@PAV1@@@6B@ DD 00H	; CList<CDrawingSymbol *,CDrawingSymbol *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CList@PAVCDrawingSymbol@@PAV1@@@@8
	DD	FLAT:??_R3?$CList@PAVCDrawingSymbol@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_7CDrawingSymbolRow@@6B@
CONST	SEGMENT
??_7CDrawingSymbolRow@@6B@ DD FLAT:??_R4CDrawingSymbolRow@@6B@ ; CDrawingSymbolRow::`vftable'
	DD	FLAT:??_ECDrawingSymbolRow@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CList@PAVCDrawingSymbol@@PAV1@@@6B@
CONST	SEGMENT
??_7?$CList@PAVCDrawingSymbol@@PAV1@@@6B@ DD FLAT:??_R4?$CList@PAVCDrawingSymbol@@PAV1@@@6B@ ; CList<CDrawingSymbol *,CDrawingSymbol *>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CList@PAVCDrawingSymbol@@PAV1@@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CList@PAVCDrawingSymbol@@PAV1@@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CObject@@8
rdata$r	SEGMENT
??_R2CObject@@8 DD FLAT:??_R1A@?0A@EA@CObject@@8	; CObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObject@@8
rdata$r	SEGMENT
??_R3CObject@@8 DD 00H					; CObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
data$rs	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
data$rs	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GCDrawingSymbolRow@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:___std_terminate
__ehfuncinfo$??_GCDrawingSymbolRow@@UAEPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_GCDrawingSymbolRow@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnDraw@CDrawingSymbolRow@@QAEXPAVCDC@@PAUIChartManager133101@@PAVCDrawingSymbol@@HHABVCRegion_AllBlock@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnDraw@CDrawingSymbolRow@@QAEXPAVCDC@@PAUIChartManager133101@@PAVCDrawingSymbol@@HHABVCRegion_AllBlock@@@Z$0
__ehfuncinfo$?OnDraw@CDrawingSymbolRow@@QAEXPAVCDC@@PAUIChartManager133101@@PAVCDrawingSymbol@@HHABVCRegion_AllBlock@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnDraw@CDrawingSymbolRow@@QAEXPAVCDC@@PAUIChartManager133101@@PAVCDrawingSymbol@@HHABVCRegion_AllBlock@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Find@CDrawingSymbolRow@@QAEPAVCDrawingSymbol@@ABVCPoint@@HHPAUIChartManager133101@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Find@CDrawingSymbolRow@@QAEPAVCDrawingSymbol@@ABVCPoint@@HHPAUIChartManager133101@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Find@CDrawingSymbolRow@@QAEPAVCDrawingSymbol@@ABVCPoint@@HHPAUIChartManager133101@@@Z$1
__ehfuncinfo$?Find@CDrawingSymbolRow@@QAEPAVCDrawingSymbol@@ABVCPoint@@HHPAUIChartManager133101@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Find@CDrawingSymbolRow@@QAEPAVCDrawingSymbol@@ABVCPoint@@HHPAUIChartManager133101@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CDrawingSymbolRow@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1CDrawingSymbolRow@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CDrawingSymbolRow@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CDrawingSymbolRow@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CDrawingSymbolRow@@QAE@XZ$0
__ehfuncinfo$??0CDrawingSymbolRow@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CDrawingSymbolRow@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$CList@PAVCDrawingSymbol@@PAV1@@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_G?$CList@PAVCDrawingSymbol@@PAV1@@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$CList@PAVCDrawingSymbol@@PAV1@@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CList@PAVCDrawingSymbol@@PAV1@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@PAVCDrawingSymbol@@@@YGXAAVCArchive@@PAPAVCDrawingSymbol@@H@Z
_TEXT	SEGMENT
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@PAVCDrawingSymbol@@@@YGXAAVCArchive@@PAPAVCDrawingSymbol@@H@Z PROC ; SerializeElements<CDrawingSymbol *>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR _nCount$[ebp]
  0000b	57		 push	 edi
  0000c	85 f6		 test	 esi, esi
  0000e	74 08		 je	 SHORT $LN2@SerializeE
  00010	85 c9		 test	 ecx, ecx
  00012	0f 84 89 00 00
	00		 je	 $LN34@SerializeE
$LN2@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00018	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  0001b	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0001e	f7 d0		 not	 eax
  00020	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00022	74 3c		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;
; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )

  00024	85 f6		 test	 esi, esi
  00026	74 31		 je	 SHORT $LN8@SerializeE
  00028	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL5@SerializeE:

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00030	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00035	3b f3		 cmp	 esi, ebx
  00037	0f 42 de	 cmovb	 ebx, esi

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0003a	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
  00041	57		 push	 edi
  00042	51		 push	 ecx
  00043	8b ca		 mov	 ecx, edx
  00045	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;
; 87   : 			pData += nElementsToWrite;

  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  00050	03 cf		 add	 ecx, edi
  00052	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  00055	2b f3		 sub	 esi, ebx
  00057	75 d7		 jne	 SHORT $LL5@SerializeE
$LN8@SerializeE:
  00059	5f		 pop	 edi

; 105  : 		}
; 106  : 	}
; 107  : }

  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	5d		 pop	 ebp
  0005d	c2 0c 00	 ret	 12			; 0000000cH
$LN10@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  00060	85 f6		 test	 esi, esi
  00062	74 f5		 je	 SHORT $LN8@SerializeE
$LL7@SerializeE:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00064	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00069	3b f7		 cmp	 esi, edi
  0006b	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0006e	8d 1c bd 00 00
	00 00		 lea	 ebx, DWORD PTR [edi*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00075	53		 push	 ebx
  00076	51		 push	 ecx
  00077	8b ca		 mov	 ecx, edx
  00079	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0007e	3b c3		 cmp	 eax, ebx
  00080	75 16		 jne	 SHORT $LN23@SerializeE
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  00082	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00085	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;
; 104  : 			pData += nElementsToRead;

  00088	03 cb		 add	 ecx, ebx
  0008a	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  0008d	2b f7		 sub	 esi, edi
  0008f	75 d3		 jne	 SHORT $LL7@SerializeE

; 105  : 		}
; 106  : 	}
; 107  : }

  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	5d		 pop	 ebp
  00095	c2 0c 00	 ret	 12			; 0000000cH
$LN23@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 402  : 		AfxThrowArchiveException(CArchiveException::endOfFile);

  00098	6a 00		 push	 0
  0009a	6a 03		 push	 3
  0009c	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN34@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  000a1	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN32@SerializeE:
  000a6	cc		 int	 3
??$SerializeElements@PAVCDrawingSymbol@@@@YGXAAVCArchive@@PAPAVCDrawingSymbol@@H@Z ENDP ; SerializeElements<CDrawingSymbol *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??_GCDrawingSymbolRow@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GCDrawingSymbolRow@@UAEPAXI@Z PROC			; CDrawingSymbolRow::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_GCDrawingSymbolRow@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp

; 194  : 	if(m_Symbol_List.GetCount() <= 0)

  00026	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0

; 41   : {

  0002a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00031	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CDrawingSymbolRow@@6B@

; 194  : 	if(m_Symbol_List.GetCount() <= 0)

  00037	7e 48		 jle	 SHORT $LN36@scalar

; 195  : 		return;
; 196  : 
; 197  : 	POSITION pos = m_Symbol_List.GetHeadPosition();

  00039	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 198  : 	while(pos) {

  0003c	85 ff		 test	 edi, edi
  0003e	74 16		 je	 SHORT $LN17@scalar
$LL8@scalar:

; 199  : 		CDrawingSymbol* pSymbol = m_Symbol_List.GetNext(pos);

  00040	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00043	8b 3f		 mov	 edi, DWORD PTR [edi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp

; 200  : 		if(pSymbol != NULL)

  00045	85 c0		 test	 eax, eax
  00047	74 09		 je	 SHORT $LN11@scalar

; 201  : 			CDrawingSymbolFactory::Remove(pSymbol);

  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?Remove@CDrawingSymbolFactory@@SAXPAVCDrawingSymbol@@@Z ; CDrawingSymbolFactory::Remove
  0004f	83 c4 04	 add	 esp, 4
$LN11@scalar:

; 198  : 	while(pos) {

  00052	85 ff		 test	 edi, edi
  00054	75 ea		 jne	 SHORT $LL8@scalar
$LN17@scalar:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00056	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00059	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00060	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00067	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0006e	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00075	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0007a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN36@scalar:

; 872  : 	m_pBlocks->FreeDataChain();

  00081	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]

; 878  : {

  00084	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00088	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$CList@PAVCDrawingSymbol@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  0008f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00096	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0009d	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  000a4	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 872  : 	m_pBlocks->FreeDataChain();

  000ab	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain
  000b0	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 873  : 	m_pBlocks = NULL;

  000b4	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  000bb	74 0b		 je	 SHORT $LN42@scalar
  000bd	6a 20		 push	 32			; 00000020H
  000bf	56		 push	 esi
  000c0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000c5	83 c4 08	 add	 esp, 8
$LN42@scalar:
  000c8	8b c6		 mov	 eax, esi
  000ca	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000cd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d4	59		 pop	 ecx
  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c2 04 00	 ret	 4
  000dd	cc		 int	 3
  000de	cc		 int	 3
  000df	cc		 int	 3
  000e0	cc		 int	 3
  000e1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_GCDrawingSymbolRow@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GCDrawingSymbolRow@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GCDrawingSymbolRow@@UAEPAXI@Z ENDP			; CDrawingSymbolRow::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
;	COMDAT ?IsInSameSymbol@CDrawingSymbolRow@@QBE_NPBVCDrawingSymbol@@@Z
_TEXT	SEGMENT
_pSymbol$ = 8						; size = 4
?IsInSameSymbol@CDrawingSymbolRow@@QBE_NPBVCDrawingSymbol@@@Z PROC ; CDrawingSymbolRow::IsInSameSymbol, COMDAT
; _this$ = ecx

; 243  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 244  : 	POSITION pos = m_Symbol_List.GetHeadPosition();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 245  : 	while(pos)

  00006	85 c0		 test	 eax, eax
  00008	74 11		 je	 SHORT $LN3@IsInSameSy
  0000a	8b 55 08	 mov	 edx, DWORD PTR _pSymbol$[ebp]
  0000d	0f 1f 00	 npad	 3
$LL2@IsInSameSy:

; 247  : 		if(pSymbol == m_Symbol_List.GetNext(pos))

  00010	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 819  : 		rPosition = (POSITION) pNode->pNext;

  00013	8b 00		 mov	 eax, DWORD PTR [eax]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp

; 247  : 		if(pSymbol == m_Symbol_List.GetNext(pos))

  00015	74 0a		 je	 SHORT $LN9@IsInSameSy

; 245  : 	while(pos)

  00017	85 c0		 test	 eax, eax
  00019	75 f5		 jne	 SHORT $LL2@IsInSameSy
$LN3@IsInSameSy:

; 249  : 	}
; 250  : 	return false;

  0001b	32 c0		 xor	 al, al

; 251  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN9@IsInSameSy:

; 248  : 			return true;

  00021	b0 01		 mov	 al, 1

; 251  : }

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
?IsInSameSymbol@CDrawingSymbolRow@@QBE_NPBVCDrawingSymbol@@@Z ENDP ; CDrawingSymbolRow::IsInSameSymbol
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
;	COMDAT ?ChangeAllSymbolsColor@CDrawingSymbolRow@@QAEXABK0@Z
_TEXT	SEGMENT
_penColor$ = 8						; size = 4
_textColor$ = 12					; size = 4
?ChangeAllSymbolsColor@CDrawingSymbolRow@@QAEXABK0@Z PROC ; CDrawingSymbolRow::ChangeAllSymbolsColor, COMDAT
; _this$ = ecx

; 230  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 231  : 	POSITION pos = m_Symbol_List.GetHeadPosition();

  00004	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]

; 232  : 	while(pos) {

  00007	85 f6		 test	 esi, esi
  00009	74 26		 je	 SHORT $LN3@ChangeAllS
  0000b	53		 push	 ebx
  0000c	8b 5d 0c	 mov	 ebx, DWORD PTR _textColor$[ebp]
  0000f	57		 push	 edi
$LL2@ChangeAllS:

; 233  : 		CDrawingSymbol* pSymbol = m_Symbol_List.GetNext(pos);

  00010	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00013	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp

; 234  : 		if(pSymbol != NULL)

  00015	85 ff		 test	 edi, edi
  00017	74 12		 je	 SHORT $LN4@ChangeAllS

; 235  : 		{
; 236  : 			pSymbol->SetColor(penColor);

  00019	ff 75 08	 push	 DWORD PTR _penColor$[ebp]
  0001c	8b cf		 mov	 ecx, edi
  0001e	e8 00 00 00 00	 call	 ?SetColor@CDrawingSymbol@@QAEXABK@Z ; CDrawingSymbol::SetColor

; 237  : 			pSymbol->SetTextColor(textColor);

  00023	53		 push	 ebx
  00024	8b cf		 mov	 ecx, edi
  00026	e8 00 00 00 00	 call	 ?SetTextColor@CDrawingSymbol@@QAEXABK@Z ; CDrawingSymbol::SetTextColor
$LN4@ChangeAllS:

; 232  : 	while(pos) {

  0002b	85 f6		 test	 esi, esi
  0002d	75 e1		 jne	 SHORT $LL2@ChangeAllS
  0002f	5f		 pop	 edi
  00030	5b		 pop	 ebx
$LN3@ChangeAllS:
  00031	5e		 pop	 esi

; 238  : 		}
; 239  : 	}
; 240  : }

  00032	5d		 pop	 ebp
  00033	c2 08 00	 ret	 8
?ChangeAllSymbolsColor@CDrawingSymbolRow@@QAEXABK0@Z ENDP ; CDrawingSymbolRow::ChangeAllSymbolsColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
;	COMDAT ?MoveElement@CDrawingSymbolRow@@QAEJPAVCDrawingSymbol@@@Z
_TEXT	SEGMENT
_pSelected$ = 8						; size = 4
?MoveElement@CDrawingSymbolRow@@QAEJPAVCDrawingSymbol@@@Z PROC ; CDrawingSymbolRow::MoveElement, COMDAT
; _this$ = ecx

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  : 	long lAddress = 0;
; 115  : 	POSITION pos = m_Symbol_List.GetHeadPosition();

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	56		 push	 esi

; 116  : 	while(pos) 

  00007	8b 75 08	 mov	 esi, DWORD PTR _pSelected$[ebp]
  0000a	57		 push	 edi
  0000b	33 ff		 xor	 edi, edi
  0000d	85 d2		 test	 edx, edx
  0000f	74 11		 je	 SHORT $LN15@MoveElemen
$LL2@MoveElemen:

; 117  : 	{
; 118  : 		CDrawingSymbol* pSymbol = m_Symbol_List.GetNext(pos);

  00011	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00014	8b 12		 mov	 edx, DWORD PTR [edx]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp

; 119  : 		if(pSymbol == NULL)

  00016	85 c0		 test	 eax, eax
  00018	74 30		 je	 SHORT $LN11@MoveElemen

; 121  : 
; 122  : 		if(pSymbol == pSelected)

  0001a	3b c6		 cmp	 eax, esi
  0001c	74 15		 je	 SHORT $LN12@MoveElemen

; 116  : 	while(pos) 

  0001e	85 d2		 test	 edx, edx
  00020	75 ef		 jne	 SHORT $LL2@MoveElemen
$LN15@MoveElemen:

; 130  : 		m_Symbol_List.AddTail(pSelected);

  00022	56		 push	 esi
  00023	83 c1 04	 add	 ecx, 4
  00026	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCDrawingSymbol@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingSymbol@@@Z ; CList<CDrawingSymbol *,CDrawingSymbol *>::AddTail
$LN6@MoveElemen:

; 131  : 	return lAddress;

  0002b	8b c7		 mov	 eax, edi
  0002d	5f		 pop	 edi

; 132  : }

  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
$LN12@MoveElemen:

; 123  : 		{
; 124  : 			lAddress = (long)pSelected;			

  00033	8b fe		 mov	 edi, esi

; 125  : 			break;
; 126  : 		}
; 127  : 	}
; 128  : 
; 129  : 	if(lAddress == 0)

  00035	85 f6		 test	 esi, esi
  00037	75 f2		 jne	 SHORT $LN6@MoveElemen

; 130  : 		m_Symbol_List.AddTail(pSelected);

  00039	56		 push	 esi
  0003a	83 c1 04	 add	 ecx, 4
  0003d	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCDrawingSymbol@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingSymbol@@@Z ; CList<CDrawingSymbol *,CDrawingSymbol *>::AddTail

; 131  : 	return lAddress;

  00042	8b c7		 mov	 eax, edi
  00044	5f		 pop	 edi

; 132  : }

  00045	5e		 pop	 esi
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
$LN11@MoveElemen:
  0004a	5f		 pop	 edi

; 120  : 			return lAddress;

  0004b	33 c0		 xor	 eax, eax

; 132  : }

  0004d	5e		 pop	 esi
  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
?MoveElement@CDrawingSymbolRow@@QAEJPAVCDrawingSymbol@@@Z ENDP ; CDrawingSymbolRow::MoveElement
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
;	COMDAT ?CopyElement@CDrawingSymbolRow@@QAEJPAVCDrawingSymbol@@@Z
_TEXT	SEGMENT
_pSelected$ = 8						; size = 4
?CopyElement@CDrawingSymbolRow@@QAEJPAVCDrawingSymbol@@@Z PROC ; CDrawingSymbolRow::CopyElement, COMDAT
; _this$ = ecx

; 92   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
  00006	56		 push	 esi
  00007	57		 push	 edi

; 93   : 	long lAddress = 0;

  00008	33 ff		 xor	 edi, edi

; 94   : 	POSITION pos = m_Symbol_List.GetHeadPosition();

  0000a	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]

; 95   : 	while(pos) 

  0000d	85 d2		 test	 edx, edx
  0000f	74 14		 je	 SHORT $LN3@CopyElemen
  00011	8b 75 08	 mov	 esi, DWORD PTR _pSelected$[ebp]
$LL2@CopyElemen:

; 96   : 	{
; 97   : 		CDrawingSymbol* pSymbol = m_Symbol_List.GetNext(pos);

  00014	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00017	8b 12		 mov	 edx, DWORD PTR [edx]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp

; 98   : 		if(pSymbol == NULL)

  00019	85 c0		 test	 eax, eax
  0001b	74 2e		 je	 SHORT $LN10@CopyElemen

; 99   : 			return lAddress;
; 100  : 
; 101  : 		if(pSymbol == pSelected)

  0001d	3b c6		 cmp	 eax, esi
  0001f	74 0d		 je	 SHORT $LN11@CopyElemen

; 95   : 	while(pos) 

  00021	85 d2		 test	 edx, edx
  00023	75 ef		 jne	 SHORT $LL2@CopyElemen
$LN3@CopyElemen:

; 106  : 			break;
; 107  : 		}
; 108  : 	}
; 109  : 	return lAddress;

  00025	8b c7		 mov	 eax, edi
  00027	5f		 pop	 edi

; 110  : }

  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
$LN11@CopyElemen:

; 102  : 		{
; 103  : 			CDrawingSymbol *pNewDrawingSymbol = CDrawingSymbolFactory::Copy(pSelected);

  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?Copy@CDrawingSymbolFactory@@SAPAVCDrawingSymbol@@PAV2@@Z ; CDrawingSymbolFactory::Copy
  00034	83 c4 04	 add	 esp, 4

; 104  : 			lAddress = (long)pNewDrawingSymbol;
; 105  : 			m_Symbol_List.AddTail(pNewDrawingSymbol);			

  00037	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0003a	8b f8		 mov	 edi, eax
  0003c	57		 push	 edi
  0003d	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCDrawingSymbol@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingSymbol@@@Z ; CList<CDrawingSymbol *,CDrawingSymbol *>::AddTail

; 106  : 			break;
; 107  : 		}
; 108  : 	}
; 109  : 	return lAddress;

  00042	8b c7		 mov	 eax, edi
  00044	5f		 pop	 edi

; 110  : }

  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN10@CopyElemen:
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	33 c0		 xor	 eax, eax
  0004f	5b		 pop	 ebx
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?CopyElement@CDrawingSymbolRow@@QAEJPAVCDrawingSymbol@@@Z ENDP ; CDrawingSymbolRow::CopyElement
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\BlockBaseData.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
;	COMDAT ?OnDraw@CDrawingSymbolRow@@QAEXPAVCDC@@PAUIChartManager133101@@PAVCDrawingSymbol@@HHABVCRegion_AllBlock@@@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -144					; size = 4
_drawingRegions$GSCopy$1$ = -140			; size = 4
tv198 = -136						; size = 8
tv191 = -136						; size = 8
$T2 = -136						; size = 8
_calData$ = -128					; size = 96
_rcRegion$ = -32					; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pDC$ = 8						; size = 4
_pMainBlock$ = 12					; size = 4
_pSelected$ = 16					; size = 4
_nColumn$ = 20						; size = 4
_nRow$ = 24						; size = 4
_drawingRegions$ = 28					; size = 4
?OnDraw@CDrawingSymbolRow@@QAEXPAVCDC@@PAUIChartManager133101@@PAVCDrawingSymbol@@HHABVCRegion_AllBlock@@@Z PROC ; CDrawingSymbolRow::OnDraw, COMDAT
; _this$ = ecx

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnDraw@CDrawingSymbolRow@@QAEXPAVCDC@@PAUIChartManager133101@@PAVCDrawingSymbol@@HHABVCRegion_AllBlock@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00034	8b 4d 1c	 mov	 ecx, DWORD PTR _drawingRegions$[ebp]
  00037	8b 45 0c	 mov	 eax, DWORD PTR _pMainBlock$[ebp]
  0003a	8b 5d 08	 mov	 ebx, DWORD PTR _pDC$[ebp]
  0003d	8b 75 14	 mov	 esi, DWORD PTR _nColumn$[ebp]
  00040	8b 7d 18	 mov	 edi, DWORD PTR _nRow$[ebp]
  00043	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _drawingRegions$GSCopy$1$[ebp], ecx

; 73   : 	CCoordinateCalculatorData calData( pMainBlock);

  00049	8d 4d 80	 lea	 ecx, DWORD PTR _calData$[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ??0CCoordinateCalculatorData@@QAE@PAUIChartManager133101@@@Z ; CCoordinateCalculatorData::CCoordinateCalculatorData

; 74   : 	calData.GetCoordinateCalculatorData( CBlockIndex(nRow, nColumn));

  00052	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00058	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005f	50		 push	 eax
  00060	8d 4d 80	 lea	 ecx, DWORD PTR _calData$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\BlockBaseData.h

; 20   : 	CBlockIndex(const int row, const int column) { m_nRow = row; m_nColumn = column; };

  00063	89 bd 78 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], edi
  00069	89 b5 7c ff ff
	ff		 mov	 DWORD PTR $T2[ebp+4], esi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp

; 74   : 	calData.GetCoordinateCalculatorData( CBlockIndex(nRow, nColumn));

  0006f	e8 00 00 00 00	 call	 ?GetCoordinateCalculatorData@CCoordinateCalculatorData@@QAEXABVCBlockIndex@@@Z ; CCoordinateCalculatorData::GetCoordinateCalculatorData

; 75   : 
; 76   : 	// (2007/5/10 - Seung-Won, Bae) Check No Y Scale Min/Max.
; 77   : 	if( -HUGE_VAL == calData.GetDisplayDataMax_ScaleType() || -HUGE_VAL == calData.GetDisplayDataMin_ScaleType()) return;

  00074	8d 4d 80	 lea	 ecx, DWORD PTR _calData$[ebp]
  00077	e8 00 00 00 00	 call	 ?GetDisplayDataMax_ScaleType@CCoordinateCalculatorData@@QBENXZ ; CCoordinateCalculatorData::GetDisplayDataMax_ScaleType
  0007c	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@fff0000000000000
  00084	dd 9d 78 ff ff
	ff		 fstp	 QWORD PTR tv198[ebp]
  0008a	66 0f 2e 85 78
	ff ff ff	 ucomisd xmm0, QWORD PTR tv198[ebp]
  00092	9f		 lahf
  00093	f6 c4 44	 test	 ah, 68			; 00000044H
  00096	7b 79		 jnp	 SHORT $LN22@OnDraw
  00098	8d 4d 80	 lea	 ecx, DWORD PTR _calData$[ebp]
  0009b	e8 00 00 00 00	 call	 ?GetDisplayDataMin_ScaleType@CCoordinateCalculatorData@@QBENXZ ; CCoordinateCalculatorData::GetDisplayDataMin_ScaleType
  000a0	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@fff0000000000000
  000a8	dd 9d 78 ff ff
	ff		 fstp	 QWORD PTR tv191[ebp]
  000ae	66 0f 2e 85 78
	ff ff ff	 ucomisd xmm0, QWORD PTR tv191[ebp]
  000b6	9f		 lahf
  000b7	f6 c4 44	 test	 ah, 68			; 00000044H
  000ba	7b 55		 jnp	 SHORT $LN22@OnDraw

; 189  : 	return drawingRegions.GetBlockRegion(nColumn, nRow);

  000bc	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _drawingRegions$GSCopy$1$[ebp]
  000c2	8d 45 e0	 lea	 eax, DWORD PTR _rcRegion$[ebp]
  000c5	57		 push	 edi
  000c6	56		 push	 esi
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 ?GetBlockRegion@CRegion_AllBlock@@QBE?AVCRect@@HH@Z ; CRegion_AllBlock::GetBlockRegion

; 78   : 
; 79   : 	CRect rcRegion = GetGraphRegion(nColumn, nRow, drawingRegions);
; 80   : 	POSITION pos = m_Symbol_List.GetHeadPosition();

  000cd	8b bd 70 ff ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
  000d3	8b 7f 08	 mov	 edi, DWORD PTR [edi+8]

; 81   : 	while(pos) {

  000d6	85 ff		 test	 edi, edi
  000d8	74 37		 je	 SHORT $LN22@OnDraw
  000da	66 0f 1f 44 00
	00		 npad	 6
$LL2@OnDraw:

; 82   : 		CDrawingSymbol* pSymbol = m_Symbol_List.GetNext(pos);

  000e0	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  000e3	8b 3f		 mov	 edi, DWORD PTR [edi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp

; 83   : 		if(pSymbol == NULL)

  000e5	85 f6		 test	 esi, esi
  000e7	74 28		 je	 SHORT $LN22@OnDraw

; 84   : 			return;
; 85   : 		pSymbol->Draw(pDC, rcRegion, calData);

  000e9	8b 06		 mov	 eax, DWORD PTR [esi]
  000eb	8d 4d 80	 lea	 ecx, DWORD PTR _calData$[ebp]
  000ee	51		 push	 ecx
  000ef	8d 4d e0	 lea	 ecx, DWORD PTR _rcRegion$[ebp]
  000f2	51		 push	 ecx
  000f3	53		 push	 ebx
  000f4	8b ce		 mov	 ecx, esi
  000f6	ff 10		 call	 DWORD PTR [eax]

; 86   : 		if(pSymbol == pSelected)

  000f8	3b 75 10	 cmp	 esi, DWORD PTR _pSelected$[ebp]
  000fb	75 10		 jne	 SHORT $LN7@OnDraw

; 87   : 			pSymbol->DrawSelectedMark(pDC, rcRegion, calData);

  000fd	8b 06		 mov	 eax, DWORD PTR [esi]
  000ff	8d 4d 80	 lea	 ecx, DWORD PTR _calData$[ebp]
  00102	51		 push	 ecx
  00103	8d 4d e0	 lea	 ecx, DWORD PTR _rcRegion$[ebp]
  00106	51		 push	 ecx
  00107	53		 push	 ebx
  00108	8b ce		 mov	 ecx, esi
  0010a	ff 50 04	 call	 DWORD PTR [eax+4]
$LN7@OnDraw:

; 81   : 	while(pos) {

  0010d	85 ff		 test	 edi, edi
  0010f	75 cf		 jne	 SHORT $LL2@OnDraw
$LN22@OnDraw:

; 88   : 	}
; 89   : }

  00111	8d 4d 80	 lea	 ecx, DWORD PTR _calData$[ebp]
  00114	e8 00 00 00 00	 call	 ??1CCoordinateCalculatorData@@QAE@XZ ; CCoordinateCalculatorData::~CCoordinateCalculatorData
  00119	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0011c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00123	59		 pop	 ecx
  00124	5f		 pop	 edi
  00125	5e		 pop	 esi
  00126	5b		 pop	 ebx
  00127	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012a	33 cd		 xor	 ecx, ebp
  0012c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00131	8b e5		 mov	 esp, ebp
  00133	5d		 pop	 ebp
  00134	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnDraw@CDrawingSymbolRow@@QAEXPAVCDC@@PAUIChartManager133101@@PAVCDrawingSymbol@@HHABVCRegion_AllBlock@@@Z$0:
  00000	8d 4d 80	 lea	 ecx, DWORD PTR _calData$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CCoordinateCalculatorData@@QAE@XZ ; CCoordinateCalculatorData::~CCoordinateCalculatorData
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?OnDraw@CDrawingSymbolRow@@QAEXPAVCDC@@PAUIChartManager133101@@PAVCDrawingSymbol@@HHABVCRegion_AllBlock@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 6c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-148]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnDraw@CDrawingSymbolRow@@QAEXPAVCDC@@PAUIChartManager133101@@PAVCDrawingSymbol@@HHABVCRegion_AllBlock@@@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnDraw@CDrawingSymbolRow@@QAEXPAVCDC@@PAUIChartManager133101@@PAVCDrawingSymbol@@HHABVCRegion_AllBlock@@@Z ENDP ; CDrawingSymbolRow::OnDraw
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
;	COMDAT ?GetSavedSymbolsData@CDrawingSymbolRow@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCOrder@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_order$ = 12						; size = 4
_save$ = 15						; size = 1
?GetSavedSymbolsData@CDrawingSymbolRow@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCOrder@@@Z PROC ; CDrawingSymbolRow::GetSavedSymbolsData, COMDAT
; _this$ = ecx

; 208  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 209  : 	CElementSaverBuilder save;
; 210  : 	return save.GetSavedSymbolsData(order, &m_Symbol_List);

  00003	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00006	50		 push	 eax
  00007	ff 75 0c	 push	 DWORD PTR _order$[ebp]
  0000a	8d 4d 0f	 lea	 ecx, DWORD PTR _save$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00010	e8 00 00 00 00	 call	 ?GetSavedSymbolsData@CElementSaverBuilder@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCOrder@@PAV?$CList@PAVCDrawingSymbol@@PAV1@@@@Z ; CElementSaverBuilder::GetSavedSymbolsData
  00015	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 211  : }

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?GetSavedSymbolsData@CDrawingSymbolRow@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCOrder@@@Z ENDP ; CDrawingSymbolRow::GetSavedSymbolsData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
;	COMDAT ?GetAt@CDrawingSymbolRow@@QAEPAVCDrawingSymbol@@H@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?GetAt@CDrawingSymbolRow@@QAEPAVCDrawingSymbol@@H@Z PROC ; CDrawingSymbolRow::GetAt, COMDAT
; _this$ = ecx

; 214  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 215  : 	if(nIndex < 0 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	79 06		 jns	 SHORT $LN2@GetAt

; 216  : 		return NULL;

  0000a	33 c0		 xor	 eax, eax

; 219  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
$LN2@GetAt:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00010	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  00013	7d 19		 jge	 SHORT $LN8@GetAt

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  00015	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 1137 : 	while (nIndex--)

  00018	85 c0		 test	 eax, eax
  0001a	74 14		 je	 SHORT $LN4@GetAt
  0001c	0f 1f 40 00	 npad	 4
$LL5@GetAt:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00020	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00022	83 e8 01	 sub	 eax, 1
  00025	75 f9		 jne	 SHORT $LL5@GetAt
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp

; 218  : 	return m_Symbol_List.GetAt(m_Symbol_List.FindIndex(nIndex));

  00027	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 219  : }

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
$LN8@GetAt:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1134 : 		return NULL;  // went too far

  0002e	33 c9		 xor	 ecx, ecx
$LN4@GetAt:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp

; 218  : 	return m_Symbol_List.GetAt(m_Symbol_List.FindIndex(nIndex));

  00030	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 219  : }

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?GetAt@CDrawingSymbolRow@@QAEPAVCDrawingSymbol@@H@Z ENDP ; CDrawingSymbolRow::GetAt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
;	COMDAT ?GetGraphRegion@CDrawingSymbolRow@@QAE?AVCRect@@HHABVCRegion_AllBlock@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_nColumn$ = 12						; size = 4
_nRow$ = 16						; size = 4
_drawingRegions$ = 20					; size = 4
?GetGraphRegion@CDrawingSymbolRow@@QAE?AVCRect@@HHABVCRegion_AllBlock@@@Z PROC ; CDrawingSymbolRow::GetGraphRegion, COMDAT
; _this$ = ecx

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 189  : 	return drawingRegions.GetBlockRegion(nColumn, nRow);

  00003	ff 75 10	 push	 DWORD PTR _nRow$[ebp]
  00006	8b 4d 14	 mov	 ecx, DWORD PTR _drawingRegions$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR _nColumn$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetBlockRegion@CRegion_AllBlock@@QBE?AVCRect@@HH@Z ; CRegion_AllBlock::GetBlockRegion
  00014	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 190  : }

  00017	5d		 pop	 ebp
  00018	c2 10 00	 ret	 16			; 00000010H
?GetGraphRegion@CDrawingSymbolRow@@QAE?AVCRect@@HHABVCRegion_AllBlock@@@Z ENDP ; CDrawingSymbolRow::GetGraphRegion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
;	COMDAT ?GetCount@CDrawingSymbolRow@@QAEHXZ
_TEXT	SEGMENT
?GetCount@CDrawingSymbolRow@@QAEHXZ PROC		; CDrawingSymbolRow::GetCount, COMDAT
; _this$ = ecx

; 184  : 	return m_Symbol_List.GetCount();

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 185  : }

  00003	c3		 ret	 0
?GetCount@CDrawingSymbolRow@@QAEHXZ ENDP		; CDrawingSymbolRow::GetCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
;	COMDAT ?DeleteAllDrawingSymbol@CDrawingSymbolRow@@QAEXXZ
_TEXT	SEGMENT
?DeleteAllDrawingSymbol@CDrawingSymbolRow@@QAEXXZ PROC	; CDrawingSymbolRow::DeleteAllDrawingSymbol, COMDAT
; _this$ = ecx

; 193  : {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 194  : 	if(m_Symbol_List.GetCount() <= 0)

  00003	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00007	7e 4a		 jle	 SHORT $LN1@DeleteAllD

; 195  : 		return;
; 196  : 
; 197  : 	POSITION pos = m_Symbol_List.GetHeadPosition();

  00009	56		 push	 esi
  0000a	8b 77 08	 mov	 esi, DWORD PTR [edi+8]

; 198  : 	while(pos) {

  0000d	85 f6		 test	 esi, esi
  0000f	74 16		 je	 SHORT $LN11@DeleteAllD
$LL2@DeleteAllD:

; 199  : 		CDrawingSymbol* pSymbol = m_Symbol_List.GetNext(pos);

  00011	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00014	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp

; 200  : 		if(pSymbol != NULL)

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN5@DeleteAllD

; 201  : 			CDrawingSymbolFactory::Remove(pSymbol);

  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ?Remove@CDrawingSymbolFactory@@SAXPAVCDrawingSymbol@@@Z ; CDrawingSymbolFactory::Remove
  00020	83 c4 04	 add	 esp, 4
$LN5@DeleteAllD:

; 198  : 	while(pos) {

  00023	85 f6		 test	 esi, esi
  00025	75 ea		 jne	 SHORT $LL2@DeleteAllD
$LN11@DeleteAllD:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00027	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  0002a	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00031	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00038	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  0003f	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00046	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0004b	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  00052	5e		 pop	 esi
$LN1@DeleteAllD:
  00053	5f		 pop	 edi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp

; 205  : }

  00054	c3		 ret	 0
?DeleteAllDrawingSymbol@CDrawingSymbolRow@@QAEXXZ ENDP	; CDrawingSymbolRow::DeleteAllDrawingSymbol
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
;	COMDAT ?DeleteCurrentDrawingSymbol@CDrawingSymbolRow@@QAE_NJH@Z
_TEXT	SEGMENT
_lAddressSymbol$ = 8					; size = 4
_bListOnly$ = 12					; size = 4
?DeleteCurrentDrawingSymbol@CDrawingSymbolRow@@QAE_NJH@Z PROC ; CDrawingSymbolRow::DeleteCurrentDrawingSymbol, COMDAT
; _this$ = ecx

; 159  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 160  : 	if(m_Symbol_List.GetCount() <= 0)

  00007	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0000b	7e 19		 jle	 SHORT $LN3@DeleteCurr

; 161  : 		return false;
; 162  : 
; 163  : 	long lTempAddress = 0;
; 164  : 	POSITION pos = m_Symbol_List.GetHeadPosition();

  0000d	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 165  : 	while(pos) 

  00010	85 d2		 test	 edx, edx
  00012	74 12		 je	 SHORT $LN3@DeleteCurr
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _lAddressSymbol$[ebp]
$LL2@DeleteCurr:

; 166  : 	{
; 167  : 		POSITION tmp = pos;
; 168  : 		CDrawingSymbol* pSymbol = m_Symbol_List.GetNext(pos);

  00017	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001a	8b fa		 mov	 edi, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  0001c	8b 12		 mov	 edx, DWORD PTR [edx]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp

; 170  : 		if(lTempAddress == lAddressSymbol) 

  0001e	3b c1		 cmp	 eax, ecx
  00020	74 0c		 je	 SHORT $LN11@DeleteCurr

; 165  : 	while(pos) 

  00022	85 d2		 test	 edx, edx
  00024	75 f1		 jne	 SHORT $LL2@DeleteCurr
$LN3@DeleteCurr:
  00026	5f		 pop	 edi

; 177  : 		}
; 178  : 	}
; 179  : 	return false;

  00027	32 c0		 xor	 al, al

; 180  : }

  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
$LN11@DeleteCurr:

; 171  : 		{
; 172  : 			if(bListOnly == FALSE)

  0002e	83 7d 0c 00	 cmp	 DWORD PTR _bListOnly$[ebp], 0
  00032	75 09		 jne	 SHORT $LN6@DeleteCurr

; 173  : 				CDrawingSymbolFactory::Remove(pSymbol);

  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?Remove@CDrawingSymbolFactory@@SAXPAVCDrawingSymbol@@@Z ; CDrawingSymbolFactory::Remove
  0003a	83 c4 04	 add	 esp, 4
$LN6@DeleteCurr:

; 174  : 			//delete pSymbol;
; 175  : 			m_Symbol_List.RemoveAt(tmp);

  0003d	57		 push	 edi
  0003e	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00041	e8 00 00 00 00	 call	 ?RemoveAt@?$CList@PAVCDrawingSymbol@@PAV1@@@QAEXPAU__POSITION@@@Z ; CList<CDrawingSymbol *,CDrawingSymbol *>::RemoveAt
  00046	5f		 pop	 edi

; 176  : 			return true;

  00047	b0 01		 mov	 al, 1

; 180  : }

  00049	5e		 pop	 esi
  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
?DeleteCurrentDrawingSymbol@CDrawingSymbolRow@@QAE_NJH@Z ENDP ; CDrawingSymbolRow::DeleteCurrentDrawingSymbol
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
;	COMDAT ?DeleteCurrentDrawingSymbol@CDrawingSymbolRow@@QAE_NPBVCDrawingSymbol@@@Z
_TEXT	SEGMENT
_pDrawingSymbol$ = 8					; size = 4
?DeleteCurrentDrawingSymbol@CDrawingSymbolRow@@QAE_NPBVCDrawingSymbol@@@Z PROC ; CDrawingSymbolRow::DeleteCurrentDrawingSymbol, COMDAT
; _this$ = ecx

; 140  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 141  : 	if(m_Symbol_List.GetCount() <= 0)

  00007	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0000b	7e 19		 jle	 SHORT $LN3@DeleteCurr

; 142  : 		return false;
; 143  : 
; 144  : 	POSITION pos = m_Symbol_List.GetHeadPosition();

  0000d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 145  : 	while(pos) {

  00010	85 c0		 test	 eax, eax
  00012	74 12		 je	 SHORT $LN3@DeleteCurr
  00014	8b 55 08	 mov	 edx, DWORD PTR _pDrawingSymbol$[ebp]
$LL2@DeleteCurr:

; 146  : 		POSITION tmp = pos;
; 147  : 		CDrawingSymbol* pSymbol = m_Symbol_List.GetNext(pos);

  00017	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001a	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  0001c	8b 00		 mov	 eax, DWORD PTR [eax]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp

; 148  : 		if(pSymbol == pDrawingSymbol) {

  0001e	3b ca		 cmp	 ecx, edx
  00020	74 0c		 je	 SHORT $LN10@DeleteCurr

; 145  : 	while(pos) {

  00022	85 c0		 test	 eax, eax
  00024	75 f1		 jne	 SHORT $LL2@DeleteCurr
$LN3@DeleteCurr:
  00026	5f		 pop	 edi

; 153  : 		}
; 154  : 	}
; 155  : 	return false;

  00027	32 c0		 xor	 al, al

; 156  : }

  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
$LN10@DeleteCurr:

; 149  : 			CDrawingSymbolFactory::Remove(pSymbol);

  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ?Remove@CDrawingSymbolFactory@@SAXPAVCDrawingSymbol@@@Z ; CDrawingSymbolFactory::Remove
  00034	83 c4 04	 add	 esp, 4

; 150  : 			//delete pSymbol;
; 151  : 			m_Symbol_List.RemoveAt(tmp);

  00037	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0003a	57		 push	 edi
  0003b	e8 00 00 00 00	 call	 ?RemoveAt@?$CList@PAVCDrawingSymbol@@PAV1@@@QAEXPAU__POSITION@@@Z ; CList<CDrawingSymbol *,CDrawingSymbol *>::RemoveAt
  00040	5f		 pop	 edi

; 152  : 			return true;

  00041	b0 01		 mov	 al, 1

; 156  : }

  00043	5e		 pop	 esi
  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
?DeleteCurrentDrawingSymbol@CDrawingSymbolRow@@QAE_NPBVCDrawingSymbol@@@Z ENDP ; CDrawingSymbolRow::DeleteCurrentDrawingSymbol
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
;	COMDAT ?GetTail@CDrawingSymbolRow@@QAEPAVCDrawingSymbol@@XZ
_TEXT	SEGMENT
?GetTail@CDrawingSymbolRow@@QAEPAVCDrawingSymbol@@XZ PROC ; CDrawingSymbolRow::GetTail, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 797  : 	{ ENSURE(m_pNodeTail != NULL);

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	85 c0		 test	 eax, eax
  00005	0f 84 00 00 00
	00		 je	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp

; 137  : }

  0000b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000e	c3		 ret	 0
?GetTail@CDrawingSymbolRow@@QAEPAVCDrawingSymbol@@XZ ENDP ; CDrawingSymbolRow::GetTail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
;	COMDAT ?Find@CDrawingSymbolRow@@QAEPAVCDrawingSymbol@@ABVCPoint@@HHPAUIChartManager133101@@@Z
_TEXT	SEGMENT
_drawingRegions$ = -168					; size = 32
_nColumn$GSCopy$1$ = -136				; size = 4
_nRow$GSCopy$1$ = -132					; size = 4
_calData$ = -128					; size = 96
$T2 = -32						; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_point$ = 8						; size = 4
_nColumn$ = 12						; size = 4
_nRow$ = 16						; size = 4
_pMainBlock$ = 20					; size = 4
?Find@CDrawingSymbolRow@@QAEPAVCDrawingSymbol@@ABVCPoint@@HHPAUIChartManager133101@@@Z PROC ; CDrawingSymbolRow::Find, COMDAT
; _this$ = ecx

; 52   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Find@CDrawingSymbolRow@@QAEPAVCDrawingSymbol@@ABVCPoint@@HHPAUIChartManager133101@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 9c 00 00
	00		 sub	 esp, 156		; 0000009cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b f9		 mov	 edi, ecx
  00030	8b 45 0c	 mov	 eax, DWORD PTR _nColumn$[ebp]

; 53   : 	CRegion_AllBlock drawingRegions;

  00033	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _drawingRegions$[ebp]
  00039	8b 5d 08	 mov	 ebx, DWORD PTR _point$[ebp]
  0003c	8b 75 14	 mov	 esi, DWORD PTR _pMainBlock$[ebp]
  0003f	89 85 78 ff ff
	ff		 mov	 DWORD PTR _nColumn$GSCopy$1$[ebp], eax
  00045	8b 45 10	 mov	 eax, DWORD PTR _nRow$[ebp]
  00048	89 85 7c ff ff
	ff		 mov	 DWORD PTR _nRow$GSCopy$1$[ebp], eax
  0004e	e8 00 00 00 00	 call	 ??0CRegion_AllBlock@@QAE@XZ ; CRegion_AllBlock::CRegion_AllBlock

; 54   : 	drawingRegions.SetDrawingRegions(pMainBlock);

  00053	56		 push	 esi
  00054	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _drawingRegions$[ebp]
  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00061	e8 00 00 00 00	 call	 ?SetDrawingRegions@CRegion_AllBlock@@QAEXPAUIChartManager133101@@@Z ; CRegion_AllBlock::SetDrawingRegions

; 55   : 
; 56   : 	CCoordinateCalculatorData calData( pMainBlock);

  00066	56		 push	 esi
  00067	8d 4d 80	 lea	 ecx, DWORD PTR _calData$[ebp]
  0006a	e8 00 00 00 00	 call	 ??0CCoordinateCalculatorData@@QAE@PAUIChartManager133101@@@Z ; CCoordinateCalculatorData::CCoordinateCalculatorData

; 57   : 	calData.GetCoordinateCalculatorData( point);

  0006f	53		 push	 ebx
  00070	8d 4d 80	 lea	 ecx, DWORD PTR _calData$[ebp]
  00073	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00077	e8 00 00 00 00	 call	 ?GetCoordinateCalculatorData@CCoordinateCalculatorData@@QAEXABVCPoint@@@Z ; CCoordinateCalculatorData::GetCoordinateCalculatorData

; 58   : 
; 59   : 	POSITION pos = m_Symbol_List.GetHeadPosition();

  0007c	8b 77 08	 mov	 esi, DWORD PTR [edi+8]

; 60   : 	while(pos) {

  0007f	85 f6		 test	 esi, esi
  00081	74 3e		 je	 SHORT $LN3@Find
$LL2@Find:

; 61   : 		CDrawingSymbol* pSymbol = m_Symbol_List.GetNext(pos);

  00083	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00086	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp

; 62   : 		if(pSymbol == NULL)

  00088	85 ff		 test	 edi, edi
  0008a	74 35		 je	 SHORT $LN3@Find

; 189  : 	return drawingRegions.GetBlockRegion(nColumn, nRow);

  0008c	ff b5 7c ff ff
	ff		 push	 DWORD PTR _nRow$GSCopy$1$[ebp]
  00092	8d 45 e0	 lea	 eax, DWORD PTR $T2[ebp]
  00095	ff b5 78 ff ff
	ff		 push	 DWORD PTR _nColumn$GSCopy$1$[ebp]
  0009b	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _drawingRegions$[ebp]
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ?GetBlockRegion@CRegion_AllBlock@@QBE?AVCRect@@HH@Z ; CRegion_AllBlock::GetBlockRegion

; 63   : 			return NULL;
; 64   : 
; 65   : 		if(pSymbol->IsSelected(GetGraphRegion(nColumn, nRow, drawingRegions), point, calData))

  000a7	8b 07		 mov	 eax, DWORD PTR [edi]
  000a9	8d 4d 80	 lea	 ecx, DWORD PTR _calData$[ebp]
  000ac	51		 push	 ecx
  000ad	53		 push	 ebx
  000ae	8d 4d e0	 lea	 ecx, DWORD PTR $T2[ebp]
  000b1	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  000b4	51		 push	 ecx
  000b5	8b cf		 mov	 ecx, edi
  000b7	ff d0		 call	 eax
  000b9	84 c0		 test	 al, al
  000bb	75 06		 jne	 SHORT $LN10@Find

; 60   : 	while(pos) {

  000bd	85 f6		 test	 esi, esi
  000bf	75 c2		 jne	 SHORT $LL2@Find
$LN3@Find:

; 66   : 			return pSymbol; 
; 67   : 	}
; 68   : 	return NULL;

  000c1	33 ff		 xor	 edi, edi
$LN10@Find:
  000c3	8d 4d 80	 lea	 ecx, DWORD PTR _calData$[ebp]
  000c6	e8 00 00 00 00	 call	 ??1CCoordinateCalculatorData@@QAE@XZ ; CCoordinateCalculatorData::~CCoordinateCalculatorData
  000cb	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _drawingRegions$[ebp]
  000d1	e8 00 00 00 00	 call	 ??1CRegion_AllBlock@@UAE@XZ ; CRegion_AllBlock::~CRegion_AllBlock
  000d6	8b c7		 mov	 eax, edi

; 69   : }

  000d8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000db	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e2	59		 pop	 ecx
  000e3	5f		 pop	 edi
  000e4	5e		 pop	 esi
  000e5	5b		 pop	 ebx
  000e6	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e9	33 cd		 xor	 ecx, ebp
  000eb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Find@CDrawingSymbolRow@@QAEPAVCDrawingSymbol@@ABVCPoint@@HHPAUIChartManager133101@@@Z$0:
  00000	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _drawingRegions$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CRegion_AllBlock@@UAE@XZ ; CRegion_AllBlock::~CRegion_AllBlock
__unwindfunclet$?Find@CDrawingSymbolRow@@QAEPAVCDrawingSymbol@@ABVCPoint@@HHPAUIChartManager133101@@@Z$1:
  0000b	8d 4d 80	 lea	 ecx, DWORD PTR _calData$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1CCoordinateCalculatorData@@QAE@XZ ; CCoordinateCalculatorData::~CCoordinateCalculatorData
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$?Find@CDrawingSymbolRow@@QAEPAVCDrawingSymbol@@ABVCPoint@@HHPAUIChartManager133101@@@Z:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 8a 54 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-172]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Find@CDrawingSymbolRow@@QAEPAVCDrawingSymbol@@ABVCPoint@@HHPAUIChartManager133101@@@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Find@CDrawingSymbolRow@@QAEPAVCDrawingSymbol@@ABVCPoint@@HHPAUIChartManager133101@@@Z ENDP ; CDrawingSymbolRow::Find
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
;	COMDAT ?Add@CDrawingSymbolRow@@QAEPAVCDrawingSymbol@@PAV2@@Z
_TEXT	SEGMENT
_pSymbol$ = 8						; size = 4
?Add@CDrawingSymbolRow@@QAEPAVCDrawingSymbol@@PAV2@@Z PROC ; CDrawingSymbolRow::Add, COMDAT
; _this$ = ecx

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	m_Symbol_List.AddTail(pSymbol);

  00003	ff 75 08	 push	 DWORD PTR _pSymbol$[ebp]
  00006	83 c1 04	 add	 ecx, 4
  00009	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCDrawingSymbol@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingSymbol@@@Z ; CList<CDrawingSymbol *,CDrawingSymbol *>::AddTail

; 48   : 	return pSymbol;

  0000e	8b 45 08	 mov	 eax, DWORD PTR _pSymbol$[ebp]

; 49   : }

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?Add@CDrawingSymbolRow@@QAEPAVCDrawingSymbol@@PAV2@@Z ENDP ; CDrawingSymbolRow::Add
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
;	COMDAT ??1CDrawingSymbolRow@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CDrawingSymbolRow@@UAE@XZ PROC			; CDrawingSymbolRow::~CDrawingSymbolRow, COMDAT
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CDrawingSymbolRow@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 194  : 	if(m_Symbol_List.GetCount() <= 0)

  00026	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0

; 41   : {

  0002a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CDrawingSymbolRow@@6B@

; 194  : 	if(m_Symbol_List.GetCount() <= 0)

  00030	7e 4f		 jle	 SHORT $LN32@CDrawingSy

; 195  : 		return;
; 196  : 
; 197  : 	POSITION pos = m_Symbol_List.GetHeadPosition();

  00032	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 198  : 	while(pos) {

  00035	85 ff		 test	 edi, edi
  00037	74 1d		 je	 SHORT $LN13@CDrawingSy
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@CDrawingSy:

; 199  : 		CDrawingSymbol* pSymbol = m_Symbol_List.GetNext(pos);

  00040	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00043	8b 3f		 mov	 edi, DWORD PTR [edi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp

; 200  : 		if(pSymbol != NULL)

  00045	85 c0		 test	 eax, eax
  00047	74 09		 je	 SHORT $LN7@CDrawingSy

; 201  : 			CDrawingSymbolFactory::Remove(pSymbol);

  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?Remove@CDrawingSymbolFactory@@SAXPAVCDrawingSymbol@@@Z ; CDrawingSymbolFactory::Remove
  0004f	83 c4 04	 add	 esp, 4
$LN7@CDrawingSy:

; 198  : 	while(pos) {

  00052	85 ff		 test	 edi, edi
  00054	75 ea		 jne	 SHORT $LL4@CDrawingSy
$LN13@CDrawingSy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00056	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00059	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00060	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00067	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0006e	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00075	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0007a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN32@CDrawingSy:

; 872  : 	m_pBlocks->FreeDataChain();

  00081	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]

; 878  : {

  00084	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0008b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$CList@PAVCDrawingSymbol@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  00092	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00099	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  000a0	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  000a7	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 872  : 	m_pBlocks->FreeDataChain();

  000ae	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  000b3	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp

; 43   : }

  000ba	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c4	59		 pop	 ecx
  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c3		 ret	 0
  000cb	cc		 int	 3
  000cc	cc		 int	 3
  000cd	cc		 int	 3
  000ce	cc		 int	 3
  000cf	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CDrawingSymbolRow@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CDrawingSymbolRow@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CDrawingSymbolRow@@UAE@XZ ENDP			; CDrawingSymbolRow::~CDrawingSymbolRow
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
;	COMDAT ??0CDrawingSymbolRow@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CDrawingSymbolRow@@QAE@XZ PROC			; CDrawingSymbolRow::CDrawingSymbolRow, COMDAT
; _this$ = ecx

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CDrawingSymbolRow@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CDrawingSymbolRow@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 851  : {

  0002f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$CList@PAVCDrawingSymbol@@PAV1@@@6B@

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;

  00036	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  0003d	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00044	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0004b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 856  : 	m_pBlocks = NULL;

  00052	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 857  : 	m_nBlockSize = nBlockSize;

  00059	c7 46 1c 0a 00
	00 00		 mov	 DWORD PTR [esi+28], 10	; 0000000aH

; 872  : 	m_pBlocks->FreeDataChain();

  00060	33 c9		 xor	 ecx, ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp

; 36   : {

  00062	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00069	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0006e	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp

; 38   : }

  00075	8b c6		 mov	 eax, esi
  00077	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00081	59		 pop	 ecx
  00082	5e		 pop	 esi
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CDrawingSymbolRow@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$CList@PAVCDrawingSymbol@@PAV1@@@UAE@XZ ; CList<CDrawingSymbol *,CDrawingSymbol *>::~CList<CDrawingSymbol *,CDrawingSymbol *>
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$??0CDrawingSymbolRow@@QAE@XZ:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CDrawingSymbolRow@@QAE@XZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CDrawingSymbolRow@@QAE@XZ ENDP			; CDrawingSymbolRow::CDrawingSymbolRow
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
;	COMDAT ?GetElementList@CDrawingSymbolRow@@QAEXAAV?$CList@PAVCDrawingSymbol@@PAV1@@@@Z
_TEXT	SEGMENT
_elementList$ = 8					; size = 4
?GetElementList@CDrawingSymbolRow@@QAEXAAV?$CList@PAVCDrawingSymbol@@PAV1@@@@Z PROC ; CDrawingSymbolRow::GetElementList, COMDAT
; _this$ = ecx

; 222  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 870  : 	m_nCount = 0;

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _elementList$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp

; 222  : {

  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  0000b	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  0000e	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0
  00015	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  0001c	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
  00023	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  0002a	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0002f	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp

; 225  : 	for(int nSymbol = 0;  nSymbol < m_Symbol_List.GetCount();  nSymbol++) 

  00036	33 f6		 xor	 esi, esi
  00038	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0003b	85 c0		 test	 eax, eax
  0003d	7e 2e		 jle	 SHORT $LN3@GetElement
  0003f	90		 npad	 1
$LL4@GetElement:

; 226  : 		elementList.AddTail(m_Symbol_List.GetAt(m_Symbol_List.FindIndex(nSymbol)));

  00040	8b ce		 mov	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00042	3b f0		 cmp	 esi, eax
  00044	7d 13		 jge	 SHORT $LN15@GetElement
  00046	85 f6		 test	 esi, esi
  00048	78 0f		 js	 SHORT $LN15@GetElement

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0004a	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 1137 : 	while (nIndex--)

  0004d	74 0c		 je	 SHORT $LN11@GetElement
  0004f	90		 npad	 1
$LL12@GetElement:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00050	8b 00		 mov	 eax, DWORD PTR [eax]
  00052	83 e9 01	 sub	 ecx, 1
  00055	75 f9		 jne	 SHORT $LL12@GetElement

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;

  00057	eb 02		 jmp	 SHORT $LN11@GetElement
$LN15@GetElement:

; 1134 : 		return NULL;  // went too far

  00059	33 c0		 xor	 eax, eax
$LN11@GetElement:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp

; 226  : 		elementList.AddTail(m_Symbol_List.GetAt(m_Symbol_List.FindIndex(nSymbol)));

  0005b	ff 70 08	 push	 DWORD PTR [eax+8]
  0005e	8b cb		 mov	 ecx, ebx
  00060	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCDrawingSymbol@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingSymbol@@@Z ; CList<CDrawingSymbol *,CDrawingSymbol *>::AddTail
  00065	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00068	46		 inc	 esi
  00069	3b f0		 cmp	 esi, eax
  0006b	7c d3		 jl	 SHORT $LL4@GetElement
$LN3@GetElement:
  0006d	5f		 pop	 edi

; 227  : }

  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
?GetElementList@CDrawingSymbolRow@@QAEXAAV?$CList@PAVCDrawingSymbol@@PAV1@@@@Z ENDP ; CDrawingSymbolRow::GetElementList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_G?$CList@PAVCDrawingSymbol@@PAV1@@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$CList@PAVCDrawingSymbol@@PAV1@@@UAEPAXI@Z PROC	; CList<CDrawingSymbol *,CDrawingSymbol *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$CList@PAVCDrawingSymbol@@PAV1@@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00025	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 878  : {

  00028	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@PAVCDrawingSymbol@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  00035	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  0003c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00043	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0004a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 872  : 	m_pBlocks->FreeDataChain();

  00051	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00056	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00059	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00060	a8 01		 test	 al, 1
  00062	74 2c		 je	 SHORT $LN22@scalar
  00064	a8 04		 test	 al, 4
  00066	75 1d		 jne	 SHORT $LN3@scalar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 112  : 	{ ::operator delete(p); }

  00068	56		 push	 esi
  00069	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006e	83 c4 04	 add	 esp, 4
  00071	8b c6		 mov	 eax, esi
  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007d	59		 pop	 ecx
  0007e	5e		 pop	 esi
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
$LN3@scalar:
  00085	6a 1c		 push	 28			; 0000001cH
  00087	56		 push	 esi
  00088	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0008d	83 c4 08	 add	 esp, 8
$LN22@scalar:
  00090	8b c6		 mov	 eax, esi
  00092	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00095	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009c	59		 pop	 ecx
  0009d	5e		 pop	 esi
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 04 00	 ret	 4
  000a4	cc		 int	 3
  000a5	cc		 int	 3
  000a6	cc		 int	 3
  000a7	cc		 int	 3
  000a8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_G?$CList@PAVCDrawingSymbol@@PAV1@@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$CList@PAVCDrawingSymbol@@PAV1@@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$CList@PAVCDrawingSymbol@@PAV1@@@UAEPAXI@Z ENDP	; CList<CDrawingSymbol *,CDrawingSymbol *>::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CList@PAVCDrawingSymbol@@PAV1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_nNewCount$1$ = -16					; size = 4
_newData$1 = -12					; size = 4
_pData$1$ = -8						; size = 4
_pNode$1$ = -8						; size = 4
_nElementsLeft$1$ = -4					; size = 4
_this$1$ = -4						; size = 4
_ar$ = 8						; size = 4
?Serialize@?$CList@PAVCDrawingSymbol@@PAV1@@@UAEXAAVCArchive@@@Z PROC ; CList<CDrawingSymbol *,CDrawingSymbol *>::Serialize, COMDAT
; _this$ = ecx

; 1169 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00009	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1169 : {

  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00011	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00014	f7 d0		 not	 eax
  00016	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1174 : 	if (ar.IsStoring())

  00018	0f 84 ae 00 00
	00		 je	 $LN7@Serialize

; 1175 : 	{
; 1176 : 		ar.WriteCount(m_nCount);

  0001e	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00021	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00026	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00029	89 45 f8	 mov	 DWORD PTR _pNode$1$[ebp], eax
  0002c	85 c0		 test	 eax, eax
  0002e	0f 84 43 01 00
	00		 je	 $LN68@Serialize
$LL4@Serialize:

; 1178 : 		{
; 1179 : 			ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1180 : 			TYPE* pData;
; 1181 : 			/*
; 1182 : 			 * in some cases the & operator might be overloaded, and we cannot use it to obtain
; 1183 : 			 * the address of a given object.  We then use the following trick to get the address
; 1184 : 			 */
; 1185 : 			pData = reinterpret_cast< TYPE* >( &reinterpret_cast< int& >( static_cast< TYPE& >( pNode->data ) ) );

  00034	8d 70 08	 lea	 esi, DWORD PTR [eax+8]

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00037	85 f6		 test	 esi, esi
  00039	0f 84 4a 01 00
	00		 je	 $LN60@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00042	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00045	f7 d0		 not	 eax
  00047	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00049	74 33		 je	 SHORT $LN21@Serialize

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0004b	b8 01 00 00 00	 mov	 eax, 1
  00050	89 45 fc	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
$LL16@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00053	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00058	3b c3		 cmp	 eax, ebx
  0005a	0f 42 d8	 cmovb	 ebx, eax

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0005d	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
  00064	57		 push	 edi
  00065	56		 push	 esi
  00066	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _nElementsLeft$1$[ebp]

; 87   : 			pData += nElementsToWrite;

  0006e	03 f7		 add	 esi, edi
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00073	2b c3		 sub	 eax, ebx
  00075	89 45 fc	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
  00078	85 c0		 test	 eax, eax
  0007a	75 d7		 jne	 SHORT $LL16@Serialize

; 88   : 		}
; 89   : 	}

  0007c	eb 35		 jmp	 SHORT $LN2@Serialize
$LN21@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  0007e	bf 01 00 00 00	 mov	 edi, 1
$LL18@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00083	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00088	3b fb		 cmp	 edi, ebx
  0008a	0f 42 df	 cmovb	 ebx, edi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0008d	8d 04 9d 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00094	50		 push	 eax
  00095	56		 push	 esi
  00096	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0009b	8d 0c 9d 00 00
	00 00		 lea	 ecx, DWORD PTR [ebx*4]
  000a2	3b c1		 cmp	 eax, ecx
  000a4	0f 85 d6 00 00
	00		 jne	 $LN59@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  000aa	03 f1		 add	 esi, ecx
  000ac	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;

  000af	2b fb		 sub	 edi, ebx
  000b1	75 d0		 jne	 SHORT $LL18@Serialize
$LN2@Serialize:

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  000b3	8b 45 f8	 mov	 eax, DWORD PTR _pNode$1$[ebp]
  000b6	8b 00		 mov	 eax, DWORD PTR [eax]
  000b8	89 45 f8	 mov	 DWORD PTR _pNode$1$[ebp], eax
  000bb	85 c0		 test	 eax, eax
  000bd	0f 85 71 ff ff
	ff		 jne	 $LL4@Serialize

; 1197 : 		}
; 1198 : 	}
; 1199 : }

  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 04 00	 ret	 4
$LN7@Serialize:

; 1186 : 			SerializeElements<TYPE>(ar, pData, 1);
; 1187 : 		}
; 1188 : 	}
; 1189 : 	else
; 1190 : 	{
; 1191 : 		DWORD_PTR nNewCount = ar.ReadCount();

  000cc	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount

; 1192 : 		while (nNewCount--)

  000d1	85 c0		 test	 eax, eax
  000d3	0f 84 9e 00 00
	00		 je	 $LN68@Serialize
  000d9	0f 1f 80 00 00
	00 00		 npad	 7
$LL5@Serialize:
  000e0	48		 dec	 eax
  000e1	89 45 f0	 mov	 DWORD PTR _nNewCount$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  000e4	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  000e7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000ea	f7 d1		 not	 ecx
  000ec	f6 c1 01	 test	 cl, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  000ef	74 3a		 je	 SHORT $LN42@Serialize

; 79   : 		pData = pElements;

  000f1	8d 4d f4	 lea	 ecx, DWORD PTR _newData$1[ebp]
  000f4	bb 01 00 00 00	 mov	 ebx, 1
  000f9	89 4d f8	 mov	 DWORD PTR _pData$1$[ebp], ecx
  000fc	0f 1f 40 00	 npad	 4
$LL37@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00100	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00105	3b df		 cmp	 ebx, edi
  00107	0f 42 fb	 cmovb	 edi, ebx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0010a	8d 34 bd 00 00
	00 00		 lea	 esi, DWORD PTR [edi*4]
  00111	56		 push	 esi
  00112	51		 push	 ecx
  00113	8b c8		 mov	 ecx, eax
  00115	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 87   : 			pData += nElementsToWrite;

  0011a	8b 4d f8	 mov	 ecx, DWORD PTR _pData$1$[ebp]
  0011d	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  00120	03 ce		 add	 ecx, esi
  00122	89 4d f8	 mov	 DWORD PTR _pData$1$[ebp], ecx
  00125	2b df		 sub	 ebx, edi
  00127	75 d7		 jne	 SHORT $LL37@Serialize

; 88   : 		}
; 89   : 	}

  00129	eb 36		 jmp	 SHORT $LN40@Serialize
$LN42@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  0012b	be 01 00 00 00	 mov	 esi, 1

; 96   : 		pData = pElements;

  00130	8d 5d f4	 lea	 ebx, DWORD PTR _newData$1[ebp]
$LL39@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00133	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00138	3b f7		 cmp	 esi, edi
  0013a	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0013d	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00144	51		 push	 ecx
  00145	53		 push	 ebx
  00146	8b c8		 mov	 ecx, eax
  00148	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0014d	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
  00154	3b c1		 cmp	 eax, ecx
  00156	75 28		 jne	 SHORT $LN59@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 104  : 			pData += nElementsToRead;

  00158	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  0015b	03 d9		 add	 ebx, ecx
  0015d	2b f7		 sub	 esi, edi
  0015f	75 d2		 jne	 SHORT $LL39@Serialize
$LN40@Serialize:

; 1193 : 		{
; 1194 : 			TYPE newData[1];
; 1195 : 			SerializeElements<TYPE>(ar, newData, 1);
; 1196 : 			AddTail(newData[0]);

  00161	ff 75 f4	 push	 DWORD PTR _newData$1[ebp]
  00164	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00167	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCDrawingSymbol@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingSymbol@@@Z ; CList<CDrawingSymbol *,CDrawingSymbol *>::AddTail
  0016c	8b 45 f0	 mov	 eax, DWORD PTR _nNewCount$1$[ebp]
  0016f	85 c0		 test	 eax, eax
  00171	0f 85 69 ff ff
	ff		 jne	 $LL5@Serialize
$LN68@Serialize:
  00177	5f		 pop	 edi

; 1197 : 		}
; 1198 : 	}
; 1199 : }

  00178	5e		 pop	 esi
  00179	5b		 pop	 ebx
  0017a	8b e5		 mov	 esp, ebp
  0017c	5d		 pop	 ebp
  0017d	c2 04 00	 ret	 4
$LN59@Serialize:
  00180	6a 00		 push	 0
  00182	6a 03		 push	 3
  00184	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN60@Serialize:

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00189	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN85@Serialize:
  0018e	cc		 int	 3
?Serialize@?$CList@PAVCDrawingSymbol@@PAV1@@@UAEXAAVCArchive@@@Z ENDP ; CList<CDrawingSymbol *,CDrawingSymbol *>::Serialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??1?$CList@PAVCDrawingSymbol@@PAV1@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CList@PAVCDrawingSymbol@@PAV1@@@UAE@XZ PROC	; CList<CDrawingSymbol *,CDrawingSymbol *>::~CList<CDrawingSymbol *,CDrawingSymbol *>, COMDAT
; _this$ = ecx

; 878  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CList@PAVCDrawingSymbol@@PAV1@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 872  : 	m_pBlocks->FreeDataChain();

  00025	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 878  : {

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@PAVCDrawingSymbol@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  0002e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00035	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0003c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00043	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 872  : 	m_pBlocks->FreeDataChain();

  0004a	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0004f	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 879  : 	RemoveAll();
; 880  : 	ASSERT(m_nCount == 0);
; 881  : }

  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	5e		 pop	 esi
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
  00066	cc		 int	 3
  00067	cc		 int	 3
  00068	cc		 int	 3
  00069	cc		 int	 3
  0006a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CList@PAVCDrawingSymbol@@PAV1@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CList@PAVCDrawingSymbol@@PAV1@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CList@PAVCDrawingSymbol@@PAV1@@@UAE@XZ ENDP	; CList<CDrawingSymbol *,CDrawingSymbol *>::~CList<CDrawingSymbol *,CDrawingSymbol *>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?FreeNode@?$CList@PAVCDrawingSymbol@@PAV1@@@IAEXPAUCNode@1@@Z
_TEXT	SEGMENT
_pNode$ = 8						; size = 4
?FreeNode@?$CList@PAVCDrawingSymbol@@PAV1@@@IAEXPAUCNode@1@@Z PROC ; CList<CDrawingSymbol *,CDrawingSymbol *>::FreeNode, COMDAT
; _this$ = ecx

; 936  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 937  : 	pNode->data.~TYPE();
; 938  : 	pNode->pNext = m_pNodeFree;

  00003	8b 55 08	 mov	 edx, DWORD PTR _pNode$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 939  : 	m_pNodeFree = pNode;
; 940  : 	m_nCount--;

  0000e	83 46 0c ff	 add	 DWORD PTR [esi+12], -1
  00012	89 56 10	 mov	 DWORD PTR [esi+16], edx

; 941  : 	ASSERT(m_nCount >= 0);  // make sure we don't underflow
; 942  : 
; 943  : 	// if no more elements, cleanup completely
; 944  : 	if (m_nCount == 0)

  00015	75 2b		 jne	 SHORT $LN2@FreeNode

; 872  : 	m_pBlocks->FreeDataChain();

  00017	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0001a	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00021	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00028	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0002f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00036	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0003b	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
$LN2@FreeNode:
  00042	5e		 pop	 esi

; 945  : 		RemoveAll();
; 946  : }

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
?FreeNode@?$CList@PAVCDrawingSymbol@@PAV1@@@IAEXPAUCNode@1@@Z ENDP ; CList<CDrawingSymbol *,CDrawingSymbol *>::FreeNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?NewNode@?$CList@PAVCDrawingSymbol@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z
_TEXT	SEGMENT
_pPrev$ = 8						; size = 4
_pNext$ = 12						; size = 4
?NewNode@?$CList@PAVCDrawingSymbol@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z PROC ; CList<CDrawingSymbol *,CDrawingSymbol *>::NewNode, COMDAT
; _this$ = ecx

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 902  : 	if (m_pNodeFree == NULL)

  00006	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0000a	75 34		 jne	 SHORT $LN7@NewNode

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  0000c	6a 0c		 push	 12			; 0000000cH
  0000e	ff 76 18	 push	 DWORD PTR [esi+24]
  00011	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001a	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0001d	83 c0 08	 add	 eax, 8
  00020	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  00023	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00026	83 c0 f4	 add	 eax, -12		; fffffff4H

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00029	83 c2 ff	 add	 edx, -1
  0002c	78 12		 js	 SHORT $LN7@NewNode
  0002e	66 90		 npad	 2
$LL4@NewNode:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	89 08		 mov	 DWORD PTR [eax], ecx

; 915  : 			m_pNodeFree = pNode;

  00035	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00038	83 e8 0c	 sub	 eax, 12			; 0000000cH
  0003b	83 ea 01	 sub	 edx, 1
  0003e	79 f0		 jns	 SHORT $LL4@NewNode
$LN7@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00040	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00043	85 c0		 test	 eax, eax
  00045	74 18		 je	 SHORT $LN17@NewNode

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00047	8b 08		 mov	 ecx, DWORD PTR [eax]
  00049	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 922  : 	pNode->pPrev = pPrev;

  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _pPrev$[ebp]
  0004f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 923  : 	pNode->pNext = pNext;

  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _pNext$[ebp]
  00055	89 08		 mov	 DWORD PTR [eax], ecx

; 924  : 	m_nCount++;

  00057	ff 46 0c	 inc	 DWORD PTR [esi+12]

; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;
; 930  : #pragma pop_macro("new")
; 931  : 	return pNode;

  0005a	5e		 pop	 esi

; 932  : }

  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
$LN17@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  0005f	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN15@NewNode:
  00064	cc		 int	 3
?NewNode@?$CList@PAVCDrawingSymbol@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z ENDP ; CList<CDrawingSymbol *,CDrawingSymbol *>::NewNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?FindIndex@?$CList@PAVCDrawingSymbol@@PAV1@@@QBEPAU__POSITION@@H@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?FindIndex@?$CList@PAVCDrawingSymbol@@PAV1@@@QBEPAU__POSITION@@H@Z PROC ; CList<CDrawingSymbol *,CDrawingSymbol *>::FindIndex, COMDAT
; _this$ = ecx

; 1130 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1131 : 	ASSERT_VALID(this);
; 1132 : 
; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00003	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00006	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00009	7d 14		 jge	 SHORT $LN5@FindIndex
  0000b	85 d2		 test	 edx, edx
  0000d	78 10		 js	 SHORT $LN5@FindIndex

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0000f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1137 : 	while (nIndex--)

  00012	74 0d		 je	 SHORT $LN1@FindIndex
$LL2@FindIndex:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	83 ea 01	 sub	 edx, 1
  00019	75 f9		 jne	 SHORT $LL2@FindIndex

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;
; 1143 : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
$LN5@FindIndex:

; 1134 : 		return NULL;  // went too far

  0001f	33 c0		 xor	 eax, eax
$LN1@FindIndex:

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;
; 1143 : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?FindIndex@?$CList@PAVCDrawingSymbol@@PAV1@@@QBEPAU__POSITION@@H@Z ENDP ; CList<CDrawingSymbol *,CDrawingSymbol *>::FindIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAt@?$CList@PAVCDrawingSymbol@@PAV1@@@QAEXPAU__POSITION@@@Z
_TEXT	SEGMENT
_position$ = 8						; size = 4
?RemoveAt@?$CList@PAVCDrawingSymbol@@PAV1@@@QAEXPAU__POSITION@@@Z PROC ; CList<CDrawingSymbol *,CDrawingSymbol *>::RemoveAt, COMDAT
; _this$ = ecx

; 1100 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1101 : 	ASSERT_VALID(this);
; 1102 : 
; 1103 : 	CNode* pOldNode = (CNode*) position;
; 1104 : 	ASSERT(AfxIsValidAddress(pOldNode, sizeof(CNode)));
; 1105 : 
; 1106 : 	// remove pOldNode from list
; 1107 : 	if (pOldNode == m_pNodeHead)

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _position$[ebp]
  00009	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000b	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  0000e	75 05		 jne	 SHORT $LN2@RemoveAt

; 1108 : 	{
; 1109 : 		m_pNodeHead = pOldNode->pNext;

  00010	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 1110 : 	}

  00013	eb 05		 jmp	 SHORT $LN3@RemoveAt
$LN2@RemoveAt:

; 1111 : 	else
; 1112 : 	{
; 1113 : 		ASSERT(AfxIsValidAddress(pOldNode->pPrev, sizeof(CNode)));
; 1114 : 		pOldNode->pPrev->pNext = pOldNode->pNext;

  00015	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00018	89 10		 mov	 DWORD PTR [eax], edx
$LN3@RemoveAt:

; 1115 : 	}
; 1116 : 	if (pOldNode == m_pNodeTail)

  0001a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001d	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00020	75 05		 jne	 SHORT $LN4@RemoveAt

; 1117 : 	{
; 1118 : 		m_pNodeTail = pOldNode->pPrev;

  00022	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1119 : 	}

  00025	eb 05		 jmp	 SHORT $LN5@RemoveAt
$LN4@RemoveAt:

; 1120 : 	else
; 1121 : 	{
; 1122 : 		ASSERT(AfxIsValidAddress(pOldNode->pNext, sizeof(CNode)));
; 1123 : 		pOldNode->pNext->pPrev = pOldNode->pPrev;

  00027	8b 01		 mov	 eax, DWORD PTR [ecx]
  00029	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN5@RemoveAt:

; 938  : 	pNode->pNext = m_pNodeFree;

  0002c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002f	89 01		 mov	 DWORD PTR [ecx], eax

; 939  : 	m_pNodeFree = pNode;
; 940  : 	m_nCount--;

  00031	83 46 0c ff	 add	 DWORD PTR [esi+12], -1
  00035	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 941  : 	ASSERT(m_nCount >= 0);  // make sure we don't underflow
; 942  : 
; 943  : 	// if no more elements, cleanup completely
; 944  : 	if (m_nCount == 0)

  00038	75 2b		 jne	 SHORT $LN8@RemoveAt

; 872  : 	m_pBlocks->FreeDataChain();

  0003a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0003d	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00044	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0004b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00052	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00059	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0005e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
$LN8@RemoveAt:
  00065	5e		 pop	 esi

; 1124 : 	}
; 1125 : 	FreeNode(pOldNode);
; 1126 : }

  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
?RemoveAt@?$CList@PAVCDrawingSymbol@@PAV1@@@QAEXPAU__POSITION@@@Z ENDP ; CList<CDrawingSymbol *,CDrawingSymbol *>::RemoveAt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAll@?$CList@PAVCDrawingSymbol@@PAV1@@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@?$CList@PAVCDrawingSymbol@@PAV1@@@QAEXXZ PROC ; CList<CDrawingSymbol *,CDrawingSymbol *>::RemoveAll, COMDAT
; _this$ = ecx

; 862  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 863  : 	ASSERT_VALID(this);
; 864  : 
; 865  : 	// destroy elements
; 866  : 	CNode* pNode;
; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)
; 868  : 		pNode->data.~TYPE();
; 869  : 
; 870  : 	m_nCount = 0;
; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 872  : 	m_pBlocks->FreeDataChain();

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0000d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00014	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0001b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00022	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00027	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0002e	5e		 pop	 esi

; 874  : }

  0002f	c3		 ret	 0
?RemoveAll@?$CList@PAVCDrawingSymbol@@PAV1@@@QAEXXZ ENDP ; CList<CDrawingSymbol *,CDrawingSymbol *>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?AddTail@?$CList@PAVCDrawingSymbol@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingSymbol@@@Z
_TEXT	SEGMENT
_newElement$ = 8					; size = 4
?AddTail@?$CList@PAVCDrawingSymbol@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingSymbol@@@Z PROC ; CList<CDrawingSymbol *,CDrawingSymbol *>::AddTail, COMDAT
; _this$ = ecx

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 902  : 	if (m_pNodeFree == NULL)

  00007	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0

; 966  : 	ASSERT_VALID(this);
; 967  : 
; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  0000b	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 902  : 	if (m_pNodeFree == NULL)

  0000e	75 32		 jne	 SHORT $LN11@AddTail

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  00010	6a 0c		 push	 12			; 0000000cH
  00012	ff 76 18	 push	 DWORD PTR [esi+24]
  00015	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001e	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00021	83 c0 08	 add	 eax, 8
  00024	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00027	83 c2 ff	 add	 edx, -1
  0002a	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  0002d	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  00030	78 10		 js	 SHORT $LN11@AddTail
$LL8@AddTail:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00032	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00035	89 01		 mov	 DWORD PTR [ecx], eax

; 915  : 			m_pNodeFree = pNode;

  00037	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0003a	83 e9 0c	 sub	 ecx, 12			; 0000000cH
  0003d	83 ea 01	 sub	 edx, 1
  00040	79 f0		 jns	 SHORT $LL8@AddTail
$LN11@AddTail:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00042	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00045	85 c9		 test	 ecx, ecx
  00047	74 39		 je	 SHORT $LN22@AddTail

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00049	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004b	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 969  : 	pNewNode->data = newElement;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]

; 922  : 	pNode->pPrev = pPrev;

  00051	89 79 04	 mov	 DWORD PTR [ecx+4], edi

; 923  : 	pNode->pNext = pNext;

  00054	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 924  : 	m_nCount++;

  0005a	ff 46 0c	 inc	 DWORD PTR [esi+12]

; 969  : 	pNewNode->data = newElement;

  0005d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 970  : 	if (m_pNodeTail != NULL)

  00060	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00063	85 c0		 test	 eax, eax
  00065	74 0d		 je	 SHORT $LN2@AddTail

; 971  : 		m_pNodeTail->pNext = pNewNode;

  00067	89 08		 mov	 DWORD PTR [eax], ecx

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00069	8b c1		 mov	 eax, ecx
  0006b	5f		 pop	 edi
  0006c	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0006f	5e		 pop	 esi

; 976  : }

  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
$LN2@AddTail:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00074	5f		 pop	 edi
  00075	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00078	8b c1		 mov	 eax, ecx
  0007a	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0007d	5e		 pop	 esi

; 976  : }

  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
$LN22@AddTail:

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00082	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN20@AddTail:
  00087	cc		 int	 3
?AddTail@?$CList@PAVCDrawingSymbol@@PAV1@@@QAEPAU__POSITION@@PAVCDrawingSymbol@@@Z ENDP ; CList<CDrawingSymbol *,CDrawingSymbol *>::AddTail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??0?$CList@PAVCDrawingSymbol@@PAV1@@@QAE@H@Z
_TEXT	SEGMENT
_nBlockSize$ = 8					; size = 4
??0?$CList@PAVCDrawingSymbol@@PAV1@@@QAE@H@Z PROC	; CList<CDrawingSymbol *,CDrawingSymbol *>::CList<CDrawingSymbol *,CDrawingSymbol *>, COMDAT
; _this$ = ecx

; 851  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;
; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 856  : 	m_pBlocks = NULL;
; 857  : 	m_nBlockSize = nBlockSize;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nBlockSize$[ebp]
  00006	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 858  : }

  00009	8b c1		 mov	 eax, ecx
  0000b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CList@PAVCDrawingSymbol@@PAV1@@@6B@
  00011	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00018	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0001f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00026	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0002d	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??0?$CList@PAVCDrawingSymbol@@PAV1@@@QAE@H@Z ENDP	; CList<CDrawingSymbol *,CDrawingSymbol *>::CList<CDrawingSymbol *,CDrawingSymbol *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z PROC		; CObject::Dump, COMDAT
; _this$ = ecx

; 122  : 	{ /* no dumping in release builds */ }

  00000	c2 04 00	 ret	 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z ENDP		; CObject::Dump
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT
?AssertValid@CObject@@UBEXXZ PROC			; CObject::AssertValid, COMDAT
; _this$ = ecx

; 120  : 	{ /* no asserts in release builds */ }

  00000	c2 00 00	 ret	 0
?AssertValid@CObject@@UBEXXZ ENDP			; CObject::AssertValid
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z PROC		; CObject::Serialize, COMDAT
; _this$ = ecx

; 106  : 	{ /* CObject does not serialize anything by default */ }

  00000	c2 04 00	 ret	 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z ENDP		; CObject::Serialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT
??1CObject@@UAE@XZ PROC					; CObject::~CObject, COMDAT
; _this$ = ecx

; 104  : 	{ }

  00000	c2 00 00	 ret	 0
??1CObject@@UAE@XZ ENDP					; CObject::~CObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\DrawingSymbolRow.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
