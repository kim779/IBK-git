; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30145.0 

	TITLE	D:\git\src\IBK\IBK_DRFN\#DRfn-CS\_Obj\Symbol\Region_Column.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1CObject@@UAE@XZ				; CObject::~CObject
PUBLIC	?Serialize@CObject@@UAEXAAVCArchive@@@Z		; CObject::Serialize
PUBLIC	?AssertValid@CObject@@UBEXXZ			; CObject::AssertValid
PUBLIC	?Dump@CObject@@UBEXAAVCDumpContext@@@Z		; CObject::Dump
PUBLIC	??0CRegion_Column@@QAE@HH@Z			; CRegion_Column::CRegion_Column
PUBLIC	??1CRegion_Column@@UAE@XZ			; CRegion_Column::~CRegion_Column
PUBLIC	?GetColumnIndex@CRegion_Column@@QAEHXZ		; CRegion_Column::GetColumnIndex
PUBLIC	?SetBlockRegion@CRegion_Column@@QAEXHABVCRect@@@Z ; CRegion_Column::SetBlockRegion
PUBLIC	?GetBlockRegion@CRegion_Column@@QBE?AVCRect@@H@Z ; CRegion_Column::GetBlockRegion
PUBLIC	?InsertRow@CRegion_Column@@QAE_NH@Z		; CRegion_Column::InsertRow
PUBLIC	??0?$CList@PAVCRegion_Row@@PAV1@@@QAE@H@Z	; CList<CRegion_Row *,CRegion_Row *>::CList<CRegion_Row *,CRegion_Row *>
PUBLIC	?AddHead@?$CList@PAVCRegion_Row@@PAV1@@@QAEPAU__POSITION@@PAVCRegion_Row@@@Z ; CList<CRegion_Row *,CRegion_Row *>::AddHead
PUBLIC	?AddTail@?$CList@PAVCRegion_Row@@PAV1@@@QAEPAU__POSITION@@PAVCRegion_Row@@@Z ; CList<CRegion_Row *,CRegion_Row *>::AddTail
PUBLIC	?RemoveAll@?$CList@PAVCRegion_Row@@PAV1@@@QAEXXZ ; CList<CRegion_Row *,CRegion_Row *>::RemoveAll
PUBLIC	?InsertBefore@?$CList@PAVCRegion_Row@@PAV1@@@QAEPAU__POSITION@@PAU2@PAVCRegion_Row@@@Z ; CList<CRegion_Row *,CRegion_Row *>::InsertBefore
PUBLIC	?NewNode@?$CList@PAVCRegion_Row@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<CRegion_Row *,CRegion_Row *>::NewNode
PUBLIC	??1?$CList@PAVCRegion_Row@@PAV1@@@UAE@XZ	; CList<CRegion_Row *,CRegion_Row *>::~CList<CRegion_Row *,CRegion_Row *>
PUBLIC	?Serialize@?$CList@PAVCRegion_Row@@PAV1@@@UAEXAAVCArchive@@@Z ; CList<CRegion_Row *,CRegion_Row *>::Serialize
PUBLIC	??_G?$CList@PAVCRegion_Row@@PAV1@@@UAEPAXI@Z	; CList<CRegion_Row *,CRegion_Row *>::`scalar deleting destructor'
PUBLIC	?MakeRowList@CRegion_Column@@AAEXH@Z		; CRegion_Column::MakeRowList
PUBLIC	?SetModifiedRowIndexs@CRegion_Column@@AAEXXZ	; CRegion_Column::SetModifiedRowIndexs
PUBLIC	??_GCRegion_Column@@UAEPAXI@Z			; CRegion_Column::`scalar deleting destructor'
PUBLIC	??$SerializeElements@PAVCRegion_Row@@@@YGXAAVCArchive@@PAPAVCRegion_Row@@H@Z ; SerializeElements<CRegion_Row *>
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R3CObject@@8					; CObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObject@@8					; CObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CObject@@8			; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$CList@PAVCRegion_Row@@PAV1@@@6B@		; CList<CRegion_Row *,CRegion_Row *>::`vftable'
PUBLIC	??_7CRegion_Column@@6B@				; CRegion_Column::`vftable'
PUBLIC	??_R4CRegion_Column@@6B@			; CRegion_Column::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCRegion_Column@@@8			; CRegion_Column `RTTI Type Descriptor'
PUBLIC	??_R3CRegion_Column@@8				; CRegion_Column::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CRegion_Column@@8				; CRegion_Column::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CRegion_Column@@8			; CRegion_Column::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CList@PAVCRegion_Row@@PAV1@@@6B@		; CList<CRegion_Row *,CRegion_Row *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CList@PAVCRegion_Row@@PAV1@@@@8	; CList<CRegion_Row *,CRegion_Row *> `RTTI Type Descriptor'
PUBLIC	??_R3?$CList@PAVCRegion_Row@@PAV1@@@8		; CList<CRegion_Row *,CRegion_Row *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CList@PAVCRegion_Row@@PAV1@@@8		; CList<CRegion_Row *,CRegion_Row *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CList@PAVCRegion_Row@@PAV1@@@8	; CList<CRegion_Row *,CRegion_Row *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	?__global_delete@@YAXPAXI@Z:PROC		; __global_delete
EXTRN	___std_terminate:PROC
EXTRN	?AfxThrowInvalidArgException@@YGXXZ:PROC	; AfxThrowInvalidArgException
EXTRN	?AfxThrowArchiveException@@YGXHPBD@Z:PROC	; AfxThrowArchiveException
EXTRN	?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ:PROC ; CObject::GetRuntimeClass
EXTRN	?Read@CArchive@@QAEIPAXI@Z:PROC			; CArchive::Read
EXTRN	?Write@CArchive@@QAEXPBXI@Z:PROC		; CArchive::Write
EXTRN	?ReadCount@CArchive@@QAEKXZ:PROC		; CArchive::ReadCount
EXTRN	?WriteCount@CArchive@@QAEXK@Z:PROC		; CArchive::WriteCount
EXTRN	?Create@CPlex@@SGPAU1@AAPAU1@II@Z:PROC		; CPlex::Create
EXTRN	?FreeDataChain@CPlex@@QAEXXZ:PROC		; CPlex::FreeDataChain
EXTRN	??_E?$CList@PAVCRegion_Row@@PAV1@@@UAEPAXI@Z:PROC ; CList<CRegion_Row *,CRegion_Row *>::`vector deleting destructor'
EXTRN	??_ECRegion_Column@@UAEPAXI@Z:PROC		; CRegion_Column::`vector deleting destructor'
EXTRN	?SetRowIndex@CRegion_Row@@QAEXH@Z:PROC		; CRegion_Row::SetRowIndex
EXTRN	??0CRegion_Row@@QAE@H@Z:PROC			; CRegion_Row::CRegion_Row
EXTRN	?SetBlockRegion@CRegion_Row@@QAEXABVCRect@@@Z:PROC ; CRegion_Row::SetBlockRegion
EXTRN	?GetBlockRegion@CRegion_Row@@QBE?AVCRect@@XZ:PROC ; CRegion_Row::GetBlockRegion
EXTRN	?GetRowIndex@CRegion_Row@@QAEHXZ:PROC		; CRegion_Row::GetRowIndex
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R1A@?0A@EA@?$CList@PAVCRegion_Row@@PAV1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CList@PAVCRegion_Row@@PAV1@@@8 DD FLAT:??_R0?AV?$CList@PAVCRegion_Row@@PAV1@@@@8 ; CList<CRegion_Row *,CRegion_Row *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CList@PAVCRegion_Row@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CList@PAVCRegion_Row@@PAV1@@@8
rdata$r	SEGMENT
??_R2?$CList@PAVCRegion_Row@@PAV1@@@8 DD FLAT:??_R1A@?0A@EA@?$CList@PAVCRegion_Row@@PAV1@@@8 ; CList<CRegion_Row *,CRegion_Row *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CList@PAVCRegion_Row@@PAV1@@@8
rdata$r	SEGMENT
??_R3?$CList@PAVCRegion_Row@@PAV1@@@8 DD 00H		; CList<CRegion_Row *,CRegion_Row *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CList@PAVCRegion_Row@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CList@PAVCRegion_Row@@PAV1@@@@8
data$rs	SEGMENT
??_R0?AV?$CList@PAVCRegion_Row@@PAV1@@@@8 DD FLAT:??_7type_info@@6B@ ; CList<CRegion_Row *,CRegion_Row *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CList@PAVCRegion_Row@@PAV1@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CList@PAVCRegion_Row@@PAV1@@@6B@
rdata$r	SEGMENT
??_R4?$CList@PAVCRegion_Row@@PAV1@@@6B@ DD 00H		; CList<CRegion_Row *,CRegion_Row *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CList@PAVCRegion_Row@@PAV1@@@@8
	DD	FLAT:??_R3?$CList@PAVCRegion_Row@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CRegion_Column@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CRegion_Column@@8 DD FLAT:??_R0?AVCRegion_Column@@@8 ; CRegion_Column::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CRegion_Column@@8
rdata$r	ENDS
;	COMDAT ??_R2CRegion_Column@@8
rdata$r	SEGMENT
??_R2CRegion_Column@@8 DD FLAT:??_R1A@?0A@EA@CRegion_Column@@8 ; CRegion_Column::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CRegion_Column@@8
rdata$r	SEGMENT
??_R3CRegion_Column@@8 DD 00H				; CRegion_Column::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CRegion_Column@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCRegion_Column@@@8
data$rs	SEGMENT
??_R0?AVCRegion_Column@@@8 DD FLAT:??_7type_info@@6B@	; CRegion_Column `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCRegion_Column@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CRegion_Column@@6B@
rdata$r	SEGMENT
??_R4CRegion_Column@@6B@ DD 00H				; CRegion_Column::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCRegion_Column@@@8
	DD	FLAT:??_R3CRegion_Column@@8
rdata$r	ENDS
;	COMDAT ??_7CRegion_Column@@6B@
CONST	SEGMENT
??_7CRegion_Column@@6B@ DD FLAT:??_R4CRegion_Column@@6B@ ; CRegion_Column::`vftable'
	DD	FLAT:??_ECRegion_Column@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CList@PAVCRegion_Row@@PAV1@@@6B@
CONST	SEGMENT
??_7?$CList@PAVCRegion_Row@@PAV1@@@6B@ DD FLAT:??_R4?$CList@PAVCRegion_Row@@PAV1@@@6B@ ; CList<CRegion_Row *,CRegion_Row *>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CList@PAVCRegion_Row@@PAV1@@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CList@PAVCRegion_Row@@PAV1@@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CObject@@8
rdata$r	SEGMENT
??_R2CObject@@8 DD FLAT:??_R1A@?0A@EA@CObject@@8	; CObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObject@@8
rdata$r	SEGMENT
??_R3CObject@@8 DD 00H					; CObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
data$rs	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
data$rs	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GCRegion_Column@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:___std_terminate
__ehfuncinfo$??_GCRegion_Column@@UAEPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_GCRegion_Column@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?MakeRowList@CRegion_Column@@AAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MakeRowList@CRegion_Column@@AAEXH@Z$0
__ehfuncinfo$?MakeRowList@CRegion_Column@@AAEXH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?MakeRowList@CRegion_Column@@AAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$CList@PAVCRegion_Row@@PAV1@@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_G?$CList@PAVCRegion_Row@@PAV1@@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$CList@PAVCRegion_Row@@PAV1@@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CList@PAVCRegion_Row@@PAV1@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?InsertRow@CRegion_Column@@QAE_NH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InsertRow@CRegion_Column@@QAE_NH@Z$0
__ehfuncinfo$?InsertRow@CRegion_Column@@QAE_NH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?InsertRow@CRegion_Column@@QAE_NH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CRegion_Column@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1CRegion_Column@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CRegion_Column@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CRegion_Column@@QAE@HH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CRegion_Column@@QAE@HH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CRegion_Column@@QAE@HH@Z$1
__ehfuncinfo$??0CRegion_Column@@QAE@HH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CRegion_Column@@QAE@HH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@PAVCRegion_Row@@@@YGXAAVCArchive@@PAPAVCRegion_Row@@H@Z
_TEXT	SEGMENT
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@PAVCRegion_Row@@@@YGXAAVCArchive@@PAPAVCRegion_Row@@H@Z PROC ; SerializeElements<CRegion_Row *>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR _nCount$[ebp]
  0000b	57		 push	 edi
  0000c	85 f6		 test	 esi, esi
  0000e	74 08		 je	 SHORT $LN2@SerializeE
  00010	85 c9		 test	 ecx, ecx
  00012	0f 84 89 00 00
	00		 je	 $LN34@SerializeE
$LN2@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00018	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  0001b	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0001e	f7 d0		 not	 eax
  00020	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00022	74 3c		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;
; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )

  00024	85 f6		 test	 esi, esi
  00026	74 31		 je	 SHORT $LN8@SerializeE
  00028	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL5@SerializeE:

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00030	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00035	3b f3		 cmp	 esi, ebx
  00037	0f 42 de	 cmovb	 ebx, esi

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0003a	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
  00041	57		 push	 edi
  00042	51		 push	 ecx
  00043	8b ca		 mov	 ecx, edx
  00045	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;
; 87   : 			pData += nElementsToWrite;

  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  00050	03 cf		 add	 ecx, edi
  00052	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  00055	2b f3		 sub	 esi, ebx
  00057	75 d7		 jne	 SHORT $LL5@SerializeE
$LN8@SerializeE:
  00059	5f		 pop	 edi

; 105  : 		}
; 106  : 	}
; 107  : }

  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	5d		 pop	 ebp
  0005d	c2 0c 00	 ret	 12			; 0000000cH
$LN10@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  00060	85 f6		 test	 esi, esi
  00062	74 f5		 je	 SHORT $LN8@SerializeE
$LL7@SerializeE:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00064	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00069	3b f7		 cmp	 esi, edi
  0006b	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0006e	8d 1c bd 00 00
	00 00		 lea	 ebx, DWORD PTR [edi*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00075	53		 push	 ebx
  00076	51		 push	 ecx
  00077	8b ca		 mov	 ecx, edx
  00079	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0007e	3b c3		 cmp	 eax, ebx
  00080	75 16		 jne	 SHORT $LN23@SerializeE
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  00082	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00085	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;
; 104  : 			pData += nElementsToRead;

  00088	03 cb		 add	 ecx, ebx
  0008a	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  0008d	2b f7		 sub	 esi, edi
  0008f	75 d3		 jne	 SHORT $LL7@SerializeE

; 105  : 		}
; 106  : 	}
; 107  : }

  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	5d		 pop	 ebp
  00095	c2 0c 00	 ret	 12			; 0000000cH
$LN23@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 402  : 		AfxThrowArchiveException(CArchiveException::endOfFile);

  00098	6a 00		 push	 0
  0009a	6a 03		 push	 3
  0009c	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN34@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  000a1	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN32@SerializeE:
  000a6	cc		 int	 3
??$SerializeElements@PAVCRegion_Row@@@@YGXAAVCArchive@@PAPAVCRegion_Row@@H@Z ENDP ; SerializeElements<CRegion_Row *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??_GCRegion_Column@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GCRegion_Column@@UAEPAXI@Z PROC			; CRegion_Column::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_GCRegion_Column@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp

; 28   : 	POSITION pos = m_RowRegionList.GetHeadPosition();

  00026	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00030	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CRegion_Column@@6B@

; 29   : 	while(pos) {

  00036	85 f6		 test	 esi, esi
  00038	74 19		 je	 SHORT $LN15@scalar
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL5@scalar:

; 31   : 		delete pRowRegion;

  00040	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00043	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp

; 31   : 		delete pRowRegion;

  00045	85 c9		 test	 ecx, ecx
  00047	74 06		 je	 SHORT $LN8@scalar
  00049	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004b	6a 01		 push	 1
  0004d	ff 10		 call	 DWORD PTR [eax]
$LN8@scalar:

; 29   : 	while(pos) {

  0004f	85 f6		 test	 esi, esi
  00051	75 ed		 jne	 SHORT $LL5@scalar
$LN15@scalar:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00053	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  00056	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  0005d	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  00064	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  0006b	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00072	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00077	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0

; 872  : 	m_pBlocks->FreeDataChain();

  0007e	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]

; 878  : {

  00081	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00085	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ??_7?$CList@PAVCRegion_Row@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  0008c	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00093	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  0009a	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  000a1	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0

; 872  : 	m_pBlocks->FreeDataChain();

  000a8	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain
  000ad	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 873  : 	m_pBlocks = NULL;

  000b1	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0
  000b8	74 0b		 je	 SHORT $LN39@scalar
  000ba	6a 24		 push	 36			; 00000024H
  000bc	57		 push	 edi
  000bd	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000c2	83 c4 08	 add	 esp, 8
$LN39@scalar:
  000c5	8b c7		 mov	 eax, edi
  000c7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ca	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d1	59		 pop	 ecx
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c2 04 00	 ret	 4
  000da	cc		 int	 3
  000db	cc		 int	 3
  000dc	cc		 int	 3
  000dd	cc		 int	 3
  000de	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_GCRegion_Column@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GCRegion_Column@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GCRegion_Column@@UAEPAXI@Z ENDP			; CRegion_Column::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
;	COMDAT ?SetModifiedRowIndexs@CRegion_Column@@AAEXXZ
_TEXT	SEGMENT
?SetModifiedRowIndexs@CRegion_Column@@AAEXXZ PROC	; CRegion_Column::SetModifiedRowIndexs, COMDAT
; _this$ = ecx

; 87   : {

  00000	56		 push	 esi

; 88   : 	POSITION rowPos = m_RowRegionList.GetHeadPosition();

  00001	8b 71 0c	 mov	 esi, DWORD PTR [ecx+12]
  00004	57		 push	 edi

; 89   : 	int nRowIndex = 0;

  00005	33 ff		 xor	 edi, edi

; 90   : 	while(rowPos) {

  00007	85 f6		 test	 esi, esi
  00009	74 15		 je	 SHORT $LN3@SetModifie
  0000b	0f 1f 44 00 00	 npad	 5
$LL2@SetModifie:

; 92   : 		pRow->SetRowIndex(nRowIndex);

  00010	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00013	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp

; 92   : 		pRow->SetRowIndex(nRowIndex);

  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ?SetRowIndex@CRegion_Row@@QAEXH@Z ; CRegion_Row::SetRowIndex

; 93   : 		nRowIndex++;

  0001b	47		 inc	 edi
  0001c	85 f6		 test	 esi, esi
  0001e	75 f0		 jne	 SHORT $LL2@SetModifie
$LN3@SetModifie:
  00020	5f		 pop	 edi

; 94   : 	}
; 95   : }

  00021	5e		 pop	 esi
  00022	c3		 ret	 0
?SetModifiedRowIndexs@CRegion_Column@@AAEXXZ ENDP	; CRegion_Column::SetModifiedRowIndexs
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
;	COMDAT ?MakeRowList@CRegion_Column@@AAEXH@Z
_TEXT	SEGMENT
$T2 = -24						; size = 4
_pPrev$1$ = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nRowCount$ = 8						; size = 4
?MakeRowList@CRegion_Column@@AAEXH@Z PROC		; CRegion_Column::MakeRowList, COMDAT
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?MakeRowList@CRegion_Column@@AAEXH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx

; 39   : 	for(int nRow = 0 ; nRow < nRowCount ; nRow++)

  0002a	8b 7d 08	 mov	 edi, DWORD PTR _nRowCount$[ebp]
  0002d	33 db		 xor	 ebx, ebx
  0002f	85 ff		 test	 edi, edi
  00031	0f 8e bb 00 00
	00		 jle	 $LN37@MakeRowLis
$LL4@MakeRowLis:

; 40   : 		m_RowRegionList.AddTail(new CRegion_Row(nRow));

  00037	6a 18		 push	 24			; 00000018H
  00039	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003e	83 c4 04	 add	 esp, 4
  00041	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004b	85 c0		 test	 eax, eax
  0004d	74 0d		 je	 SHORT $LN6@MakeRowLis
  0004f	53		 push	 ebx
  00050	8b c8		 mov	 ecx, eax
  00052	e8 00 00 00 00	 call	 ??0CRegion_Row@@QAE@H@Z	; CRegion_Row::CRegion_Row
  00057	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
  0005a	eb 07		 jmp	 SHORT $LN7@MakeRowLis
$LN6@MakeRowLis:
  0005c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0
$LN7@MakeRowLis:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 902  : 	if (m_pNodeFree == NULL)

  00063	8b 56 18	 mov	 edx, DWORD PTR [esi+24]

; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  00066	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp

; 40   : 		m_RowRegionList.AddTail(new CRegion_Row(nRow));

  00069	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  00070	89 45 ec	 mov	 DWORD PTR _pPrev$1$[ebp], eax

; 902  : 	if (m_pNodeFree == NULL)

  00073	85 d2		 test	 edx, edx
  00075	75 47		 jne	 SHORT $LN35@MakeRowLis

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  00077	6a 0c		 push	 12			; 0000000cH
  00079	ff 76 20	 push	 DWORD PTR [esi+32]
  0007c	8d 46 1c	 lea	 eax, DWORD PTR [esi+28]
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  00085	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  00088	83 c0 08	 add	 eax, 8
  0008b	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  0008e	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00091	8d 7a ff	 lea	 edi, DWORD PTR [edx-1]
  00094	83 c0 f4	 add	 eax, -12		; fffffff4H
  00097	85 ff		 test	 edi, edi
  00099	78 19		 js	 SHORT $LN36@MakeRowLis
  0009b	0f 1f 44 00 00	 npad	 5
$LL16@MakeRowLis:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  000a0	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000a3	8b d0		 mov	 edx, eax
  000a5	89 08		 mov	 DWORD PTR [eax], ecx

; 915  : 			m_pNodeFree = pNode;

  000a7	89 46 18	 mov	 DWORD PTR [esi+24], eax
  000aa	83 e8 0c	 sub	 eax, 12			; 0000000cH
  000ad	83 ef 01	 sub	 edi, 1
  000b0	79 ee		 jns	 SHORT $LL16@MakeRowLis
  000b2	eb 03		 jmp	 SHORT $LN19@MakeRowLis
$LN36@MakeRowLis:
  000b4	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
$LN19@MakeRowLis:

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  000b7	85 d2		 test	 edx, edx
  000b9	74 4b		 je	 SHORT $LN27@MakeRowLis
  000bb	8b 7d 08	 mov	 edi, DWORD PTR _nRowCount$[ebp]
$LN35@MakeRowLis:

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  000be	8b 02		 mov	 eax, DWORD PTR [edx]
  000c0	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 922  : 	pNode->pPrev = pPrev;

  000c3	8b 45 ec	 mov	 eax, DWORD PTR _pPrev$1$[ebp]
  000c6	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 969  : 	pNewNode->data = newElement;

  000c9	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]

; 923  : 	pNode->pNext = pNext;

  000cc	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 924  : 	m_nCount++;

  000d2	ff 46 14	 inc	 DWORD PTR [esi+20]

; 969  : 	pNewNode->data = newElement;

  000d5	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 970  : 	if (m_pNodeTail != NULL)

  000d8	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000db	85 c0		 test	 eax, eax
  000dd	74 04		 je	 SHORT $LN10@MakeRowLis

; 971  : 		m_pNodeTail->pNext = pNewNode;

  000df	89 10		 mov	 DWORD PTR [eax], edx
  000e1	eb 03		 jmp	 SHORT $LN11@MakeRowLis
$LN10@MakeRowLis:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;

  000e3	89 56 0c	 mov	 DWORD PTR [esi+12], edx
$LN11@MakeRowLis:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp

; 39   : 	for(int nRow = 0 ; nRow < nRowCount ; nRow++)

  000e6	43		 inc	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 974  : 	m_pNodeTail = pNewNode;

  000e7	89 56 10	 mov	 DWORD PTR [esi+16], edx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp

; 39   : 	for(int nRow = 0 ; nRow < nRowCount ; nRow++)

  000ea	3b df		 cmp	 ebx, edi
  000ec	0f 8c 45 ff ff
	ff		 jl	 $LL4@MakeRowLis
$LN37@MakeRowLis:

; 41   : }

  000f2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fc	59		 pop	 ecx
  000fd	5f		 pop	 edi
  000fe	5e		 pop	 esi
  000ff	5b		 pop	 ebx
  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c2 04 00	 ret	 4
$LN27@MakeRowLis:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00106	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN39@MakeRowLis:
  0010b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?MakeRowList@CRegion_Column@@AAEXH@Z$0:
  00000	6a 18		 push	 24			; 00000018H
  00002	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?MakeRowList@CRegion_Column@@AAEXH@Z:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?MakeRowList@CRegion_Column@@AAEXH@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?MakeRowList@CRegion_Column@@AAEXH@Z ENDP		; CRegion_Column::MakeRowList
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_G?$CList@PAVCRegion_Row@@PAV1@@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$CList@PAVCRegion_Row@@PAV1@@@UAEPAXI@Z PROC	; CList<CRegion_Row *,CRegion_Row *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$CList@PAVCRegion_Row@@PAV1@@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00025	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 878  : {

  00028	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@PAVCRegion_Row@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  00035	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  0003c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00043	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0004a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 872  : 	m_pBlocks->FreeDataChain();

  00051	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00056	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00059	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00060	a8 01		 test	 al, 1
  00062	74 2c		 je	 SHORT $LN22@scalar
  00064	a8 04		 test	 al, 4
  00066	75 1d		 jne	 SHORT $LN3@scalar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 112  : 	{ ::operator delete(p); }

  00068	56		 push	 esi
  00069	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006e	83 c4 04	 add	 esp, 4
  00071	8b c6		 mov	 eax, esi
  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007d	59		 pop	 ecx
  0007e	5e		 pop	 esi
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
$LN3@scalar:
  00085	6a 1c		 push	 28			; 0000001cH
  00087	56		 push	 esi
  00088	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0008d	83 c4 08	 add	 esp, 8
$LN22@scalar:
  00090	8b c6		 mov	 eax, esi
  00092	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00095	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009c	59		 pop	 ecx
  0009d	5e		 pop	 esi
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 04 00	 ret	 4
  000a4	cc		 int	 3
  000a5	cc		 int	 3
  000a6	cc		 int	 3
  000a7	cc		 int	 3
  000a8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_G?$CList@PAVCRegion_Row@@PAV1@@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$CList@PAVCRegion_Row@@PAV1@@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$CList@PAVCRegion_Row@@PAV1@@@UAEPAXI@Z ENDP	; CList<CRegion_Row *,CRegion_Row *>::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CList@PAVCRegion_Row@@PAV1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_nNewCount$1$ = -16					; size = 4
_newData$1 = -12					; size = 4
_pData$1$ = -8						; size = 4
_pData$1$ = -8						; size = 4
_pNode$1$ = -8						; size = 4
_nElementsLeft$1$ = -4					; size = 4
_this$1$ = -4						; size = 4
_ar$ = 8						; size = 4
?Serialize@?$CList@PAVCRegion_Row@@PAV1@@@UAEXAAVCArchive@@@Z PROC ; CList<CRegion_Row *,CRegion_Row *>::Serialize, COMDAT
; _this$ = ecx

; 1169 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00009	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1169 : {

  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00011	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00014	f7 d0		 not	 eax
  00016	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1174 : 	if (ar.IsStoring())

  00018	0f 84 ae 00 00
	00		 je	 $LN7@Serialize

; 1175 : 	{
; 1176 : 		ar.WriteCount(m_nCount);

  0001e	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00021	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00026	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00029	89 45 f8	 mov	 DWORD PTR _pNode$1$[ebp], eax
  0002c	85 c0		 test	 eax, eax
  0002e	0f 84 b9 01 00
	00		 je	 $LN86@Serialize
$LL4@Serialize:

; 1178 : 		{
; 1179 : 			ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1180 : 			TYPE* pData;
; 1181 : 			/*
; 1182 : 			 * in some cases the & operator might be overloaded, and we cannot use it to obtain
; 1183 : 			 * the address of a given object.  We then use the following trick to get the address
; 1184 : 			 */
; 1185 : 			pData = reinterpret_cast< TYPE* >( &reinterpret_cast< int& >( static_cast< TYPE& >( pNode->data ) ) );

  00034	8d 70 08	 lea	 esi, DWORD PTR [eax+8]

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00037	85 f6		 test	 esi, esi
  00039	0f 84 c0 01 00
	00		 je	 $LN76@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00042	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00045	f7 d0		 not	 eax
  00047	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00049	74 33		 je	 SHORT $LN21@Serialize

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0004b	b8 01 00 00 00	 mov	 eax, 1
  00050	89 45 fc	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
$LL16@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00053	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00058	3b c3		 cmp	 eax, ebx
  0005a	0f 42 d8	 cmovb	 ebx, eax

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0005d	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
  00064	57		 push	 edi
  00065	56		 push	 esi
  00066	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _nElementsLeft$1$[ebp]

; 87   : 			pData += nElementsToWrite;

  0006e	03 f7		 add	 esi, edi
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00073	2b c3		 sub	 eax, ebx
  00075	89 45 fc	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
  00078	85 c0		 test	 eax, eax
  0007a	75 d7		 jne	 SHORT $LL16@Serialize

; 88   : 		}
; 89   : 	}

  0007c	eb 35		 jmp	 SHORT $LN2@Serialize
$LN21@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  0007e	bf 01 00 00 00	 mov	 edi, 1
$LL18@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00083	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00088	3b fb		 cmp	 edi, ebx
  0008a	0f 42 df	 cmovb	 ebx, edi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0008d	8d 04 9d 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00094	50		 push	 eax
  00095	56		 push	 esi
  00096	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0009b	8d 0c 9d 00 00
	00 00		 lea	 ecx, DWORD PTR [ebx*4]
  000a2	3b c1		 cmp	 eax, ecx
  000a4	0f 85 4c 01 00
	00		 jne	 $LN75@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  000aa	03 f1		 add	 esi, ecx
  000ac	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;

  000af	2b fb		 sub	 edi, ebx
  000b1	75 d0		 jne	 SHORT $LL18@Serialize
$LN2@Serialize:

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  000b3	8b 45 f8	 mov	 eax, DWORD PTR _pNode$1$[ebp]
  000b6	8b 00		 mov	 eax, DWORD PTR [eax]
  000b8	89 45 f8	 mov	 DWORD PTR _pNode$1$[ebp], eax
  000bb	85 c0		 test	 eax, eax
  000bd	0f 85 71 ff ff
	ff		 jne	 $LL4@Serialize

; 1197 : 		}
; 1198 : 	}
; 1199 : }

  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 04 00	 ret	 4
$LN7@Serialize:

; 1186 : 			SerializeElements<TYPE>(ar, pData, 1);
; 1187 : 		}
; 1188 : 	}
; 1189 : 	else
; 1190 : 	{
; 1191 : 		DWORD_PTR nNewCount = ar.ReadCount();

  000cc	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount

; 1192 : 		while (nNewCount--)

  000d1	85 c0		 test	 eax, eax
  000d3	0f 84 14 01 00
	00		 je	 $LN86@Serialize
  000d9	0f 1f 80 00 00
	00 00		 npad	 7
$LL5@Serialize:
  000e0	48		 dec	 eax
  000e1	89 45 f0	 mov	 DWORD PTR _nNewCount$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  000e4	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  000e7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000ea	f7 d1		 not	 ecx
  000ec	f6 c1 01	 test	 cl, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  000ef	74 3d		 je	 SHORT $LN42@Serialize

; 79   : 		pData = pElements;

  000f1	8d 4d f4	 lea	 ecx, DWORD PTR _newData$1[ebp]
  000f4	bb 01 00 00 00	 mov	 ebx, 1
  000f9	89 4d f8	 mov	 DWORD PTR _pData$1$[ebp], ecx
  000fc	0f 1f 40 00	 npad	 4
$LL37@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00100	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00105	3b df		 cmp	 ebx, edi
  00107	0f 42 fb	 cmovb	 edi, ebx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0010a	8d 34 bd 00 00
	00 00		 lea	 esi, DWORD PTR [edi*4]
  00111	56		 push	 esi
  00112	51		 push	 ecx
  00113	8b c8		 mov	 ecx, eax
  00115	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 87   : 			pData += nElementsToWrite;

  0011a	8b 4d f8	 mov	 ecx, DWORD PTR _pData$1$[ebp]
  0011d	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  00120	03 ce		 add	 ecx, esi
  00122	89 4d f8	 mov	 DWORD PTR _pData$1$[ebp], ecx
  00125	2b df		 sub	 ebx, edi
  00127	75 d7		 jne	 SHORT $LL37@Serialize

; 88   : 		}
; 89   : 	}

  00129	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  0012c	eb 4a		 jmp	 SHORT $LN40@Serialize
$LN42@Serialize:

; 96   : 		pData = pElements;

  0012e	8d 55 f4	 lea	 edx, DWORD PTR _newData$1[ebp]
  00131	be 01 00 00 00	 mov	 esi, 1
  00136	89 55 f8	 mov	 DWORD PTR _pData$1$[ebp], edx
  00139	0f 1f 80 00 00
	00 00		 npad	 7
$LL39@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00140	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00145	3b f7		 cmp	 esi, edi
  00147	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0014a	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00151	51		 push	 ecx
  00152	52		 push	 edx
  00153	8b c8		 mov	 ecx, eax
  00155	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0015a	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
  00161	3b c1		 cmp	 eax, ecx
  00163	0f 85 8d 00 00
	00		 jne	 $LN75@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  00169	8b 55 f8	 mov	 edx, DWORD PTR _pData$1$[ebp]
  0016c	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]

; 104  : 			pData += nElementsToRead;

  0016f	03 d1		 add	 edx, ecx
  00171	89 55 f8	 mov	 DWORD PTR _pData$1$[ebp], edx
  00174	2b f7		 sub	 esi, edi
  00176	75 c8		 jne	 SHORT $LL39@Serialize
$LN40@Serialize:

; 902  : 	if (m_pNodeFree == NULL)

  00178	83 7b 10 00	 cmp	 DWORD PTR [ebx+16], 0

; 1193 : 		{
; 1194 : 			TYPE newData[1];
; 1195 : 			SerializeElements<TYPE>(ar, newData, 1);
; 1196 : 			AddTail(newData[0]);

  0017c	8b 75 f4	 mov	 esi, DWORD PTR _newData$1[ebp]

; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  0017f	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]

; 902  : 	if (m_pNodeFree == NULL)

  00182	75 32		 jne	 SHORT $LN63@Serialize

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  00184	6a 0c		 push	 12			; 0000000cH
  00186	ff 73 18	 push	 DWORD PTR [ebx+24]
  00189	8d 43 14	 lea	 eax, DWORD PTR [ebx+20]
  0018c	50		 push	 eax
  0018d	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  00192	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  00195	83 c0 08	 add	 eax, 8
  00198	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  0019b	83 c2 ff	 add	 edx, -1
  0019e	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  001a1	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  001a4	78 10		 js	 SHORT $LN63@Serialize
$LL60@Serialize:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  001a6	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  001a9	89 01		 mov	 DWORD PTR [ecx], eax

; 915  : 			m_pNodeFree = pNode;

  001ab	89 4b 10	 mov	 DWORD PTR [ebx+16], ecx
  001ae	83 e9 0c	 sub	 ecx, 12			; 0000000cH
  001b1	83 ea 01	 sub	 edx, 1
  001b4	79 f0		 jns	 SHORT $LL60@Serialize
$LN63@Serialize:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  001b6	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  001b9	85 c9		 test	 ecx, ecx
  001bb	74 42		 je	 SHORT $LN76@Serialize

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  001bd	8b 01		 mov	 eax, DWORD PTR [ecx]
  001bf	89 43 10	 mov	 DWORD PTR [ebx+16], eax

; 922  : 	pNode->pPrev = pPrev;

  001c2	89 79 04	 mov	 DWORD PTR [ecx+4], edi

; 923  : 	pNode->pNext = pNext;

  001c5	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 924  : 	m_nCount++;

  001cb	ff 43 0c	 inc	 DWORD PTR [ebx+12]

; 969  : 	pNewNode->data = newElement;

  001ce	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 970  : 	if (m_pNodeTail != NULL)

  001d1	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  001d4	85 c0		 test	 eax, eax
  001d6	74 04		 je	 SHORT $LN54@Serialize

; 971  : 		m_pNodeTail->pNext = pNewNode;

  001d8	89 08		 mov	 DWORD PTR [eax], ecx
  001da	eb 03		 jmp	 SHORT $LN55@Serialize
$LN54@Serialize:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;

  001dc	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
$LN55@Serialize:

; 1192 : 		while (nNewCount--)

  001df	8b 45 f0	 mov	 eax, DWORD PTR _nNewCount$1$[ebp]

; 974  : 	m_pNodeTail = pNewNode;

  001e2	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx

; 1192 : 		while (nNewCount--)

  001e5	85 c0		 test	 eax, eax
  001e7	0f 85 f3 fe ff
	ff		 jne	 $LL5@Serialize
$LN86@Serialize:
  001ed	5f		 pop	 edi

; 1197 : 		}
; 1198 : 	}
; 1199 : }

  001ee	5e		 pop	 esi
  001ef	5b		 pop	 ebx
  001f0	8b e5		 mov	 esp, ebp
  001f2	5d		 pop	 ebp
  001f3	c2 04 00	 ret	 4
$LN75@Serialize:
  001f6	6a 00		 push	 0
  001f8	6a 03		 push	 3
  001fa	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN76@Serialize:
  001ff	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN105@Serialize:
  00204	cc		 int	 3
?Serialize@?$CList@PAVCRegion_Row@@PAV1@@@UAEXAAVCArchive@@@Z ENDP ; CList<CRegion_Row *,CRegion_Row *>::Serialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??1?$CList@PAVCRegion_Row@@PAV1@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CList@PAVCRegion_Row@@PAV1@@@UAE@XZ PROC		; CList<CRegion_Row *,CRegion_Row *>::~CList<CRegion_Row *,CRegion_Row *>, COMDAT
; _this$ = ecx

; 878  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CList@PAVCRegion_Row@@PAV1@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 872  : 	m_pBlocks->FreeDataChain();

  00025	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 878  : {

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@PAVCRegion_Row@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  0002e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00035	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0003c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00043	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 872  : 	m_pBlocks->FreeDataChain();

  0004a	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0004f	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 879  : 	RemoveAll();
; 880  : 	ASSERT(m_nCount == 0);
; 881  : }

  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	5e		 pop	 esi
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
  00066	cc		 int	 3
  00067	cc		 int	 3
  00068	cc		 int	 3
  00069	cc		 int	 3
  0006a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CList@PAVCRegion_Row@@PAV1@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CList@PAVCRegion_Row@@PAV1@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CList@PAVCRegion_Row@@PAV1@@@UAE@XZ ENDP		; CList<CRegion_Row *,CRegion_Row *>::~CList<CRegion_Row *,CRegion_Row *>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?NewNode@?$CList@PAVCRegion_Row@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z
_TEXT	SEGMENT
_pPrev$ = 8						; size = 4
_pNext$ = 12						; size = 4
?NewNode@?$CList@PAVCRegion_Row@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z PROC ; CList<CRegion_Row *,CRegion_Row *>::NewNode, COMDAT
; _this$ = ecx

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 902  : 	if (m_pNodeFree == NULL)

  00006	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0000a	75 34		 jne	 SHORT $LN7@NewNode

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  0000c	6a 0c		 push	 12			; 0000000cH
  0000e	ff 76 18	 push	 DWORD PTR [esi+24]
  00011	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001a	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0001d	83 c0 08	 add	 eax, 8
  00020	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  00023	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00026	83 c0 f4	 add	 eax, -12		; fffffff4H

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00029	83 c2 ff	 add	 edx, -1
  0002c	78 12		 js	 SHORT $LN7@NewNode
  0002e	66 90		 npad	 2
$LL4@NewNode:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	89 08		 mov	 DWORD PTR [eax], ecx

; 915  : 			m_pNodeFree = pNode;

  00035	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00038	83 e8 0c	 sub	 eax, 12			; 0000000cH
  0003b	83 ea 01	 sub	 edx, 1
  0003e	79 f0		 jns	 SHORT $LL4@NewNode
$LN7@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00040	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00043	85 c0		 test	 eax, eax
  00045	74 18		 je	 SHORT $LN17@NewNode

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00047	8b 08		 mov	 ecx, DWORD PTR [eax]
  00049	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 922  : 	pNode->pPrev = pPrev;

  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _pPrev$[ebp]
  0004f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 923  : 	pNode->pNext = pNext;

  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _pNext$[ebp]
  00055	89 08		 mov	 DWORD PTR [eax], ecx

; 924  : 	m_nCount++;

  00057	ff 46 0c	 inc	 DWORD PTR [esi+12]

; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;
; 930  : #pragma pop_macro("new")
; 931  : 	return pNode;

  0005a	5e		 pop	 esi

; 932  : }

  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
$LN17@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  0005f	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN15@NewNode:
  00064	cc		 int	 3
?NewNode@?$CList@PAVCRegion_Row@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z ENDP ; CList<CRegion_Row *,CRegion_Row *>::NewNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?InsertBefore@?$CList@PAVCRegion_Row@@PAV1@@@QAEPAU__POSITION@@PAU2@PAVCRegion_Row@@@Z
_TEXT	SEGMENT
_position$ = 8						; size = 4
_newElement$ = 12					; size = 4
?InsertBefore@?$CList@PAVCRegion_Row@@PAV1@@@QAEPAU__POSITION@@PAU2@PAVCRegion_Row@@@Z PROC ; CList<CRegion_Row *,CRegion_Row *>::InsertBefore, COMDAT
; _this$ = ecx

; 1045 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1046 : 	ASSERT_VALID(this);
; 1047 : 
; 1048 : 	if (position == NULL)

  00005	8b 7d 08	 mov	 edi, DWORD PTR _position$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	85 ff		 test	 edi, edi
  0000c	75 2e		 jne	 SHORT $LN2@InsertBefo

; 953  : 	CNode* pNewNode = NewNode(NULL, m_pNodeHead);

  0000e	ff 76 04	 push	 DWORD PTR [esi+4]
  00011	57		 push	 edi
  00012	e8 00 00 00 00	 call	 ?NewNode@?$CList@PAVCRegion_Row@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<CRegion_Row *,CRegion_Row *>::NewNode

; 954  : 	pNewNode->data = newElement;

  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _newElement$[ebp]
  0001a	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 955  : 	if (m_pNodeHead != NULL)

  0001d	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00020	85 c9		 test	 ecx, ecx
  00022	74 0c		 je	 SHORT $LN7@InsertBefo

; 956  : 		m_pNodeHead->pPrev = pNewNode;

  00024	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00027	5f		 pop	 edi

; 959  : 	m_pNodeHead = pNewNode;

  00028	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1067 : 	return (POSITION) pNewNode;
; 1068 : }

  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
$LN7@InsertBefo:
  00030	5f		 pop	 edi

; 958  : 		m_pNodeTail = pNewNode;

  00031	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 959  : 	m_pNodeHead = pNewNode;

  00034	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1067 : 	return (POSITION) pNewNode;
; 1068 : }

  00037	5e		 pop	 esi
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN2@InsertBefo:

; 1049 : 		return AddHead(newElement); // insert before nothing -> head of the list
; 1050 : 
; 1051 : 	// Insert it before position
; 1052 : 	CNode* pOldNode = (CNode*) position;
; 1053 : 	CNode* pNewNode = NewNode(pOldNode->pPrev, pOldNode);

  0003c	57		 push	 edi
  0003d	ff 77 04	 push	 DWORD PTR [edi+4]
  00040	e8 00 00 00 00	 call	 ?NewNode@?$CList@PAVCRegion_Row@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<CRegion_Row *,CRegion_Row *>::NewNode

; 1054 : 	pNewNode->data = newElement;

  00045	8b 4d 0c	 mov	 ecx, DWORD PTR _newElement$[ebp]
  00048	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1055 : 
; 1056 : 	if (pOldNode->pPrev != NULL)

  0004b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0004e	85 c9		 test	 ecx, ecx
  00050	74 0b		 je	 SHORT $LN3@InsertBefo

; 1057 : 	{
; 1058 : 		ASSERT(AfxIsValidAddress(pOldNode->pPrev, sizeof(CNode)));
; 1059 : 		pOldNode->pPrev->pNext = pNewNode;

  00052	89 01		 mov	 DWORD PTR [ecx], eax

; 1065 : 	}
; 1066 : 	pOldNode->pPrev = pNewNode;

  00054	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00057	5f		 pop	 edi

; 1067 : 	return (POSITION) pNewNode;
; 1068 : }

  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp
  0005a	c2 08 00	 ret	 8
$LN3@InsertBefo:

; 1060 : 	}
; 1061 : 	else
; 1062 : 	{
; 1063 : 		ASSERT(pOldNode == m_pNodeHead);
; 1064 : 		m_pNodeHead = pNewNode;

  0005d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1065 : 	}
; 1066 : 	pOldNode->pPrev = pNewNode;

  00060	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00063	5f		 pop	 edi

; 1067 : 	return (POSITION) pNewNode;
; 1068 : }

  00064	5e		 pop	 esi
  00065	5d		 pop	 ebp
  00066	c2 08 00	 ret	 8
?InsertBefore@?$CList@PAVCRegion_Row@@PAV1@@@QAEPAU__POSITION@@PAU2@PAVCRegion_Row@@@Z ENDP ; CList<CRegion_Row *,CRegion_Row *>::InsertBefore
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAll@?$CList@PAVCRegion_Row@@PAV1@@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@?$CList@PAVCRegion_Row@@PAV1@@@QAEXXZ PROC	; CList<CRegion_Row *,CRegion_Row *>::RemoveAll, COMDAT
; _this$ = ecx

; 862  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 863  : 	ASSERT_VALID(this);
; 864  : 
; 865  : 	// destroy elements
; 866  : 	CNode* pNode;
; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)
; 868  : 		pNode->data.~TYPE();
; 869  : 
; 870  : 	m_nCount = 0;
; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 872  : 	m_pBlocks->FreeDataChain();

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0000d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00014	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0001b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00022	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00027	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0002e	5e		 pop	 esi

; 874  : }

  0002f	c3		 ret	 0
?RemoveAll@?$CList@PAVCRegion_Row@@PAV1@@@QAEXXZ ENDP	; CList<CRegion_Row *,CRegion_Row *>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?AddTail@?$CList@PAVCRegion_Row@@PAV1@@@QAEPAU__POSITION@@PAVCRegion_Row@@@Z
_TEXT	SEGMENT
_newElement$ = 8					; size = 4
?AddTail@?$CList@PAVCRegion_Row@@PAV1@@@QAEPAU__POSITION@@PAVCRegion_Row@@@Z PROC ; CList<CRegion_Row *,CRegion_Row *>::AddTail, COMDAT
; _this$ = ecx

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 966  : 	ASSERT_VALID(this);
; 967  : 
; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  00006	6a 00		 push	 0
  00008	ff 76 08	 push	 DWORD PTR [esi+8]
  0000b	e8 00 00 00 00	 call	 ?NewNode@?$CList@PAVCRegion_Row@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<CRegion_Row *,CRegion_Row *>::NewNode

; 969  : 	pNewNode->data = newElement;

  00010	8b 55 08	 mov	 edx, DWORD PTR _newElement$[ebp]
  00013	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 970  : 	if (m_pNodeTail != NULL)

  00016	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00019	85 c9		 test	 ecx, ecx
  0001b	74 0a		 je	 SHORT $LN2@AddTail

; 971  : 		m_pNodeTail->pNext = pNewNode;

  0001d	89 01		 mov	 DWORD PTR [ecx], eax

; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;
; 976  : }

  0001f	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
$LN2@AddTail:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;
; 976  : }

  0002a	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0002d	5e		 pop	 esi
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?AddTail@?$CList@PAVCRegion_Row@@PAV1@@@QAEPAU__POSITION@@PAVCRegion_Row@@@Z ENDP ; CList<CRegion_Row *,CRegion_Row *>::AddTail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?AddHead@?$CList@PAVCRegion_Row@@PAV1@@@QAEPAU__POSITION@@PAVCRegion_Row@@@Z
_TEXT	SEGMENT
_newElement$ = 8					; size = 4
?AddHead@?$CList@PAVCRegion_Row@@PAV1@@@QAEPAU__POSITION@@PAVCRegion_Row@@@Z PROC ; CList<CRegion_Row *,CRegion_Row *>::AddHead, COMDAT
; _this$ = ecx

; 950  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 951  : 	ASSERT_VALID(this);
; 952  : 
; 953  : 	CNode* pNewNode = NewNode(NULL, m_pNodeHead);

  00006	ff 76 04	 push	 DWORD PTR [esi+4]
  00009	6a 00		 push	 0
  0000b	e8 00 00 00 00	 call	 ?NewNode@?$CList@PAVCRegion_Row@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<CRegion_Row *,CRegion_Row *>::NewNode

; 954  : 	pNewNode->data = newElement;

  00010	8b 55 08	 mov	 edx, DWORD PTR _newElement$[ebp]
  00013	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 955  : 	if (m_pNodeHead != NULL)

  00016	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00019	85 c9		 test	 ecx, ecx
  0001b	74 0b		 je	 SHORT $LN2@AddHead

; 956  : 		m_pNodeHead->pPrev = pNewNode;

  0001d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 959  : 	m_pNodeHead = pNewNode;
; 960  : 	return (POSITION) pNewNode;
; 961  : }

  00020	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00023	5e		 pop	 esi
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
$LN2@AddHead:

; 957  : 	else
; 958  : 		m_pNodeTail = pNewNode;

  00028	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 959  : 	m_pNodeHead = pNewNode;
; 960  : 	return (POSITION) pNewNode;
; 961  : }

  0002b	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?AddHead@?$CList@PAVCRegion_Row@@PAV1@@@QAEPAU__POSITION@@PAVCRegion_Row@@@Z ENDP ; CList<CRegion_Row *,CRegion_Row *>::AddHead
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??0?$CList@PAVCRegion_Row@@PAV1@@@QAE@H@Z
_TEXT	SEGMENT
_nBlockSize$ = 8					; size = 4
??0?$CList@PAVCRegion_Row@@PAV1@@@QAE@H@Z PROC		; CList<CRegion_Row *,CRegion_Row *>::CList<CRegion_Row *,CRegion_Row *>, COMDAT
; _this$ = ecx

; 851  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;
; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 856  : 	m_pBlocks = NULL;
; 857  : 	m_nBlockSize = nBlockSize;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nBlockSize$[ebp]
  00006	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 858  : }

  00009	8b c1		 mov	 eax, ecx
  0000b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CList@PAVCRegion_Row@@PAV1@@@6B@
  00011	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00018	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0001f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00026	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0002d	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??0?$CList@PAVCRegion_Row@@PAV1@@@QAE@H@Z ENDP		; CList<CRegion_Row *,CRegion_Row *>::CList<CRegion_Row *,CRegion_Row *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
;	COMDAT ?InsertRow@CRegion_Column@@QAE_NH@Z
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nRow$ = 8						; size = 4
?InsertRow@CRegion_Column@@QAE_NH@Z PROC		; CRegion_Column::InsertRow, COMDAT
; _this$ = ecx

; 70   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?InsertRow@CRegion_Column@@QAE_NH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b c1		 mov	 eax, ecx
  0002a	89 45 f0	 mov	 DWORD PTR _this$1$[ebp], eax

; 71   : 	bool bResult = false;
; 72   : 	POSITION rowPos = m_RowRegionList.GetHeadPosition();

  0002d	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  00030	32 db		 xor	 bl, bl

; 73   : 	while(rowPos) {

  00032	85 f6		 test	 esi, esi
  00034	74 72		 je	 SHORT $LN3@InsertRow
$LL2@InsertRow:

; 76   : 		if(pRow->GetRowIndex() == nRow) {

  00036	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00039	8b fe		 mov	 edi, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  0003b	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp

; 76   : 		if(pRow->GetRowIndex() == nRow) {

  0003d	e8 00 00 00 00	 call	 ?GetRowIndex@CRegion_Row@@QAEHXZ ; CRegion_Row::GetRowIndex
  00042	3b 45 08	 cmp	 eax, DWORD PTR _nRow$[ebp]
  00045	75 57		 jne	 SHORT $LN4@InsertRow

; 78   : 			m_RowRegionList.InsertBefore(tmpPos, new CRegion_Row(nRow));

  00047	6a 18		 push	 24			; 00000018H
  00049	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004e	83 c4 04	 add	 esp, 4
  00051	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005b	85 c0		 test	 eax, eax
  0005d	74 0e		 je	 SHORT $LN6@InsertRow
  0005f	ff 75 08	 push	 DWORD PTR _nRow$[ebp]
  00062	8b c8		 mov	 ecx, eax
  00064	e8 00 00 00 00	 call	 ??0CRegion_Row@@QAE@H@Z	; CRegion_Row::CRegion_Row
  00069	8b d8		 mov	 ebx, eax
  0006b	eb 02		 jmp	 SHORT $LN7@InsertRow
$LN6@InsertRow:
  0006d	33 db		 xor	 ebx, ebx
$LN7@InsertRow:
  0006f	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1053 : 	CNode* pNewNode = NewNode(pOldNode->pPrev, pOldNode);

  00072	57		 push	 edi
  00073	ff 77 04	 push	 DWORD PTR [edi+4]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp

; 78   : 			m_RowRegionList.InsertBefore(tmpPos, new CRegion_Row(nRow));

  00076	83 c1 08	 add	 ecx, 8
  00079	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1053 : 	CNode* pNewNode = NewNode(pOldNode->pPrev, pOldNode);

  00080	e8 00 00 00 00	 call	 ?NewNode@?$CList@PAVCRegion_Row@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<CRegion_Row *,CRegion_Row *>::NewNode

; 1054 : 	pNewNode->data = newElement;

  00085	89 58 08	 mov	 DWORD PTR [eax+8], ebx

; 1055 : 
; 1056 : 	if (pOldNode->pPrev != NULL)

  00088	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0008b	85 c9		 test	 ecx, ecx
  0008d	74 04		 je	 SHORT $LN13@InsertRow

; 1057 : 	{
; 1058 : 		ASSERT(AfxIsValidAddress(pOldNode->pPrev, sizeof(CNode)));
; 1059 : 		pOldNode->pPrev->pNext = pNewNode;

  0008f	89 01		 mov	 DWORD PTR [ecx], eax

; 1060 : 	}

  00091	eb 06		 jmp	 SHORT $LN14@InsertRow
$LN13@InsertRow:

; 1061 : 	else
; 1062 : 	{
; 1063 : 		ASSERT(pOldNode == m_pNodeHead);
; 1064 : 		m_pNodeHead = pNewNode;

  00093	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00096	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
$LN14@InsertRow:

; 1065 : 	}
; 1066 : 	pOldNode->pPrev = pNewNode;

  00099	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp

; 79   : 			bResult =  true;

  0009c	b3 01		 mov	 bl, 1
$LN4@InsertRow:

; 73   : 	while(rowPos) {

  0009e	85 f6		 test	 esi, esi
  000a0	75 94		 jne	 SHORT $LL2@InsertRow
  000a2	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
  000a5	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
$LN3@InsertRow:

; 89   : 	int nRowIndex = 0;

  000a8	33 ff		 xor	 edi, edi

; 90   : 	while(rowPos) {

  000aa	85 f6		 test	 esi, esi
  000ac	74 12		 je	 SHORT $LN33@InsertRow
  000ae	66 90		 npad	 2
$LL21@InsertRow:

; 92   : 		pRow->SetRowIndex(nRowIndex);

  000b0	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  000b3	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp

; 92   : 		pRow->SetRowIndex(nRowIndex);

  000b5	57		 push	 edi
  000b6	e8 00 00 00 00	 call	 ?SetRowIndex@CRegion_Row@@QAEXH@Z ; CRegion_Row::SetRowIndex

; 93   : 		nRowIndex++;

  000bb	47		 inc	 edi
  000bc	85 f6		 test	 esi, esi
  000be	75 f0		 jne	 SHORT $LL21@InsertRow
$LN33@InsertRow:

; 80   : 		}
; 81   : 	}
; 82   : 	SetModifiedRowIndexs();
; 83   : 	return bResult;
; 84   : }

  000c0	8a c3		 mov	 al, bl
  000c2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cc	59		 pop	 ecx
  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?InsertRow@CRegion_Column@@QAE_NH@Z$0:
  00000	6a 18		 push	 24			; 00000018H
  00002	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?InsertRow@CRegion_Column@@QAE_NH@Z:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?InsertRow@CRegion_Column@@QAE_NH@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?InsertRow@CRegion_Column@@QAE_NH@Z ENDP		; CRegion_Column::InsertRow
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
;	COMDAT ?GetBlockRegion@CRegion_Column@@QBE?AVCRect@@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_nRowIndex$ = 12					; size = 4
?GetBlockRegion@CRegion_Column@@QBE?AVCRect@@H@Z PROC	; CRegion_Column::GetBlockRegion, COMDAT
; _this$ = ecx

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 55   : 	POSITION pos = m_RowRegionList.GetHeadPosition();

  00005	8b 71 0c	 mov	 esi, DWORD PTR [ecx+12]
  00008	57		 push	 edi

; 56   : 	while(pos) {

  00009	85 f6		 test	 esi, esi
  0000b	74 17		 je	 SHORT $LN3@GetBlockRe
  0000d	8b 5d 0c	 mov	 ebx, DWORD PTR _nRowIndex$[ebp]
$LL2@GetBlockRe:

; 57   : 		CRegion_Row* pRowRegion = m_RowRegionList.GetNext(pos);

  00010	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 58   : 		if(pRowRegion->GetRowIndex()  == nRowIndex)

  00013	8b cf		 mov	 ecx, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 819  : 		rPosition = (POSITION) pNode->pNext;

  00015	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp

; 58   : 		if(pRowRegion->GetRowIndex()  == nRowIndex)

  00017	e8 00 00 00 00	 call	 ?GetRowIndex@CRegion_Row@@QAEHXZ ; CRegion_Row::GetRowIndex
  0001c	3b c3		 cmp	 eax, ebx
  0001e	74 29		 je	 SHORT $LN11@GetBlockRe

; 56   : 	while(pos) {

  00020	85 f6		 test	 esi, esi
  00022	75 ec		 jne	 SHORT $LL2@GetBlockRe
$LN3@GetBlockRe:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 540  : 	left = l;

  00024	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00027	5f		 pop	 edi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp

; 62   : }

  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 540  : 	left = l;

  0002a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 541  : 	top = t;

  00030	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 542  : 	right = r;

  00037	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 543  : 	bottom = b;

  0003e	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp

; 62   : }

  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
$LN11@GetBlockRe:

; 59   : 			return pRowRegion->GetBlockRegion(); 

  00049	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0004c	8b cf		 mov	 ecx, edi
  0004e	56		 push	 esi
  0004f	e8 00 00 00 00	 call	 ?GetBlockRegion@CRegion_Row@@QBE?AVCRect@@XZ ; CRegion_Row::GetBlockRegion
  00054	5f		 pop	 edi
  00055	8b c6		 mov	 eax, esi

; 62   : }

  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	5d		 pop	 ebp
  0005a	c2 08 00	 ret	 8
?GetBlockRegion@CRegion_Column@@QBE?AVCRect@@H@Z ENDP	; CRegion_Column::GetBlockRegion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
;	COMDAT ?SetBlockRegion@CRegion_Column@@QAEXHABVCRect@@@Z
_TEXT	SEGMENT
_nRowIndex$ = 8						; size = 4
_blockregion$ = 12					; size = 4
?SetBlockRegion@CRegion_Column@@QAEXHABVCRect@@@Z PROC	; CRegion_Column::SetBlockRegion, COMDAT
; _this$ = ecx

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 45   : 	POSITION pos = m_RowRegionList.GetHeadPosition();

  00004	8b 71 0c	 mov	 esi, DWORD PTR [ecx+12]

; 46   : 	while(pos) {

  00007	85 f6		 test	 esi, esi
  00009	74 24		 je	 SHORT $LN3@SetBlockRe
  0000b	53		 push	 ebx
  0000c	8b 5d 0c	 mov	 ebx, DWORD PTR _blockregion$[ebp]
  0000f	57		 push	 edi
$LL2@SetBlockRe:

; 47   : 		CRegion_Row* pRowRegion = m_RowRegionList.GetNext(pos);

  00010	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 48   : 		if(pRowRegion->GetRowIndex()  == nRowIndex)

  00013	8b cf		 mov	 ecx, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00015	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp

; 48   : 		if(pRowRegion->GetRowIndex()  == nRowIndex)

  00017	e8 00 00 00 00	 call	 ?GetRowIndex@CRegion_Row@@QAEHXZ ; CRegion_Row::GetRowIndex
  0001c	3b 45 08	 cmp	 eax, DWORD PTR _nRowIndex$[ebp]
  0001f	75 08		 jne	 SHORT $LN4@SetBlockRe

; 49   : 			pRowRegion->SetBlockRegion(blockregion); 

  00021	53		 push	 ebx
  00022	8b cf		 mov	 ecx, edi
  00024	e8 00 00 00 00	 call	 ?SetBlockRegion@CRegion_Row@@QAEXABVCRect@@@Z ; CRegion_Row::SetBlockRegion
$LN4@SetBlockRe:

; 46   : 	while(pos) {

  00029	85 f6		 test	 esi, esi
  0002b	75 e3		 jne	 SHORT $LL2@SetBlockRe
  0002d	5f		 pop	 edi
  0002e	5b		 pop	 ebx
$LN3@SetBlockRe:
  0002f	5e		 pop	 esi

; 50   : 	}
; 51   : }

  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
?SetBlockRegion@CRegion_Column@@QAEXHABVCRect@@@Z ENDP	; CRegion_Column::SetBlockRegion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
;	COMDAT ?GetColumnIndex@CRegion_Column@@QAEHXZ
_TEXT	SEGMENT
?GetColumnIndex@CRegion_Column@@QAEHXZ PROC		; CRegion_Column::GetColumnIndex, COMDAT
; _this$ = ecx

; 66   : 	return m_nColumn;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 67   : }

  00003	c3		 ret	 0
?GetColumnIndex@CRegion_Column@@QAEHXZ ENDP		; CRegion_Column::GetColumnIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
;	COMDAT ??1CRegion_Column@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CRegion_Column@@UAE@XZ PROC				; CRegion_Column::~CRegion_Column, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CRegion_Column@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx

; 28   : 	POSITION pos = m_RowRegionList.GetHeadPosition();

  00026	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
  00029	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CRegion_Column@@6B@

; 29   : 	while(pos) {

  0002f	85 f6		 test	 esi, esi
  00031	74 13		 je	 SHORT $LN11@CRegion_Co
$LL2@CRegion_Co:

; 31   : 		delete pRowRegion;

  00033	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00036	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp

; 31   : 		delete pRowRegion;

  00038	85 c9		 test	 ecx, ecx
  0003a	74 06		 je	 SHORT $LN5@CRegion_Co
  0003c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003e	6a 01		 push	 1
  00040	ff 10		 call	 DWORD PTR [eax]
$LN5@CRegion_Co:

; 29   : 	while(pos) {

  00042	85 f6		 test	 esi, esi
  00044	75 ed		 jne	 SHORT $LL2@CRegion_Co
$LN11@CRegion_Co:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00046	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  00049	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00050	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  00057	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  0005e	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00065	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0006a	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0

; 872  : 	m_pBlocks->FreeDataChain();

  00071	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]

; 878  : {

  00074	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007b	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ??_7?$CList@PAVCRegion_Row@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  00082	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00089	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  00090	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00097	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0

; 872  : 	m_pBlocks->FreeDataChain();

  0009e	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  000a3	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp

; 34   : }

  000aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b4	59		 pop	 ecx
  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c3		 ret	 0
  000bb	cc		 int	 3
  000bc	cc		 int	 3
  000bd	cc		 int	 3
  000be	cc		 int	 3
  000bf	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CRegion_Column@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CRegion_Column@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CRegion_Column@@UAE@XZ ENDP				; CRegion_Column::~CRegion_Column
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
;	COMDAT ??0CRegion_Column@@QAE@HH@Z
_TEXT	SEGMENT
$T2 = -24						; size = 4
_this$ = -20						; size = 4
_pPrev$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T3 = 8							; size = 4
_nColumnIndex$ = 8					; size = 4
_nRowCount$ = 12					; size = 4
??0CRegion_Column@@QAE@HH@Z PROC			; CRegion_Column::CRegion_Column, COMDAT
; _this$ = ecx

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CRegion_Column@@QAE@HH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  0002d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CRegion_Column@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 851  : {

  00033	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ??_7?$CList@PAVCRegion_Row@@PAV1@@@6B@

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;

  0003a	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00041	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00048	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0004f	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 856  : 	m_pBlocks = NULL;

  00056	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 857  : 	m_nBlockSize = nBlockSize;

  0005d	c7 46 20 0a 00
	00 00		 mov	 DWORD PTR [esi+32], 10	; 0000000aH
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp

; 39   : 	for(int nRow = 0 ; nRow < nRowCount ; nRow++)

  00064	8b 7d 0c	 mov	 edi, DWORD PTR _nRowCount$[ebp]
  00067	33 db		 xor	 ebx, ebx

; 22   : 	m_nColumn = nColumnIndex;

  00069	8b 45 08	 mov	 eax, DWORD PTR _nColumnIndex$[ebp]
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00073	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 39   : 	for(int nRow = 0 ; nRow < nRowCount ; nRow++)

  00076	85 ff		 test	 edi, edi
  00078	0f 8e b4 00 00
	00		 jle	 $LN43@CRegion_Co
  0007e	66 90		 npad	 2
$LL9@CRegion_Co:

; 40   : 		m_RowRegionList.AddTail(new CRegion_Row(nRow));

  00080	6a 18		 push	 24			; 00000018H
  00082	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00087	83 c4 04	 add	 esp, 4
  0008a	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
  0008d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00091	85 c0		 test	 eax, eax
  00093	74 0d		 je	 SHORT $LN11@CRegion_Co
  00095	53		 push	 ebx
  00096	8b c8		 mov	 ecx, eax
  00098	e8 00 00 00 00	 call	 ??0CRegion_Row@@QAE@H@Z	; CRegion_Row::CRegion_Row
  0009d	89 45 08	 mov	 DWORD PTR $T3[ebp], eax
  000a0	eb 07		 jmp	 SHORT $LN12@CRegion_Co
$LN11@CRegion_Co:
  000a2	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0
$LN12@CRegion_Co:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 902  : 	if (m_pNodeFree == NULL)

  000a9	8b 56 18	 mov	 edx, DWORD PTR [esi+24]

; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  000ac	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp

; 40   : 		m_RowRegionList.AddTail(new CRegion_Row(nRow));

  000af	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  000b3	89 45 f0	 mov	 DWORD PTR _pPrev$1$[ebp], eax

; 902  : 	if (m_pNodeFree == NULL)

  000b6	85 d2		 test	 edx, edx
  000b8	75 44		 jne	 SHORT $LN41@CRegion_Co

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  000ba	6a 0c		 push	 12			; 0000000cH
  000bc	ff 76 20	 push	 DWORD PTR [esi+32]
  000bf	8d 46 1c	 lea	 eax, DWORD PTR [esi+28]
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  000c8	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  000cb	83 c0 08	 add	 eax, 8
  000ce	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  000d1	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  000d4	8d 7a ff	 lea	 edi, DWORD PTR [edx-1]
  000d7	83 c0 f4	 add	 eax, -12		; fffffff4H
  000da	85 ff		 test	 edi, edi
  000dc	78 16		 js	 SHORT $LN42@CRegion_Co
  000de	66 90		 npad	 2
$LL21@CRegion_Co:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  000e0	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000e3	8b d0		 mov	 edx, eax
  000e5	89 08		 mov	 DWORD PTR [eax], ecx

; 915  : 			m_pNodeFree = pNode;

  000e7	89 46 18	 mov	 DWORD PTR [esi+24], eax
  000ea	83 e8 0c	 sub	 eax, 12			; 0000000cH
  000ed	83 ef 01	 sub	 edi, 1
  000f0	79 ee		 jns	 SHORT $LL21@CRegion_Co
  000f2	eb 03		 jmp	 SHORT $LN24@CRegion_Co
$LN42@CRegion_Co:
  000f4	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
$LN24@CRegion_Co:

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  000f7	85 d2		 test	 edx, edx
  000f9	74 4d		 je	 SHORT $LN33@CRegion_Co
  000fb	8b 7d 0c	 mov	 edi, DWORD PTR _nRowCount$[ebp]
$LN41@CRegion_Co:

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  000fe	8b 02		 mov	 eax, DWORD PTR [edx]
  00100	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 922  : 	pNode->pPrev = pPrev;

  00103	8b 45 f0	 mov	 eax, DWORD PTR _pPrev$1$[ebp]
  00106	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 969  : 	pNewNode->data = newElement;

  00109	8b 45 08	 mov	 eax, DWORD PTR $T3[ebp]

; 923  : 	pNode->pNext = pNext;

  0010c	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 924  : 	m_nCount++;

  00112	ff 46 14	 inc	 DWORD PTR [esi+20]

; 969  : 	pNewNode->data = newElement;

  00115	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 970  : 	if (m_pNodeTail != NULL)

  00118	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0011b	85 c0		 test	 eax, eax
  0011d	74 04		 je	 SHORT $LN15@CRegion_Co

; 971  : 		m_pNodeTail->pNext = pNewNode;

  0011f	89 10		 mov	 DWORD PTR [eax], edx
  00121	eb 03		 jmp	 SHORT $LN16@CRegion_Co
$LN15@CRegion_Co:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;

  00123	89 56 0c	 mov	 DWORD PTR [esi+12], edx
$LN16@CRegion_Co:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp

; 39   : 	for(int nRow = 0 ; nRow < nRowCount ; nRow++)

  00126	43		 inc	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 974  : 	m_pNodeTail = pNewNode;

  00127	89 56 10	 mov	 DWORD PTR [esi+16], edx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp

; 39   : 	for(int nRow = 0 ; nRow < nRowCount ; nRow++)

  0012a	3b df		 cmp	 ebx, edi
  0012c	0f 8c 4e ff ff
	ff		 jl	 $LL9@CRegion_Co
$LN43@CRegion_Co:

; 24   : }

  00132	8b c6		 mov	 eax, esi
  00134	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00137	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013e	59		 pop	 ecx
  0013f	5f		 pop	 edi
  00140	5e		 pop	 esi
  00141	5b		 pop	 ebx
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c2 08 00	 ret	 8
$LN33@CRegion_Co:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00148	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN45@CRegion_Co:
  0014d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CRegion_Column@@QAE@HH@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1?$CList@PAVCRegion_Row@@PAV1@@@UAE@XZ ; CList<CRegion_Row *,CRegion_Row *>::~CList<CRegion_Row *,CRegion_Row *>
__unwindfunclet$??0CRegion_Column@@QAE@HH@Z$1:
  0000b	6a 18		 push	 24			; 00000018H
  0000d	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00016	83 c4 08	 add	 esp, 8
  00019	c3		 ret	 0
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$??0CRegion_Column@@QAE@HH@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CRegion_Column@@QAE@HH@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CRegion_Column@@QAE@HH@Z ENDP			; CRegion_Column::CRegion_Column
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z PROC		; CObject::Dump, COMDAT
; _this$ = ecx

; 122  : 	{ /* no dumping in release builds */ }

  00000	c2 04 00	 ret	 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z ENDP		; CObject::Dump
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT
?AssertValid@CObject@@UBEXXZ PROC			; CObject::AssertValid, COMDAT
; _this$ = ecx

; 120  : 	{ /* no asserts in release builds */ }

  00000	c2 00 00	 ret	 0
?AssertValid@CObject@@UBEXXZ ENDP			; CObject::AssertValid
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z PROC		; CObject::Serialize, COMDAT
; _this$ = ecx

; 106  : 	{ /* CObject does not serialize anything by default */ }

  00000	c2 04 00	 ret	 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z ENDP		; CObject::Serialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT
??1CObject@@UAE@XZ PROC					; CObject::~CObject, COMDAT
; _this$ = ecx

; 104  : 	{ }

  00000	c2 00 00	 ret	 0
??1CObject@@UAE@XZ ENDP					; CObject::~CObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_Column.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
