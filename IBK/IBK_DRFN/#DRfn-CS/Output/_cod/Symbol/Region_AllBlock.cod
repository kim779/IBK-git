; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30145.0 

	TITLE	D:\git\src\IBK\IBK_DRFN\#DRfn-CS\_Obj\Symbol\Region_AllBlock.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1CObject@@UAE@XZ				; CObject::~CObject
PUBLIC	?Serialize@CObject@@UAEXAAVCArchive@@@Z		; CObject::Serialize
PUBLIC	?AssertValid@CObject@@UBEXXZ			; CObject::AssertValid
PUBLIC	?Dump@CObject@@UBEXAAVCDumpContext@@@Z		; CObject::Dump
PUBLIC	??0CRegion_AllBlock@@QAE@XZ			; CRegion_AllBlock::CRegion_AllBlock
PUBLIC	??1CRegion_AllBlock@@UAE@XZ			; CRegion_AllBlock::~CRegion_AllBlock
PUBLIC	?SetDrawingRegions@CRegion_AllBlock@@QAEXPAUIChartManager133101@@@Z ; CRegion_AllBlock::SetDrawingRegions
PUBLIC	?SetAllBlockRegion@CRegion_AllBlock@@QAEXPAUIChartManager133101@@@Z ; CRegion_AllBlock::SetAllBlockRegion
PUBLIC	?Initialize@CRegion_AllBlock@@QAEXXZ		; CRegion_AllBlock::Initialize
PUBLIC	?SetBlockRegion@CRegion_AllBlock@@QAEXHHABVCRect@@@Z ; CRegion_AllBlock::SetBlockRegion
PUBLIC	?GetBlockRegion@CRegion_AllBlock@@QBE?AVCRect@@HH@Z ; CRegion_AllBlock::GetBlockRegion
PUBLIC	?MakeColumnList@CRegion_AllBlock@@QAEXHH@Z	; CRegion_AllBlock::MakeColumnList
PUBLIC	?InsertBlockIndex@CRegion_AllBlock@@QAE_NABVCBlockIndex@@@Z ; CRegion_AllBlock::InsertBlockIndex
PUBLIC	?DeleteColumnBlockList@CRegion_AllBlock@@QAEXXZ	; CRegion_AllBlock::DeleteColumnBlockList
PUBLIC	??0?$CList@PAVCRegion_Column@@PAV1@@@QAE@H@Z	; CList<CRegion_Column *,CRegion_Column *>::CList<CRegion_Column *,CRegion_Column *>
PUBLIC	?AddTail@?$CList@PAVCRegion_Column@@PAV1@@@QAEPAU__POSITION@@PAVCRegion_Column@@@Z ; CList<CRegion_Column *,CRegion_Column *>::AddTail
PUBLIC	?RemoveAll@?$CList@PAVCRegion_Column@@PAV1@@@QAEXXZ ; CList<CRegion_Column *,CRegion_Column *>::RemoveAll
PUBLIC	?NewNode@?$CList@PAVCRegion_Column@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<CRegion_Column *,CRegion_Column *>::NewNode
PUBLIC	??1?$CList@PAVCRegion_Column@@PAV1@@@UAE@XZ	; CList<CRegion_Column *,CRegion_Column *>::~CList<CRegion_Column *,CRegion_Column *>
PUBLIC	?Serialize@?$CList@PAVCRegion_Column@@PAV1@@@UAEXAAVCArchive@@@Z ; CList<CRegion_Column *,CRegion_Column *>::Serialize
PUBLIC	??_G?$CList@PAVCRegion_Column@@PAV1@@@UAEPAXI@Z	; CList<CRegion_Column *,CRegion_Column *>::`scalar deleting destructor'
PUBLIC	??_GCRegion_AllBlock@@UAEPAXI@Z			; CRegion_AllBlock::`scalar deleting destructor'
PUBLIC	??$SerializeElements@PAVCRegion_Column@@@@YGXAAVCArchive@@PAPAVCRegion_Column@@H@Z ; SerializeElements<CRegion_Column *>
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R3CObject@@8					; CObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObject@@8					; CObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CObject@@8			; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$CList@PAVCRegion_Column@@PAV1@@@6B@	; CList<CRegion_Column *,CRegion_Column *>::`vftable'
PUBLIC	??_7CRegion_AllBlock@@6B@			; CRegion_AllBlock::`vftable'
PUBLIC	??_R4CRegion_AllBlock@@6B@			; CRegion_AllBlock::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCRegion_AllBlock@@@8			; CRegion_AllBlock `RTTI Type Descriptor'
PUBLIC	??_R3CRegion_AllBlock@@8			; CRegion_AllBlock::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CRegion_AllBlock@@8			; CRegion_AllBlock::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CRegion_AllBlock@@8		; CRegion_AllBlock::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CList@PAVCRegion_Column@@PAV1@@@6B@	; CList<CRegion_Column *,CRegion_Column *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CList@PAVCRegion_Column@@PAV1@@@@8	; CList<CRegion_Column *,CRegion_Column *> `RTTI Type Descriptor'
PUBLIC	??_R3?$CList@PAVCRegion_Column@@PAV1@@@8	; CList<CRegion_Column *,CRegion_Column *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CList@PAVCRegion_Column@@PAV1@@@8	; CList<CRegion_Column *,CRegion_Column *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CList@PAVCRegion_Column@@PAV1@@@8 ; CList<CRegion_Column *,CRegion_Column *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	?__global_delete@@YAXPAXI@Z:PROC		; __global_delete
EXTRN	___std_terminate:PROC
EXTRN	?AfxThrowInvalidArgException@@YGXXZ:PROC	; AfxThrowInvalidArgException
EXTRN	?AfxThrowArchiveException@@YGXHPBD@Z:PROC	; AfxThrowArchiveException
EXTRN	?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ:PROC ; CObject::GetRuntimeClass
EXTRN	?Read@CArchive@@QAEIPAXI@Z:PROC			; CArchive::Read
EXTRN	?Write@CArchive@@QAEXPBXI@Z:PROC		; CArchive::Write
EXTRN	?ReadCount@CArchive@@QAEKXZ:PROC		; CArchive::ReadCount
EXTRN	?WriteCount@CArchive@@QAEXK@Z:PROC		; CArchive::WriteCount
EXTRN	?Create@CPlex@@SGPAU1@AAPAU1@II@Z:PROC		; CPlex::Create
EXTRN	?FreeDataChain@CPlex@@QAEXXZ:PROC		; CPlex::FreeDataChain
EXTRN	??_E?$CList@PAVCRegion_Column@@PAV1@@@UAEPAXI@Z:PROC ; CList<CRegion_Column *,CRegion_Column *>::`vector deleting destructor'
EXTRN	??_ECRegion_AllBlock@@UAEPAXI@Z:PROC		; CRegion_AllBlock::`vector deleting destructor'
EXTRN	??0CRegion_Column@@QAE@HH@Z:PROC		; CRegion_Column::CRegion_Column
EXTRN	?GetColumnIndex@CRegion_Column@@QAEHXZ:PROC	; CRegion_Column::GetColumnIndex
EXTRN	?SetBlockRegion@CRegion_Column@@QAEXHABVCRect@@@Z:PROC ; CRegion_Column::SetBlockRegion
EXTRN	?GetBlockRegion@CRegion_Column@@QBE?AVCRect@@H@Z:PROC ; CRegion_Column::GetBlockRegion
EXTRN	?InsertRow@CRegion_Column@@QAE_NH@Z:PROC	; CRegion_Column::InsertRow
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R1A@?0A@EA@?$CList@PAVCRegion_Column@@PAV1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CList@PAVCRegion_Column@@PAV1@@@8 DD FLAT:??_R0?AV?$CList@PAVCRegion_Column@@PAV1@@@@8 ; CList<CRegion_Column *,CRegion_Column *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CList@PAVCRegion_Column@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CList@PAVCRegion_Column@@PAV1@@@8
rdata$r	SEGMENT
??_R2?$CList@PAVCRegion_Column@@PAV1@@@8 DD FLAT:??_R1A@?0A@EA@?$CList@PAVCRegion_Column@@PAV1@@@8 ; CList<CRegion_Column *,CRegion_Column *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CList@PAVCRegion_Column@@PAV1@@@8
rdata$r	SEGMENT
??_R3?$CList@PAVCRegion_Column@@PAV1@@@8 DD 00H		; CList<CRegion_Column *,CRegion_Column *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CList@PAVCRegion_Column@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CList@PAVCRegion_Column@@PAV1@@@@8
data$rs	SEGMENT
??_R0?AV?$CList@PAVCRegion_Column@@PAV1@@@@8 DD FLAT:??_7type_info@@6B@ ; CList<CRegion_Column *,CRegion_Column *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CList@PAVCRegion_Column@@PAV1@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CList@PAVCRegion_Column@@PAV1@@@6B@
rdata$r	SEGMENT
??_R4?$CList@PAVCRegion_Column@@PAV1@@@6B@ DD 00H	; CList<CRegion_Column *,CRegion_Column *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CList@PAVCRegion_Column@@PAV1@@@@8
	DD	FLAT:??_R3?$CList@PAVCRegion_Column@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CRegion_AllBlock@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CRegion_AllBlock@@8 DD FLAT:??_R0?AVCRegion_AllBlock@@@8 ; CRegion_AllBlock::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CRegion_AllBlock@@8
rdata$r	ENDS
;	COMDAT ??_R2CRegion_AllBlock@@8
rdata$r	SEGMENT
??_R2CRegion_AllBlock@@8 DD FLAT:??_R1A@?0A@EA@CRegion_AllBlock@@8 ; CRegion_AllBlock::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CRegion_AllBlock@@8
rdata$r	SEGMENT
??_R3CRegion_AllBlock@@8 DD 00H				; CRegion_AllBlock::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CRegion_AllBlock@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCRegion_AllBlock@@@8
data$rs	SEGMENT
??_R0?AVCRegion_AllBlock@@@8 DD FLAT:??_7type_info@@6B@	; CRegion_AllBlock `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCRegion_AllBlock@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CRegion_AllBlock@@6B@
rdata$r	SEGMENT
??_R4CRegion_AllBlock@@6B@ DD 00H			; CRegion_AllBlock::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCRegion_AllBlock@@@8
	DD	FLAT:??_R3CRegion_AllBlock@@8
rdata$r	ENDS
;	COMDAT ??_7CRegion_AllBlock@@6B@
CONST	SEGMENT
??_7CRegion_AllBlock@@6B@ DD FLAT:??_R4CRegion_AllBlock@@6B@ ; CRegion_AllBlock::`vftable'
	DD	FLAT:??_ECRegion_AllBlock@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CList@PAVCRegion_Column@@PAV1@@@6B@
CONST	SEGMENT
??_7?$CList@PAVCRegion_Column@@PAV1@@@6B@ DD FLAT:??_R4?$CList@PAVCRegion_Column@@PAV1@@@6B@ ; CList<CRegion_Column *,CRegion_Column *>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CList@PAVCRegion_Column@@PAV1@@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CList@PAVCRegion_Column@@PAV1@@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CObject@@8
rdata$r	SEGMENT
??_R2CObject@@8 DD FLAT:??_R1A@?0A@EA@CObject@@8	; CObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObject@@8
rdata$r	SEGMENT
??_R3CObject@@8 DD 00H					; CObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
data$rs	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
data$rs	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GCRegion_AllBlock@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:___std_terminate
__ehfuncinfo$??_GCRegion_AllBlock@@UAEPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_GCRegion_AllBlock@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$CList@PAVCRegion_Column@@PAV1@@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_G?$CList@PAVCRegion_Column@@PAV1@@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$CList@PAVCRegion_Column@@PAV1@@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CList@PAVCRegion_Column@@PAV1@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?MakeColumnList@CRegion_AllBlock@@QAEXHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MakeColumnList@CRegion_AllBlock@@QAEXHH@Z$0
__ehfuncinfo$?MakeColumnList@CRegion_AllBlock@@QAEXHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?MakeColumnList@CRegion_AllBlock@@QAEXHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetDrawingRegions@CRegion_AllBlock@@QAEXPAUIChartManager133101@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetDrawingRegions@CRegion_AllBlock@@QAEXPAUIChartManager133101@@@Z$0
__ehfuncinfo$?SetDrawingRegions@CRegion_AllBlock@@QAEXPAUIChartManager133101@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetDrawingRegions@CRegion_AllBlock@@QAEXPAUIChartManager133101@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CRegion_AllBlock@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1CRegion_AllBlock@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CRegion_AllBlock@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@PAVCRegion_Column@@@@YGXAAVCArchive@@PAPAVCRegion_Column@@H@Z
_TEXT	SEGMENT
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@PAVCRegion_Column@@@@YGXAAVCArchive@@PAPAVCRegion_Column@@H@Z PROC ; SerializeElements<CRegion_Column *>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR _nCount$[ebp]
  0000b	57		 push	 edi
  0000c	85 f6		 test	 esi, esi
  0000e	74 08		 je	 SHORT $LN2@SerializeE
  00010	85 c9		 test	 ecx, ecx
  00012	0f 84 89 00 00
	00		 je	 $LN34@SerializeE
$LN2@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00018	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  0001b	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0001e	f7 d0		 not	 eax
  00020	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00022	74 3c		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;
; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )

  00024	85 f6		 test	 esi, esi
  00026	74 31		 je	 SHORT $LN8@SerializeE
  00028	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL5@SerializeE:

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00030	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00035	3b f3		 cmp	 esi, ebx
  00037	0f 42 de	 cmovb	 ebx, esi

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0003a	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
  00041	57		 push	 edi
  00042	51		 push	 ecx
  00043	8b ca		 mov	 ecx, edx
  00045	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;
; 87   : 			pData += nElementsToWrite;

  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  00050	03 cf		 add	 ecx, edi
  00052	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  00055	2b f3		 sub	 esi, ebx
  00057	75 d7		 jne	 SHORT $LL5@SerializeE
$LN8@SerializeE:
  00059	5f		 pop	 edi

; 105  : 		}
; 106  : 	}
; 107  : }

  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	5d		 pop	 ebp
  0005d	c2 0c 00	 ret	 12			; 0000000cH
$LN10@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  00060	85 f6		 test	 esi, esi
  00062	74 f5		 je	 SHORT $LN8@SerializeE
$LL7@SerializeE:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00064	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00069	3b f7		 cmp	 esi, edi
  0006b	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0006e	8d 1c bd 00 00
	00 00		 lea	 ebx, DWORD PTR [edi*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00075	53		 push	 ebx
  00076	51		 push	 ecx
  00077	8b ca		 mov	 ecx, edx
  00079	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0007e	3b c3		 cmp	 eax, ebx
  00080	75 16		 jne	 SHORT $LN23@SerializeE
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  00082	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00085	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;
; 104  : 			pData += nElementsToRead;

  00088	03 cb		 add	 ecx, ebx
  0008a	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  0008d	2b f7		 sub	 esi, edi
  0008f	75 d3		 jne	 SHORT $LL7@SerializeE

; 105  : 		}
; 106  : 	}
; 107  : }

  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	5d		 pop	 ebp
  00095	c2 0c 00	 ret	 12			; 0000000cH
$LN23@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 402  : 		AfxThrowArchiveException(CArchiveException::endOfFile);

  00098	6a 00		 push	 0
  0009a	6a 03		 push	 3
  0009c	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN34@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  000a1	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN32@SerializeE:
  000a6	cc		 int	 3
??$SerializeElements@PAVCRegion_Column@@@@YGXAAVCArchive@@PAPAVCRegion_Column@@H@Z ENDP ; SerializeElements<CRegion_Column *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??_GCRegion_AllBlock@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GCRegion_AllBlock@@UAEPAXI@Z PROC			; CRegion_AllBlock::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_GCRegion_AllBlock@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp

; 27   : {

  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CRegion_AllBlock@@6B@

; 28   : 	DeleteColumnBlockList();

  00032	e8 00 00 00 00	 call	 ?DeleteColumnBlockList@CRegion_AllBlock@@QAEXXZ ; CRegion_AllBlock::DeleteColumnBlockList
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00037	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]

; 878  : {

  0003a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0003e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$CList@PAVCRegion_Column@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  00045	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  0004c	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00053	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0005a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 872  : 	m_pBlocks->FreeDataChain();

  00061	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain
  00066	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 873  : 	m_pBlocks = NULL;

  0006a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00071	74 0b		 je	 SHORT $LN20@scalar
  00073	6a 20		 push	 32			; 00000020H
  00075	56		 push	 esi
  00076	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0007b	83 c4 08	 add	 esp, 8
$LN20@scalar:
  0007e	8b c6		 mov	 eax, esi
  00080	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00083	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008a	59		 pop	 ecx
  0008b	5e		 pop	 esi
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c2 04 00	 ret	 4
  00092	cc		 int	 3
  00093	cc		 int	 3
  00094	cc		 int	 3
  00095	cc		 int	 3
  00096	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_GCRegion_AllBlock@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GCRegion_AllBlock@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GCRegion_AllBlock@@UAEPAXI@Z ENDP			; CRegion_AllBlock::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_G?$CList@PAVCRegion_Column@@PAV1@@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$CList@PAVCRegion_Column@@PAV1@@@UAEPAXI@Z PROC	; CList<CRegion_Column *,CRegion_Column *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$CList@PAVCRegion_Column@@PAV1@@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00025	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 878  : {

  00028	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@PAVCRegion_Column@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  00035	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  0003c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00043	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0004a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 872  : 	m_pBlocks->FreeDataChain();

  00051	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00056	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00059	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00060	a8 01		 test	 al, 1
  00062	74 2c		 je	 SHORT $LN22@scalar
  00064	a8 04		 test	 al, 4
  00066	75 1d		 jne	 SHORT $LN3@scalar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 112  : 	{ ::operator delete(p); }

  00068	56		 push	 esi
  00069	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006e	83 c4 04	 add	 esp, 4
  00071	8b c6		 mov	 eax, esi
  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007d	59		 pop	 ecx
  0007e	5e		 pop	 esi
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
$LN3@scalar:
  00085	6a 1c		 push	 28			; 0000001cH
  00087	56		 push	 esi
  00088	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0008d	83 c4 08	 add	 esp, 8
$LN22@scalar:
  00090	8b c6		 mov	 eax, esi
  00092	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00095	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009c	59		 pop	 ecx
  0009d	5e		 pop	 esi
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 04 00	 ret	 4
  000a4	cc		 int	 3
  000a5	cc		 int	 3
  000a6	cc		 int	 3
  000a7	cc		 int	 3
  000a8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_G?$CList@PAVCRegion_Column@@PAV1@@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$CList@PAVCRegion_Column@@PAV1@@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$CList@PAVCRegion_Column@@PAV1@@@UAEPAXI@Z ENDP	; CList<CRegion_Column *,CRegion_Column *>::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CList@PAVCRegion_Column@@PAV1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_nNewCount$1$ = -16					; size = 4
_newData$1 = -12					; size = 4
_pData$1$ = -8						; size = 4
_pNode$1$ = -8						; size = 4
_nElementsLeft$1$ = -4					; size = 4
_this$1$ = -4						; size = 4
_ar$ = 8						; size = 4
?Serialize@?$CList@PAVCRegion_Column@@PAV1@@@UAEXAAVCArchive@@@Z PROC ; CList<CRegion_Column *,CRegion_Column *>::Serialize, COMDAT
; _this$ = ecx

; 1169 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00009	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1169 : {

  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00011	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00014	f7 d0		 not	 eax
  00016	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1174 : 	if (ar.IsStoring())

  00018	0f 84 ae 00 00
	00		 je	 $LN7@Serialize

; 1175 : 	{
; 1176 : 		ar.WriteCount(m_nCount);

  0001e	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00021	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00026	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00029	89 45 f8	 mov	 DWORD PTR _pNode$1$[ebp], eax
  0002c	85 c0		 test	 eax, eax
  0002e	0f 84 43 01 00
	00		 je	 $LN68@Serialize
$LL4@Serialize:

; 1178 : 		{
; 1179 : 			ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1180 : 			TYPE* pData;
; 1181 : 			/*
; 1182 : 			 * in some cases the & operator might be overloaded, and we cannot use it to obtain
; 1183 : 			 * the address of a given object.  We then use the following trick to get the address
; 1184 : 			 */
; 1185 : 			pData = reinterpret_cast< TYPE* >( &reinterpret_cast< int& >( static_cast< TYPE& >( pNode->data ) ) );

  00034	8d 70 08	 lea	 esi, DWORD PTR [eax+8]

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00037	85 f6		 test	 esi, esi
  00039	0f 84 4a 01 00
	00		 je	 $LN60@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00042	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00045	f7 d0		 not	 eax
  00047	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00049	74 33		 je	 SHORT $LN21@Serialize

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0004b	b8 01 00 00 00	 mov	 eax, 1
  00050	89 45 fc	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
$LL16@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00053	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00058	3b c3		 cmp	 eax, ebx
  0005a	0f 42 d8	 cmovb	 ebx, eax

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0005d	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
  00064	57		 push	 edi
  00065	56		 push	 esi
  00066	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _nElementsLeft$1$[ebp]

; 87   : 			pData += nElementsToWrite;

  0006e	03 f7		 add	 esi, edi
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00073	2b c3		 sub	 eax, ebx
  00075	89 45 fc	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
  00078	85 c0		 test	 eax, eax
  0007a	75 d7		 jne	 SHORT $LL16@Serialize

; 88   : 		}
; 89   : 	}

  0007c	eb 35		 jmp	 SHORT $LN2@Serialize
$LN21@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  0007e	bf 01 00 00 00	 mov	 edi, 1
$LL18@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00083	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00088	3b fb		 cmp	 edi, ebx
  0008a	0f 42 df	 cmovb	 ebx, edi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0008d	8d 04 9d 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00094	50		 push	 eax
  00095	56		 push	 esi
  00096	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0009b	8d 0c 9d 00 00
	00 00		 lea	 ecx, DWORD PTR [ebx*4]
  000a2	3b c1		 cmp	 eax, ecx
  000a4	0f 85 d6 00 00
	00		 jne	 $LN59@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  000aa	03 f1		 add	 esi, ecx
  000ac	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;

  000af	2b fb		 sub	 edi, ebx
  000b1	75 d0		 jne	 SHORT $LL18@Serialize
$LN2@Serialize:

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  000b3	8b 45 f8	 mov	 eax, DWORD PTR _pNode$1$[ebp]
  000b6	8b 00		 mov	 eax, DWORD PTR [eax]
  000b8	89 45 f8	 mov	 DWORD PTR _pNode$1$[ebp], eax
  000bb	85 c0		 test	 eax, eax
  000bd	0f 85 71 ff ff
	ff		 jne	 $LL4@Serialize

; 1197 : 		}
; 1198 : 	}
; 1199 : }

  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 04 00	 ret	 4
$LN7@Serialize:

; 1186 : 			SerializeElements<TYPE>(ar, pData, 1);
; 1187 : 		}
; 1188 : 	}
; 1189 : 	else
; 1190 : 	{
; 1191 : 		DWORD_PTR nNewCount = ar.ReadCount();

  000cc	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount

; 1192 : 		while (nNewCount--)

  000d1	85 c0		 test	 eax, eax
  000d3	0f 84 9e 00 00
	00		 je	 $LN68@Serialize
  000d9	0f 1f 80 00 00
	00 00		 npad	 7
$LL5@Serialize:
  000e0	48		 dec	 eax
  000e1	89 45 f0	 mov	 DWORD PTR _nNewCount$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  000e4	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  000e7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000ea	f7 d1		 not	 ecx
  000ec	f6 c1 01	 test	 cl, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  000ef	74 3a		 je	 SHORT $LN42@Serialize

; 79   : 		pData = pElements;

  000f1	8d 4d f4	 lea	 ecx, DWORD PTR _newData$1[ebp]
  000f4	bb 01 00 00 00	 mov	 ebx, 1
  000f9	89 4d f8	 mov	 DWORD PTR _pData$1$[ebp], ecx
  000fc	0f 1f 40 00	 npad	 4
$LL37@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00100	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00105	3b df		 cmp	 ebx, edi
  00107	0f 42 fb	 cmovb	 edi, ebx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0010a	8d 34 bd 00 00
	00 00		 lea	 esi, DWORD PTR [edi*4]
  00111	56		 push	 esi
  00112	51		 push	 ecx
  00113	8b c8		 mov	 ecx, eax
  00115	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 87   : 			pData += nElementsToWrite;

  0011a	8b 4d f8	 mov	 ecx, DWORD PTR _pData$1$[ebp]
  0011d	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  00120	03 ce		 add	 ecx, esi
  00122	89 4d f8	 mov	 DWORD PTR _pData$1$[ebp], ecx
  00125	2b df		 sub	 ebx, edi
  00127	75 d7		 jne	 SHORT $LL37@Serialize

; 88   : 		}
; 89   : 	}

  00129	eb 36		 jmp	 SHORT $LN40@Serialize
$LN42@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  0012b	be 01 00 00 00	 mov	 esi, 1

; 96   : 		pData = pElements;

  00130	8d 5d f4	 lea	 ebx, DWORD PTR _newData$1[ebp]
$LL39@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00133	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00138	3b f7		 cmp	 esi, edi
  0013a	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0013d	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00144	51		 push	 ecx
  00145	53		 push	 ebx
  00146	8b c8		 mov	 ecx, eax
  00148	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0014d	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
  00154	3b c1		 cmp	 eax, ecx
  00156	75 28		 jne	 SHORT $LN59@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 104  : 			pData += nElementsToRead;

  00158	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  0015b	03 d9		 add	 ebx, ecx
  0015d	2b f7		 sub	 esi, edi
  0015f	75 d2		 jne	 SHORT $LL39@Serialize
$LN40@Serialize:

; 1193 : 		{
; 1194 : 			TYPE newData[1];
; 1195 : 			SerializeElements<TYPE>(ar, newData, 1);
; 1196 : 			AddTail(newData[0]);

  00161	ff 75 f4	 push	 DWORD PTR _newData$1[ebp]
  00164	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00167	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCRegion_Column@@PAV1@@@QAEPAU__POSITION@@PAVCRegion_Column@@@Z ; CList<CRegion_Column *,CRegion_Column *>::AddTail
  0016c	8b 45 f0	 mov	 eax, DWORD PTR _nNewCount$1$[ebp]
  0016f	85 c0		 test	 eax, eax
  00171	0f 85 69 ff ff
	ff		 jne	 $LL5@Serialize
$LN68@Serialize:
  00177	5f		 pop	 edi

; 1197 : 		}
; 1198 : 	}
; 1199 : }

  00178	5e		 pop	 esi
  00179	5b		 pop	 ebx
  0017a	8b e5		 mov	 esp, ebp
  0017c	5d		 pop	 ebp
  0017d	c2 04 00	 ret	 4
$LN59@Serialize:
  00180	6a 00		 push	 0
  00182	6a 03		 push	 3
  00184	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN60@Serialize:

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00189	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN85@Serialize:
  0018e	cc		 int	 3
?Serialize@?$CList@PAVCRegion_Column@@PAV1@@@UAEXAAVCArchive@@@Z ENDP ; CList<CRegion_Column *,CRegion_Column *>::Serialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??1?$CList@PAVCRegion_Column@@PAV1@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CList@PAVCRegion_Column@@PAV1@@@UAE@XZ PROC	; CList<CRegion_Column *,CRegion_Column *>::~CList<CRegion_Column *,CRegion_Column *>, COMDAT
; _this$ = ecx

; 878  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CList@PAVCRegion_Column@@PAV1@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 872  : 	m_pBlocks->FreeDataChain();

  00025	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 878  : {

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@PAVCRegion_Column@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  0002e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00035	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0003c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00043	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 872  : 	m_pBlocks->FreeDataChain();

  0004a	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0004f	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 879  : 	RemoveAll();
; 880  : 	ASSERT(m_nCount == 0);
; 881  : }

  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	5e		 pop	 esi
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
  00066	cc		 int	 3
  00067	cc		 int	 3
  00068	cc		 int	 3
  00069	cc		 int	 3
  0006a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CList@PAVCRegion_Column@@PAV1@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CList@PAVCRegion_Column@@PAV1@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CList@PAVCRegion_Column@@PAV1@@@UAE@XZ ENDP	; CList<CRegion_Column *,CRegion_Column *>::~CList<CRegion_Column *,CRegion_Column *>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?NewNode@?$CList@PAVCRegion_Column@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z
_TEXT	SEGMENT
_pPrev$ = 8						; size = 4
_pNext$ = 12						; size = 4
?NewNode@?$CList@PAVCRegion_Column@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z PROC ; CList<CRegion_Column *,CRegion_Column *>::NewNode, COMDAT
; _this$ = ecx

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 902  : 	if (m_pNodeFree == NULL)

  00006	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0000a	75 34		 jne	 SHORT $LN7@NewNode

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  0000c	6a 0c		 push	 12			; 0000000cH
  0000e	ff 76 18	 push	 DWORD PTR [esi+24]
  00011	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001a	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0001d	83 c0 08	 add	 eax, 8
  00020	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  00023	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00026	83 c0 f4	 add	 eax, -12		; fffffff4H

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00029	83 c2 ff	 add	 edx, -1
  0002c	78 12		 js	 SHORT $LN7@NewNode
  0002e	66 90		 npad	 2
$LL4@NewNode:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	89 08		 mov	 DWORD PTR [eax], ecx

; 915  : 			m_pNodeFree = pNode;

  00035	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00038	83 e8 0c	 sub	 eax, 12			; 0000000cH
  0003b	83 ea 01	 sub	 edx, 1
  0003e	79 f0		 jns	 SHORT $LL4@NewNode
$LN7@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00040	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00043	85 c0		 test	 eax, eax
  00045	74 18		 je	 SHORT $LN17@NewNode

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00047	8b 08		 mov	 ecx, DWORD PTR [eax]
  00049	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 922  : 	pNode->pPrev = pPrev;

  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _pPrev$[ebp]
  0004f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 923  : 	pNode->pNext = pNext;

  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _pNext$[ebp]
  00055	89 08		 mov	 DWORD PTR [eax], ecx

; 924  : 	m_nCount++;

  00057	ff 46 0c	 inc	 DWORD PTR [esi+12]

; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;
; 930  : #pragma pop_macro("new")
; 931  : 	return pNode;

  0005a	5e		 pop	 esi

; 932  : }

  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
$LN17@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  0005f	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN15@NewNode:
  00064	cc		 int	 3
?NewNode@?$CList@PAVCRegion_Column@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z ENDP ; CList<CRegion_Column *,CRegion_Column *>::NewNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAll@?$CList@PAVCRegion_Column@@PAV1@@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@?$CList@PAVCRegion_Column@@PAV1@@@QAEXXZ PROC ; CList<CRegion_Column *,CRegion_Column *>::RemoveAll, COMDAT
; _this$ = ecx

; 862  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 863  : 	ASSERT_VALID(this);
; 864  : 
; 865  : 	// destroy elements
; 866  : 	CNode* pNode;
; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)
; 868  : 		pNode->data.~TYPE();
; 869  : 
; 870  : 	m_nCount = 0;
; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 872  : 	m_pBlocks->FreeDataChain();

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0000d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00014	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0001b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00022	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00027	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0002e	5e		 pop	 esi

; 874  : }

  0002f	c3		 ret	 0
?RemoveAll@?$CList@PAVCRegion_Column@@PAV1@@@QAEXXZ ENDP ; CList<CRegion_Column *,CRegion_Column *>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?AddTail@?$CList@PAVCRegion_Column@@PAV1@@@QAEPAU__POSITION@@PAVCRegion_Column@@@Z
_TEXT	SEGMENT
_newElement$ = 8					; size = 4
?AddTail@?$CList@PAVCRegion_Column@@PAV1@@@QAEPAU__POSITION@@PAVCRegion_Column@@@Z PROC ; CList<CRegion_Column *,CRegion_Column *>::AddTail, COMDAT
; _this$ = ecx

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 902  : 	if (m_pNodeFree == NULL)

  00007	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0

; 966  : 	ASSERT_VALID(this);
; 967  : 
; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  0000b	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 902  : 	if (m_pNodeFree == NULL)

  0000e	75 32		 jne	 SHORT $LN11@AddTail

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  00010	6a 0c		 push	 12			; 0000000cH
  00012	ff 76 18	 push	 DWORD PTR [esi+24]
  00015	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001e	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00021	83 c0 08	 add	 eax, 8
  00024	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00027	83 c2 ff	 add	 edx, -1
  0002a	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  0002d	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  00030	78 10		 js	 SHORT $LN11@AddTail
$LL8@AddTail:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00032	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00035	89 01		 mov	 DWORD PTR [ecx], eax

; 915  : 			m_pNodeFree = pNode;

  00037	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0003a	83 e9 0c	 sub	 ecx, 12			; 0000000cH
  0003d	83 ea 01	 sub	 edx, 1
  00040	79 f0		 jns	 SHORT $LL8@AddTail
$LN11@AddTail:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00042	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00045	85 c9		 test	 ecx, ecx
  00047	74 39		 je	 SHORT $LN22@AddTail

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00049	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004b	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 969  : 	pNewNode->data = newElement;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]

; 922  : 	pNode->pPrev = pPrev;

  00051	89 79 04	 mov	 DWORD PTR [ecx+4], edi

; 923  : 	pNode->pNext = pNext;

  00054	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 924  : 	m_nCount++;

  0005a	ff 46 0c	 inc	 DWORD PTR [esi+12]

; 969  : 	pNewNode->data = newElement;

  0005d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 970  : 	if (m_pNodeTail != NULL)

  00060	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00063	85 c0		 test	 eax, eax
  00065	74 0d		 je	 SHORT $LN2@AddTail

; 971  : 		m_pNodeTail->pNext = pNewNode;

  00067	89 08		 mov	 DWORD PTR [eax], ecx

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00069	8b c1		 mov	 eax, ecx
  0006b	5f		 pop	 edi
  0006c	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0006f	5e		 pop	 esi

; 976  : }

  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
$LN2@AddTail:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00074	5f		 pop	 edi
  00075	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00078	8b c1		 mov	 eax, ecx
  0007a	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0007d	5e		 pop	 esi

; 976  : }

  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
$LN22@AddTail:

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00082	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN20@AddTail:
  00087	cc		 int	 3
?AddTail@?$CList@PAVCRegion_Column@@PAV1@@@QAEPAU__POSITION@@PAVCRegion_Column@@@Z ENDP ; CList<CRegion_Column *,CRegion_Column *>::AddTail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??0?$CList@PAVCRegion_Column@@PAV1@@@QAE@H@Z
_TEXT	SEGMENT
_nBlockSize$ = 8					; size = 4
??0?$CList@PAVCRegion_Column@@PAV1@@@QAE@H@Z PROC	; CList<CRegion_Column *,CRegion_Column *>::CList<CRegion_Column *,CRegion_Column *>, COMDAT
; _this$ = ecx

; 851  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;
; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 856  : 	m_pBlocks = NULL;
; 857  : 	m_nBlockSize = nBlockSize;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nBlockSize$[ebp]
  00006	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 858  : }

  00009	8b c1		 mov	 eax, ecx
  0000b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CList@PAVCRegion_Column@@PAV1@@@6B@
  00011	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00018	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0001f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00026	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0002d	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??0?$CList@PAVCRegion_Column@@PAV1@@@QAE@H@Z ENDP	; CList<CRegion_Column *,CRegion_Column *>::CList<CRegion_Column *,CRegion_Column *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
;	COMDAT ?DeleteColumnBlockList@CRegion_AllBlock@@QAEXXZ
_TEXT	SEGMENT
?DeleteColumnBlockList@CRegion_AllBlock@@QAEXXZ PROC	; CRegion_AllBlock::DeleteColumnBlockList, COMDAT
; _this$ = ecx

; 72   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 73   : 	POSITION pos = m_ColumnBlockRegionList.GetHeadPosition();

  00004	8b 77 08	 mov	 esi, DWORD PTR [edi+8]

; 74   : 	while(pos) {

  00007	85 f6		 test	 esi, esi
  00009	74 18		 je	 SHORT $LN11@DeleteColu
  0000b	0f 1f 44 00 00	 npad	 5
$LL2@DeleteColu:

; 76   : 		delete pColumnRegion;

  00010	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00013	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp

; 76   : 		delete pColumnRegion;

  00015	85 c9		 test	 ecx, ecx
  00017	74 06		 je	 SHORT $LN5@DeleteColu
  00019	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001b	6a 01		 push	 1
  0001d	ff 10		 call	 DWORD PTR [eax]
$LN5@DeleteColu:

; 74   : 	while(pos) {

  0001f	85 f6		 test	 esi, esi
  00021	75 ed		 jne	 SHORT $LL2@DeleteColu
$LN11@DeleteColu:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00023	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00026	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  0002d	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00034	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  0003b	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00042	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00047	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp

; 80   : }

  00050	c3		 ret	 0
?DeleteColumnBlockList@CRegion_AllBlock@@QAEXXZ ENDP	; CRegion_AllBlock::DeleteColumnBlockList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
;	COMDAT ?InsertBlockIndex@CRegion_AllBlock@@QAE_NABVCBlockIndex@@@Z
_TEXT	SEGMENT
_blockIndex$ = 8					; size = 4
?InsertBlockIndex@CRegion_AllBlock@@QAE_NABVCBlockIndex@@@Z PROC ; CRegion_AllBlock::InsertBlockIndex, COMDAT
; _this$ = ecx

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 60   : 	POSITION pos = m_ColumnBlockRegionList.GetHeadPosition();

  00005	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00008	57		 push	 edi

; 61   : 	while(pos) {

  00009	85 f6		 test	 esi, esi
  0000b	74 18		 je	 SHORT $LN3@InsertBloc
  0000d	8b 5d 08	 mov	 ebx, DWORD PTR _blockIndex$[ebp]
$LL2@InsertBloc:

; 62   : 		CRegion_Column* pColumnRegion = m_ColumnBlockRegionList.GetNext(pos);

  00010	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 63   : 		if(pColumnRegion->GetColumnIndex()  == blockIndex.GetColumn()) {

  00013	8b cf		 mov	 ecx, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00015	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp

; 63   : 		if(pColumnRegion->GetColumnIndex()  == blockIndex.GetColumn()) {

  00017	e8 00 00 00 00	 call	 ?GetColumnIndex@CRegion_Column@@QAEHXZ ; CRegion_Column::GetColumnIndex
  0001c	3b 43 04	 cmp	 eax, DWORD PTR [ebx+4]
  0001f	74 0d		 je	 SHORT $LN9@InsertBloc

; 61   : 	while(pos) {

  00021	85 f6		 test	 esi, esi
  00023	75 eb		 jne	 SHORT $LL2@InsertBloc
$LN3@InsertBloc:
  00025	5f		 pop	 edi

; 65   : 			return true;
; 66   : 		}
; 67   : 	}
; 68   : 	return false;
; 69   : }

  00026	5e		 pop	 esi
  00027	32 c0		 xor	 al, al
  00029	5b		 pop	 ebx
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
$LN9@InsertBloc:

; 64   : 			pColumnRegion->InsertRow(blockIndex.GetRow()); 

  0002e	ff 33		 push	 DWORD PTR [ebx]
  00030	8b cf		 mov	 ecx, edi
  00032	e8 00 00 00 00	 call	 ?InsertRow@CRegion_Column@@QAE_NH@Z ; CRegion_Column::InsertRow
  00037	5f		 pop	 edi

; 65   : 			return true;
; 66   : 		}
; 67   : 	}
; 68   : 	return false;
; 69   : }

  00038	5e		 pop	 esi
  00039	b0 01		 mov	 al, 1
  0003b	5b		 pop	 ebx
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?InsertBlockIndex@CRegion_AllBlock@@QAE_NABVCBlockIndex@@@Z ENDP ; CRegion_AllBlock::InsertBlockIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
;	COMDAT ?MakeColumnList@CRegion_AllBlock@@QAEXHH@Z
_TEXT	SEGMENT
$T2 = -24						; size = 4
_pPrev$1$ = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nColumnCount$ = 8					; size = 4
_nRowCount$ = 12					; size = 4
?MakeColumnList@CRegion_AllBlock@@QAEXHH@Z PROC		; CRegion_AllBlock::MakeColumnList, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?MakeColumnList@CRegion_AllBlock@@QAEXHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx

; 33   : 	for(int nColumn = 0 ; nColumn < nColumnCount ; nColumn++)

  0002a	8b 7d 08	 mov	 edi, DWORD PTR _nColumnCount$[ebp]
  0002d	33 db		 xor	 ebx, ebx
  0002f	85 ff		 test	 edi, edi
  00031	0f 8e bb 00 00
	00		 jle	 $LN37@MakeColumn
$LL4@MakeColumn:

; 34   : 		m_ColumnBlockRegionList.AddTail(new CRegion_Column(nColumn, nRowCount));

  00037	6a 24		 push	 36			; 00000024H
  00039	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003e	83 c4 04	 add	 esp, 4
  00041	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004b	85 c0		 test	 eax, eax
  0004d	74 10		 je	 SHORT $LN6@MakeColumn
  0004f	ff 75 0c	 push	 DWORD PTR _nRowCount$[ebp]
  00052	8b c8		 mov	 ecx, eax
  00054	53		 push	 ebx
  00055	e8 00 00 00 00	 call	 ??0CRegion_Column@@QAE@HH@Z ; CRegion_Column::CRegion_Column
  0005a	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
  0005d	eb 07		 jmp	 SHORT $LN7@MakeColumn
$LN6@MakeColumn:
  0005f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0
$LN7@MakeColumn:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 902  : 	if (m_pNodeFree == NULL)

  00066	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  00069	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp

; 34   : 		m_ColumnBlockRegionList.AddTail(new CRegion_Column(nColumn, nRowCount));

  0006c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  00073	89 45 ec	 mov	 DWORD PTR _pPrev$1$[ebp], eax

; 902  : 	if (m_pNodeFree == NULL)

  00076	85 d2		 test	 edx, edx
  00078	75 44		 jne	 SHORT $LN35@MakeColumn

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  0007a	6a 0c		 push	 12			; 0000000cH
  0007c	ff 76 1c	 push	 DWORD PTR [esi+28]
  0007f	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  00088	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  0008b	83 c0 08	 add	 eax, 8
  0008e	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  00091	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00094	8d 7a ff	 lea	 edi, DWORD PTR [edx-1]
  00097	83 c0 f4	 add	 eax, -12		; fffffff4H
  0009a	85 ff		 test	 edi, edi
  0009c	78 16		 js	 SHORT $LN36@MakeColumn
  0009e	66 90		 npad	 2
$LL16@MakeColumn:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  000a0	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000a3	8b d0		 mov	 edx, eax
  000a5	89 08		 mov	 DWORD PTR [eax], ecx

; 915  : 			m_pNodeFree = pNode;

  000a7	89 46 14	 mov	 DWORD PTR [esi+20], eax
  000aa	83 e8 0c	 sub	 eax, 12			; 0000000cH
  000ad	83 ef 01	 sub	 edi, 1
  000b0	79 ee		 jns	 SHORT $LL16@MakeColumn
  000b2	eb 03		 jmp	 SHORT $LN19@MakeColumn
$LN36@MakeColumn:
  000b4	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
$LN19@MakeColumn:

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  000b7	85 d2		 test	 edx, edx
  000b9	74 4b		 je	 SHORT $LN27@MakeColumn
  000bb	8b 7d 08	 mov	 edi, DWORD PTR _nColumnCount$[ebp]
$LN35@MakeColumn:

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  000be	8b 02		 mov	 eax, DWORD PTR [edx]
  000c0	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 922  : 	pNode->pPrev = pPrev;

  000c3	8b 45 ec	 mov	 eax, DWORD PTR _pPrev$1$[ebp]
  000c6	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 969  : 	pNewNode->data = newElement;

  000c9	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]

; 923  : 	pNode->pNext = pNext;

  000cc	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 924  : 	m_nCount++;

  000d2	ff 46 10	 inc	 DWORD PTR [esi+16]

; 969  : 	pNewNode->data = newElement;

  000d5	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 970  : 	if (m_pNodeTail != NULL)

  000d8	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000db	85 c0		 test	 eax, eax
  000dd	74 04		 je	 SHORT $LN10@MakeColumn

; 971  : 		m_pNodeTail->pNext = pNewNode;

  000df	89 10		 mov	 DWORD PTR [eax], edx
  000e1	eb 03		 jmp	 SHORT $LN11@MakeColumn
$LN10@MakeColumn:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;

  000e3	89 56 08	 mov	 DWORD PTR [esi+8], edx
$LN11@MakeColumn:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp

; 33   : 	for(int nColumn = 0 ; nColumn < nColumnCount ; nColumn++)

  000e6	43		 inc	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 974  : 	m_pNodeTail = pNewNode;

  000e7	89 56 0c	 mov	 DWORD PTR [esi+12], edx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp

; 33   : 	for(int nColumn = 0 ; nColumn < nColumnCount ; nColumn++)

  000ea	3b df		 cmp	 ebx, edi
  000ec	0f 8c 45 ff ff
	ff		 jl	 $LL4@MakeColumn
$LN37@MakeColumn:

; 35   : }

  000f2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fc	59		 pop	 ecx
  000fd	5f		 pop	 edi
  000fe	5e		 pop	 esi
  000ff	5b		 pop	 ebx
  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c2 08 00	 ret	 8
$LN27@MakeColumn:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00106	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN39@MakeColumn:
  0010b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?MakeColumnList@CRegion_AllBlock@@QAEXHH@Z$0:
  00000	6a 24		 push	 36			; 00000024H
  00002	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?MakeColumnList@CRegion_AllBlock@@QAEXHH@Z:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?MakeColumnList@CRegion_AllBlock@@QAEXHH@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?MakeColumnList@CRegion_AllBlock@@QAEXHH@Z ENDP		; CRegion_AllBlock::MakeColumnList
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
;	COMDAT ?GetBlockRegion@CRegion_AllBlock@@QBE?AVCRect@@HH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_nColumnIndex$ = 12					; size = 4
_nRowIndex$ = 16					; size = 4
?GetBlockRegion@CRegion_AllBlock@@QBE?AVCRect@@HH@Z PROC ; CRegion_AllBlock::GetBlockRegion, COMDAT
; _this$ = ecx

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 49   : 	POSITION pos = m_ColumnBlockRegionList.GetHeadPosition();

  00005	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00008	57		 push	 edi

; 50   : 	while(pos) {

  00009	85 f6		 test	 esi, esi
  0000b	74 17		 je	 SHORT $LN3@GetBlockRe
  0000d	8b 5d 0c	 mov	 ebx, DWORD PTR _nColumnIndex$[ebp]
$LL2@GetBlockRe:

; 51   : 		CRegion_Column* pColumnRegion = m_ColumnBlockRegionList.GetNext(pos);

  00010	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 52   : 		if(pColumnRegion->GetColumnIndex()  == nColumnIndex)

  00013	8b cf		 mov	 ecx, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 819  : 		rPosition = (POSITION) pNode->pNext;

  00015	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp

; 52   : 		if(pColumnRegion->GetColumnIndex()  == nColumnIndex)

  00017	e8 00 00 00 00	 call	 ?GetColumnIndex@CRegion_Column@@QAEHXZ ; CRegion_Column::GetColumnIndex
  0001c	3b c3		 cmp	 eax, ebx
  0001e	74 29		 je	 SHORT $LN11@GetBlockRe

; 50   : 	while(pos) {

  00020	85 f6		 test	 esi, esi
  00022	75 ec		 jne	 SHORT $LL2@GetBlockRe
$LN3@GetBlockRe:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 540  : 	left = l;

  00024	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00027	5f		 pop	 edi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp

; 56   : }

  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 540  : 	left = l;

  0002a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 541  : 	top = t;

  00030	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 542  : 	right = r;

  00037	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 543  : 	bottom = b;

  0003e	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp

; 56   : }

  00045	5d		 pop	 ebp
  00046	c2 0c 00	 ret	 12			; 0000000cH
$LN11@GetBlockRe:

; 53   : 			return pColumnRegion->GetBlockRegion(nRowIndex); 

  00049	ff 75 10	 push	 DWORD PTR _nRowIndex$[ebp]
  0004c	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0004f	8b cf		 mov	 ecx, edi
  00051	56		 push	 esi
  00052	e8 00 00 00 00	 call	 ?GetBlockRegion@CRegion_Column@@QBE?AVCRect@@H@Z ; CRegion_Column::GetBlockRegion
  00057	5f		 pop	 edi
  00058	8b c6		 mov	 eax, esi

; 56   : }

  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	5d		 pop	 ebp
  0005d	c2 0c 00	 ret	 12			; 0000000cH
?GetBlockRegion@CRegion_AllBlock@@QBE?AVCRect@@HH@Z ENDP ; CRegion_AllBlock::GetBlockRegion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
;	COMDAT ?SetBlockRegion@CRegion_AllBlock@@QAEXHHABVCRect@@@Z
_TEXT	SEGMENT
_nColumnIndex$ = 8					; size = 4
_nRowIndex$ = 12					; size = 4
_blockregion$ = 16					; size = 4
?SetBlockRegion@CRegion_AllBlock@@QAEXHHABVCRect@@@Z PROC ; CRegion_AllBlock::SetBlockRegion, COMDAT
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 39   : 	POSITION pos = m_ColumnBlockRegionList.GetHeadPosition();

  00004	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]

; 40   : 	while(pos) {

  00007	85 f6		 test	 esi, esi
  00009	74 27		 je	 SHORT $LN3@SetBlockRe
  0000b	53		 push	 ebx
  0000c	8b 5d 10	 mov	 ebx, DWORD PTR _blockregion$[ebp]
  0000f	57		 push	 edi
$LL2@SetBlockRe:

; 41   : 		CRegion_Column* pColumnRegion = m_ColumnBlockRegionList.GetNext(pos);

  00010	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 42   : 		if(pColumnRegion->GetColumnIndex()  == nColumnIndex)

  00013	8b cf		 mov	 ecx, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00015	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp

; 42   : 		if(pColumnRegion->GetColumnIndex()  == nColumnIndex)

  00017	e8 00 00 00 00	 call	 ?GetColumnIndex@CRegion_Column@@QAEHXZ ; CRegion_Column::GetColumnIndex
  0001c	3b 45 08	 cmp	 eax, DWORD PTR _nColumnIndex$[ebp]
  0001f	75 0b		 jne	 SHORT $LN4@SetBlockRe

; 43   : 			pColumnRegion->SetBlockRegion(nRowIndex, blockregion); 

  00021	53		 push	 ebx
  00022	ff 75 0c	 push	 DWORD PTR _nRowIndex$[ebp]
  00025	8b cf		 mov	 ecx, edi
  00027	e8 00 00 00 00	 call	 ?SetBlockRegion@CRegion_Column@@QAEXHABVCRect@@@Z ; CRegion_Column::SetBlockRegion
$LN4@SetBlockRe:

; 40   : 	while(pos) {

  0002c	85 f6		 test	 esi, esi
  0002e	75 e0		 jne	 SHORT $LL2@SetBlockRe
  00030	5f		 pop	 edi
  00031	5b		 pop	 ebx
$LN3@SetBlockRe:
  00032	5e		 pop	 esi

; 44   : 	}
; 45   : }

  00033	5d		 pop	 ebp
  00034	c2 0c 00	 ret	 12			; 0000000cH
?SetBlockRegion@CRegion_AllBlock@@QAEXHHABVCRect@@@Z ENDP ; CRegion_AllBlock::SetBlockRegion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
;	COMDAT ?Initialize@CRegion_AllBlock@@QAEXXZ
_TEXT	SEGMENT
?Initialize@CRegion_AllBlock@@QAEXXZ PROC		; CRegion_AllBlock::Initialize, COMDAT
; _this$ = ecx

; 92   : 	DeleteColumnBlockList();

  00000	e9 00 00 00 00	 jmp	 ?DeleteColumnBlockList@CRegion_AllBlock@@QAEXXZ ; CRegion_AllBlock::DeleteColumnBlockList
?Initialize@CRegion_AllBlock@@QAEXXZ ENDP		; CRegion_AllBlock::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
;	COMDAT ?SetAllBlockRegion@CRegion_AllBlock@@QAEXPAUIChartManager133101@@@Z
_TEXT	SEGMENT
_pMainBlock$GSCopy$1$ = -52				; size = 4
_this$GSCopy$1$ = -48					; size = 4
_pIBlock$1$ = -44					; size = 4
_nColumn$1$ = -40					; size = 4
_rctNoFrameAndMargin$1 = -36				; size = 16
_rctNoFrame$2 = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_pMainBlock$ = 8					; size = 4
?SetAllBlockRegion@CRegion_AllBlock@@QAEXPAUIChartManager133101@@@Z PROC ; CRegion_AllBlock::SetAllBlockRegion, COMDAT
; _this$ = ecx

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _pMainBlock$[ebp]
  00014	89 4d d0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00017	89 7d cc	 mov	 DWORD PTR _pMainBlock$GSCopy$1$[ebp], edi

; 97   : 	if(pMainBlock == NULL)

  0001a	85 ff		 test	 edi, edi
  0001c	0f 84 a8 00 00
	00		 je	 $LN3@SetAllBloc

; 98   : 		return;
; 99   : 
; 100  : 	for(int nColumn = 0 ; nColumn < pMainBlock->GetColumnCount() ; nColumn++) {

  00022	8b 07		 mov	 eax, DWORD PTR [edi]
  00024	8b cf		 mov	 ecx, edi
  00026	56		 push	 esi
  00027	33 f6		 xor	 esi, esi
  00029	89 75 d8	 mov	 DWORD PTR _nColumn$1$[ebp], esi
  0002c	ff 50 20	 call	 DWORD PTR [eax+32]
  0002f	85 c0		 test	 eax, eax
  00031	0f 8e 92 00 00
	00		 jle	 $LN47@SetAllBloc
  00037	53		 push	 ebx
$LL4@SetAllBloc:

; 101  : 		for(int nRow = 0 ; nRow < pMainBlock->GetRowCount() ; nRow++)

  00038	8b 07		 mov	 eax, DWORD PTR [edi]
  0003a	8b cf		 mov	 ecx, edi
  0003c	33 db		 xor	 ebx, ebx
  0003e	ff 50 1c	 call	 DWORD PTR [eax+28]
  00041	85 c0		 test	 eax, eax
  00043	7e 70		 jle	 SHORT $LN2@SetAllBloc
$LL7@SetAllBloc:

; 102  : 		{
; 103  : 			IBlock *pIBlock = pMainBlock->GetBlock( nRow, nColumn);

  00045	8b 07		 mov	 eax, DWORD PTR [edi]
  00047	8b cf		 mov	 ecx, edi
  00049	56		 push	 esi
  0004a	53		 push	 ebx
  0004b	ff 50 38	 call	 DWORD PTR [eax+56]
  0004e	8b c8		 mov	 ecx, eax
  00050	89 4d d4	 mov	 DWORD PTR _pIBlock$1$[ebp], ecx

; 104  : 			if( !pIBlock) continue;

  00053	85 c9		 test	 ecx, ecx
  00055	74 52		 je	 SHORT $LN5@SetAllBloc

; 106  : 			pIBlock->GetGraphRegions( rctNoFrame, rctNoFrameAndMargin);

  00057	0f 57 c0	 xorps	 xmm0, xmm0
  0005a	8d 55 dc	 lea	 edx, DWORD PTR _rctNoFrameAndMargin$1[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 528  : 	left = 0;

  0005d	0f 11 45 dc	 movups	 XMMWORD PTR _rctNoFrameAndMargin$1[ebp], xmm0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp

; 106  : 			pIBlock->GetGraphRegions( rctNoFrame, rctNoFrameAndMargin);

  00061	52		 push	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 528  : 	left = 0;

  00062	0f 11 45 ec	 movups	 XMMWORD PTR _rctNoFrame$2[ebp], xmm0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp

; 106  : 			pIBlock->GetGraphRegions( rctNoFrame, rctNoFrameAndMargin);

  00066	8b 01		 mov	 eax, DWORD PTR [ecx]
  00068	8d 55 ec	 lea	 edx, DWORD PTR _rctNoFrame$2[ebp]
  0006b	52		 push	 edx
  0006c	ff 50 10	 call	 DWORD PTR [eax+16]

; 107  : 			pIBlock->Release();

  0006f	8b 4d d4	 mov	 ecx, DWORD PTR _pIBlock$1$[ebp]
  00072	51		 push	 ecx
  00073	8b 01		 mov	 eax, DWORD PTR [ecx]
  00075	ff 50 08	 call	 DWORD PTR [eax+8]

; 39   : 	POSITION pos = m_ColumnBlockRegionList.GetHeadPosition();

  00078	8b 45 d0	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  0007b	8b 70 08	 mov	 esi, DWORD PTR [eax+8]

; 40   : 	while(pos) {

  0007e	85 f6		 test	 esi, esi
  00080	74 24		 je	 SHORT $LN46@SetAllBloc
$LL16@SetAllBloc:

; 41   : 		CRegion_Column* pColumnRegion = m_ColumnBlockRegionList.GetNext(pos);

  00082	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 42   : 		if(pColumnRegion->GetColumnIndex()  == nColumnIndex)

  00085	8b cf		 mov	 ecx, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00087	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp

; 42   : 		if(pColumnRegion->GetColumnIndex()  == nColumnIndex)

  00089	e8 00 00 00 00	 call	 ?GetColumnIndex@CRegion_Column@@QAEHXZ ; CRegion_Column::GetColumnIndex
  0008e	3b 45 d8	 cmp	 eax, DWORD PTR _nColumn$1$[ebp]
  00091	75 0c		 jne	 SHORT $LN18@SetAllBloc

; 43   : 			pColumnRegion->SetBlockRegion(nRowIndex, blockregion); 

  00093	8d 45 ec	 lea	 eax, DWORD PTR _rctNoFrame$2[ebp]
  00096	8b cf		 mov	 ecx, edi
  00098	50		 push	 eax
  00099	53		 push	 ebx
  0009a	e8 00 00 00 00	 call	 ?SetBlockRegion@CRegion_Column@@QAEXHABVCRect@@@Z ; CRegion_Column::SetBlockRegion
$LN18@SetAllBloc:

; 40   : 	while(pos) {

  0009f	85 f6		 test	 esi, esi
  000a1	75 df		 jne	 SHORT $LL16@SetAllBloc
  000a3	8b 7d cc	 mov	 edi, DWORD PTR _pMainBlock$GSCopy$1$[ebp]
$LN46@SetAllBloc:

; 101  : 		for(int nRow = 0 ; nRow < pMainBlock->GetRowCount() ; nRow++)

  000a6	8b 75 d8	 mov	 esi, DWORD PTR _nColumn$1$[ebp]
$LN5@SetAllBloc:
  000a9	8b 07		 mov	 eax, DWORD PTR [edi]
  000ab	8b cf		 mov	 ecx, edi
  000ad	43		 inc	 ebx
  000ae	ff 50 1c	 call	 DWORD PTR [eax+28]
  000b1	3b d8		 cmp	 ebx, eax
  000b3	7c 90		 jl	 SHORT $LL7@SetAllBloc
$LN2@SetAllBloc:

; 98   : 		return;
; 99   : 
; 100  : 	for(int nColumn = 0 ; nColumn < pMainBlock->GetColumnCount() ; nColumn++) {

  000b5	8b 07		 mov	 eax, DWORD PTR [edi]
  000b7	46		 inc	 esi
  000b8	8b cf		 mov	 ecx, edi
  000ba	89 75 d8	 mov	 DWORD PTR _nColumn$1$[ebp], esi
  000bd	ff 50 20	 call	 DWORD PTR [eax+32]
  000c0	3b f0		 cmp	 esi, eax
  000c2	0f 8c 70 ff ff
	ff		 jl	 $LL4@SetAllBloc
  000c8	5b		 pop	 ebx
$LN47@SetAllBloc:
  000c9	5e		 pop	 esi
$LN3@SetAllBloc:

; 108  : 			pIBlock = NULL;
; 109  : 
; 110  : 			SetBlockRegion(nColumn, nRow, rctNoFrame);  
; 111  : 		}
; 112  : 	}
; 113  : }

  000ca	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cd	33 cd		 xor	 ecx, ebp
  000cf	5f		 pop	 edi
  000d0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 04 00	 ret	 4
?SetAllBlockRegion@CRegion_AllBlock@@QAEXPAUIChartManager133101@@@Z ENDP ; CRegion_AllBlock::SetAllBlockRegion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
;	COMDAT ?SetDrawingRegions@CRegion_AllBlock@@QAEXPAUIChartManager133101@@@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -68					; size = 4
_pIBlock$1$ = -64					; size = 4
_nColumnCount$1$ = -64					; size = 4
_pMainBlock$GSCopy$1$ = -60				; size = 4
_nRow$1$ = -56						; size = 4
tv336 = -56						; size = 4
$T2 = -56						; size = 4
_nColumn$1$ = -52					; size = 4
_nRowCount$1$ = -52					; size = 4
_rctNoFrameAndMargin$3 = -48				; size = 16
_rctNoFrame$4 = -32					; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pMainBlock$ = 8					; size = 4
?SetDrawingRegions@CRegion_AllBlock@@QAEXPAUIChartManager133101@@@Z PROC ; CRegion_AllBlock::SetDrawingRegions, COMDAT
; _this$ = ecx

; 116  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetDrawingRegions@CRegion_AllBlock@@QAEXPAUIChartManager133101@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b c1		 mov	 eax, ecx
  0002c	89 45 bc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], eax
  0002f	8b 7d 08	 mov	 edi, DWORD PTR _pMainBlock$[ebp]
  00032	89 7d c4	 mov	 DWORD PTR _pMainBlock$GSCopy$1$[ebp], edi

; 92   : 	DeleteColumnBlockList();

  00035	e8 00 00 00 00	 call	 ?DeleteColumnBlockList@CRegion_AllBlock@@QAEXXZ ; CRegion_AllBlock::DeleteColumnBlockList

; 117  : 	Initialize();
; 118  : 	MakeColumnList(pMainBlock->GetColumnCount(), pMainBlock->GetRowCount());

  0003a	8b 07		 mov	 eax, DWORD PTR [edi]
  0003c	8b cf		 mov	 ecx, edi
  0003e	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00041	ff d0		 call	 eax
  00043	8b 17		 mov	 edx, DWORD PTR [edi]
  00045	8b cf		 mov	 ecx, edi
  00047	89 45 cc	 mov	 DWORD PTR _nRowCount$1$[ebp], eax
  0004a	8b 52 20	 mov	 edx, DWORD PTR [edx+32]
  0004d	ff d2		 call	 edx

; 33   : 	for(int nColumn = 0 ; nColumn < nColumnCount ; nColumn++)

  0004f	33 f6		 xor	 esi, esi

; 117  : 	Initialize();
; 118  : 	MakeColumnList(pMainBlock->GetColumnCount(), pMainBlock->GetRowCount());

  00051	89 45 c0	 mov	 DWORD PTR _nColumnCount$1$[ebp], eax

; 33   : 	for(int nColumn = 0 ; nColumn < nColumnCount ; nColumn++)

  00054	85 c0		 test	 eax, eax
  00056	7e 47		 jle	 SHORT $LN7@SetDrawing
  00058	8b 45 bc	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  0005b	83 c0 04	 add	 eax, 4
  0005e	8b f8		 mov	 edi, eax
$LL8@SetDrawing:

; 34   : 		m_ColumnBlockRegionList.AddTail(new CRegion_Column(nColumn, nRowCount));

  00060	6a 24		 push	 36			; 00000024H
  00062	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00067	83 c4 04	 add	 esp, 4
  0006a	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
  0006d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00074	85 c0		 test	 eax, eax
  00076	74 0d		 je	 SHORT $LN10@SetDrawing
  00078	ff 75 cc	 push	 DWORD PTR _nRowCount$1$[ebp]
  0007b	8b c8		 mov	 ecx, eax
  0007d	56		 push	 esi
  0007e	e8 00 00 00 00	 call	 ??0CRegion_Column@@QAE@HH@Z ; CRegion_Column::CRegion_Column
  00083	eb 02		 jmp	 SHORT $LN11@SetDrawing
$LN10@SetDrawing:
  00085	33 c0		 xor	 eax, eax
$LN11@SetDrawing:
  00087	50		 push	 eax
  00088	8b cf		 mov	 ecx, edi
  0008a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00091	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCRegion_Column@@PAV1@@@QAEPAU__POSITION@@PAVCRegion_Column@@@Z ; CList<CRegion_Column *,CRegion_Column *>::AddTail
  00096	46		 inc	 esi
  00097	3b 75 c0	 cmp	 esi, DWORD PTR _nColumnCount$1$[ebp]
  0009a	7c c4		 jl	 SHORT $LL8@SetDrawing
  0009c	8b 7d c4	 mov	 edi, DWORD PTR _pMainBlock$GSCopy$1$[ebp]
$LN7@SetDrawing:

; 100  : 	for(int nColumn = 0 ; nColumn < pMainBlock->GetColumnCount() ; nColumn++) {

  0009f	8b 07		 mov	 eax, DWORD PTR [edi]
  000a1	33 f6		 xor	 esi, esi
  000a3	8b cf		 mov	 ecx, edi
  000a5	89 75 cc	 mov	 DWORD PTR _nColumn$1$[ebp], esi
  000a8	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  000ab	ff d0		 call	 eax
  000ad	85 c0		 test	 eax, eax
  000af	0f 8e a4 00 00
	00		 jle	 $LN15@SetDrawing
$LL16@SetDrawing:

; 101  : 		for(int nRow = 0 ; nRow < pMainBlock->GetRowCount() ; nRow++)

  000b5	8b 4d c4	 mov	 ecx, DWORD PTR _pMainBlock$GSCopy$1$[ebp]
  000b8	33 ff		 xor	 edi, edi
  000ba	89 7d c8	 mov	 DWORD PTR _nRow$1$[ebp], edi
  000bd	8b 01		 mov	 eax, DWORD PTR [ecx]
  000bf	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  000c2	ff d0		 call	 eax
  000c4	85 c0		 test	 eax, eax
  000c6	7e 7b		 jle	 SHORT $LN14@SetDrawing
$LL19@SetDrawing:

; 102  : 		{
; 103  : 			IBlock *pIBlock = pMainBlock->GetBlock( nRow, nColumn);

  000c8	8b 4d c4	 mov	 ecx, DWORD PTR _pMainBlock$GSCopy$1$[ebp]
  000cb	56		 push	 esi
  000cc	57		 push	 edi
  000cd	8b 01		 mov	 eax, DWORD PTR [ecx]
  000cf	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  000d2	ff d0		 call	 eax
  000d4	8b c8		 mov	 ecx, eax
  000d6	89 4d c0	 mov	 DWORD PTR _pIBlock$1$[ebp], ecx

; 104  : 			if( !pIBlock) continue;

  000d9	85 c9		 test	 ecx, ecx
  000db	74 54		 je	 SHORT $LN17@SetDrawing
  000dd	0f 57 c0	 xorps	 xmm0, xmm0

; 106  : 			pIBlock->GetGraphRegions( rctNoFrame, rctNoFrameAndMargin);

  000e0	8d 55 d0	 lea	 edx, DWORD PTR _rctNoFrameAndMargin$3[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 528  : 	left = 0;

  000e3	0f 11 45 d0	 movups	 XMMWORD PTR _rctNoFrameAndMargin$3[ebp], xmm0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp

; 106  : 			pIBlock->GetGraphRegions( rctNoFrame, rctNoFrameAndMargin);

  000e7	52		 push	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 528  : 	left = 0;

  000e8	0f 11 45 e0	 movups	 XMMWORD PTR _rctNoFrame$4[ebp], xmm0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp

; 106  : 			pIBlock->GetGraphRegions( rctNoFrame, rctNoFrameAndMargin);

  000ec	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ee	8d 55 e0	 lea	 edx, DWORD PTR _rctNoFrame$4[ebp]
  000f1	52		 push	 edx
  000f2	ff 50 10	 call	 DWORD PTR [eax+16]

; 107  : 			pIBlock->Release();

  000f5	8b 4d c0	 mov	 ecx, DWORD PTR _pIBlock$1$[ebp]
  000f8	51		 push	 ecx
  000f9	8b 01		 mov	 eax, DWORD PTR [ecx]
  000fb	ff 50 08	 call	 DWORD PTR [eax+8]

; 39   : 	POSITION pos = m_ColumnBlockRegionList.GetHeadPosition();

  000fe	8b 45 bc	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  00101	8b 70 08	 mov	 esi, DWORD PTR [eax+8]

; 40   : 	while(pos) {

  00104	85 f6		 test	 esi, esi
  00106	74 26		 je	 SHORT $LN63@SetDrawing
$LL28@SetDrawing:

; 41   : 		CRegion_Column* pColumnRegion = m_ColumnBlockRegionList.GetNext(pos);

  00108	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 42   : 		if(pColumnRegion->GetColumnIndex()  == nColumnIndex)

  0010b	8b cf		 mov	 ecx, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  0010d	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp

; 42   : 		if(pColumnRegion->GetColumnIndex()  == nColumnIndex)

  0010f	e8 00 00 00 00	 call	 ?GetColumnIndex@CRegion_Column@@QAEHXZ ; CRegion_Column::GetColumnIndex
  00114	3b 45 cc	 cmp	 eax, DWORD PTR _nColumn$1$[ebp]
  00117	75 0e		 jne	 SHORT $LN30@SetDrawing

; 43   : 			pColumnRegion->SetBlockRegion(nRowIndex, blockregion); 

  00119	8d 45 e0	 lea	 eax, DWORD PTR _rctNoFrame$4[ebp]
  0011c	8b cf		 mov	 ecx, edi
  0011e	50		 push	 eax
  0011f	ff 75 c8	 push	 DWORD PTR _nRow$1$[ebp]
  00122	e8 00 00 00 00	 call	 ?SetBlockRegion@CRegion_Column@@QAEXHABVCRect@@@Z ; CRegion_Column::SetBlockRegion
$LN30@SetDrawing:

; 40   : 	while(pos) {

  00127	85 f6		 test	 esi, esi
  00129	75 dd		 jne	 SHORT $LL28@SetDrawing
  0012b	8b 7d c8	 mov	 edi, DWORD PTR _nRow$1$[ebp]
$LN63@SetDrawing:

; 101  : 		for(int nRow = 0 ; nRow < pMainBlock->GetRowCount() ; nRow++)

  0012e	8b 75 cc	 mov	 esi, DWORD PTR _nColumn$1$[ebp]
$LN17@SetDrawing:
  00131	8b 4d c4	 mov	 ecx, DWORD PTR _pMainBlock$GSCopy$1$[ebp]
  00134	47		 inc	 edi
  00135	89 7d c8	 mov	 DWORD PTR _nRow$1$[ebp], edi
  00138	8b 01		 mov	 eax, DWORD PTR [ecx]
  0013a	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0013d	ff d0		 call	 eax
  0013f	3b f8		 cmp	 edi, eax
  00141	7c 85		 jl	 SHORT $LL19@SetDrawing
$LN14@SetDrawing:

; 93   : }
; 94   : 
; 95   : void CRegion_AllBlock::SetAllBlockRegion(IChartManager* pMainBlock)
; 96   : {
; 97   : 	if(pMainBlock == NULL)
; 98   : 		return;
; 99   : 
; 100  : 	for(int nColumn = 0 ; nColumn < pMainBlock->GetColumnCount() ; nColumn++) {

  00143	8b 4d c4	 mov	 ecx, DWORD PTR _pMainBlock$GSCopy$1$[ebp]
  00146	46		 inc	 esi
  00147	89 75 cc	 mov	 DWORD PTR _nColumn$1$[ebp], esi
  0014a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0014c	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  0014f	ff d0		 call	 eax
  00151	3b f0		 cmp	 esi, eax
  00153	0f 8c 5c ff ff
	ff		 jl	 $LL16@SetDrawing
$LN15@SetDrawing:

; 119  : 	SetAllBlockRegion(pMainBlock);
; 120  : }

  00159	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0015c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00163	59		 pop	 ecx
  00164	5f		 pop	 edi
  00165	5e		 pop	 esi
  00166	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00169	33 cd		 xor	 ecx, ebp
  0016b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00170	8b e5		 mov	 esp, ebp
  00172	5d		 pop	 ebp
  00173	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetDrawingRegions@CRegion_AllBlock@@QAEXPAUIChartManager133101@@@Z$0:
  00000	6a 24		 push	 36			; 00000024H
  00002	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?SetDrawingRegions@CRegion_AllBlock@@QAEXPAUIChartManager133101@@@Z:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetDrawingRegions@CRegion_AllBlock@@QAEXPAUIChartManager133101@@@Z
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetDrawingRegions@CRegion_AllBlock@@QAEXPAUIChartManager133101@@@Z ENDP ; CRegion_AllBlock::SetDrawingRegions
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
;	COMDAT ??1CRegion_AllBlock@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CRegion_AllBlock@@UAE@XZ PROC			; CRegion_AllBlock::~CRegion_AllBlock, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CRegion_AllBlock@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CRegion_AllBlock@@6B@

; 28   : 	DeleteColumnBlockList();

  0002b	e8 00 00 00 00	 call	 ?DeleteColumnBlockList@CRegion_AllBlock@@QAEXXZ ; CRegion_AllBlock::DeleteColumnBlockList
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00030	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]

; 878  : {

  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$CList@PAVCRegion_Column@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  00041	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00048	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0004f	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00056	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 872  : 	m_pBlocks->FreeDataChain();

  0005d	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00062	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp

; 29   : }

  00069	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00073	59		 pop	 ecx
  00074	5e		 pop	 esi
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
  00079	cc		 int	 3
  0007a	cc		 int	 3
  0007b	cc		 int	 3
  0007c	cc		 int	 3
  0007d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CRegion_AllBlock@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CRegion_AllBlock@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CRegion_AllBlock@@UAE@XZ ENDP			; CRegion_AllBlock::~CRegion_AllBlock
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
;	COMDAT ??0CRegion_AllBlock@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CRegion_AllBlock@@QAE@XZ PROC			; CRegion_AllBlock::CRegion_AllBlock, COMDAT
; _this$ = ecx

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CRegion_AllBlock@@6B@

; 24   : }

  0000a	8b c1		 mov	 eax, ecx
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 851  : {

  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_7?$CList@PAVCRegion_Column@@PAV1@@@6B@

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;

  00016	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  0001d	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00024	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0002b	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 856  : 	m_pBlocks = NULL;

  00032	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 857  : 	m_nBlockSize = nBlockSize;

  00039	c7 41 1c 0a 00
	00 00		 mov	 DWORD PTR [ecx+28], 10	; 0000000aH
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp

; 24   : }

  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??0CRegion_AllBlock@@QAE@XZ ENDP			; CRegion_AllBlock::CRegion_AllBlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z PROC		; CObject::Dump, COMDAT
; _this$ = ecx

; 122  : 	{ /* no dumping in release builds */ }

  00000	c2 04 00	 ret	 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z ENDP		; CObject::Dump
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT
?AssertValid@CObject@@UBEXXZ PROC			; CObject::AssertValid, COMDAT
; _this$ = ecx

; 120  : 	{ /* no asserts in release builds */ }

  00000	c2 00 00	 ret	 0
?AssertValid@CObject@@UBEXXZ ENDP			; CObject::AssertValid
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z PROC		; CObject::Serialize, COMDAT
; _this$ = ecx

; 106  : 	{ /* CObject does not serialize anything by default */ }

  00000	c2 04 00	 ret	 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z ENDP		; CObject::Serialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT
??1CObject@@UAE@XZ PROC					; CObject::~CObject, COMDAT
; _this$ = ecx

; 104  : 	{ }

  00000	c2 00 00	 ret	 0
??1CObject@@UAE@XZ ENDP					; CObject::~CObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Symbol\Region_AllBlock.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
