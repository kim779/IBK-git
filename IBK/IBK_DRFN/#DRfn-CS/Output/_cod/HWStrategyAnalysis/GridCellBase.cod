; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30145.0 

	TITLE	D:\git\src\IBK\IBK_DRFN\#DRfn-CS\_Obj\HWStrategyAnalysis\GridCellBase.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1CObject@@UAE@XZ				; CObject::~CObject
PUBLIC	?Serialize@CObject@@UAEXAAVCArchive@@@Z		; CObject::Serialize
PUBLIC	?AssertValid@CObject@@UBEXXZ			; CObject::AssertValid
PUBLIC	?Dump@CObject@@UBEXAAVCDumpContext@@@Z		; CObject::Dump
PUBLIC	??1AFX_EXCEPTION_LINK@@QAE@XZ			; AFX_EXCEPTION_LINK::~AFX_EXCEPTION_LINK
PUBLIC	??1CGdiObject@@UAE@XZ				; CGdiObject::~CGdiObject
PUBLIC	??_GCGdiObject@@UAEPAXI@Z			; CGdiObject::`scalar deleting destructor'
PUBLIC	??1CPen@@UAE@XZ					; CPen::~CPen
PUBLIC	??_GCPen@@UAEPAXI@Z				; CPen::`scalar deleting destructor'
PUBLIC	??1CBrush@@UAE@XZ				; CBrush::~CBrush
PUBLIC	??_GCBrush@@UAEPAXI@Z				; CBrush::`scalar deleting destructor'
PUBLIC	?GetCurrentPen@CDC@@QBEPAVCPen@@XZ		; CDC::GetCurrentPen
PUBLIC	?GetTextExtent@CDC@@QBE?AVCSize@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CDC::GetTextExtent
PUBLIC	??1_GV_ITEM@@QAE@XZ				; _GV_ITEM::~_GV_ITEM
PUBLIC	?_GetBaseClass@CGridCellBase@@KGPAUCRuntimeClass@@XZ ; CGridCellBase::_GetBaseClass
PUBLIC	?GetThisClass@CGridCellBase@@SGPAUCRuntimeClass@@XZ ; CGridCellBase::GetThisClass
PUBLIC	?GetRuntimeClass@CGridCellBase@@UBEPAUCRuntimeClass@@XZ ; CGridCellBase::GetRuntimeClass
PUBLIC	??0CGridCellBase@@QAE@XZ			; CGridCellBase::CGridCellBase
PUBLIC	??1CGridCellBase@@UAE@XZ			; CGridCellBase::~CGridCellBase
PUBLIC	?SetState@CGridCellBase@@UAEXK@Z		; CGridCellBase::SetState
PUBLIC	?GetTipText@CGridCellBase@@UBEPBDXZ		; CGridCellBase::GetTipText
PUBLIC	?GetState@CGridCellBase@@UBEKXZ			; CGridCellBase::GetState
PUBLIC	?GetDefaultCell@CGridCellBase@@UBEPAV1@XZ	; CGridCellBase::GetDefaultCell
PUBLIC	?IsFocused@CGridCellBase@@UBEHXZ		; CGridCellBase::IsFocused
PUBLIC	?IsFixed@CGridCellBase@@UBEHXZ			; CGridCellBase::IsFixed
PUBLIC	?IsFixedCol@CGridCellBase@@UBEHXZ		; CGridCellBase::IsFixedCol
PUBLIC	?IsFixedRow@CGridCellBase@@UBEHXZ		; CGridCellBase::IsFixedRow
PUBLIC	?IsSelected@CGridCellBase@@UBEHXZ		; CGridCellBase::IsSelected
PUBLIC	?IsReadOnly@CGridCellBase@@UBEHXZ		; CGridCellBase::IsReadOnly
PUBLIC	?IsModified@CGridCellBase@@UBEHXZ		; CGridCellBase::IsModified
PUBLIC	?IsDropHighlighted@CGridCellBase@@UBEHXZ	; CGridCellBase::IsDropHighlighted
PUBLIC	??4CGridCellBase@@UAEXABV0@@Z			; CGridCellBase::operator=
PUBLIC	?Reset@CGridCellBase@@UAEXXZ			; CGridCellBase::Reset
PUBLIC	?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z	; CGridCellBase::Draw
PUBLIC	?GetTextRect@CGridCellBase@@UAEHPAUtagRECT@@@Z	; CGridCellBase::GetTextRect
PUBLIC	?GetTipTextRect@CGridCellBase@@UAEHPAUtagRECT@@@Z ; CGridCellBase::GetTipTextRect
PUBLIC	?GetTextExtent@CGridCellBase@@UAE?AVCSize@@PBDPAVCDC@@@Z ; CGridCellBase::GetTextExtent
PUBLIC	?GetCellExtent@CGridCellBase@@UAE?AVCSize@@PAVCDC@@@Z ; CGridCellBase::GetCellExtent
PUBLIC	?Edit@CGridCellBase@@UAEHHHVCRect@@VCPoint@@II@Z ; CGridCellBase::Edit
PUBLIC	?ValidateEdit@CGridCellBase@@UAEHPBD@Z		; CGridCellBase::ValidateEdit
PUBLIC	?EndEdit@CGridCellBase@@UAEXXZ			; CGridCellBase::EndEdit
PUBLIC	?PrintCell@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@@Z ; CGridCellBase::PrintCell
PUBLIC	?SendMessageToParent@CGridCellBase@@QAEJHHH@Z	; CGridCellBase::SendMessageToParent
PUBLIC	?OnEndEdit@CGridCellBase@@MAEXXZ		; CGridCellBase::OnEndEdit
PUBLIC	?OnMouseEnter@CGridCellBase@@MAEXXZ		; CGridCellBase::OnMouseEnter
PUBLIC	?OnMouseOver@CGridCellBase@@MAEXXZ		; CGridCellBase::OnMouseOver
PUBLIC	?OnMouseLeave@CGridCellBase@@MAEXXZ		; CGridCellBase::OnMouseLeave
PUBLIC	?OnClick@CGridCellBase@@MAEXVCPoint@@@Z		; CGridCellBase::OnClick
PUBLIC	?OnClickDown@CGridCellBase@@MAEXVCPoint@@@Z	; CGridCellBase::OnClickDown
PUBLIC	?OnRClick@CGridCellBase@@MAEXVCPoint@@@Z	; CGridCellBase::OnRClick
PUBLIC	?OnDblClick@CGridCellBase@@MAEXVCPoint@@@Z	; CGridCellBase::OnDblClick
PUBLIC	?OnSetCursor@CGridCellBase@@MAEHXZ		; CGridCellBase::OnSetCursor
PUBLIC	??_GCGridCellBase@@UAEPAXI@Z			; CGridCellBase::`scalar deleting destructor'
PUBLIC	??_R0PAVCException@@@8				; CException * `RTTI Type Descriptor'
PUBLIC	??_C@_01PLPBNMEI@M@				; `string'
PUBLIC	??_7CGdiObject@@6B@				; CGdiObject::`vftable'
PUBLIC	??_7CPen@@6B@					; CPen::`vftable'
PUBLIC	??_7CBrush@@6B@					; CBrush::`vftable'
PUBLIC	??_C@_0HD@JJCHHHNK@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_0BP@OIEOKIDM@Exception?5thrown?5in?5destructor@ ; `string'
PUBLIC	??_C@_0BB@HBOOMJBF@?$CFTs?5?$CI?$CFTs?3?$CFd?$CJ?6?$CFTs@ ; `string'
PUBLIC	??_C@_0N@OMEMOKLE@?$CFTs?5?$CI?$CFTs?3?$CFd?$CJ@ ; `string'
PUBLIC	?classCGridCellBase@CGridCellBase@@2UCRuntimeClass@@B ; CGridCellBase::classCGridCellBase
PUBLIC	??_7CGridCellBase@@6B@				; CGridCellBase::`vftable'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R3CObject@@8					; CObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObject@@8					; CObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CObject@@8			; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CGdiObject@@6B@				; CGdiObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGdiObject@@@8				; CGdiObject `RTTI Type Descriptor'
PUBLIC	??_R3CGdiObject@@8				; CGdiObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGdiObject@@8				; CGdiObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGdiObject@@8			; CGdiObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CPen@@6B@					; CPen::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPen@@@8				; CPen `RTTI Type Descriptor'
PUBLIC	??_R3CPen@@8					; CPen::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPen@@8					; CPen::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPen@@8				; CPen::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CBrush@@6B@				; CBrush::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBrush@@@8				; CBrush `RTTI Type Descriptor'
PUBLIC	??_R3CBrush@@8					; CBrush::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBrush@@8					; CBrush::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBrush@@8				; CBrush::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_C@_0O@ELCGHKDE@CGridCellBase@		; `string'
PUBLIC	??_R0PAVCResourceException@@@8			; CResourceException * `RTTI Type Descriptor'
PUBLIC	??_R4CGridCellBase@@6B@				; CGridCellBase::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGridCellBase@@@8			; CGridCellBase `RTTI Type Descriptor'
PUBLIC	??_R3CGridCellBase@@8				; CGridCellBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGridCellBase@@8				; CGridCellBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGridCellBase@@8			; CGridCellBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3fbc28f5c28f5c29
PUBLIC	__real@3fd3333333333333
PUBLIC	__real@3fe2e147ae147ae1
EXTRN	__purecall:PROC
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?__global_delete@@YAXPAXI@Z:PROC		; __global_delete
EXTRN	___std_terminate:PROC
EXTRN	__imp__GetCurrentObject@8:PROC
EXTRN	__imp__GetDeviceCaps@8:PROC
EXTRN	__imp__GetTextExtentPoint32A@16:PROC
EXTRN	__imp__DrawEdge@16:PROC
EXTRN	__imp__DrawTextA@20:PROC
EXTRN	__imp__GetDC@4:PROC
EXTRN	__imp__ReleaseDC@8:PROC
EXTRN	__imp__SetCursor@4:PROC
EXTRN	__imp__GetSysColor@4:PROC
EXTRN	__imp__FillRect@12:PROC
EXTRN	__imp__FrameRect@12:PROC
EXTRN	__imp__SetRect@20:PROC
EXTRN	__imp__InflateRect@12:PROC
EXTRN	__imp__LoadCursorA@8:PROC
EXTRN	__imp__ImageList_Draw@24:PROC
EXTRN	__imp__ImageList_GetImageInfo@12:PROC
EXTRN	?GetThisClass@CObject@@SGPAUCRuntimeClass@@XZ:PROC ; CObject::GetThisClass
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z:PROC
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z:PROC
EXTRN	__imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHDH@Z:PROC
EXTRN	__imp_?Mid@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z:PROC
EXTRN	__imp_?Left@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z:PROC
EXTRN	__imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ:PROC
EXTRN	?AfxTryCleanup@@YGXXZ:PROC			; AfxTryCleanup
EXTRN	??0AFX_EXCEPTION_LINK@@QAE@XZ:PROC		; AFX_EXCEPTION_LINK::AFX_EXCEPTION_LINK
EXTRN	?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ:PROC ; AfxGetModuleState
EXTRN	?GetRuntimeClass@CGdiObject@@UBEPAUCRuntimeClass@@XZ:PROC ; CGdiObject::GetRuntimeClass
EXTRN	?FromHandle@CGdiObject@@SGPAV1@PAX@Z:PROC	; CGdiObject::FromHandle
EXTRN	?DeleteObject@CGdiObject@@QAEHXZ:PROC		; CGdiObject::DeleteObject
EXTRN	??_ECGdiObject@@UAEPAXI@Z:PROC			; CGdiObject::`vector deleting destructor'
EXTRN	?GetRuntimeClass@CPen@@UBEPAUCRuntimeClass@@XZ:PROC ; CPen::GetRuntimeClass
EXTRN	??0CPen@@QAE@HHK@Z:PROC				; CPen::CPen
EXTRN	??_ECPen@@UAEPAXI@Z:PROC			; CPen::`vector deleting destructor'
EXTRN	?GetRuntimeClass@CBrush@@UBEPAUCRuntimeClass@@XZ:PROC ; CBrush::GetRuntimeClass
EXTRN	??0CBrush@@QAE@K@Z:PROC				; CBrush::CBrush
EXTRN	??_ECBrush@@UAEPAXI@Z:PROC			; CBrush::`vector deleting destructor'
EXTRN	?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z:PROC	; CDC::FromHandle
EXTRN	?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z:PROC	; CDC::SelectObject
EXTRN	?SetBkMode@CDC@@QAEHH@Z:PROC			; CDC::SetBkMode
EXTRN	?MoveTo@CDC@@QAE?AVCPoint@@HH@Z:PROC		; CDC::MoveTo
EXTRN	?LineTo@CDC@@QAEHHH@Z:PROC			; CDC::LineTo
EXTRN	?FillSolidRect@CDC@@QAEXPBUtagRECT@@K@Z:PROC	; CDC::FillSolidRect
EXTRN	?AfxMessageBox@@YGHPBDII@Z:PROC			; AfxMessageBox
EXTRN	??_ECGridCellBase@@UAEPAXI@Z:PROC		; CGridCellBase::`vector deleting destructor'
EXTRN	?IsValid@CGridCtrl@@QBEHABVCCellID@@@Z:PROC	; CGridCtrl::IsValid
EXTRN	?SendMessageToParent@CGridCtrl@@IBEJHHH@Z:PROC	; CGridCtrl::SendMessageToParent
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@3fe2e147ae147ae1
CONST	SEGMENT
__real@3fe2e147ae147ae1 DQ 03fe2e147ae147ae1r	; 0.59
CONST	ENDS
;	COMDAT __real@3fd3333333333333
CONST	SEGMENT
__real@3fd3333333333333 DQ 03fd3333333333333r	; 0.3
CONST	ENDS
;	COMDAT __real@3fbc28f5c28f5c29
CONST	SEGMENT
__real@3fbc28f5c28f5c29 DQ 03fbc28f5c28f5c29r	; 0.11
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CGridCellBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGridCellBase@@8 DD FLAT:??_R0?AVCGridCellBase@@@8 ; CGridCellBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGridCellBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGridCellBase@@8
rdata$r	SEGMENT
??_R2CGridCellBase@@8 DD FLAT:??_R1A@?0A@EA@CGridCellBase@@8 ; CGridCellBase::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CGridCellBase@@8
rdata$r	SEGMENT
??_R3CGridCellBase@@8 DD 00H				; CGridCellBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGridCellBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGridCellBase@@@8
data$rs	SEGMENT
??_R0?AVCGridCellBase@@@8 DD FLAT:??_7type_info@@6B@	; CGridCellBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGridCellBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CGridCellBase@@6B@
rdata$r	SEGMENT
??_R4CGridCellBase@@6B@ DD 00H				; CGridCellBase::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGridCellBase@@@8
	DD	FLAT:??_R3CGridCellBase@@8
rdata$r	ENDS
;	COMDAT ??_R0PAVCResourceException@@@8
data$r	SEGMENT
??_R0PAVCResourceException@@@8 DD FLAT:??_7type_info@@6B@ ; CResourceException * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAVCResourceException@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0O@ELCGHKDE@CGridCellBase@
CONST	SEGMENT
??_C@_0O@ELCGHKDE@CGridCellBase@ DB 'CGridCellBase', 00H ; `string'
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CBrush@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBrush@@8 DD FLAT:??_R0?AVCBrush@@@8	; CBrush::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBrush@@8
rdata$r	ENDS
;	COMDAT ??_R2CBrush@@8
rdata$r	SEGMENT
??_R2CBrush@@8 DD FLAT:??_R1A@?0A@EA@CBrush@@8		; CBrush::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGdiObject@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CBrush@@8
rdata$r	SEGMENT
??_R3CBrush@@8 DD 00H					; CBrush::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CBrush@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBrush@@@8
data$rs	SEGMENT
??_R0?AVCBrush@@@8 DD FLAT:??_7type_info@@6B@		; CBrush `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBrush@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CBrush@@6B@
rdata$r	SEGMENT
??_R4CBrush@@6B@ DD 00H					; CBrush::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBrush@@@8
	DD	FLAT:??_R3CBrush@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CPen@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CPen@@8 DD FLAT:??_R0?AVCPen@@@8		; CPen::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPen@@8
rdata$r	ENDS
;	COMDAT ??_R2CPen@@8
rdata$r	SEGMENT
??_R2CPen@@8 DD	FLAT:??_R1A@?0A@EA@CPen@@8		; CPen::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGdiObject@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CPen@@8
rdata$r	SEGMENT
??_R3CPen@@8 DD	00H					; CPen::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CPen@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPen@@@8
data$rs	SEGMENT
??_R0?AVCPen@@@8 DD FLAT:??_7type_info@@6B@		; CPen `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPen@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CPen@@6B@
rdata$r	SEGMENT
??_R4CPen@@6B@ DD 00H					; CPen::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPen@@@8
	DD	FLAT:??_R3CPen@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGdiObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGdiObject@@8 DD FLAT:??_R0?AVCGdiObject@@@8 ; CGdiObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGdiObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CGdiObject@@8
rdata$r	SEGMENT
??_R2CGdiObject@@8 DD FLAT:??_R1A@?0A@EA@CGdiObject@@8	; CGdiObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CGdiObject@@8
rdata$r	SEGMENT
??_R3CGdiObject@@8 DD 00H				; CGdiObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGdiObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGdiObject@@@8
data$rs	SEGMENT
??_R0?AVCGdiObject@@@8 DD FLAT:??_7type_info@@6B@	; CGdiObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGdiObject@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CGdiObject@@6B@
rdata$r	SEGMENT
??_R4CGdiObject@@6B@ DD 00H				; CGdiObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGdiObject@@@8
	DD	FLAT:??_R3CGdiObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CObject@@8
rdata$r	SEGMENT
??_R2CObject@@8 DD FLAT:??_R1A@?0A@EA@CObject@@8	; CObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObject@@8
rdata$r	SEGMENT
??_R3CObject@@8 DD 00H					; CObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
data$rs	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
data$rs	ENDS
;	COMDAT ??_7CGridCellBase@@6B@
CONST	SEGMENT
??_7CGridCellBase@@6B@ DD FLAT:??_R4CGridCellBase@@6B@	; CGridCellBase::`vftable'
	DD	FLAT:?GetRuntimeClass@CGridCellBase@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECGridCellBase@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?SetState@CGridCellBase@@UAEXK@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?GetTipText@CGridCellBase@@UBEPBDXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?GetState@CGridCellBase@@UBEKXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?GetDefaultCell@CGridCellBase@@UBEPAV1@XZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?IsFocused@CGridCellBase@@UBEHXZ
	DD	FLAT:?IsFixed@CGridCellBase@@UBEHXZ
	DD	FLAT:?IsFixedCol@CGridCellBase@@UBEHXZ
	DD	FLAT:?IsFixedRow@CGridCellBase@@UBEHXZ
	DD	FLAT:?IsSelected@CGridCellBase@@UBEHXZ
	DD	FLAT:?IsReadOnly@CGridCellBase@@UBEHXZ
	DD	FLAT:?IsModified@CGridCellBase@@UBEHXZ
	DD	FLAT:?IsDropHighlighted@CGridCellBase@@UBEHXZ
	DD	FLAT:??4CGridCellBase@@UAEXABV0@@Z
	DD	FLAT:?Reset@CGridCellBase@@UAEXXZ
	DD	FLAT:?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z
	DD	FLAT:?GetTextRect@CGridCellBase@@UAEHPAUtagRECT@@@Z
	DD	FLAT:?GetTipTextRect@CGridCellBase@@UAEHPAUtagRECT@@@Z
	DD	FLAT:?GetTextExtent@CGridCellBase@@UAE?AVCSize@@PBDPAVCDC@@@Z
	DD	FLAT:?GetCellExtent@CGridCellBase@@UAE?AVCSize@@PAVCDC@@@Z
	DD	FLAT:?Edit@CGridCellBase@@UAEHHHVCRect@@VCPoint@@II@Z
	DD	FLAT:?ValidateEdit@CGridCellBase@@UAEHPBD@Z
	DD	FLAT:?EndEdit@CGridCellBase@@UAEXXZ
	DD	FLAT:?PrintCell@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@@Z
	DD	FLAT:?OnEndEdit@CGridCellBase@@MAEXXZ
	DD	FLAT:?OnMouseEnter@CGridCellBase@@MAEXXZ
	DD	FLAT:?OnMouseOver@CGridCellBase@@MAEXXZ
	DD	FLAT:?OnMouseLeave@CGridCellBase@@MAEXXZ
	DD	FLAT:?OnClick@CGridCellBase@@MAEXVCPoint@@@Z
	DD	FLAT:?OnClickDown@CGridCellBase@@MAEXVCPoint@@@Z
	DD	FLAT:?OnRClick@CGridCellBase@@MAEXVCPoint@@@Z
	DD	FLAT:?OnDblClick@CGridCellBase@@MAEXVCPoint@@@Z
	DD	FLAT:?OnSetCursor@CGridCellBase@@MAEHXZ
CONST	ENDS
;	COMDAT ?classCGridCellBase@CGridCellBase@@2UCRuntimeClass@@B
CONST	SEGMENT
?classCGridCellBase@CGridCellBase@@2UCRuntimeClass@@B DD FLAT:??_C@_0O@ELCGHKDE@CGridCellBase@ ; CGridCellBase::classCGridCellBase
	DD	08H
	DD	0ffffH
	DD	00H
	DD	FLAT:?_GetBaseClass@CGridCellBase@@KGPAUCRuntimeClass@@XZ
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ??_C@_0N@OMEMOKLE@?$CFTs?5?$CI?$CFTs?3?$CFd?$CJ@
CONST	SEGMENT
??_C@_0N@OMEMOKLE@?$CFTs?5?$CI?$CFTs?3?$CFd?$CJ@ DB '%Ts (%Ts:%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HBOOMJBF@?$CFTs?5?$CI?$CFTs?3?$CFd?$CJ?6?$CFTs@
CONST	SEGMENT
??_C@_0BB@HBOOMJBF@?$CFTs?5?$CI?$CFTs?3?$CFd?$CJ?6?$CFTs@ DB '%Ts (%Ts:%d'
	DB	')', 0aH, '%Ts', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OIEOKIDM@Exception?5thrown?5in?5destructor@
CONST	SEGMENT
??_C@_0BP@OIEOKIDM@Exception?5thrown?5in?5destructor@ DB 'Exception throw'
	DB	'n in destructor', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0HD@JJCHHHNK@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0HD@JJCHHHNK@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.29.30133\atlmfc\include\afxwin1.inl', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CBrush@@6B@
CONST	SEGMENT
??_7CBrush@@6B@ DD FLAT:??_R4CBrush@@6B@		; CBrush::`vftable'
	DD	FLAT:?GetRuntimeClass@CBrush@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECBrush@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_7CPen@@6B@
CONST	SEGMENT
??_7CPen@@6B@ DD FLAT:??_R4CPen@@6B@			; CPen::`vftable'
	DD	FLAT:?GetRuntimeClass@CPen@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECPen@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_7CGdiObject@@6B@
CONST	SEGMENT
??_7CGdiObject@@6B@ DD FLAT:??_R4CGdiObject@@6B@	; CGdiObject::`vftable'
	DD	FLAT:?GetRuntimeClass@CGdiObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECGdiObject@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M@
CONST	SEGMENT
??_C@_01PLPBNMEI@M@ DB 'M', 00H				; `string'
CONST	ENDS
;	COMDAT ??_R0PAVCException@@@8
data$r	SEGMENT
??_R0PAVCException@@@8 DD FLAT:??_7type_info@@6B@	; CException * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAVCException@@', 00H
data$r	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PrintCell@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PrintCell@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?PrintCell@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?PrintCell@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@@Z$3
__ehfuncinfo$?PrintCell@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?PrintCell@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetTextExtent@CGridCellBase@@UAE?AVCSize@@PBDPAVCDC@@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?GetTextExtent@CGridCellBase@@UAE?AVCSize@@PBDPAVCDC@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetTextExtent@CGridCellBase@@UAE?AVCSize@@PBDPAVCDC@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetTextExtent@CGridCellBase@@UAE?AVCSize@@PBDPAVCDC@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetTextExtent@CGridCellBase@@UAE?AVCSize@@PBDPAVCDC@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetTextExtent@CGridCellBase@@UAE?AVCSize@@PBDPAVCDC@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?GetTextExtent@CGridCellBase@@UAE?AVCSize@@PBDPAVCDC@@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?GetTextExtent@CGridCellBase@@UAE?AVCSize@@PBDPAVCDC@@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?GetTextExtent@CGridCellBase@@UAE?AVCSize@@PBDPAVCDC@@@Z$3
	DD	05H
	DD	FLAT:__unwindfunclet$?GetTextExtent@CGridCellBase@@UAE?AVCSize@@PBDPAVCDC@@@Z$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z$24 DD 00H
	DD	FLAT:??_R0PAVCResourceException@@@8
	DD	0ffffff5cH
	DD	FLAT:__catch$?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z$2
__catchsym$?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z$23 DD 00H
	DD	FLAT:??_R0PAVCResourceException@@@8
	DD	0ffffff60H
	DD	FLAT:__catch$?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z$0
__ehfuncinfo$?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z DD 019930522H
	DD	0cH
	DD	FLAT:__unwindtable$?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z
	DD	02H
	DD	FLAT:__tryblocktable$?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z$23
	DD	05H
	DD	05H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z$24
__unwindtable$?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z$4
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z$6
	DD	04H
	DD	00H
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z$9
	DD	08H
	DD	FLAT:__unwindfunclet$?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z$10
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z$12
	DD	0aH
	DD	FLAT:__unwindfunclet$?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z$13
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??1CGdiObject@@UAE@XZ$3 DD 00H
	DD	FLAT:??_R0PAVCException@@@8
	DD	0fffffde4H
	DD	FLAT:__catch$??1CGdiObject@@UAE@XZ$0
__tryblocktable$??1CGdiObject@@UAE@XZ DD 00H
	DD	00H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??1CGdiObject@@UAE@XZ$3
__unwindtable$??1CGdiObject@@UAE@XZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	FLAT:__unwindfunclet$??1CGdiObject@@UAE@XZ$2
__ehfuncinfo$??1CGdiObject@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CGdiObject@@UAE@XZ
	DD	01H
	DD	FLAT:__tryblocktable$??1CGdiObject@@UAE@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1AFX_EXCEPTION_LINK@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_GCGridCellBase@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGridCellBase@@UAEPAXI@Z PROC			; CGridCellBase::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGridCellBase@@6B@
  0000f	a8 01		 test	 al, 1
  00011	74 1f		 je	 SHORT $LN9@scalar
  00013	a8 04		 test	 al, 4
  00015	75 10		 jne	 SHORT $LN3@scalar

; 112  : 	{ ::operator delete(p); }

  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	83 c4 04	 add	 esp, 4
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
$LN3@scalar:
  00027	6a 08		 push	 8
  00029	56		 push	 esi
  0002a	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0002f	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00032	8b c6		 mov	 eax, esi
  00034	5e		 pop	 esi
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
??_GCGridCellBase@@UAEPAXI@Z ENDP			; CGridCellBase::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
;	COMDAT ?OnSetCursor@CGridCellBase@@MAEHXZ
_TEXT	SEGMENT
?OnSetCursor@CGridCellBase@@MAEHXZ PROC			; CGridCellBase::OnSetCursor, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 19   : 	{ return afxCurrentWinApp; }

  00000	e8 00 00 00 00	 call	 ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ ; AfxGetModuleState
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl

; 1047 : 	{ return ::LoadCursor(NULL, lpszCursorName); }

  00005	68 00 7f 00 00	 push	 32512			; 00007f00H
  0000a	6a 00		 push	 0
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadCursorA@8
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 458  :     SetCursor(AfxGetApp()->LoadStandardCursor(IDC_ARROW));

  00012	50		 push	 eax
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCursor@4

; 459  : #endif
; 460  :     return TRUE;

  00019	b8 01 00 00 00	 mov	 eax, 1

; 461  : }

  0001e	c3		 ret	 0
?OnSetCursor@CGridCellBase@@MAEHXZ ENDP			; CGridCellBase::OnSetCursor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
;	COMDAT ?OnDblClick@CGridCellBase@@MAEXVCPoint@@@Z
_TEXT	SEGMENT
_PointCellRelative$ = 8					; size = 8
?OnDblClick@CGridCellBase@@MAEXVCPoint@@@Z PROC		; CGridCellBase::OnDblClick, COMDAT
; _this$ = ecx

; 450  :     UNUSED_ALWAYS(PointCellRelative);
; 451  :     TRACE2("Mouse double-clicked in cell at x=%i y=%i\n", PointCellRelative.x, PointCellRelative.y);
; 452  : }

  00000	c2 08 00	 ret	 8
?OnDblClick@CGridCellBase@@MAEXVCPoint@@@Z ENDP		; CGridCellBase::OnDblClick
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
;	COMDAT ?OnRClick@CGridCellBase@@MAEXVCPoint@@@Z
_TEXT	SEGMENT
_PointCellRelative$ = 8					; size = 8
?OnRClick@CGridCellBase@@MAEXVCPoint@@@Z PROC		; CGridCellBase::OnRClick, COMDAT
; _this$ = ecx

; 444  :     UNUSED_ALWAYS(PointCellRelative);
; 445  :     TRACE2("Mouse right-clicked in cell at x=%i y=%i\n", PointCellRelative.x, PointCellRelative.y);
; 446  : }

  00000	c2 08 00	 ret	 8
?OnRClick@CGridCellBase@@MAEXVCPoint@@@Z ENDP		; CGridCellBase::OnRClick
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
;	COMDAT ?OnClickDown@CGridCellBase@@MAEXVCPoint@@@Z
_TEXT	SEGMENT
_PointCellRelative$ = 8					; size = 8
?OnClickDown@CGridCellBase@@MAEXVCPoint@@@Z PROC	; CGridCellBase::OnClickDown, COMDAT
; _this$ = ecx

; 438  :     UNUSED_ALWAYS(PointCellRelative);
; 439  :     TRACE2("Mouse Left btn down in cell at x=%i y=%i\n", PointCellRelative.x, PointCellRelative.y);
; 440  : }

  00000	c2 08 00	 ret	 8
?OnClickDown@CGridCellBase@@MAEXVCPoint@@@Z ENDP	; CGridCellBase::OnClickDown
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
;	COMDAT ?OnClick@CGridCellBase@@MAEXVCPoint@@@Z
_TEXT	SEGMENT
_PointCellRelative$ = 8					; size = 8
?OnClick@CGridCellBase@@MAEXVCPoint@@@Z PROC		; CGridCellBase::OnClick, COMDAT
; _this$ = ecx

; 432  :     UNUSED_ALWAYS(PointCellRelative);
; 433  :     TRACE2("Mouse Left btn up in cell at x=%i y=%i\n", PointCellRelative.x, PointCellRelative.y);
; 434  : }

  00000	c2 08 00	 ret	 8
?OnClick@CGridCellBase@@MAEXVCPoint@@@Z ENDP		; CGridCellBase::OnClick
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
;	COMDAT ?OnMouseLeave@CGridCellBase@@MAEXXZ
_TEXT	SEGMENT
?OnMouseLeave@CGridCellBase@@MAEXXZ PROC		; CGridCellBase::OnMouseLeave, COMDAT
; _this$ = ecx

; 427  :     TRACE0("Mouse left cell\n");
; 428  : }

  00000	c2 00 00	 ret	 0
?OnMouseLeave@CGridCellBase@@MAEXXZ ENDP		; CGridCellBase::OnMouseLeave
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
;	COMDAT ?OnMouseOver@CGridCellBase@@MAEXXZ
_TEXT	SEGMENT
?OnMouseOver@CGridCellBase@@MAEXXZ PROC			; CGridCellBase::OnMouseOver, COMDAT
; _this$ = ecx

; 421  :     //TRACE0("Mouse over cell\n");
; 422  : }

  00000	c2 00 00	 ret	 0
?OnMouseOver@CGridCellBase@@MAEXXZ ENDP			; CGridCellBase::OnMouseOver
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
;	COMDAT ?OnMouseEnter@CGridCellBase@@MAEXXZ
_TEXT	SEGMENT
?OnMouseEnter@CGridCellBase@@MAEXXZ PROC		; CGridCellBase::OnMouseEnter, COMDAT
; _this$ = ecx

; 416  :     TRACE0("Mouse entered cell\n");
; 417  : }

  00000	c2 00 00	 ret	 0
?OnMouseEnter@CGridCellBase@@MAEXXZ ENDP		; CGridCellBase::OnMouseEnter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
;	COMDAT ?OnEndEdit@CGridCellBase@@MAEXXZ
_TEXT	SEGMENT
?OnEndEdit@CGridCellBase@@MAEXXZ PROC			; CGridCellBase::OnEndEdit, COMDAT
; _this$ = ecx

; 468  : 	ASSERT( FALSE); 
; 469  : }

  00000	c2 00 00	 ret	 0
?OnEndEdit@CGridCellBase@@MAEXXZ ENDP			; CGridCellBase::OnEndEdit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
;	COMDAT ?SendMessageToParent@CGridCellBase@@QAEJHHH@Z
_TEXT	SEGMENT
_nRow$ = 8						; size = 4
_nCol$ = 12						; size = 4
_nMessage$ = 16						; size = 4
?SendMessageToParent@CGridCellBase@@QAEJHHH@Z PROC	; CGridCellBase::SendMessageToParent, COMDAT
; _this$ = ecx

; 769  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 770  :     CGridCtrl* pGrid = GetGrid();

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	ff 50 68	 call	 DWORD PTR [eax+104]

; 771  :     if( pGrid)

  00008	85 c0		 test	 eax, eax
  0000a	74 08		 je	 SHORT $LN2@SendMessag

; 772  :         return pGrid->SendMessageToParent(nRow, nCol, nMessage);

  0000c	8b c8		 mov	 ecx, eax

; 775  : }

  0000e	5d		 pop	 ebp

; 772  :         return pGrid->SendMessageToParent(nRow, nCol, nMessage);

  0000f	e9 00 00 00 00	 jmp	 ?SendMessageToParent@CGridCtrl@@IBEJHHH@Z ; CGridCtrl::SendMessageToParent
$LN2@SendMessag:

; 773  :     else
; 774  :         return 0;

  00014	33 c0		 xor	 eax, eax

; 775  : }

  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
?SendMessageToParent@CGridCellBase@@QAEJHHH@Z ENDP	; CGridCellBase::SendMessageToParent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
;	COMDAT ?PrintCell@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@@Z
_TEXT	SEGMENT
$T2 = -200						; size = 8
$T3 = -200						; size = 8
_brush$4 = -192						; size = 8
_nSavedDC$1$ = -184					; size = 4
_pDC$GSCopy$1$ = -180					; size = 4
_this$GSCopy$1$ = -176					; size = 4
_pGrid$1$ = -172					; size = 4
_lightpen$5 = -168					; size = 8
_crBG$1$ = -164						; size = 4
_darkpen$6 = -160					; size = 8
_crFG$1$ = -156						; size = 4
_pDefaultCell$1$ = -156					; size = 4
_Item$ = -152						; size = 104
_Info$7 = -48						; size = 32
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pDC$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
_rect$ = 20						; size = 16
?PrintCell@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@@Z PROC	; CGridCellBase::PrintCell, COMDAT
; _this$ = ecx

; 614  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PrintCell@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b f9		 mov	 edi, ecx
  00030	89 bd 50 ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi
  00036	8b 5d 08	 mov	 ebx, DWORD PTR _pDC$[ebp]
  00039	8d 4d cc	 lea	 ecx, DWORD PTR _Item$[ebp+100]
  0003c	89 9d 4c ff ff
	ff		 mov	 DWORD PTR _pDC$GSCopy$1$[ebp], ebx
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 615  : #if defined(_WIN32_WCE_NO_PRINTING) || defined(GRIDCONTROL_NO_PRINTING)
; 616  :     return FALSE;
; 617  : #else
; 618  :     COLORREF crFG, crBG;
; 619  :     GV_ITEM Item;
; 620  : 
; 621  :     CGridCtrl* pGrid = GetGrid();

  00048	8b 07		 mov	 eax, DWORD PTR [edi]
  0004a	8b cf		 mov	 ecx, edi
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00053	ff 50 68	 call	 DWORD PTR [eax+104]
  00056	8b f0		 mov	 esi, eax
  00058	89 b5 54 ff ff
	ff		 mov	 DWORD PTR _pGrid$1$[ebp], esi

; 622  :     if (!pGrid || !pDC)

  0005e	85 f6		 test	 esi, esi
  00060	0f 84 ed 03 00
	00		 je	 $LN5@PrintCell
  00066	85 db		 test	 ebx, ebx
  00068	0f 84 e5 03 00
	00		 je	 $LN5@PrintCell
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 576  : 	return right - left;

  0006e	8b 4d 1c	 mov	 ecx, DWORD PTR _rect$[ebp+8]
  00071	2b 4d 14	 sub	 ecx, DWORD PTR _rect$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 626  :         || rect.Height() <= 0)  // prevents imagelist item from drawing even

  00074	85 c9		 test	 ecx, ecx
  00076	0f 8e d7 03 00
	00		 jle	 $LN5@PrintCell
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 581  : 	return bottom - top;

  0007c	8b 45 20	 mov	 eax, DWORD PTR _rect$[ebp+12]
  0007f	2b 45 18	 sub	 eax, DWORD PTR _rect$[ebp+4]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 626  :         || rect.Height() <= 0)  // prevents imagelist item from drawing even

  00082	85 c0		 test	 eax, eax
  00084	0f 8e c9 03 00
	00		 jle	 $LN5@PrintCell

; 627  :         return FALSE;           //  though cell is hidden
; 628  : 
; 629  :     int nSavedDC = pDC->SaveDC();

  0008a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0008c	8b cb		 mov	 ecx, ebx
  0008e	ff 50 24	 call	 DWORD PTR [eax+36]

; 630  : 
; 631  :     pDC->SetBkMode(TRANSPARENT);

  00091	6a 01		 push	 1
  00093	8b cb		 mov	 ecx, ebx
  00095	89 85 48 ff ff
	ff		 mov	 DWORD PTR _nSavedDC$1$[ebp], eax
  0009b	e8 00 00 00 00	 call	 ?SetBkMode@CDC@@QAEHH@Z	; CDC::SetBkMode

; 632  : 
; 633  :     if (pGrid->GetShadedPrintOut())

  000a0	83 be 6c 04 00
	00 00		 cmp	 DWORD PTR [esi+1132], 0
  000a7	0f 84 90 01 00
	00		 je	 $LN6@PrintCell

; 634  :     {
; 635  :         // Get the default cell implementation for this kind of cell. We use it if this cell
; 636  :         // has anything marked as "default"
; 637  :         CGridDefaultCell *pDefaultCell = (CGridDefaultCell*) GetDefaultCell();

  000ad	8b 17		 mov	 edx, DWORD PTR [edi]
  000af	8b cf		 mov	 ecx, edi
  000b1	ff 52 74	 call	 DWORD PTR [edx+116]
  000b4	8b f0		 mov	 esi, eax
  000b6	89 b5 64 ff ff
	ff		 mov	 DWORD PTR _pDefaultCell$1$[ebp], esi

; 638  :         if (!pDefaultCell)

  000bc	85 f6		 test	 esi, esi
  000be	0f 84 8f 03 00
	00		 je	 $LN5@PrintCell

; 639  :             return FALSE;
; 640  : 
; 641  :         // Use custom color if it doesn't match the default color and the
; 642  :         // default grid background color.  If not, leave it alone.
; 643  :         if(IsFixed())

  000c4	8b 17		 mov	 edx, DWORD PTR [edi]
  000c6	8b cf		 mov	 ecx, edi
  000c8	ff 92 84 00 00
	00		 call	 DWORD PTR [edx+132]
  000ce	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000d0	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  000d3	8b cf		 mov	 ecx, edi
  000d5	85 c0		 test	 eax, eax
  000d7	74 27		 je	 SHORT $LN9@PrintCell

; 644  :             crBG = (GetBackClr() != CLR_DEFAULT) ? GetBackClr() : pDefaultCell->GetBackClr();

  000d9	ff d2		 call	 edx
  000db	3d 00 00 00 ff	 cmp	 eax, -16777216		; ff000000H
  000e0	74 0f		 je	 SHORT $LN20@PrintCell
  000e2	8b 07		 mov	 eax, DWORD PTR [edi]
  000e4	8b cf		 mov	 ecx, edi
  000e6	ff 50 5c	 call	 DWORD PTR [eax+92]
  000e9	89 85 5c ff ff
	ff		 mov	 DWORD PTR _crBG$1$[ebp], eax
  000ef	eb 4b		 jmp	 SHORT $LN23@PrintCell
$LN20@PrintCell:
  000f1	8b 06		 mov	 eax, DWORD PTR [esi]
  000f3	8b ce		 mov	 ecx, esi
  000f5	ff 50 5c	 call	 DWORD PTR [eax+92]
  000f8	89 85 5c ff ff
	ff		 mov	 DWORD PTR _crBG$1$[ebp], eax
  000fe	eb 3c		 jmp	 SHORT $LN23@PrintCell
$LN9@PrintCell:

; 645  :         else
; 646  :             crBG = (GetBackClr() != CLR_DEFAULT && GetBackClr() != pDefaultCell->GetBackClr()) ?

  00100	ff d2		 call	 edx
  00102	3d 00 00 00 ff	 cmp	 eax, -16777216		; ff000000H
  00107	74 29		 je	 SHORT $LN22@PrintCell
  00109	8b 07		 mov	 eax, DWORD PTR [edi]
  0010b	8b cf		 mov	 ecx, edi
  0010d	ff 50 5c	 call	 DWORD PTR [eax+92]
  00110	8b f0		 mov	 esi, eax
  00112	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _pDefaultCell$1$[ebp]
  00118	8b c8		 mov	 ecx, eax
  0011a	8b 10		 mov	 edx, DWORD PTR [eax]
  0011c	ff 52 5c	 call	 DWORD PTR [edx+92]
  0011f	3b f0		 cmp	 esi, eax
  00121	74 0f		 je	 SHORT $LN22@PrintCell
  00123	8b 07		 mov	 eax, DWORD PTR [edi]
  00125	8b cf		 mov	 ecx, edi
  00127	ff 50 5c	 call	 DWORD PTR [eax+92]
  0012a	89 85 5c ff ff
	ff		 mov	 DWORD PTR _crBG$1$[ebp], eax
  00130	eb 0a		 jmp	 SHORT $LN23@PrintCell
$LN22@PrintCell:
  00132	c7 85 5c ff ff
	ff 00 00 00 ff	 mov	 DWORD PTR _crBG$1$[ebp], -16777216 ; ff000000H
$LN23@PrintCell:

; 647  :                 GetBackClr() : CLR_DEFAULT;
; 648  : 
; 649  :         // Use custom color if the background is different or if it doesn't
; 650  :         // match the default color and the default grid text color.  
; 651  :         if(IsFixed())

  0013c	8b 07		 mov	 eax, DWORD PTR [edi]
  0013e	8b cf		 mov	 ecx, edi
  00140	ff 90 84 00 00
	00		 call	 DWORD PTR [eax+132]
  00146	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00148	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  0014b	8b cf		 mov	 ecx, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 334  : 	{ ASSERT(m_hAttribDC != NULL); return ::GetDeviceCaps(m_hAttribDC, nIndex); }

  0014d	ff d2		 call	 edx
  0014f	3d 00 00 00 ff	 cmp	 eax, -16777216		; ff000000H
  00154	74 06		 je	 SHORT $LN26@PrintCell
  00156	8b 07		 mov	 eax, DWORD PTR [edi]
  00158	8b cf		 mov	 ecx, edi
  0015a	eb 08		 jmp	 SHORT $LN85@PrintCell
$LN26@PrintCell:
  0015c	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _pDefaultCell$1$[ebp]
  00162	8b 01		 mov	 eax, DWORD PTR [ecx]
$LN85@PrintCell:
  00164	ff 50 58	 call	 DWORD PTR [eax+88]
  00167	6a 18		 push	 24			; 00000018H
  00169	ff 73 08	 push	 DWORD PTR [ebx+8]
  0016c	8b f0		 mov	 esi, eax
  0016e	89 b5 64 ff ff
	ff		 mov	 DWORD PTR _crFG$1$[ebp], esi
  00174	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDeviceCaps@8
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 661  :         if(pDC->GetDeviceCaps(NUMCOLORS) == 2 && crBG == CLR_DEFAULT)

  0017a	83 f8 02	 cmp	 eax, 2
  0017d	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _crBG$1$[ebp]
  00183	75 6f		 jne	 SHORT $LN13@PrintCell
  00185	3d 00 00 00 ff	 cmp	 eax, -16777216		; ff000000H
  0018a	75 6f		 jne	 SHORT $LN83@PrintCell

; 662  :             crFG = RGB(GetRValue(crFG) * 0.30, GetGValue(crFG) * 0.59,

  0018c	8b d6		 mov	 edx, esi
  0018e	8b c2		 mov	 eax, edx
  00190	c1 e8 10	 shr	 eax, 16			; 00000010H
  00193	0f b6 c0	 movzx	 eax, al
  00196	66 0f 6e c0	 movd	 xmm0, eax
  0019a	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0019e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fbc28f5c28f5c29
  001a6	f2 0f 2c c0	 cvttsd2si eax, xmm0
  001aa	0f b6 f0	 movzx	 esi, al
  001ad	66 8b c2	 mov	 ax, dx
  001b0	66 c1 e8 08	 shr	 ax, 8
  001b4	0f b7 c0	 movzx	 eax, ax
  001b7	c1 e6 08	 shl	 esi, 8
  001ba	66 0f 6e c0	 movd	 xmm0, eax
  001be	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  001c2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe2e147ae147ae1
  001ca	f2 0f 2c c0	 cvttsd2si eax, xmm0
  001ce	0f b6 c0	 movzx	 eax, al
  001d1	0b f0		 or	 esi, eax
  001d3	0f b6 c2	 movzx	 eax, dl
  001d6	c1 e6 08	 shl	 esi, 8
  001d9	66 0f 6e c0	 movd	 xmm0, eax
  001dd	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  001e1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd3333333333333
  001e9	f2 0f 2c c0	 cvttsd2si eax, xmm0
  001ed	0f b6 c0	 movzx	 eax, al
  001f0	0b f0		 or	 esi, eax

; 663  :                 GetBValue(crFG) * 0.11);
; 664  : 
; 665  :         // Only erase the background if the color is not the default
; 666  :         // grid background color.
; 667  :         if(crBG != CLR_DEFAULT)

  001f2	eb 4b		 jmp	 SHORT $LN7@PrintCell
$LN13@PrintCell:
  001f4	3d 00 00 00 ff	 cmp	 eax, -16777216		; ff000000H
  001f9	74 44		 je	 SHORT $LN7@PrintCell
$LN83@PrintCell:

; 668  :         {
; 669  :             CBrush brush(crBG);

  001fb	50		 push	 eax
  001fc	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR _brush$4[ebp]
  00202	e8 00 00 00 00	 call	 ??0CBrush@@QAE@K@Z	; CBrush::CBrush
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 476  : 	{ ASSERT(m_hDC != NULL); ::FillRect(m_hDC, lpRect, (HBRUSH)pBrush->GetSafeHandle()); }

  00207	ff b5 44 ff ff
	ff		 push	 DWORD PTR _brush$4[ebp+4]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 670  :             rect.right++; rect.bottom++;

  0020d	ff 45 1c	 inc	 DWORD PTR _rect$[ebp+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 476  : 	{ ASSERT(m_hDC != NULL); ::FillRect(m_hDC, lpRect, (HBRUSH)pBrush->GetSafeHandle()); }

  00210	8d 45 14	 lea	 eax, DWORD PTR _rect$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 670  :             rect.right++; rect.bottom++;

  00213	ff 45 20	 inc	 DWORD PTR _rect$[ebp+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 476  : 	{ ASSERT(m_hDC != NULL); ::FillRect(m_hDC, lpRect, (HBRUSH)pBrush->GetSafeHandle()); }

  00216	50		 push	 eax
  00217	ff 73 04	 push	 DWORD PTR [ebx+4]
  0021a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FillRect@12
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 672  :             rect.right--; rect.bottom--;

  00220	ff 4d 1c	 dec	 DWORD PTR _rect$[ebp+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 130  : 	{ }

  00223	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR _brush$4[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 672  :             rect.right--; rect.bottom--;

  00229	ff 4d 20	 dec	 DWORD PTR _rect$[ebp+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 130  : 	{ }

  0022c	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _brush$4[ebp], OFFSET ??_7CBrush@@6B@
  00236	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 674  :     }

  0023b	eb 02		 jmp	 SHORT $LN7@PrintCell
$LN6@PrintCell:

; 675  :     else
; 676  :     {
; 677  :         crBG = CLR_DEFAULT;
; 678  :         crFG = RGB(0, 0, 0);

  0023d	33 f6		 xor	 esi, esi
$LN7@PrintCell:

; 679  :     }
; 680  : 
; 681  :     pDC->SetTextColor(crFG);

  0023f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00241	8b cb		 mov	 ecx, ebx
  00243	56		 push	 esi
  00244	ff 50 38	 call	 DWORD PTR [eax+56]

; 682  : 
; 683  :     CFont *pFont = GetFontObject();

  00247	8b 07		 mov	 eax, DWORD PTR [edi]
  00249	8b cf		 mov	 ecx, edi
  0024b	ff 50 64	 call	 DWORD PTR [eax+100]

; 684  :     if (pFont)

  0024e	85 c0		 test	 eax, eax
  00250	74 08		 je	 SHORT $LN15@PrintCell

; 685  :         pDC->SelectObject(pFont);

  00252	8b 13		 mov	 edx, DWORD PTR [ebx]
  00254	8b cb		 mov	 ecx, ebx
  00256	50		 push	 eax
  00257	ff 52 30	 call	 DWORD PTR [edx+48]
$LN15@PrintCell:

; 686  : 
; 687  :     /*
; 688  :     // ***************************************************
; 689  :     // Disabled - if you need this functionality then you'll need to rewrite.
; 690  :     // Create the appropriate font and select into DC.
; 691  :     CFont Font;
; 692  :     // Bold the fixed cells if not shading the print out.  Use italic
; 693  :     // font it it is enabled.
; 694  :     const LOGFONT* plfFont = GetFont();
; 695  :     if(IsFixed() && !pGrid->GetShadedPrintOut())
; 696  :     {
; 697  :         Font.CreateFont(plfFont->lfHeight, 0, 0, 0, FW_BOLD, plfFont->lfItalic, 0, 0,
; 698  :             ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS,
; 699  : #ifndef _WIN32_WCE
; 700  :             PROOF_QUALITY,
; 701  : #else
; 702  :             DEFAULT_QUALITY,
; 703  : #endif
; 704  :             VARIABLE_PITCH | FF_SWISS, plfFont->lfFaceName);
; 705  :     }
; 706  :     else
; 707  :         Font.CreateFontIndirect(plfFont);
; 708  : 
; 709  :     pDC->SelectObject(&Font);
; 710  :     // ***************************************************
; 711  :     */
; 712  : 
; 713  :     // Draw lines only when wanted on fixed cells.  Normal cell grid lines
; 714  :     // are handled in OnPrint.
; 715  :     if(pGrid->GetGridLines() != GVL_NONE && IsFixed())

  0025a	8b b5 54 ff ff
	ff		 mov	 esi, DWORD PTR _pGrid$1$[ebp]
  00260	83 be b4 00 00
	00 00		 cmp	 DWORD PTR [esi+180], 0
  00267	0f 84 13 01 00
	00		 je	 $LN68@PrintCell
  0026d	8b 07		 mov	 eax, DWORD PTR [edi]
  0026f	8b cf		 mov	 ecx, edi
  00271	ff 90 84 00 00
	00		 call	 DWORD PTR [eax+132]
  00277	85 c0		 test	 eax, eax
  00279	0f 84 01 01 00
	00		 je	 $LN68@PrintCell

; 716  :     {
; 717  :         CPen lightpen(PS_SOLID, 1,  ::GetSysColor(COLOR_3DHIGHLIGHT)),

  0027f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetSysColor@4
  00285	6a 14		 push	 20			; 00000014H
  00287	ff d6		 call	 esi
  00289	50		 push	 eax
  0028a	6a 01		 push	 1
  0028c	6a 00		 push	 0
  0028e	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _lightpen$5[ebp]
  00294	e8 00 00 00 00	 call	 ??0CPen@@QAE@HHK@Z	; CPen::CPen

; 718  :              darkpen(PS_SOLID,  1, ::GetSysColor(COLOR_3DDKSHADOW)),

  00299	6a 15		 push	 21			; 00000015H
  0029b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0029f	ff d6		 call	 esi
  002a1	50		 push	 eax
  002a2	6a 01		 push	 1
  002a4	6a 00		 push	 0
  002a6	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _darkpen$6[ebp]
  002ac	e8 00 00 00 00	 call	 ??0CPen@@QAE@HHK@Z	; CPen::CPen

; 719  :             *pOldPen = pDC->GetCurrentPen();

  002b1	8b cb		 mov	 ecx, ebx
  002b3	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  002b7	e8 00 00 00 00	 call	 ?GetCurrentPen@CDC@@QBEPAVCPen@@XZ ; CDC::GetCurrentPen
  002bc	8b f0		 mov	 esi, eax

; 720  : 
; 721  :         pDC->SelectObject(&lightpen);

  002be	8b cb		 mov	 ecx, ebx
  002c0	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR _lightpen$5[ebp]
  002c6	50		 push	 eax
  002c7	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject

; 722  :         pDC->MoveTo(rect.right, rect.top);

  002cc	ff 75 18	 push	 DWORD PTR _rect$[ebp+4]
  002cf	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  002d5	8b cb		 mov	 ecx, ebx
  002d7	ff 75 1c	 push	 DWORD PTR _rect$[ebp+8]
  002da	50		 push	 eax
  002db	e8 00 00 00 00	 call	 ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z ; CDC::MoveTo

; 723  :         pDC->LineTo(rect.left, rect.top);

  002e0	ff 75 18	 push	 DWORD PTR _rect$[ebp+4]
  002e3	8b cb		 mov	 ecx, ebx
  002e5	ff 75 14	 push	 DWORD PTR _rect$[ebp]
  002e8	e8 00 00 00 00	 call	 ?LineTo@CDC@@QAEHHH@Z	; CDC::LineTo

; 724  :         pDC->LineTo(rect.left, rect.bottom);

  002ed	ff 75 20	 push	 DWORD PTR _rect$[ebp+12]
  002f0	8b cb		 mov	 ecx, ebx
  002f2	ff 75 14	 push	 DWORD PTR _rect$[ebp]
  002f5	e8 00 00 00 00	 call	 ?LineTo@CDC@@QAEHHH@Z	; CDC::LineTo

; 725  : 
; 726  :         pDC->SelectObject(&darkpen);

  002fa	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _darkpen$6[ebp]
  00300	8b cb		 mov	 ecx, ebx
  00302	50		 push	 eax
  00303	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject

; 727  :         pDC->MoveTo(rect.right, rect.top);

  00308	ff 75 18	 push	 DWORD PTR _rect$[ebp+4]
  0030b	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00311	8b cb		 mov	 ecx, ebx
  00313	ff 75 1c	 push	 DWORD PTR _rect$[ebp+8]
  00316	50		 push	 eax
  00317	e8 00 00 00 00	 call	 ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z ; CDC::MoveTo

; 728  :         pDC->LineTo(rect.right, rect.bottom);

  0031c	ff 75 20	 push	 DWORD PTR _rect$[ebp+12]
  0031f	8b cb		 mov	 ecx, ebx
  00321	ff 75 1c	 push	 DWORD PTR _rect$[ebp+8]
  00324	e8 00 00 00 00	 call	 ?LineTo@CDC@@QAEHHH@Z	; CDC::LineTo

; 729  :         pDC->LineTo(rect.left, rect.bottom);

  00329	ff 75 20	 push	 DWORD PTR _rect$[ebp+12]
  0032c	8b cb		 mov	 ecx, ebx
  0032e	ff 75 14	 push	 DWORD PTR _rect$[ebp]
  00331	e8 00 00 00 00	 call	 ?LineTo@CDC@@QAEHHH@Z	; CDC::LineTo
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 698  : 	::InflateRect(this, -x, -y);

  00336	6a ff		 push	 -1
  00338	6a ff		 push	 -1
  0033a	8d 45 14	 lea	 eax, DWORD PTR _rect$[ebp]
  0033d	50		 push	 eax
  0033e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InflateRect@12
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 732  :         pDC->SelectObject(pOldPen);

  00344	56		 push	 esi
  00345	8b cb		 mov	 ecx, ebx
  00347	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 106  : 	{ }

  0034c	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _darkpen$6[ebp]
  00352	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _darkpen$6[ebp], OFFSET ??_7CPen@@6B@
  0035c	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  00361	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _lightpen$5[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 733  :     }

  00367	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 106  : 	{ }

  0036b	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _lightpen$5[ebp], OFFSET ??_7CPen@@6B@
  00375	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  0037a	8b b5 54 ff ff
	ff		 mov	 esi, DWORD PTR _pGrid$1$[ebp]
$LN68@PrintCell:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 735  :     rect.DeflateRect(GetMargin(), 0);

  00380	8b 07		 mov	 eax, DWORD PTR [edi]
  00382	8b cf		 mov	 ecx, edi
  00384	ff 50 70	 call	 DWORD PTR [eax+112]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 698  : 	::InflateRect(this, -x, -y);

  00387	6a 00		 push	 0
  00389	f7 d8		 neg	 eax
  0038b	50		 push	 eax
  0038c	8d 45 14	 lea	 eax, DWORD PTR _rect$[ebp]
  0038f	50		 push	 eax
  00390	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InflateRect@12
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 737  :     if(pGrid->GetImageList() && GetImage() >= 0)

  00396	83 be 94 02 00
	00 00		 cmp	 DWORD PTR [esi+660], 0
  0039d	74 7c		 je	 SHORT $LN18@PrintCell
  0039f	8b 07		 mov	 eax, DWORD PTR [edi]
  003a1	8b cf		 mov	 ecx, edi
  003a3	ff 50 48	 call	 DWORD PTR [eax+72]
  003a6	85 c0		 test	 eax, eax
  003a8	78 71		 js	 SHORT $LN18@PrintCell

; 746  :         if(pGrid->GetImageList()->GetImageInfo(GetImage(), &Info))

  003aa	8b 07		 mov	 eax, DWORD PTR [edi]
  003ac	8b cf		 mov	 ecx, edi
  003ae	ff 50 48	 call	 DWORD PTR [eax+72]
  003b1	8b 8e 94 02 00
	00		 mov	 ecx, DWORD PTR [esi+660]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 881  : 	{ ASSERT(m_hImageList != NULL); return ImageList_GetImageInfo(m_hImageList, nImage, pImageInfo); }

  003b7	8d 55 d0	 lea	 edx, DWORD PTR _Info$7[ebp]
  003ba	52		 push	 edx
  003bb	50		 push	 eax
  003bc	ff 71 04	 push	 DWORD PTR [ecx+4]
  003bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_GetImageInfo@12
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 746  :         if(pGrid->GetImageList()->GetImageInfo(GetImage(), &Info))

  003c5	85 c0		 test	 eax, eax
  003c7	74 52		 je	 SHORT $LN18@PrintCell

; 749  :             pGrid->GetImageList()->Draw(pDC, GetImage(), rect.TopLeft(), ILD_NORMAL);

  003c9	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  003cf	8b 5d e8	 mov	 ebx, DWORD PTR _Info$7[ebp+24]
  003d2	2b 5d e0	 sub	 ebx, DWORD PTR _Info$7[ebp+16]
  003d5	8b 7d 14	 mov	 edi, DWORD PTR _rect$[ebp]
  003d8	8b 01		 mov	 eax, DWORD PTR [ecx]
  003da	8b 75 18	 mov	 esi, DWORD PTR _rect$[ebp+4]
  003dd	ff 50 48	 call	 DWORD PTR [eax+72]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 871  : 	{ ASSERT(m_hImageList != NULL); ASSERT(pDC != NULL); return ImageList_Draw(m_hImageList, nImage, pDC->GetSafeHdc(), pt.x, pt.y, nStyle); }

  003e0	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _pDC$GSCopy$1$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 749  :             pGrid->GetImageList()->Draw(pDC, GetImage(), rect.TopLeft(), ILD_NORMAL);

  003e6	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _pGrid$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 871  : 	{ ASSERT(m_hImageList != NULL); ASSERT(pDC != NULL); return ImageList_Draw(m_hImageList, nImage, pDC->GetSafeHdc(), pt.x, pt.y, nStyle); }

  003ec	6a 00		 push	 0
  003ee	56		 push	 esi
  003ef	57		 push	 edi
  003f0	ff 72 04	 push	 DWORD PTR [edx+4]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 749  :             pGrid->GetImageList()->Draw(pDC, GetImage(), rect.TopLeft(), ILD_NORMAL);

  003f3	8b 89 94 02 00
	00		 mov	 ecx, DWORD PTR [ecx+660]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 871  : 	{ ASSERT(m_hImageList != NULL); ASSERT(pDC != NULL); return ImageList_Draw(m_hImageList, nImage, pDC->GetSafeHdc(), pt.x, pt.y, nStyle); }

  003f9	50		 push	 eax
  003fa	ff 71 04	 push	 DWORD PTR [ecx+4]
  003fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_Draw@24
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 750  :             rect.left += nImageWidth+GetMargin();

  00403	8b bd 50 ff ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
  00409	8b cf		 mov	 ecx, edi
  0040b	8b 07		 mov	 eax, DWORD PTR [edi]
  0040d	ff 50 70	 call	 DWORD PTR [eax+112]
  00410	03 c3		 add	 eax, ebx
  00412	8b 9d 4c ff ff
	ff		 mov	 ebx, DWORD PTR _pDC$GSCopy$1$[ebp]
  00418	01 45 14	 add	 DWORD PTR _rect$[ebp], eax
$LN18@PrintCell:

; 751  :         }
; 752  :     }
; 753  : 
; 754  :     // Draw without clipping so as not to lose text when printed for real
; 755  : 	// DT_NOCLIP removed 01.01.01. Slower, but who cares - we are printing!
; 756  :     DrawText(pDC->m_hDC, GetText(), -1, rect,

  0041b	8b 07		 mov	 eax, DWORD PTR [edi]
  0041d	8b cf		 mov	 ecx, edi
  0041f	ff 50 54	 call	 DWORD PTR [eax+84]
  00422	0d 00 08 00 00	 or	 eax, 2048		; 00000800H
  00427	8b cf		 mov	 ecx, edi
  00429	50		 push	 eax
  0042a	8d 45 14	 lea	 eax, DWORD PTR _rect$[ebp]
  0042d	50		 push	 eax
  0042e	8b 07		 mov	 eax, DWORD PTR [edi]
  00430	6a ff		 push	 -1
  00432	ff 50 40	 call	 DWORD PTR [eax+64]
  00435	50		 push	 eax
  00436	ff 73 04	 push	 DWORD PTR [ebx+4]
  00439	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DrawTextA@20

; 757  :         GetFormat() | /*DT_NOCLIP | */ DT_NOPREFIX);
; 758  : 
; 759  :     pDC->RestoreDC(nSavedDC);

  0043f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00441	8b cb		 mov	 ecx, ebx
  00443	ff b5 48 ff ff
	ff		 push	 DWORD PTR _nSavedDC$1$[ebp]
  00449	ff 50 28	 call	 DWORD PTR [eax+40]

; 760  : 
; 761  :     return TRUE;

  0044c	be 01 00 00 00	 mov	 esi, 1
  00451	eb 02		 jmp	 SHORT $LN34@PrintCell
$LN5@PrintCell:
  00453	33 f6		 xor	 esi, esi
$LN34@PrintCell:
  00455	8d 4d cc	 lea	 ecx, DWORD PTR _Item$[ebp+100]
  00458	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0045e	8b c6		 mov	 eax, esi

; 762  : #endif
; 763  : }

  00460	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00463	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0046a	59		 pop	 ecx
  0046b	5f		 pop	 edi
  0046c	5e		 pop	 esi
  0046d	5b		 pop	 ebx
  0046e	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00471	33 cd		 xor	 ecx, ebp
  00473	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00478	8b e5		 mov	 esp, ebp
  0047a	5d		 pop	 ebp
  0047b	c2 1c 00	 ret	 28			; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PrintCell@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@@Z$0:
  00000	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _Item$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1_GV_ITEM@@QAE@XZ
__unwindfunclet$?PrintCell@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@@Z$2:
  0000b	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _lightpen$5[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1CPen@@UAE@XZ		; CPen::~CPen
__unwindfunclet$?PrintCell@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@@Z$3:
  00016	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _darkpen$6[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1CPen@@UAE@XZ		; CPen::~CPen
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
  00025	cc		 int	 3
__ehhandler$?PrintCell@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@@Z:
  00026	90		 npad	 1
  00027	90		 npad	 1
  00028	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002f	8b 8a 34 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-204]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003f	33 c8		 xor	 ecx, eax
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PrintCell@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@@Z
  0004b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PrintCell@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@@Z ENDP	; CGridCellBase::PrintCell
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.h
;	COMDAT ?EndEdit@CGridCellBase@@UAEXXZ
_TEXT	SEGMENT
?EndEdit@CGridCellBase@@UAEXXZ PROC			; CGridCellBase::EndEdit, COMDAT
; _this$ = ecx

; 146  :     virtual void EndEdit() {}

  00000	c2 00 00	 ret	 0
?EndEdit@CGridCellBase@@UAEXXZ ENDP			; CGridCellBase::EndEdit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
;	COMDAT ?ValidateEdit@CGridCellBase@@UAEHPBD@Z
_TEXT	SEGMENT
_str$ = 8						; size = 4
?ValidateEdit@CGridCellBase@@UAEHPBD@Z PROC		; CGridCellBase::ValidateEdit, COMDAT
; _this$ = ecx

; 473  :     UNUSED_ALWAYS(str);
; 474  : 	return TRUE;

  00000	b8 01 00 00 00	 mov	 eax, 1

; 475  : }

  00005	c2 04 00	 ret	 4
?ValidateEdit@CGridCellBase@@UAEHPBD@Z ENDP		; CGridCellBase::ValidateEdit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.h
;	COMDAT ?Edit@CGridCellBase@@UAEHHHVCRect@@VCPoint@@II@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 16
___formal$ = 32						; size = 8
___formal$ = 40						; size = 4
___formal$ = 44						; size = 4
?Edit@CGridCellBase@@UAEHHHVCRect@@VCPoint@@II@Z PROC	; CGridCellBase::Edit, COMDAT
; _this$ = ecx

; 144  :                        UINT /* nID */, UINT /* nChar */) { ASSERT( FALSE); return FALSE;}

  00000	33 c0		 xor	 eax, eax
  00002	c2 28 00	 ret	 40			; 00000028H
?Edit@CGridCellBase@@UAEHHHVCRect@@VCPoint@@II@Z ENDP	; CGridCellBase::Edit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
;	COMDAT ?GetCellExtent@CGridCellBase@@UAE?AVCSize@@PAVCDC@@@Z
_TEXT	SEGMENT
$T1$sroa$238$1$ = -44					; size = 4
_nImage$1$ = -44					; size = 4
_ImageSize$$sroa$265$1$ = -40				; size = 4
_Info$2 = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_pDC$ = 12						; size = 4
?GetCellExtent@CGridCellBase@@UAE?AVCSize@@PAVCDC@@@Z PROC ; CGridCellBase::GetCellExtent, COMDAT
; _this$ = ecx

; 582  : {    

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _pDC$[ebp]
  00013	53		 push	 ebx
  00014	8b d9		 mov	 ebx, ecx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]

; 583  :     CSize size = GetTextExtent(GetText(), pDC);    

  0001b	8b 33		 mov	 esi, DWORD PTR [ebx]
  0001d	50		 push	 eax
  0001e	ff 56 40	 call	 DWORD PTR [esi+64]
  00021	50		 push	 eax
  00022	57		 push	 edi
  00023	8b cb		 mov	 ecx, ebx
  00025	ff 96 b4 00 00
	00		 call	 DWORD PTR [esi+180]

; 586  :     int nImage = GetImage();    

  0002b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0002d	8b cb		 mov	 ecx, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 312  : 	cx = initCX;

  0002f	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _ImageSize$$sroa$265$1$[ebp], 0

; 313  : 	cy = initCY;

  00036	33 f6		 xor	 esi, esi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 586  :     int nImage = GetImage();    

  00038	ff 50 48	 call	 DWORD PTR [eax+72]
  0003b	89 45 d4	 mov	 DWORD PTR _nImage$1$[ebp], eax

; 587  :     if (nImage >= 0)    

  0003e	85 c0		 test	 eax, eax
  00040	78 5d		 js	 SHORT $LN3@GetCellExt

; 588  :     {        
; 589  :         CGridCtrl* pGrid = GetGrid();        

  00042	8b 03		 mov	 eax, DWORD PTR [ebx]
  00044	8b cb		 mov	 ecx, ebx
  00046	ff 50 68	 call	 DWORD PTR [eax+104]

; 592  :         if (pGrid->GetImageList() && pGrid->GetImageList()->GetImageInfo(nImage, &Info))         

  00049	8b 80 94 02 00
	00		 mov	 eax, DWORD PTR [eax+660]
  0004f	85 c0		 test	 eax, eax
  00051	74 4c		 je	 SHORT $LN3@GetCellExt
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 881  : 	{ ASSERT(m_hImageList != NULL); return ImageList_GetImageInfo(m_hImageList, nImage, pImageInfo); }

  00053	8d 4d dc	 lea	 ecx, DWORD PTR _Info$2[ebp]
  00056	51		 push	 ecx
  00057	ff 75 d4	 push	 DWORD PTR _nImage$1$[ebp]
  0005a	ff 70 04	 push	 DWORD PTR [eax+4]
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_GetImageInfo@12
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 592  :         if (pGrid->GetImageList() && pGrid->GetImageList()->GetImageInfo(nImage, &Info))         

  00063	85 c0		 test	 eax, eax
  00065	74 38		 je	 SHORT $LN3@GetCellExt

; 593  :         {            
; 594  :             ImageSize = CSize(Info.rcImage.right-Info.rcImage.left,                                 

  00067	8b 45 f8	 mov	 eax, DWORD PTR _Info$2[ebp+28]

; 595  :                 Info.rcImage.bottom-Info.rcImage.top);            
; 596  :             if (size.cx > 2*(int)GetMargin ())                

  0006a	8b cb		 mov	 ecx, ebx
  0006c	2b 45 f0	 sub	 eax, DWORD PTR _Info$2[ebp+20]
  0006f	8b 75 f4	 mov	 esi, DWORD PTR _Info$2[ebp+24]
  00072	2b 75 ec	 sub	 esi, DWORD PTR _Info$2[ebp+16]
  00075	89 45 d4	 mov	 DWORD PTR $T1$sroa$238$1$[ebp], eax
  00078	8b 03		 mov	 eax, DWORD PTR [ebx]
  0007a	89 75 d8	 mov	 DWORD PTR _ImageSize$$sroa$265$1$[ebp], esi
  0007d	ff 50 70	 call	 DWORD PTR [eax+112]
  00080	03 c0		 add	 eax, eax
  00082	39 07		 cmp	 DWORD PTR [edi], eax
  00084	7e 0c		 jle	 SHORT $LN4@GetCellExt

; 597  :                 ImageSize.cx += GetMargin();            

  00086	8b 03		 mov	 eax, DWORD PTR [ebx]
  00088	8b cb		 mov	 ecx, ebx
  0008a	ff 50 70	 call	 DWORD PTR [eax+112]
  0008d	03 f0		 add	 esi, eax
  0008f	89 75 d8	 mov	 DWORD PTR _ImageSize$$sroa$265$1$[ebp], esi
$LN4@GetCellExt:

; 598  :             ImageSize.cy += 2*(int)GetMargin ();        

  00092	8b 03		 mov	 eax, DWORD PTR [ebx]
  00094	8b cb		 mov	 ecx, ebx
  00096	ff 50 70	 call	 DWORD PTR [eax+112]
  00099	8b 4d d4	 mov	 ecx, DWORD PTR $T1$sroa$238$1$[ebp]
  0009c	8d 34 41	 lea	 esi, DWORD PTR [ecx+eax*2]
$LN3@GetCellExt:

; 599  :         }    
; 600  :     }    
; 601  :     size.cx += ImageSize.cx + 1;    

  0009f	8b 45 d8	 mov	 eax, DWORD PTR _ImageSize$$sroa$265$1$[ebp]

; 602  :     size.cy = max(size.cy, ImageSize.cy) + 1;    
; 603  :     if (IsFixed())    

  000a2	8b cb		 mov	 ecx, ebx
  000a4	40		 inc	 eax
  000a5	01 07		 add	 DWORD PTR [edi], eax
  000a7	39 77 04	 cmp	 DWORD PTR [edi+4], esi
  000aa	0f 4f 77 04	 cmovg	 esi, DWORD PTR [edi+4]
  000ae	46		 inc	 esi
  000af	89 77 04	 mov	 DWORD PTR [edi+4], esi
  000b2	8b 13		 mov	 edx, DWORD PTR [ebx]
  000b4	ff 92 84 00 00
	00		 call	 DWORD PTR [edx+132]
  000ba	85 c0		 test	 eax, eax
  000bc	8b c7		 mov	 eax, edi
  000be	74 05		 je	 SHORT $LN5@GetCellExt

; 604  :     {        
; 605  :         size.cx++;        

  000c0	ff 07		 inc	 DWORD PTR [edi]

; 606  :         size.cy++;    

  000c2	ff 47 04	 inc	 DWORD PTR [edi+4]
$LN5@GetCellExt:

; 607  :     }    
; 608  :     return size;
; 609  : }

  000c5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	33 cd		 xor	 ecx, ebp
  000cc	5b		 pop	 ebx
  000cd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c2 08 00	 ret	 8
?GetCellExtent@CGridCellBase@@UAE?AVCSize@@PAVCDC@@@Z ENDP ; CGridCellBase::GetCellExtent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
;	COMDAT ?GetTextExtent@CGridCellBase@@UAE?AVCSize@@PBDPAVCDC@@@Z
_TEXT	SEGMENT
_size$6 = -100						; size = 8
_pGrid$1$ = -92						; size = 4
$T7 = -88						; size = 4
_size$8 = -84						; size = 8
$T9 = -80						; size = 4
___$ReturnUdt$GSCopy$1$ = -76				; size = 4
_bReleaseDC$1$ = -72					; size = 4
_this$GSCopy$1$ = -68					; size = 4
_pOldFont$1$ = -64					; size = 4
tv679 = -60						; size = 4
_nFormat$1$ = -60					; size = 4
_size$2$ = -56						; size = 4
$T10 = -56						; size = 4
$T11 = -52						; size = 4
_szText$GSCopy$1$ = -48					; size = 4
_size$1$ = -44						; size = 4
_nMaxWidth$1$ = -44					; size = 4
_size$3$ = -40						; size = 4
_TempStr$12 = -40					; size = 4
_str$13 = -36						; size = 4
_rect$14 = -32						; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szText$ = 12						; size = 4
_pDC$ = 16						; size = 4
?GetTextExtent@CGridCellBase@@UAE?AVCSize@@PBDPAVCDC@@@Z PROC ; CGridCellBase::GetTextExtent, COMDAT
; _this$ = ecx

; 501  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetTextExtent@CGridCellBase@@UAE?AVCSize@@PBDPAVCDC@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 bc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
  00030	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00033	33 db		 xor	 ebx, ebx
  00035	8b 7d 10	 mov	 edi, DWORD PTR _pDC$[ebp]
  00038	89 45 b4	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], eax
  0003b	8b 45 0c	 mov	 eax, DWORD PTR _szText$[ebp]
  0003e	89 45 d0	 mov	 DWORD PTR _szText$GSCopy$1$[ebp], eax
  00041	89 5d cc	 mov	 DWORD PTR $T11[ebp], ebx

; 502  :     CGridCtrl* pGrid = GetGrid();

  00044	8b 06		 mov	 eax, DWORD PTR [esi]
  00046	ff 50 68	 call	 DWORD PTR [eax+104]
  00049	89 45 a4	 mov	 DWORD PTR _pGrid$1$[ebp], eax

; 503  :     ASSERT(pGrid);
; 504  : 
; 505  :     BOOL bReleaseDC = FALSE;

  0004c	89 5d b8	 mov	 DWORD PTR _bReleaseDC$1$[ebp], ebx

; 506  :     if (pDC == NULL || szText == NULL)

  0004f	85 ff		 test	 edi, edi
  00051	74 4c		 je	 SHORT $LN5@GetTextExt
  00053	39 5d d0	 cmp	 DWORD PTR _szText$GSCopy$1$[ebp], ebx
  00056	75 68		 jne	 SHORT $LN4@GetTextExt
$LN8@GetTextExt:

; 511  :         {
; 512  :             CGridDefaultCell* pDefCell = (CGridDefaultCell*) GetDefaultCell();

  00058	8b 06		 mov	 eax, DWORD PTR [esi]
  0005a	8b ce		 mov	 ecx, esi
  0005c	ff 50 74	 call	 DWORD PTR [eax+116]
  0005f	8b f8		 mov	 edi, eax

; 514  :             return CSize(pDefCell->GetWidth(), pDefCell->GetHeight());

  00061	8b cf		 mov	 ecx, edi
  00063	8b 17		 mov	 edx, DWORD PTR [edi]
  00065	ff 92 fc 00 00
	00		 call	 DWORD PTR [edx+252]
  0006b	8b 17		 mov	 edx, DWORD PTR [edi]
  0006d	8b cf		 mov	 ecx, edi
  0006f	8b f0		 mov	 esi, eax
  00071	ff 92 f8 00 00
	00		 call	 DWORD PTR [edx+248]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 312  : 	cx = initCX;

  00077	8b 4d b4	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  0007a	89 01		 mov	 DWORD PTR [ecx], eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 514  :             return CSize(pDefCell->GetWidth(), pDefCell->GetHeight());

  0007c	8b c1		 mov	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 313  : 	cy = initCY;

  0007e	89 71 04	 mov	 DWORD PTR [ecx+4], esi
$LN1@GetTextExt:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 578  : }

  00081	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00084	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008b	59		 pop	 ecx
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00092	33 cd		 xor	 ecx, ebp
  00094	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c2 0c 00	 ret	 12			; 0000000cH
$LN5@GetTextExt:

; 507  :     {
; 508  :         if (szText)

  0009f	39 5d d0	 cmp	 DWORD PTR _szText$GSCopy$1$[ebp], ebx
  000a2	74 b4		 je	 SHORT $LN8@GetTextExt
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl

; 100  : 	{ ASSERT(::IsWindow(m_hWnd)); return CDC::FromHandle(::GetDC(m_hWnd)); }

  000a4	ff 70 20	 push	 DWORD PTR [eax+32]
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z ; CDC::FromHandle
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 509  : 			pDC = pGrid->GetDC();

  000b3	8b f8		 mov	 edi, eax

; 510  :         if (pDC == NULL || szText == NULL) 

  000b5	85 ff		 test	 edi, edi
  000b7	74 9f		 je	 SHORT $LN8@GetTextExt

; 515  :         }
; 516  :         bReleaseDC = TRUE;

  000b9	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR _bReleaseDC$1$[ebp], 1
$LN4@GetTextExt:

; 517  :     }
; 518  : 
; 519  :     CFont *pOldFont = NULL,
; 520  :           *pFont = GetFontObject();

  000c0	8b 06		 mov	 eax, DWORD PTR [esi]
  000c2	8b ce		 mov	 ecx, esi
  000c4	89 5d c0	 mov	 DWORD PTR _pOldFont$1$[ebp], ebx
  000c7	ff 50 64	 call	 DWORD PTR [eax+100]
  000ca	8b c8		 mov	 ecx, eax

; 521  :     if (pFont)

  000cc	85 c9		 test	 ecx, ecx
  000ce	74 0b		 je	 SHORT $LN9@GetTextExt

; 522  :         pOldFont = pDC->SelectObject(pFont);

  000d0	8b 07		 mov	 eax, DWORD PTR [edi]
  000d2	51		 push	 ecx
  000d3	8b cf		 mov	 ecx, edi
  000d5	ff 50 30	 call	 DWORD PTR [eax+48]
  000d8	89 45 c0	 mov	 DWORD PTR _pOldFont$1$[ebp], eax
$LN9@GetTextExt:

; 523  : 
; 524  :     CSize size;
; 525  :     int nFormat = GetFormat();

  000db	8b 06		 mov	 eax, DWORD PTR [esi]
  000dd	8b ce		 mov	 ecx, esi
  000df	ff 50 54	 call	 DWORD PTR [eax+84]
  000e2	89 45 c4	 mov	 DWORD PTR _nFormat$1$[ebp], eax
  000e5	24 30		 and	 al, 48			; 00000030H
  000e7	3c 10		 cmp	 al, 16			; 00000010H

; 526  : 
; 527  :     // If the cell is a multiline cell, then use the width of the cell
; 528  :     // to get the height
; 529  :     if ((nFormat & DT_WORDBREAK) && !(nFormat & DT_SINGLELINE))

  000e9	0f 85 62 01 00
	00		 jne	 $LN10@GetTextExt

; 530  :     {
; 531  :         CString str = szText;

  000ef	ff 75 d0	 push	 DWORD PTR _szText$GSCopy$1$[ebp]
  000f2	8d 4d dc	 lea	 ecx, DWORD PTR _str$13[ebp]
  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z

; 532  :         int nMaxWidth = 0;

  000fb	33 c0		 xor	 eax, eax
  000fd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00104	89 45 d4	 mov	 DWORD PTR _nMaxWidth$1$[ebp], eax
$LL2@GetTextExt:

; 533  :         while (TRUE)
; 534  :         {
; 535  :             int nPos = str.Find(_T('\n'));

  00107	6a 00		 push	 0
  00109	6a 0a		 push	 10			; 0000000aH
  0010b	8d 4d dc	 lea	 ecx, DWORD PTR _str$13[ebp]
  0010e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHDH@Z
  00114	8b f0		 mov	 esi, eax

; 536  :             CString TempStr = (nPos < 0)? str : str.Left(nPos);

  00116	85 f6		 test	 esi, esi
  00118	79 16		 jns	 SHORT $LN19@GetTextExt
  0011a	8d 45 dc	 lea	 eax, DWORD PTR _str$13[ebp]
  0011d	50		 push	 eax
  0011e	8d 4d b0	 lea	 ecx, DWORD PTR $T9[ebp]
  00121	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00127	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0012b	83 cb 01	 or	 ebx, 1
  0012e	eb 18		 jmp	 SHORT $LN76@GetTextExt
$LN19@GetTextExt:
  00130	56		 push	 esi
  00131	8d 45 a8	 lea	 eax, DWORD PTR $T7[ebp]
  00134	50		 push	 eax
  00135	8d 4d dc	 lea	 ecx, DWORD PTR _str$13[ebp]
  00138	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Left@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z
  0013e	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00145	83 cb 02	 or	 ebx, 2
$LN76@GetTextExt:
  00148	50		 push	 eax
  00149	8d 4d d8	 lea	 ecx, DWORD PTR _TempStr$12[ebp]
  0014c	89 5d cc	 mov	 DWORD PTR $T11[ebp], ebx
  0014f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00155	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  0015c	f6 c3 02	 test	 bl, 2
  0015f	74 0f		 je	 SHORT $LN27@GetTextExt
  00161	83 e3 fd	 and	 ebx, -3			; fffffffdH
  00164	8d 4d a8	 lea	 ecx, DWORD PTR $T7[ebp]
  00167	89 5d cc	 mov	 DWORD PTR $T11[ebp], ebx
  0016a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN27@GetTextExt:
  00170	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00174	f6 c3 01	 test	 bl, 1
  00177	74 0f		 je	 SHORT $LN28@GetTextExt
  00179	83 e3 fe	 and	 ebx, -2			; fffffffeH
  0017c	8d 4d b0	 lea	 ecx, DWORD PTR $T9[ebp]
  0017f	89 5d cc	 mov	 DWORD PTR $T11[ebp], ebx
  00182	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN28@GetTextExt:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 519  : 		return( GetData()->nDataLength );

  00188	8b 45 d8	 mov	 eax, DWORD PTR _TempStr$12[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 639  : 		VERIFY(::GetTextExtentPoint32(m_hAttribDC, str, (int)str.GetLength(), &size));

  0018b	8d 4d 9c	 lea	 ecx, DWORD PTR _size$6[ebp]
  0018e	51		 push	 ecx
  0018f	ff 70 f4	 push	 DWORD PTR [eax-12]
  00192	50		 push	 eax
  00193	ff 77 08	 push	 DWORD PTR [edi+8]
  00196	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTextExtentPoint32A@16
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 541  :             if (nPos < 0)

  0019c	8b 45 9c	 mov	 eax, DWORD PTR _size$6[ebp]
  0019f	3b 45 d4	 cmp	 eax, DWORD PTR _nMaxWidth$1$[ebp]
  001a2	0f 4e 45 d4	 cmovle	 eax, DWORD PTR _nMaxWidth$1$[ebp]
  001a6	89 45 d4	 mov	 DWORD PTR _nMaxWidth$1$[ebp], eax
  001a9	85 f6		 test	 esi, esi
  001ab	78 3a		 js	 SHORT $LN69@GetTextExt

; 543  :             str = str.Mid(nPos + 1);    // Bug fix by Thomas Steinborn

  001ad	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  001b0	50		 push	 eax
  001b1	8d 45 c8	 lea	 eax, DWORD PTR $T10[ebp]
  001b4	50		 push	 eax
  001b5	8d 4d dc	 lea	 ecx, DWORD PTR _str$13[ebp]
  001b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Mid@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z
  001be	50		 push	 eax
  001bf	8d 4d dc	 lea	 ecx, DWORD PTR _str$13[ebp]
  001c2	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  001c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  001cc	8d 4d c8	 lea	 ecx, DWORD PTR $T10[ebp]
  001cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 544  :         }

  001d5	8d 4d d8	 lea	 ecx, DWORD PTR _TempStr$12[ebp]
  001d8	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  001e2	e9 20 ff ff ff	 jmp	 $LL2@GetTextExt
$LN69@GetTextExt:

; 542  :                 break;

  001e7	8d 4d d8	 lea	 ecx, DWORD PTR _TempStr$12[ebp]
  001ea	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 547  :         rect.SetRect(0,0, nMaxWidth+1, 0);

  001f4	8b 45 d4	 mov	 eax, DWORD PTR _nMaxWidth$1$[ebp]
  001f7	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 657  : 	::SetRect(this, x1, y1, x2, y2);

  001fa	6a 00		 push	 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 547  :         rect.SetRect(0,0, nMaxWidth+1, 0);

  001fc	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 657  : 	::SetRect(this, x1, y1, x2, y2);

  001fd	50		 push	 eax
  001fe	6a 00		 push	 0
  00200	6a 00		 push	 0
  00202	8d 45 e0	 lea	 eax, DWORD PTR _rect$14[ebp]
  00205	50		 push	 eax

; 528  : 	left = 0;

  00206	0f 11 45 e0	 movups	 XMMWORD PTR _rect$14[ebp], xmm0

; 657  : 	::SetRect(this, x1, y1, x2, y2);

  0020a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetRect@20
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 548  :         pDC->DrawText(szText, -1, rect, nFormat | DT_CALCRECT);

  00210	8b 4d c4	 mov	 ecx, DWORD PTR _nFormat$1$[ebp]
  00213	8b 07		 mov	 eax, DWORD PTR [edi]
  00215	81 c9 00 04 00
	00		 or	 ecx, 1024		; 00000400H
  0021b	51		 push	 ecx
  0021c	8d 4d e0	 lea	 ecx, DWORD PTR _rect$14[ebp]
  0021f	51		 push	 ecx
  00220	6a ff		 push	 -1
  00222	ff 75 d0	 push	 DWORD PTR _szText$GSCopy$1$[ebp]
  00225	8b cf		 mov	 ecx, edi
  00227	ff 50 70	 call	 DWORD PTR [eax+112]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 586  : 	return CSize(right - left, bottom - top);

  0022a	8b 45 ec	 mov	 eax, DWORD PTR _rect$14[ebp+12]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 550  :     }

  0022d	8d 4d dc	 lea	 ecx, DWORD PTR _str$13[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 586  : 	return CSize(right - left, bottom - top);

  00230	8b 5d e8	 mov	 ebx, DWORD PTR _rect$14[ebp+8]
  00233	2b 45 e4	 sub	 eax, DWORD PTR _rect$14[ebp+4]
  00236	2b 5d e0	 sub	 ebx, DWORD PTR _rect$14[ebp]
  00239	89 45 d8	 mov	 DWORD PTR _size$3$[ebp], eax
  0023c	89 5d d4	 mov	 DWORD PTR _size$1$[ebp], ebx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 550  :     }

  0023f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00246	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0024c	8b 75 bc	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  0024f	eb 33		 jmp	 SHORT $LN11@GetTextExt
$LN10@GetTextExt:

; 552  :         size = pDC->GetTextExtent(szText, _tcslen(szText));

  00251	8b 55 d0	 mov	 edx, DWORD PTR _szText$GSCopy$1$[ebp]
  00254	8b ca		 mov	 ecx, edx
  00256	8d 59 01	 lea	 ebx, DWORD PTR [ecx+1]
  00259	0f 1f 80 00 00
	00 00		 npad	 7
$LL73@GetTextExt:
  00260	8a 01		 mov	 al, BYTE PTR [ecx]
  00262	41		 inc	 ecx
  00263	84 c0		 test	 al, al
  00265	75 f9		 jne	 SHORT $LL73@GetTextExt
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 632  : 		VERIFY(::GetTextExtentPoint32(m_hAttribDC, lpszString, nCount, &size));

  00267	8d 45 ac	 lea	 eax, DWORD PTR _size$8[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 552  :         size = pDC->GetTextExtent(szText, _tcslen(szText));

  0026a	2b cb		 sub	 ecx, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 632  : 		VERIFY(::GetTextExtentPoint32(m_hAttribDC, lpszString, nCount, &size));

  0026c	50		 push	 eax
  0026d	51		 push	 ecx
  0026e	52		 push	 edx
  0026f	ff 77 08	 push	 DWORD PTR [edi+8]
  00272	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTextExtentPoint32A@16
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 552  :         size = pDC->GetTextExtent(szText, _tcslen(szText));

  00278	8b 45 ac	 mov	 eax, DWORD PTR _size$8[ebp]
  0027b	89 45 d4	 mov	 DWORD PTR _size$1$[ebp], eax
  0027e	8b 45 b0	 mov	 eax, DWORD PTR _size$8[ebp+4]
  00281	89 45 d8	 mov	 DWORD PTR _size$3$[ebp], eax
$LN11@GetTextExt:

; 553  : 
; 554  :     // Removed by Yogurt
; 555  :     //TEXTMETRIC tm;
; 556  :     //pDC->GetTextMetrics(&tm);
; 557  :     //size.cx += (tm.tmOverhang);
; 558  : 
; 559  :     if (pOldFont)

  00284	8b 4d c0	 mov	 ecx, DWORD PTR _pOldFont$1$[ebp]
  00287	85 c9		 test	 ecx, ecx
  00289	74 08		 je	 SHORT $LN14@GetTextExt

; 560  :         pDC->SelectObject(pOldFont);

  0028b	8b 07		 mov	 eax, DWORD PTR [edi]
  0028d	51		 push	 ecx
  0028e	8b cf		 mov	 ecx, edi
  00290	ff 50 30	 call	 DWORD PTR [eax+48]
$LN14@GetTextExt:

; 562  :     size += CSize(2*GetMargin(), 2*GetMargin());

  00293	8b 06		 mov	 eax, DWORD PTR [esi]
  00295	8b ce		 mov	 ecx, esi
  00297	ff 50 70	 call	 DWORD PTR [eax+112]
  0029a	8b 5d bc	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  0029d	8b f0		 mov	 esi, eax
  0029f	8b cb		 mov	 ecx, ebx
  002a1	03 f6		 add	 esi, esi
  002a3	8b 03		 mov	 eax, DWORD PTR [ebx]
  002a5	ff 50 70	 call	 DWORD PTR [eax+112]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 345  : 	cy += size.cy;

  002a8	03 75 d8	 add	 esi, DWORD PTR _size$3$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 562  :     size += CSize(2*GetMargin(), 2*GetMargin());

  002ab	03 c0		 add	 eax, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 344  : 	cx += size.cx;

  002ad	03 45 d4	 add	 eax, DWORD PTR _size$1$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 565  :     LOGFONT *pLF = GetFont();

  002b0	8b cb		 mov	 ecx, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 344  : 	cx += size.cx;

  002b2	89 45 c4	 mov	 DWORD PTR tv679[ebp], eax
  002b5	89 45 c8	 mov	 DWORD PTR _size$2$[ebp], eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 565  :     LOGFONT *pLF = GetFont();

  002b8	8b 03		 mov	 eax, DWORD PTR [ebx]
  002ba	ff 50 60	 call	 DWORD PTR [eax+96]

; 566  :     if (pLF->lfEscapement == 900 || pLF->lfEscapement == -900)

  002bd	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  002c0	3d 84 03 00 00	 cmp	 eax, 900		; 00000384H
  002c5	74 07		 je	 SHORT $LN16@GetTextExt
  002c7	3d 7c fc ff ff	 cmp	 eax, -900		; fffffc7cH
  002cc	75 13		 jne	 SHORT $LN74@GetTextExt
$LN16@GetTextExt:

; 571  :         size += CSize(0, 4*GetMargin());

  002ce	8b 03		 mov	 eax, DWORD PTR [ebx]
  002d0	8b cb		 mov	 ecx, ebx
  002d2	ff 50 70	 call	 DWORD PTR [eax+112]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 344  : 	cx += size.cx;

  002d5	8b de		 mov	 ebx, esi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 571  :         size += CSize(0, 4*GetMargin());

  002d7	c1 e0 02	 shl	 eax, 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 344  : 	cx += size.cx;

  002da	8b 75 c4	 mov	 esi, DWORD PTR tv679[ebp]
  002dd	03 f0		 add	 esi, eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 566  :     if (pLF->lfEscapement == 900 || pLF->lfEscapement == -900)

  002df	eb 03		 jmp	 SHORT $LN15@GetTextExt
$LN74@GetTextExt:
  002e1	8b 5d c8	 mov	 ebx, DWORD PTR _size$2$[ebp]
$LN15@GetTextExt:

; 572  :     }
; 573  :     
; 574  :     if (bReleaseDC)

  002e4	83 7d b8 00	 cmp	 DWORD PTR _bReleaseDC$1$[ebp], 0
  002e8	74 0f		 je	 SHORT $LN17@GetTextExt
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl

; 104  : 	{ ASSERT(::IsWindow(m_hWnd)); return ::ReleaseDC(m_hWnd, pDC->m_hDC); }

  002ea	8b 45 a4	 mov	 eax, DWORD PTR _pGrid$1$[ebp]
  002ed	ff 77 04	 push	 DWORD PTR [edi+4]
  002f0	ff 70 20	 push	 DWORD PTR [eax+32]
  002f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8
$LN17@GetTextExt:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 577  :     return size;

  002f9	8b 45 b4	 mov	 eax, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  002fc	89 18		 mov	 DWORD PTR [eax], ebx
  002fe	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00301	e9 7b fd ff ff	 jmp	 $LN1@GetTextExt
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetTextExtent@CGridCellBase@@UAE?AVCSize@@PBDPAVCDC@@@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _str$13[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?GetTextExtent@CGridCellBase@@UAE?AVCSize@@PBDPAVCDC@@@Z$1:
  00009	8b 45 cc	 mov	 eax, DWORD PTR $T11[ebp]
  0000c	83 e0 01	 and	 eax, 1
  0000f	0f 84 0d 00 00
	00		 je	 $LN23@GetTextExt
  00015	83 65 cc fe	 and	 DWORD PTR $T11[ebp], -2	; fffffffeH
  00019	8d 4d b0	 lea	 ecx, DWORD PTR $T9[ebp]
  0001c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN23@GetTextExt:
  00022	c3		 ret	 0
__unwindfunclet$?GetTextExtent@CGridCellBase@@UAE?AVCSize@@PBDPAVCDC@@@Z$2:
  00023	8b 45 cc	 mov	 eax, DWORD PTR $T11[ebp]
  00026	83 e0 02	 and	 eax, 2
  00029	0f 84 0d 00 00
	00		 je	 $LN25@GetTextExt
  0002f	83 65 cc fd	 and	 DWORD PTR $T11[ebp], -3	; fffffffdH
  00033	8d 4d a8	 lea	 ecx, DWORD PTR $T7[ebp]
  00036	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN25@GetTextExt:
  0003c	c3		 ret	 0
__unwindfunclet$?GetTextExtent@CGridCellBase@@UAE?AVCSize@@PBDPAVCDC@@@Z$3:
  0003d	8d 4d d8	 lea	 ecx, DWORD PTR _TempStr$12[ebp]
  00040	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?GetTextExtent@CGridCellBase@@UAE?AVCSize@@PBDPAVCDC@@@Z$4:
  00046	8d 4d c8	 lea	 ecx, DWORD PTR $T10[ebp]
  00049	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0004f	cc		 int	 3
  00050	cc		 int	 3
  00051	cc		 int	 3
  00052	cc		 int	 3
  00053	cc		 int	 3
__ehhandler$?GetTextExtent@CGridCellBase@@UAE?AVCSize@@PBDPAVCDC@@@Z:
  00054	90		 npad	 1
  00055	90		 npad	 1
  00056	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0005a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0005d	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  00060	33 c8		 xor	 ecx, eax
  00062	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00067	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0006a	33 c8		 xor	 ecx, eax
  0006c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00071	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetTextExtent@CGridCellBase@@UAE?AVCSize@@PBDPAVCDC@@@Z
  00076	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetTextExtent@CGridCellBase@@UAE?AVCSize@@PBDPAVCDC@@@Z ENDP ; CGridCellBase::GetTextExtent
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.h
;	COMDAT ?GetTipTextRect@CGridCellBase@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT
_pRect$ = 8						; size = 4
?GetTipTextRect@CGridCellBase@@UAEHPAUtagRECT@@@Z PROC	; CGridCellBase::GetTipTextRect, COMDAT
; _this$ = ecx

; 138  :     virtual BOOL GetTipTextRect( LPRECT pRect) { return GetTextRect( pRect); }  // may override for btns, etc.

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	5d		 pop	 ebp
  00006	ff a0 ac 00 00
	00		 jmp	 DWORD PTR [eax+172]
?GetTipTextRect@CGridCellBase@@UAEHPAUtagRECT@@@Z ENDP	; CGridCellBase::GetTipTextRect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
;	COMDAT ?GetTextRect@CGridCellBase@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT
_Info$1 = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_pRect$ = 8						; size = 4
?GetTextRect@CGridCellBase@@UAEHPAUtagRECT@@@Z PROC	; CGridCellBase::GetTextRect, COMDAT
; _this$ = ecx

; 481  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _pRect$[ebp]
  00014	57		 push	 edi
  00015	8b f9		 mov	 edi, ecx

; 482  :     if (GetImage() >= 0)

  00017	8b 07		 mov	 eax, DWORD PTR [edi]
  00019	ff 50 48	 call	 DWORD PTR [eax+72]
  0001c	85 c0		 test	 eax, eax
  0001e	78 55		 js	 SHORT $LN9@GetTextRec

; 483  :     {
; 484  :         IMAGEINFO Info;
; 485  : 
; 486  :         CGridCtrl* pGrid = GetGrid();

  00020	8b 07		 mov	 eax, DWORD PTR [edi]
  00022	8b cf		 mov	 ecx, edi
  00024	56		 push	 esi
  00025	ff 50 68	 call	 DWORD PTR [eax+104]

; 487  :         CImageList* pImageList = pGrid->GetImageList();

  00028	8b b0 94 02 00
	00		 mov	 esi, DWORD PTR [eax+660]

; 489  :         if (pImageList && pImageList->GetImageInfo( GetImage(), &Info))

  0002e	85 f6		 test	 esi, esi
  00030	74 2b		 je	 SHORT $LN8@GetTextRec
  00032	8b 07		 mov	 eax, DWORD PTR [edi]
  00034	8b cf		 mov	 ecx, edi
  00036	ff 50 48	 call	 DWORD PTR [eax+72]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 881  : 	{ ASSERT(m_hImageList != NULL); return ImageList_GetImageInfo(m_hImageList, nImage, pImageInfo); }

  00039	8d 4d dc	 lea	 ecx, DWORD PTR _Info$1[ebp]
  0003c	51		 push	 ecx
  0003d	50		 push	 eax
  0003e	ff 76 04	 push	 DWORD PTR [esi+4]
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_GetImageInfo@12
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 489  :         if (pImageList && pImageList->GetImageInfo( GetImage(), &Info))

  00047	85 c0		 test	 eax, eax
  00049	74 12		 je	 SHORT $LN8@GetTextRec

; 490  :         {
; 491  :             int nImageWidth = Info.rcImage.right-Info.rcImage.left+1;
; 492  :             pRect->left += nImageWidth + GetMargin();

  0004b	8b 07		 mov	 eax, DWORD PTR [edi]
  0004d	8b cf		 mov	 ecx, edi
  0004f	8b 75 f4	 mov	 esi, DWORD PTR _Info$1[ebp+24]
  00052	2b 75 ec	 sub	 esi, DWORD PTR _Info$1[ebp+16]
  00055	ff 50 70	 call	 DWORD PTR [eax+112]
  00058	46		 inc	 esi
  00059	03 c6		 add	 eax, esi
  0005b	01 03		 add	 DWORD PTR [ebx], eax
$LN8@GetTextRec:

; 493  :         }
; 494  :     }
; 495  : 
; 496  :     return TRUE;

  0005d	5e		 pop	 esi
  0005e	5f		 pop	 edi
  0005f	b8 01 00 00 00	 mov	 eax, 1

; 497  : }

  00064	5b		 pop	 ebx
  00065	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00068	33 cd		 xor	 ecx, ebp
  0006a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
$LN9@GetTextRec:
  00075	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00078	b8 01 00 00 00	 mov	 eax, 1
  0007d	5f		 pop	 edi
  0007e	33 cd		 xor	 ecx, ebp
  00080	5b		 pop	 ebx
  00081	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 04 00	 ret	 4
?GetTextRect@CGridCellBase@@UAEHPAUtagRECT@@@Z ENDP	; CGridCellBase::GetTextRect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCtrl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
;	COMDAT ?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z
_TEXT	SEGMENT
$T2 = -172						; size = 8
_e$3 = -164						; size = 4
_e$4 = -160						; size = 4
_brush$5 = -156						; size = 8
_brush$6 = -148						; size = 8
_brush$7 = -140						; size = 8
_nSavedDC$ = -132					; size = 4
_penLight$8 = -128					; size = 8
$T9 = -120						; size = 4
_penShadow$10 = -116					; size = 8
_size$11 = -116						; size = 8
$T12 = -116						; size = 8
$T13 = -116						; size = 8
_darkpen$14 = -108					; size = 8
$T15 = -104						; size = 4
$T16 = -104						; size = 4
$T17 = -100						; size = 8
$T18 = -100						; size = 8
_lightpen$19 = -100					; size = 8
tv1432 = -96						; size = 4
$T20 = -92						; size = 8
tv1435 = -88						; size = 4
_this$GSCopy$ = -88					; size = 4
tv976 = -84						; size = 4
_FocusCell$21 = -80					; size = 8
__afxExceptionLink$22 = -80				; size = 8
__afxExceptionLink$23 = -80				; size = 8
$T24 = -76						; size = 4
tv1445 = -76						; size = 4
tv1436 = -72						; size = 4
_pDC$GSCopy$ = -72					; size = 4
$T25 = -68						; size = 4
_TextBkClr$2$ = -68					; size = 4
_size$1$ = -64						; size = 4
_pGrid$ = -64						; size = 4
$T26 = -60						; size = 4
_pDefaultCell$1$ = -60					; size = 4
$T27 = -60						; size = 4
_TextClr$ = -60						; size = 4
_nTriangleLeft$1$ = -56					; size = 4
_TextClr$2$ = -56					; size = 4
_Info$28 = -52						; size = 32
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_pDC$ = 8						; size = 4
_nRow$ = 12						; size = 4
_nCol$ = 16						; size = 4
_rect$ = 20						; size = 16
_bEraseBkgnd$ = 36					; size = 4
?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z PROC	; CGridCellBase::Draw, COMDAT
; _this$ = ecx

; 115  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00031	8b f9		 mov	 edi, ecx
  00033	8b 45 08	 mov	 eax, DWORD PTR _pDC$[ebp]
  00036	8b d8		 mov	 ebx, eax
  00038	89 45 ac	 mov	 DWORD PTR tv976[ebp], eax

; 116  :     // Note - all through this function we totally brutalise 'rect'. Do not
; 117  :     // depend on it's value being that which was passed in.
; 118  : 
; 119  :     CGridCtrl* pGrid = GetGrid();

  0003b	8b 07		 mov	 eax, DWORD PTR [edi]
  0003d	89 7d a8	 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  00040	89 5d b8	 mov	 DWORD PTR _pDC$GSCopy$[ebp], ebx
  00043	ff 50 68	 call	 DWORD PTR [eax+104]
  00046	8b f0		 mov	 esi, eax
  00048	89 75 c0	 mov	 DWORD PTR _pGrid$[ebp], esi

; 120  :     ASSERT(pGrid);
; 121  : 
; 122  :     if (!pGrid || !pDC)

  0004b	85 f6		 test	 esi, esi
  0004d	0f 84 a5 07 00
	00		 je	 $LN3@Draw
  00053	85 db		 test	 ebx, ebx
  00055	0f 84 9d 07 00
	00		 je	 $LN3@Draw
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 576  : 	return right - left;

  0005b	8b 4d 1c	 mov	 ecx, DWORD PTR _rect$[ebp+8]
  0005e	2b 4d 14	 sub	 ecx, DWORD PTR _rect$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 125  :     if( rect.Width() <= 0 || rect.Height() <= 0)  // prevents imagelist item from drawing even

  00061	85 c9		 test	 ecx, ecx
  00063	0f 8e 8f 07 00
	00		 jle	 $LN3@Draw
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 581  : 	return bottom - top;

  00069	8b 45 20	 mov	 eax, DWORD PTR _rect$[ebp+12]
  0006c	2b 45 18	 sub	 eax, DWORD PTR _rect$[ebp+4]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 125  :     if( rect.Width() <= 0 || rect.Height() <= 0)  // prevents imagelist item from drawing even

  0006f	85 c0		 test	 eax, eax
  00071	0f 8e 81 07 00
	00		 jle	 $LN3@Draw

; 126  :         return FALSE;                             //  though cell is hidden
; 127  : 
; 128  :     //TRACE3("Drawing %scell %d, %d\n", IsFixed()? _T("Fixed ") : _T(""), nRow, nCol);
; 129  : 
; 130  :     int nSavedDC = pDC->SaveDC();

  00077	8b 03		 mov	 eax, DWORD PTR [ebx]
  00079	8b cb		 mov	 ecx, ebx
  0007b	ff 50 24	 call	 DWORD PTR [eax+36]

; 131  :     pDC->SetBkMode(TRANSPARENT);

  0007e	6a 01		 push	 1
  00080	8b cb		 mov	 ecx, ebx
  00082	89 85 7c ff ff
	ff		 mov	 DWORD PTR _nSavedDC$[ebp], eax
  00088	e8 00 00 00 00	 call	 ?SetBkMode@CDC@@QAEHH@Z	; CDC::SetBkMode

; 132  : 
; 133  :     // Get the default cell implementation for this kind of cell. We use it if this cell
; 134  :     // has anything marked as "default"
; 135  :     CGridDefaultCell *pDefaultCell = (CGridDefaultCell*) GetDefaultCell();

  0008d	8b 07		 mov	 eax, DWORD PTR [edi]
  0008f	8b cf		 mov	 ecx, edi
  00091	ff 50 74	 call	 DWORD PTR [eax+116]
  00094	89 45 c4	 mov	 DWORD PTR _pDefaultCell$1$[ebp], eax

; 136  :     if (!pDefaultCell)

  00097	85 c0		 test	 eax, eax
  00099	0f 84 59 07 00
	00		 je	 $LN3@Draw

; 137  :         return FALSE;
; 138  : 
; 139  :     // Set up text and background colours
; 140  :     COLORREF TextClr, TextBkClr;
; 141  : 
; 142  :     TextClr = (GetTextClr() == CLR_DEFAULT)? pDefaultCell->GetTextClr() : GetTextClr();

  0009f	8b 17		 mov	 edx, DWORD PTR [edi]
  000a1	8b cf		 mov	 ecx, edi
  000a3	ff 52 58	 call	 DWORD PTR [edx+88]
  000a6	3d 00 00 00 ff	 cmp	 eax, -16777216		; ff000000H
  000ab	75 07		 jne	 SHORT $LN39@Draw
  000ad	8b 4d c4	 mov	 ecx, DWORD PTR _pDefaultCell$1$[ebp]
  000b0	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b2	eb 04		 jmp	 SHORT $LN141@Draw
$LN39@Draw:
  000b4	8b 07		 mov	 eax, DWORD PTR [edi]
  000b6	8b cf		 mov	 ecx, edi
$LN141@Draw:

; 143  :     if (GetBackClr() == CLR_DEFAULT)

  000b8	ff 50 58	 call	 DWORD PTR [eax+88]
  000bb	89 45 c8	 mov	 DWORD PTR _TextClr$2$[ebp], eax
  000be	8b cf		 mov	 ecx, edi
  000c0	8b 07		 mov	 eax, DWORD PTR [edi]
  000c2	ff 50 5c	 call	 DWORD PTR [eax+92]
  000c5	3d 00 00 00 ff	 cmp	 eax, -16777216		; ff000000H
  000ca	75 07		 jne	 SHORT $LN7@Draw

; 144  :         TextBkClr = pDefaultCell->GetBackClr();

  000cc	8b 4d c4	 mov	 ecx, DWORD PTR _pDefaultCell$1$[ebp]
  000cf	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d1	eb 0b		 jmp	 SHORT $LN142@Draw
$LN7@Draw:

; 145  :     else
; 146  :     {
; 147  :         bEraseBkgnd = TRUE;
; 148  :         TextBkClr = GetBackClr();

  000d3	8b 07		 mov	 eax, DWORD PTR [edi]
  000d5	8b cf		 mov	 ecx, edi
  000d7	c7 45 24 01 00
	00 00		 mov	 DWORD PTR _bEraseBkgnd$[ebp], 1
$LN142@Draw:

; 149  :     }
; 150  : 
; 151  :     // Draw cell background and highlighting (if necessary)
; 152  :     if ( IsFocused() || IsDropHighlighted() )

  000de	ff 50 5c	 call	 DWORD PTR [eax+92]
  000e1	89 45 bc	 mov	 DWORD PTR _TextBkClr$2$[ebp], eax
  000e4	8b cf		 mov	 ecx, edi
  000e6	8b 07		 mov	 eax, DWORD PTR [edi]
  000e8	ff 90 80 00 00
	00		 call	 DWORD PTR [eax+128]
  000ee	85 c0		 test	 eax, eax
  000f0	0f 85 a7 00 00
	00		 jne	 $LN11@Draw
  000f6	8b 07		 mov	 eax, DWORD PTR [edi]
  000f8	8b cf		 mov	 ecx, edi
  000fa	ff 90 9c 00 00
	00		 call	 DWORD PTR [eax+156]
  00100	85 c0		 test	 eax, eax
  00102	0f 85 95 00 00
	00		 jne	 $LN11@Draw

; 208  :         }
; 209  : 
; 210  : 		//rect.DeflateRect(0,1,1,1);  - Removed by Yogurt
; 211  :     }
; 212  :     else if ((GetState() & GVIS_SELECTED))

  00108	8b 07		 mov	 eax, DWORD PTR [edi]
  0010a	8b cf		 mov	 ecx, edi
  0010c	ff 50 50	 call	 DWORD PTR [eax+80]
  0010f	a8 02		 test	 al, 2
  00111	74 33		 je	 SHORT $LN19@Draw

; 213  :     {
; 214  :         rect.right++; rect.bottom++;    // FillRect doesn't draw RHS or bottom

  00113	ff 45 1c	 inc	 DWORD PTR _rect$[ebp+8]

; 215  :         pDC->FillSolidRect(rect, GRID_COLOR_HIGHLIGHT/*::GetSysColor(COLOR_HIGHLIGHT)*/);

  00116	8d 45 14	 lea	 eax, DWORD PTR _rect$[ebp]
  00119	ff 45 20	 inc	 DWORD PTR _rect$[ebp+12]
  0011c	8b cb		 mov	 ecx, ebx
  0011e	68 c8 ff e6 00	 push	 15138760		; 00e6ffc8H
  00123	50		 push	 eax
  00124	e8 00 00 00 00	 call	 ?FillSolidRect@CDC@@QAEXPBUtagRECT@@K@Z ; CDC::FillSolidRect

; 216  :         rect.right--; rect.bottom--;
; 217  : 		pDC->SetTextColor(GetTextClr());

  00129	8b 07		 mov	 eax, DWORD PTR [edi]
  0012b	8b cf		 mov	 ecx, edi
  0012d	ff 4d 1c	 dec	 DWORD PTR _rect$[ebp+8]
  00130	ff 4d 20	 dec	 DWORD PTR _rect$[ebp+12]
  00133	8b 33		 mov	 esi, DWORD PTR [ebx]
  00135	ff 50 58	 call	 DWORD PTR [eax+88]
  00138	50		 push	 eax
  00139	8b cb		 mov	 ecx, ebx
  0013b	ff 56 38	 call	 DWORD PTR [esi+56]

; 218  :        // pDC->SetTextColor(::GetSysColor(COLOR_HIGHLIGHTTEXT));
; 219  :     }

  0013e	8b 75 c0	 mov	 esi, DWORD PTR _pGrid$[ebp]
  00141	e9 cd 01 00 00	 jmp	 $LN18@Draw
$LN19@Draw:

; 220  :     else
; 221  :     {
; 222  :         if (bEraseBkgnd)

  00146	83 7d 24 00	 cmp	 DWORD PTR _bEraseBkgnd$[ebp], 0
  0014a	74 42		 je	 SHORT $LN97@Draw

; 223  :         {
; 224  :             rect.right++; rect.bottom++;    // FillRect doesn't draw RHS or bottom
; 225  :             CBrush brush(TextBkClr);

  0014c	ff 75 bc	 push	 DWORD PTR _TextBkClr$2$[ebp]
  0014f	ff 45 1c	 inc	 DWORD PTR _rect$[ebp+8]
  00152	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _brush$7[ebp]
  00158	ff 45 20	 inc	 DWORD PTR _rect$[ebp+12]
  0015b	e8 00 00 00 00	 call	 ??0CBrush@@QAE@K@Z	; CBrush::CBrush
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 476  : 	{ ASSERT(m_hDC != NULL); ::FillRect(m_hDC, lpRect, (HBRUSH)pBrush->GetSafeHandle()); }

  00160	ff b5 78 ff ff
	ff		 push	 DWORD PTR _brush$7[ebp+4]
  00166	8d 45 14	 lea	 eax, DWORD PTR _rect$[ebp]
  00169	50		 push	 eax
  0016a	ff 73 04	 push	 DWORD PTR [ebx+4]
  0016d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FillRect@12
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 227  :             rect.right--; rect.bottom--;

  00173	ff 4d 1c	 dec	 DWORD PTR _rect$[ebp+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 130  : 	{ }

  00176	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _brush$7[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 227  :             rect.right--; rect.bottom--;

  0017c	ff 4d 20	 dec	 DWORD PTR _rect$[ebp+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 130  : 	{ }

  0017f	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _brush$7[ebp], OFFSET ??_7CBrush@@6B@
  00189	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
$LN97@Draw:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 229  :         pDC->SetTextColor(TextClr);

  0018e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00190	8b cb		 mov	 ecx, ebx
  00192	ff 75 c8	 push	 DWORD PTR _TextClr$2$[ebp]
  00195	ff 50 38	 call	 DWORD PTR [eax+56]
  00198	e9 76 01 00 00	 jmp	 $LN18@Draw
$LN11@Draw:

; 153  :     {
; 154  :         // Always draw even in list mode so that we can tell where the
; 155  :         // cursor is at.  Use the highlight colors though.
; 156  :         if(GetState() & GVIS_SELECTED)

  0019d	8b 07		 mov	 eax, DWORD PTR [edi]
  0019f	8b cf		 mov	 ecx, edi
  001a1	ff 50 50	 call	 DWORD PTR [eax+80]
  001a4	a8 02		 test	 al, 2
  001a6	74 1c		 je	 SHORT $LN12@Draw

; 157  :         {
; 158  :             TextBkClr = GRID_COLOR_HIGHLIGHT;//::GetSysColor(COLOR_HIGHLIGHT);
; 159  :             TextClr = GetTextClr();//::GetSysColor(COLOR_HIGHLIGHTTEXT);

  001a8	8b 07		 mov	 eax, DWORD PTR [edi]
  001aa	8b cf		 mov	 ecx, edi
  001ac	c7 45 bc c8 ff
	e6 00		 mov	 DWORD PTR _TextBkClr$2$[ebp], 15138760 ; 00e6ffc8H
  001b3	ff 50 58	 call	 DWORD PTR [eax+88]

; 160  :             bEraseBkgnd = TRUE;

  001b6	ff 45 1c	 inc	 DWORD PTR _rect$[ebp+8]
  001b9	ff 45 20	 inc	 DWORD PTR _rect$[ebp+12]
  001bc	89 45 c8	 mov	 DWORD PTR _TextClr$2$[ebp], eax
  001bf	89 45 c4	 mov	 DWORD PTR _TextClr$[ebp], eax
  001c2	eb 1e		 jmp	 SHORT $LN134@Draw
$LN12@Draw:

; 161  :         }
; 162  : 
; 163  :         rect.right++; rect.bottom++;    // FillRect doesn't draw RHS or bottom

  001c4	8b 4d 1c	 mov	 ecx, DWORD PTR _rect$[ebp+8]
  001c7	8b 55 20	 mov	 edx, DWORD PTR _rect$[ebp+12]
  001ca	41		 inc	 ecx
  001cb	8b 45 c8	 mov	 eax, DWORD PTR _TextClr$2$[ebp]
  001ce	42		 inc	 edx

; 164  :         if (bEraseBkgnd)

  001cf	83 7d 24 00	 cmp	 DWORD PTR _bEraseBkgnd$[ebp], 0
  001d3	89 4d 1c	 mov	 DWORD PTR _rect$[ebp+8], ecx
  001d6	89 55 20	 mov	 DWORD PTR _rect$[ebp+12], edx
  001d9	89 45 c4	 mov	 DWORD PTR _TextClr$[ebp], eax
  001dc	0f 84 82 00 00
	00		 je	 $LN76@Draw
$LN134@Draw:

; 165  :         {
; 166  :             TRY 

  001e2	8d 4d b0	 lea	 ecx, DWORD PTR __afxExceptionLink$23[ebp]
  001e5	e8 00 00 00 00	 call	 ??0AFX_EXCEPTION_LINK@@QAE@XZ ; AFX_EXCEPTION_LINK::AFX_EXCEPTION_LINK

; 167  :             {
; 168  :                 CBrush brush(TextBkClr);

  001ea	ff 75 bc	 push	 DWORD PTR _TextBkClr$2$[ebp]
  001ed	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  001f4	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _brush$6[ebp]
  001fa	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  001fe	e8 00 00 00 00	 call	 ??0CBrush@@QAE@K@Z	; CBrush::CBrush
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 476  : 	{ ASSERT(m_hDC != NULL); ::FillRect(m_hDC, lpRect, (HBRUSH)pBrush->GetSafeHandle()); }

  00203	ff b5 70 ff ff
	ff		 push	 DWORD PTR _brush$6[ebp+4]
  00209	8d 45 14	 lea	 eax, DWORD PTR _rect$[ebp]
  0020c	50		 push	 eax
  0020d	ff 73 04	 push	 DWORD PTR [ebx+4]
  00210	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FillRect@12

; 130  : 	{ }

  00216	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _brush$6[ebp]
  0021c	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _brush$6[ebp], OFFSET ??_7CBrush@@6B@
  00226	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 170  :             } 

  0022b	eb 1e		 jmp	 SHORT $LN59@Draw
__catch$?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z$0:

; 171  :             CATCH(CResourceException, e)

  0022d	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _e$4[ebp]
  00233	89 45 b4	 mov	 DWORD PTR __afxExceptionLink$23[ebp+4], eax

; 172  :             {
; 173  :                 //e->ReportError();
; 174  :             }
; 175  :             END_CATCH

  00236	b8 00 00 00 00	 mov	 eax, $LN135@Draw
  0023b	c3		 ret	 0
$LN135@Draw:
  0023c	8b 45 c4	 mov	 eax, DWORD PTR _TextClr$[ebp]
  0023f	8b 7d a8	 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  00242	8b 5d b8	 mov	 ebx, DWORD PTR _pDC$GSCopy$[ebp]
  00245	8b 75 c0	 mov	 esi, DWORD PTR _pGrid$[ebp]
  00248	89 45 c8	 mov	 DWORD PTR _TextClr$2$[ebp], eax
$LN59@Draw:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.h

; 819  : 		{ AfxTryCleanup(); };

  0024b	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
  00252	e8 00 00 00 00	 call	 ?AfxTryCleanup@@YGXXZ	; AfxTryCleanup
  00257	8b 55 20	 mov	 edx, DWORD PTR _rect$[ebp+12]
  0025a	8b 4d 1c	 mov	 ecx, DWORD PTR _rect$[ebp+8]
  0025d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN76@Draw:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 180  :         if(pGrid->GetGridLines() != GVL_NONE)

  00264	83 be b4 00 00
	00 00		 cmp	 DWORD PTR [esi+180], 0
  0026b	74 08		 je	 SHORT $LN15@Draw

; 181  :         {
; 182  :             rect.right--;

  0026d	49		 dec	 ecx

; 183  :             rect.bottom--;

  0026e	4a		 dec	 edx
  0026f	89 4d 1c	 mov	 DWORD PTR _rect$[ebp+8], ecx
  00272	89 55 20	 mov	 DWORD PTR _rect$[ebp+12], edx
$LN15@Draw:

; 184  :         }
; 185  : 
; 186  :         if (pGrid->GetFrameFocusCell())

  00275	83 be 10 01 00
	00 00		 cmp	 DWORD PTR [esi+272], 0
  0027c	74 7c		 je	 SHORT $LN88@Draw

; 187  :         {
; 188  :                 // Use same color as text to outline the cell so that it shows
; 189  :                 // up if the background is black.
; 190  :             TRY 

  0027e	8d 4d b0	 lea	 ecx, DWORD PTR __afxExceptionLink$22[ebp]
  00281	e8 00 00 00 00	 call	 ??0AFX_EXCEPTION_LINK@@QAE@XZ ; AFX_EXCEPTION_LINK::AFX_EXCEPTION_LINK

; 191  :             {
; 192  :                 CBrush brush(TextClr);

  00286	ff 75 c8	 push	 DWORD PTR _TextClr$2$[ebp]
  00289	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
  00290	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _brush$5[ebp]
  00296	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  0029a	e8 00 00 00 00	 call	 ??0CBrush@@QAE@K@Z	; CBrush::CBrush
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 478  : 	{ ASSERT(m_hDC != NULL); ::FrameRect(m_hDC, lpRect, (HBRUSH)pBrush->GetSafeHandle()); }

  0029f	ff b5 68 ff ff
	ff		 push	 DWORD PTR _brush$5[ebp+4]
  002a5	8d 45 14	 lea	 eax, DWORD PTR _rect$[ebp]
  002a8	50		 push	 eax
  002a9	ff 73 04	 push	 DWORD PTR [ebx+4]
  002ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FrameRect@12

; 130  : 	{ }

  002b2	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _brush$5[ebp]
  002b8	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _brush$5[ebp], OFFSET ??_7CBrush@@6B@
  002c2	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 194  :             }

  002c7	eb 1e		 jmp	 SHORT $LN61@Draw
__catch$?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z$2:

; 195  :             CATCH(CResourceException, e)

  002c9	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _e$3[ebp]
  002cf	89 45 b4	 mov	 DWORD PTR __afxExceptionLink$22[ebp+4], eax

; 196  :             {
; 197  :                 //e->ReportError();
; 198  :             }
; 199  :             END_CATCH

  002d2	b8 00 00 00 00	 mov	 eax, $LN136@Draw
  002d7	c3		 ret	 0
$LN136@Draw:
  002d8	8b 45 c4	 mov	 eax, DWORD PTR _TextClr$[ebp]
  002db	8b 7d a8	 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  002de	8b 5d b8	 mov	 ebx, DWORD PTR _pDC$GSCopy$[ebp]
  002e1	8b 75 c0	 mov	 esi, DWORD PTR _pGrid$[ebp]
  002e4	89 45 c8	 mov	 DWORD PTR _TextClr$2$[ebp], eax
$LN61@Draw:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.h

; 819  : 		{ AfxTryCleanup(); };

  002e7	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 7
  002ee	e8 00 00 00 00	 call	 ?AfxTryCleanup@@YGXXZ	; AfxTryCleanup
  002f3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN88@Draw:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 201  :         pDC->SetTextColor(TextClr);

  002fa	8b 03		 mov	 eax, DWORD PTR [ebx]
  002fc	8b cb		 mov	 ecx, ebx
  002fe	ff 75 c8	 push	 DWORD PTR _TextClr$2$[ebp]
  00301	ff 50 38	 call	 DWORD PTR [eax+56]

; 202  : 
; 203  :         // Adjust rect after frame draw if no grid lines
; 204  :         if(pGrid->GetGridLines() == GVL_NONE)

  00304	83 be b4 00 00
	00 00		 cmp	 DWORD PTR [esi+180], 0
  0030b	75 06		 jne	 SHORT $LN18@Draw

; 205  :         {
; 206  :             rect.right--;

  0030d	ff 4d 1c	 dec	 DWORD PTR _rect$[ebp+8]

; 207  :             rect.bottom--;

  00310	ff 4d 20	 dec	 DWORD PTR _rect$[ebp+12]
$LN18@Draw:

; 230  :     }
; 231  : 
; 232  :     // Draw lines only when wanted
; 233  :     if (IsFixed() && pGrid->GetGridLines() != GVL_NONE)

  00313	8b 07		 mov	 eax, DWORD PTR [edi]
  00315	8b cf		 mov	 ecx, edi
  00317	ff 90 84 00 00
	00		 call	 DWORD PTR [eax+132]
  0031d	85 c0		 test	 eax, eax
  0031f	0f 84 54 01 00
	00		 je	 $LN111@Draw
  00325	83 be b4 00 00
	00 00		 cmp	 DWORD PTR [esi+180], 0
  0032c	0f 84 47 01 00
	00		 je	 $LN111@Draw

; 239  :         BOOL bHiliteFixed = pGrid->GetTrackFocusCell() && pGrid->IsValid(FocusCell) &&

  00332	83 be 0c 01 00
	00 00		 cmp	 DWORD PTR [esi+268], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCtrl.h

; 283  :     CCellID GetFocusCell() const                  { return m_idCurrentCell;           }

  00339	8b 86 d8 02 00
	00		 mov	 eax, DWORD PTR [esi+728]
  0033f	8b 8e dc 02 00
	00		 mov	 ecx, DWORD PTR [esi+732]
  00345	89 45 b0	 mov	 DWORD PTR _FocusCell$21[ebp], eax
  00348	89 4d b4	 mov	 DWORD PTR _FocusCell$21[ebp+4], ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 239  :         BOOL bHiliteFixed = pGrid->GetTrackFocusCell() && pGrid->IsValid(FocusCell) &&

  0034b	74 49		 je	 SHORT $LN138@Draw
  0034d	8d 45 b0	 lea	 eax, DWORD PTR _FocusCell$21[ebp]
  00350	8b ce		 mov	 ecx, esi
  00352	50		 push	 eax
  00353	e8 00 00 00 00	 call	 ?IsValid@CGridCtrl@@QBEHABVCCellID@@@Z ; CGridCtrl::IsValid
  00358	85 c0		 test	 eax, eax
  0035a	74 3a		 je	 SHORT $LN138@Draw
  0035c	8b 45 b0	 mov	 eax, DWORD PTR _FocusCell$21[ebp]
  0035f	3b 45 0c	 cmp	 eax, DWORD PTR _nRow$[ebp]
  00362	74 08		 je	 SHORT $LN137@Draw
  00364	8b 45 b4	 mov	 eax, DWORD PTR _FocusCell$21[ebp+4]
  00367	3b 45 10	 cmp	 eax, DWORD PTR _nCol$[ebp]
  0036a	75 2a		 jne	 SHORT $LN138@Draw
$LN137@Draw:

; 246  :             rect.right++; rect.bottom++;

  0036c	ff 45 1c	 inc	 DWORD PTR _rect$[ebp+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 510  : 	{ ASSERT(m_hDC != NULL); return ::DrawEdge(m_hDC, lpRect, nEdge, nFlags); }

  0036f	8d 45 14	 lea	 eax, DWORD PTR _rect$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 246  :             rect.right++; rect.bottom++;

  00372	ff 45 20	 inc	 DWORD PTR _rect$[ebp+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 510  : 	{ ASSERT(m_hDC != NULL); return ::DrawEdge(m_hDC, lpRect, nEdge, nFlags); }

  00375	6a 0f		 push	 15			; 0000000fH
  00377	6a 08		 push	 8
  00379	50		 push	 eax
  0037a	ff 73 04	 push	 DWORD PTR [ebx+4]
  0037d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DrawEdge@16
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 698  : 	::InflateRect(this, -x, -y);

  00383	6a ff		 push	 -1
  00385	6a ff		 push	 -1
  00387	8d 45 14	 lea	 eax, DWORD PTR _rect$[ebp]
  0038a	50		 push	 eax
  0038b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InflateRect@12
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 249  :         }

  00391	e9 e3 00 00 00	 jmp	 $LN111@Draw
$LN138@Draw:

; 250  :         else
; 251  :         {
; 252  :             CPen lightpen(PS_SOLID, 1,  ::GetSysColor(COLOR_3DHIGHLIGHT)),

  00396	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetSysColor@4
  0039c	6a 14		 push	 20			; 00000014H
  0039e	ff d6		 call	 esi
  003a0	50		 push	 eax
  003a1	6a 01		 push	 1
  003a3	6a 00		 push	 0
  003a5	8d 4d 9c	 lea	 ecx, DWORD PTR _lightpen$19[ebp]
  003a8	e8 00 00 00 00	 call	 ??0CPen@@QAE@HHK@Z	; CPen::CPen

; 253  :                 darkpen(PS_SOLID,  1, ::GetSysColor(COLOR_3DDKSHADOW)),

  003ad	6a 15		 push	 21			; 00000015H
  003af	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 8
  003b6	ff d6		 call	 esi
  003b8	50		 push	 eax
  003b9	6a 01		 push	 1
  003bb	6a 00		 push	 0
  003bd	8d 4d 94	 lea	 ecx, DWORD PTR _darkpen$14[ebp]
  003c0	e8 00 00 00 00	 call	 ??0CPen@@QAE@HHK@Z	; CPen::CPen

; 254  :                 *pOldPen = pDC->GetCurrentPen();

  003c5	8b cb		 mov	 ecx, ebx
  003c7	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+12], 9
  003cb	e8 00 00 00 00	 call	 ?GetCurrentPen@CDC@@QBEPAVCPen@@XZ ; CDC::GetCurrentPen
  003d0	8b f0		 mov	 esi, eax

; 255  : 
; 256  :             pDC->SelectObject(&lightpen);

  003d2	8b cb		 mov	 ecx, ebx
  003d4	8d 45 9c	 lea	 eax, DWORD PTR _lightpen$19[ebp]
  003d7	50		 push	 eax
  003d8	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject

; 257  :             pDC->MoveTo(rect.right, rect.top);

  003dd	ff 75 18	 push	 DWORD PTR _rect$[ebp+4]
  003e0	8d 45 8c	 lea	 eax, DWORD PTR $T13[ebp]
  003e3	8b cb		 mov	 ecx, ebx
  003e5	ff 75 1c	 push	 DWORD PTR _rect$[ebp+8]
  003e8	50		 push	 eax
  003e9	e8 00 00 00 00	 call	 ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z ; CDC::MoveTo

; 258  :             pDC->LineTo(rect.left, rect.top);

  003ee	ff 75 18	 push	 DWORD PTR _rect$[ebp+4]
  003f1	8b cb		 mov	 ecx, ebx
  003f3	ff 75 14	 push	 DWORD PTR _rect$[ebp]
  003f6	e8 00 00 00 00	 call	 ?LineTo@CDC@@QAEHHH@Z	; CDC::LineTo

; 259  :             pDC->LineTo(rect.left, rect.bottom);

  003fb	ff 75 20	 push	 DWORD PTR _rect$[ebp+12]
  003fe	8b cb		 mov	 ecx, ebx
  00400	ff 75 14	 push	 DWORD PTR _rect$[ebp]
  00403	e8 00 00 00 00	 call	 ?LineTo@CDC@@QAEHHH@Z	; CDC::LineTo

; 260  : 
; 261  :             pDC->SelectObject(&darkpen);

  00408	8d 45 94	 lea	 eax, DWORD PTR _darkpen$14[ebp]
  0040b	8b cb		 mov	 ecx, ebx
  0040d	50		 push	 eax
  0040e	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject

; 262  :             pDC->MoveTo(rect.right, rect.top);

  00413	ff 75 18	 push	 DWORD PTR _rect$[ebp+4]
  00416	8d 45 8c	 lea	 eax, DWORD PTR $T12[ebp]
  00419	8b cb		 mov	 ecx, ebx
  0041b	ff 75 1c	 push	 DWORD PTR _rect$[ebp+8]
  0041e	50		 push	 eax
  0041f	e8 00 00 00 00	 call	 ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z ; CDC::MoveTo

; 263  :             pDC->LineTo(rect.right, rect.bottom);

  00424	ff 75 20	 push	 DWORD PTR _rect$[ebp+12]
  00427	8b cb		 mov	 ecx, ebx
  00429	ff 75 1c	 push	 DWORD PTR _rect$[ebp+8]
  0042c	e8 00 00 00 00	 call	 ?LineTo@CDC@@QAEHHH@Z	; CDC::LineTo

; 264  :             pDC->LineTo(rect.left, rect.bottom);

  00431	ff 75 20	 push	 DWORD PTR _rect$[ebp+12]
  00434	8b cb		 mov	 ecx, ebx
  00436	ff 75 14	 push	 DWORD PTR _rect$[ebp]
  00439	e8 00 00 00 00	 call	 ?LineTo@CDC@@QAEHHH@Z	; CDC::LineTo

; 265  : 
; 266  :             pDC->SelectObject(pOldPen);

  0043e	56		 push	 esi
  0043f	8b cb		 mov	 ecx, ebx
  00441	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 698  : 	::InflateRect(this, -x, -y);

  00446	6a ff		 push	 -1
  00448	6a ff		 push	 -1
  0044a	8d 45 14	 lea	 eax, DWORD PTR _rect$[ebp]
  0044d	50		 push	 eax
  0044e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InflateRect@12
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 106  : 	{ }

  00454	8d 4d 94	 lea	 ecx, DWORD PTR _darkpen$14[ebp]
  00457	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _darkpen$14[ebp], OFFSET ??_7CPen@@6B@
  0045e	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  00463	8d 4d 9c	 lea	 ecx, DWORD PTR _lightpen$19[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 268  :         }

  00466	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 106  : 	{ }

  0046d	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _lightpen$19[ebp], OFFSET ??_7CPen@@6B@
  00474	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
$LN111@Draw:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 273  :     if (!pDC->m_bPrinting)

  00479	83 7b 0c 00	 cmp	 DWORD PTR [ebx+12], 0
  0047d	75 13		 jne	 SHORT $LN26@Draw

; 274  : #endif
; 275  :     {
; 276  :         CFont *pFont = GetFontObject();

  0047f	8b 07		 mov	 eax, DWORD PTR [edi]
  00481	8b cf		 mov	 ecx, edi
  00483	ff 50 64	 call	 DWORD PTR [eax+100]

; 277  : 		ASSERT(pFont);
; 278  :         if (pFont)

  00486	85 c0		 test	 eax, eax
  00488	74 08		 je	 SHORT $LN26@Draw

; 279  :             pDC->SelectObject(pFont);

  0048a	8b 13		 mov	 edx, DWORD PTR [ebx]
  0048c	8b cb		 mov	 ecx, ebx
  0048e	50		 push	 eax
  0048f	ff 52 30	 call	 DWORD PTR [edx+48]
$LN26@Draw:

; 280  :     }
; 281  : 
; 282  :     //rect.DeflateRect(GetMargin(), 0); - changed by Yogurt
; 283  :     rect.DeflateRect(GetMargin(), GetMargin());    

  00492	8b 07		 mov	 eax, DWORD PTR [edi]
  00494	8b cf		 mov	 ecx, edi
  00496	ff 50 70	 call	 DWORD PTR [eax+112]
  00499	8b 17		 mov	 edx, DWORD PTR [edi]
  0049b	8b cf		 mov	 ecx, edi
  0049d	8b f0		 mov	 esi, eax
  0049f	ff 52 70	 call	 DWORD PTR [edx+112]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 698  : 	::InflateRect(this, -x, -y);

  004a2	f7 de		 neg	 esi
  004a4	f7 d8		 neg	 eax
  004a6	56		 push	 esi
  004a7	50		 push	 eax
  004a8	8d 45 14	 lea	 eax, DWORD PTR _rect$[ebp]
  004ab	50		 push	 eax
  004ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InflateRect@12
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 287  :     if (pGrid->GetImageList() && GetImage() >= 0)

  004b2	8b 75 c0	 mov	 esi, DWORD PTR _pGrid$[ebp]
  004b5	ff 45 1c	 inc	 DWORD PTR _rect$[ebp+8]
  004b8	ff 45 20	 inc	 DWORD PTR _rect$[ebp+12]
  004bb	83 be 94 02 00
	00 00		 cmp	 DWORD PTR [esi+660], 0
  004c2	74 72		 je	 SHORT $LN29@Draw
  004c4	8b 07		 mov	 eax, DWORD PTR [edi]
  004c6	8b cf		 mov	 ecx, edi
  004c8	ff 50 48	 call	 DWORD PTR [eax+72]
  004cb	85 c0		 test	 eax, eax
  004cd	78 67		 js	 SHORT $LN29@Draw

; 290  :         if (pGrid->GetImageList()->GetImageInfo(GetImage(), &Info))

  004cf	8b 07		 mov	 eax, DWORD PTR [edi]
  004d1	8b cf		 mov	 ecx, edi
  004d3	ff 50 48	 call	 DWORD PTR [eax+72]
  004d6	8b 8e 94 02 00
	00		 mov	 ecx, DWORD PTR [esi+660]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 881  : 	{ ASSERT(m_hImageList != NULL); return ImageList_GetImageInfo(m_hImageList, nImage, pImageInfo); }

  004dc	8d 55 cc	 lea	 edx, DWORD PTR _Info$28[ebp]
  004df	52		 push	 edx
  004e0	50		 push	 eax
  004e1	ff 71 04	 push	 DWORD PTR [ecx+4]
  004e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_GetImageInfo@12
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 290  :         if (pGrid->GetImageList()->GetImageInfo(GetImage(), &Info))

  004ea	85 c0		 test	 eax, eax
  004ec	74 48		 je	 SHORT $LN29@Draw

; 291  :         {
; 292  :             //  would like to use a clipping region but seems to have issue
; 293  :             //  working with CMemDC directly.  Instead, don't display image
; 294  :             //  if any part of it cut-off
; 295  :             //
; 296  :             // CRgn rgn;
; 297  :             // rgn.CreateRectRgnIndirect(rect);
; 298  :             // pDC->SelectClipRgn(&rgn);
; 299  :             // rgn.DeleteObject();
; 300  : 
; 301  :             /*
; 302  :             // removed by Yogurt
; 303  :             int nImageWidth = Info.rcImage.right-Info.rcImage.left+1;
; 304  :             int nImageHeight = Info.rcImage.bottom-Info.rcImage.top+1;
; 305  :             if( nImageWidth + rect.left <= rect.right + (int)(2*GetMargin())
; 306  :                 && nImageHeight + rect.top <= rect.bottom + (int)(2*GetMargin())  )
; 307  :             {
; 308  :                 pGrid->GetImageList()->Draw(pDC, GetImage(), rect.TopLeft(), ILD_NORMAL);
; 309  :             }
; 310  :             */
; 311  :             // Added by Yogurt
; 312  :             int nImageWidth = Info.rcImage.right-Info.rcImage.left;            

  004ee	8b 45 e4	 mov	 eax, DWORD PTR _Info$28[ebp+24]
  004f1	2b 45 dc	 sub	 eax, DWORD PTR _Info$28[ebp+16]

; 313  :             int nImageHeight = Info.rcImage.bottom-Info.rcImage.top;            
; 314  :             if ((nImageWidth + rect.left <= rect.right) && (nImageHeight + rect.top <= rect.bottom))                

  004f4	8b 55 14	 mov	 edx, DWORD PTR _rect$[ebp]
  004f7	03 c2		 add	 eax, edx
  004f9	8b 4d e8	 mov	 ecx, DWORD PTR _Info$28[ebp+28]
  004fc	2b 4d e0	 sub	 ecx, DWORD PTR _Info$28[ebp+20]
  004ff	89 55 98	 mov	 DWORD PTR $T16[ebp], edx
  00502	3b 45 1c	 cmp	 eax, DWORD PTR _rect$[ebp+8]
  00505	7f 2f		 jg	 SHORT $LN29@Draw
  00507	8b 45 18	 mov	 eax, DWORD PTR _rect$[ebp+4]
  0050a	89 45 b4	 mov	 DWORD PTR $T24[ebp], eax
  0050d	03 c1		 add	 eax, ecx
  0050f	3b 45 20	 cmp	 eax, DWORD PTR _rect$[ebp+12]
  00512	7f 22		 jg	 SHORT $LN29@Draw

; 315  :                 pGrid->GetImageList()->Draw(pDC, GetImage(), rect.TopLeft(), ILD_NORMAL);

  00514	8b 07		 mov	 eax, DWORD PTR [edi]
  00516	8b cf		 mov	 ecx, edi
  00518	ff 50 48	 call	 DWORD PTR [eax+72]
  0051b	8b 8e 94 02 00
	00		 mov	 ecx, DWORD PTR [esi+660]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 871  : 	{ ASSERT(m_hImageList != NULL); ASSERT(pDC != NULL); return ImageList_Draw(m_hImageList, nImage, pDC->GetSafeHdc(), pt.x, pt.y, nStyle); }

  00521	6a 00		 push	 0
  00523	ff 75 b4	 push	 DWORD PTR $T24[ebp]
  00526	ff 75 98	 push	 DWORD PTR $T16[ebp]
  00529	ff 73 04	 push	 DWORD PTR [ebx+4]
  0052c	50		 push	 eax
  0052d	ff 71 04	 push	 DWORD PTR [ecx+4]
  00530	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_Draw@24
$LN29@Draw:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 322  :     if (pGrid->GetSortColumn() == nCol && nRow == 0)

  00536	8b 86 64 04 00
	00		 mov	 eax, DWORD PTR [esi+1124]
  0053c	3b 45 10	 cmp	 eax, DWORD PTR _nCol$[ebp]
  0053f	0f 85 67 02 00
	00		 jne	 $LN131@Draw
  00545	83 7d 0c 00	 cmp	 DWORD PTR _nRow$[ebp], 0
  00549	0f 85 5d 02 00
	00		 jne	 $LN131@Draw

; 323  :     {
; 324  :         CSize size = pDC->GetTextExtent(_T("M"));

  0054f	68 00 00 00 00	 push	 OFFSET ??_C@_01PLPBNMEI@M@
  00554	8d 4d c4	 lea	 ecx, DWORD PTR $T27[ebp]
  00557	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  0055d	8d 45 c4	 lea	 eax, DWORD PTR $T27[ebp]
  00560	8b cb		 mov	 ecx, ebx
  00562	50		 push	 eax
  00563	8d 45 8c	 lea	 eax, DWORD PTR _size$11[ebp]
  00566	50		 push	 eax
  00567	e8 00 00 00 00	 call	 ?GetTextExtent@CDC@@QBE?AVCSize@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CDC::GetTextExtent
  0056c	8d 4d c4	 lea	 ecx, DWORD PTR $T27[ebp]
  0056f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 581  : 	return bottom - top;

  00575	8b 55 20	 mov	 edx, DWORD PTR _rect$[ebp+12]
  00578	8b c2		 mov	 eax, edx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 330  :         size.cy -= (nOffset * 2);

  0057a	8b 4d 90	 mov	 ecx, DWORD PTR _size$11[ebp+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 581  : 	return bottom - top;

  0057d	2b 45 18	 sub	 eax, DWORD PTR _rect$[ebp+4]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 330  :         size.cy -= (nOffset * 2);

  00580	83 e9 04	 sub	 ecx, 4
  00583	89 4d c0	 mov	 DWORD PTR _size$1$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 581  : 	return bottom - top;

  00586	3b c8		 cmp	 ecx, eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 332  :         if (size.cy >= rect.Height())

  00588	7c 0b		 jl	 SHORT $LN31@Draw

; 333  :             size.cy = rect.Height() - (nOffset * 2);

  0058a	8b c2		 mov	 eax, edx
  0058c	2b 45 18	 sub	 eax, DWORD PTR _rect$[ebp+4]
  0058f	83 e8 04	 sub	 eax, 4
  00592	89 45 c0	 mov	 DWORD PTR _size$1$[ebp], eax
$LN31@Draw:

; 334  : 
; 335  :         size.cx = size.cy;      // Make the dimensions square
; 336  : 
; 337  :         // Kludge for vertical text
; 338  :         BOOL bVertical = (GetFont()->lfEscapement == 900);

  00595	8b 07		 mov	 eax, DWORD PTR [edi]
  00597	8b cf		 mov	 ecx, edi
  00599	ff 50 60	 call	 DWORD PTR [eax+96]
  0059c	8b 4d c0	 mov	 ecx, DWORD PTR _size$1$[ebp]

; 339  : 
; 340  :         // Only draw if it'll fit!
; 341  :         //if (size.cx + rect.left < rect.right + (int)(2*GetMargin())) - changed / Yogurt
; 342  :         if (size.cx + rect.left < rect.right)

  0059f	8b 55 1c	 mov	 edx, DWORD PTR _rect$[ebp+8]
  005a2	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  005a5	89 45 b4	 mov	 DWORD PTR tv1445[ebp], eax
  005a8	8b 45 14	 mov	 eax, DWORD PTR _rect$[ebp]
  005ab	03 c1		 add	 eax, ecx
  005ad	3b c2		 cmp	 eax, edx
  005af	0f 8d f7 01 00
	00		 jge	 $LN131@Draw

; 343  :         {
; 344  :             int nTriangleBase = rect.bottom - nOffset - size.cy;    // Triangle bottom right

  005b5	8b 45 20	 mov	 eax, DWORD PTR _rect$[ebp+12]
  005b8	2b c1		 sub	 eax, ecx
  005ba	83 e8 02	 sub	 eax, 2

; 345  :             //int nTriangleBase = (rect.top + rect.bottom - size.cy)/2; // Triangle middle right
; 346  :             //int nTriangleBase = rect.top + nOffset;                 // Triangle top right
; 347  : 
; 348  :             //int nTriangleLeft = rect.right - size.cx;                 // Triangle RHS
; 349  :             //int nTriangleLeft = (rect.right + rect.left - size.cx)/2; // Triangle middle
; 350  :             //int nTriangleLeft = rect.left;                            // Triangle LHS
; 351  : 
; 352  :             int nTriangleLeft;
; 353  :             if (bVertical)

  005bd	81 7d b4 84 03
	00 00		 cmp	 DWORD PTR tv1445[ebp], 900 ; 00000384H
  005c4	89 45 bc	 mov	 DWORD PTR $T25[ebp], eax
  005c7	75 11		 jne	 SHORT $LN33@Draw

; 354  :                 nTriangleLeft = (rect.right + rect.left - size.cx)/2; // Triangle middle

  005c9	8b 45 14	 mov	 eax, DWORD PTR _rect$[ebp]
  005cc	2b c1		 sub	 eax, ecx
  005ce	03 c2		 add	 eax, edx
  005d0	99		 cdq
  005d1	2b c2		 sub	 eax, edx
  005d3	d1 f8		 sar	 eax, 1
  005d5	89 45 c8	 mov	 DWORD PTR _nTriangleLeft$1$[ebp], eax
  005d8	eb 05		 jmp	 SHORT $LN34@Draw
$LN33@Draw:

; 355  :             else
; 356  :                 nTriangleLeft = rect.right - size.cx;               // Triangle RHS

  005da	2b d1		 sub	 edx, ecx
  005dc	89 55 c8	 mov	 DWORD PTR _nTriangleLeft$1$[ebp], edx
$LN34@Draw:

; 357  : 
; 358  :             CPen penShadow(PS_SOLID, 0, ::GetSysColor(COLOR_3DSHADOW));

  005df	6a 10		 push	 16			; 00000010H
  005e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  005e7	50		 push	 eax
  005e8	6a 00		 push	 0
  005ea	6a 00		 push	 0
  005ec	8d 4d 8c	 lea	 ecx, DWORD PTR _penShadow$10[ebp]
  005ef	e8 00 00 00 00	 call	 ??0CPen@@QAE@HHK@Z	; CPen::CPen

; 359  :             CPen penLight(PS_SOLID, 0, ::GetSysColor(COLOR_3DHILIGHT));

  005f4	6a 14		 push	 20			; 00000014H
  005f6	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 10 ; 0000000aH
  005fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  00603	50		 push	 eax
  00604	6a 00		 push	 0
  00606	6a 00		 push	 0
  00608	8d 4d 80	 lea	 ecx, DWORD PTR _penLight$8[ebp]
  0060b	e8 00 00 00 00	 call	 ??0CPen@@QAE@HHK@Z	; CPen::CPen

; 360  :             if (pGrid->GetSortAscending())

  00610	8b 45 bc	 mov	 eax, DWORD PTR $T25[ebp]
  00613	8b cb		 mov	 ecx, ebx
  00615	40		 inc	 eax
  00616	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+12], 11 ; 0000000bH
  0061a	89 45 b8	 mov	 DWORD PTR tv1436[ebp], eax
  0061d	8b 45 c8	 mov	 eax, DWORD PTR _nTriangleLeft$1$[ebp]
  00620	40		 inc	 eax
  00621	83 be 60 04 00
	00 00		 cmp	 DWORD PTR [esi+1120], 0
  00628	89 45 a8	 mov	 DWORD PTR tv1435[ebp], eax
  0062b	8d 45 80	 lea	 eax, DWORD PTR _penLight$8[ebp]
  0062e	50		 push	 eax
  0062f	0f 84 86 00 00
	00		 je	 $LN35@Draw

; 361  :             {
; 362  :                 // Draw triangle pointing upwards
; 363  :                 CPen *pOldPen = (CPen*) pDC->SelectObject(&penLight);

  00635	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject
  0063a	89 45 98	 mov	 DWORD PTR $T15[ebp], eax

; 364  :                 pDC->MoveTo( nTriangleLeft + 1, nTriangleBase + size.cy + 1);

  0063d	8b cb		 mov	 ecx, ebx
  0063f	8b 45 bc	 mov	 eax, DWORD PTR $T25[ebp]
  00642	03 45 c0	 add	 eax, DWORD PTR _size$1$[ebp]
  00645	89 45 c4	 mov	 DWORD PTR $T26[ebp], eax
  00648	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0064b	56		 push	 esi
  0064c	ff 75 a8	 push	 DWORD PTR tv1435[ebp]
  0064f	8d 45 9c	 lea	 eax, DWORD PTR $T18[ebp]
  00652	50		 push	 eax
  00653	e8 00 00 00 00	 call	 ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z ; CDC::MoveTo

; 365  :                 pDC->LineTo( nTriangleLeft + (size.cx / 2) + 1, nTriangleBase + 1 );

  00658	8b 45 c0	 mov	 eax, DWORD PTR _size$1$[ebp]
  0065b	ff 75 b8	 push	 DWORD PTR tv1436[ebp]
  0065e	99		 cdq
  0065f	2b c2		 sub	 eax, edx
  00661	8b c8		 mov	 ecx, eax
  00663	8b 45 c8	 mov	 eax, DWORD PTR _nTriangleLeft$1$[ebp]
  00666	d1 f9		 sar	 ecx, 1
  00668	40		 inc	 eax
  00669	89 4d 88	 mov	 DWORD PTR $T9[ebp], ecx
  0066c	03 c8		 add	 ecx, eax
  0066e	51		 push	 ecx
  0066f	8b cb		 mov	 ecx, ebx
  00671	e8 00 00 00 00	 call	 ?LineTo@CDC@@QAEHHH@Z	; CDC::LineTo

; 366  :                 pDC->LineTo( nTriangleLeft + size.cx + 1, nTriangleBase + size.cy + 1);

  00676	8b 45 c0	 mov	 eax, DWORD PTR _size$1$[ebp]
  00679	03 45 c8	 add	 eax, DWORD PTR _nTriangleLeft$1$[ebp]
  0067c	56		 push	 esi
  0067d	89 45 a0	 mov	 DWORD PTR tv1432[ebp], eax
  00680	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00683	51		 push	 ecx
  00684	8b cb		 mov	 ecx, ebx
  00686	e8 00 00 00 00	 call	 ?LineTo@CDC@@QAEHHH@Z	; CDC::LineTo

; 367  :                 pDC->LineTo( nTriangleLeft + 1, nTriangleBase + size.cy + 1);

  0068b	56		 push	 esi
  0068c	ff 75 a8	 push	 DWORD PTR tv1435[ebp]
  0068f	8b cb		 mov	 ecx, ebx
  00691	e8 00 00 00 00	 call	 ?LineTo@CDC@@QAEHHH@Z	; CDC::LineTo

; 368  : 
; 369  :                 pDC->SelectObject(&penShadow);

  00696	8d 45 8c	 lea	 eax, DWORD PTR _penShadow$10[ebp]
  00699	8b cb		 mov	 ecx, ebx
  0069b	50		 push	 eax
  0069c	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject

; 370  :                 pDC->MoveTo( nTriangleLeft, nTriangleBase + size.cy );

  006a1	ff 75 c4	 push	 DWORD PTR $T26[ebp]
  006a4	8b 75 c8	 mov	 esi, DWORD PTR _nTriangleLeft$1$[ebp]
  006a7	8d 45 a4	 lea	 eax, DWORD PTR $T20[ebp]
  006aa	56		 push	 esi
  006ab	50		 push	 eax
  006ac	8b cb		 mov	 ecx, ebx
  006ae	e8 00 00 00 00	 call	 ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z ; CDC::MoveTo

; 371  :                 pDC->LineTo( nTriangleLeft + (size.cx / 2), nTriangleBase );
; 372  :                 pDC->LineTo( nTriangleLeft + size.cx, nTriangleBase + size.cy );
; 373  :                 pDC->LineTo( nTriangleLeft, nTriangleBase + size.cy );
; 374  :                 pDC->SelectObject(pOldPen);
; 375  :             }

  006b3	8b 45 bc	 mov	 eax, DWORD PTR $T25[ebp]
  006b6	e9 89 00 00 00	 jmp	 $LN36@Draw
$LN35@Draw:

; 376  :             else
; 377  :             {
; 378  :                 // Draw triangle pointing downwards
; 379  :                 CPen *pOldPen = (CPen*) pDC->SelectObject(&penLight);

  006bb	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject

; 380  :                 pDC->MoveTo( nTriangleLeft + 1, nTriangleBase + 1 );

  006c0	ff 75 b8	 push	 DWORD PTR tv1436[ebp]
  006c3	89 45 98	 mov	 DWORD PTR $T15[ebp], eax
  006c6	8b cb		 mov	 ecx, ebx
  006c8	ff 75 a8	 push	 DWORD PTR tv1435[ebp]
  006cb	8d 45 9c	 lea	 eax, DWORD PTR $T17[ebp]
  006ce	50		 push	 eax
  006cf	e8 00 00 00 00	 call	 ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z ; CDC::MoveTo

; 381  :                 pDC->LineTo( nTriangleLeft + (size.cx / 2) + 1, nTriangleBase + size.cy + 1 );

  006d4	8b 45 c0	 mov	 eax, DWORD PTR _size$1$[ebp]
  006d7	8b 75 bc	 mov	 esi, DWORD PTR $T25[ebp]
  006da	03 f0		 add	 esi, eax
  006dc	99		 cdq
  006dd	2b c2		 sub	 eax, edx
  006df	8b c8		 mov	 ecx, eax
  006e1	d1 f9		 sar	 ecx, 1
  006e3	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  006e6	89 4d 88	 mov	 DWORD PTR $T9[ebp], ecx
  006e9	50		 push	 eax
  006ea	8b 45 c8	 mov	 eax, DWORD PTR _nTriangleLeft$1$[ebp]
  006ed	40		 inc	 eax
  006ee	03 c1		 add	 eax, ecx
  006f0	8b cb		 mov	 ecx, ebx
  006f2	50		 push	 eax
  006f3	e8 00 00 00 00	 call	 ?LineTo@CDC@@QAEHHH@Z	; CDC::LineTo

; 382  :                 pDC->LineTo( nTriangleLeft + size.cx + 1, nTriangleBase + 1 );

  006f8	8b 45 c0	 mov	 eax, DWORD PTR _size$1$[ebp]
  006fb	8b cb		 mov	 ecx, ebx
  006fd	03 45 c8	 add	 eax, DWORD PTR _nTriangleLeft$1$[ebp]
  00700	ff 75 b8	 push	 DWORD PTR tv1436[ebp]
  00703	89 45 a0	 mov	 DWORD PTR tv1432[ebp], eax
  00706	40		 inc	 eax
  00707	50		 push	 eax
  00708	e8 00 00 00 00	 call	 ?LineTo@CDC@@QAEHHH@Z	; CDC::LineTo

; 383  :                 pDC->LineTo( nTriangleLeft + 1, nTriangleBase + 1 );

  0070d	ff 75 b8	 push	 DWORD PTR tv1436[ebp]
  00710	8b cb		 mov	 ecx, ebx
  00712	ff 75 a8	 push	 DWORD PTR tv1435[ebp]
  00715	e8 00 00 00 00	 call	 ?LineTo@CDC@@QAEHHH@Z	; CDC::LineTo

; 384  :     
; 385  :                 pDC->SelectObject(&penShadow);

  0071a	8d 45 8c	 lea	 eax, DWORD PTR _penShadow$10[ebp]
  0071d	8b cb		 mov	 ecx, ebx
  0071f	50		 push	 eax
  00720	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject

; 386  :                 pDC->MoveTo( nTriangleLeft, nTriangleBase );

  00725	ff 75 bc	 push	 DWORD PTR $T25[ebp]
  00728	8d 85 54 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  0072e	8b cb		 mov	 ecx, ebx
  00730	ff 75 c8	 push	 DWORD PTR _nTriangleLeft$1$[ebp]
  00733	50		 push	 eax
  00734	e8 00 00 00 00	 call	 ?MoveTo@CDC@@QAE?AVCPoint@@HH@Z ; CDC::MoveTo

; 387  :                 pDC->LineTo( nTriangleLeft + (size.cx / 2), nTriangleBase + size.cy );
; 388  :                 pDC->LineTo( nTriangleLeft + size.cx, nTriangleBase );
; 389  :                 pDC->LineTo( nTriangleLeft, nTriangleBase );
; 390  :                 pDC->SelectObject(pOldPen);

  00739	8b 45 bc	 mov	 eax, DWORD PTR $T25[ebp]
  0073c	89 45 c4	 mov	 DWORD PTR $T26[ebp], eax
  0073f	8b c6		 mov	 eax, esi
  00741	8b 75 c8	 mov	 esi, DWORD PTR _nTriangleLeft$1$[ebp]
$LN36@Draw:

; 391  :             }
; 392  :             
; 393  :             if (!bVertical)

  00744	8b 4d ac	 mov	 ecx, DWORD PTR tv976[ebp]
  00747	50		 push	 eax
  00748	8b 45 88	 mov	 eax, DWORD PTR $T9[ebp]
  0074b	03 c6		 add	 eax, esi
  0074d	50		 push	 eax
  0074e	e8 00 00 00 00	 call	 ?LineTo@CDC@@QAEHHH@Z	; CDC::LineTo
  00753	ff 75 c4	 push	 DWORD PTR $T26[ebp]
  00756	8b 4d ac	 mov	 ecx, DWORD PTR tv976[ebp]
  00759	ff 75 a0	 push	 DWORD PTR tv1432[ebp]
  0075c	e8 00 00 00 00	 call	 ?LineTo@CDC@@QAEHHH@Z	; CDC::LineTo
  00761	ff 75 c4	 push	 DWORD PTR $T26[ebp]
  00764	8b 4d ac	 mov	 ecx, DWORD PTR tv976[ebp]
  00767	56		 push	 esi
  00768	e8 00 00 00 00	 call	 ?LineTo@CDC@@QAEHHH@Z	; CDC::LineTo
  0076d	ff 75 98	 push	 DWORD PTR $T15[ebp]
  00770	8b 4d ac	 mov	 ecx, DWORD PTR tv976[ebp]
  00773	e8 00 00 00 00	 call	 ?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z ; CDC::SelectObject
  00778	81 7d b4 84 03
	00 00		 cmp	 DWORD PTR tv1445[ebp], 900 ; 00000384H
  0077f	74 06		 je	 SHORT $LN37@Draw

; 394  :                 rect.right -= size.cy;

  00781	8b 45 c0	 mov	 eax, DWORD PTR _size$1$[ebp]
  00784	29 45 1c	 sub	 DWORD PTR _rect$[ebp+8], eax
$LN37@Draw:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 106  : 	{ }

  00787	8d 4d 80	 lea	 ecx, DWORD PTR _penLight$8[ebp]
  0078a	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _penLight$8[ebp], OFFSET ??_7CPen@@6B@
  00791	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  00796	8d 4d 8c	 lea	 ecx, DWORD PTR _penShadow$10[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 395  :         }

  00799	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 106  : 	{ }

  007a0	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _penShadow$10[ebp], OFFSET ??_7CPen@@6B@
  007a7	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
$LN131@Draw:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 399  :     GetTextRect(rect);

  007ac	8b 07		 mov	 eax, DWORD PTR [edi]
  007ae	8d 4d 14	 lea	 ecx, DWORD PTR _rect$[ebp]
  007b1	51		 push	 ecx
  007b2	8b cf		 mov	 ecx, edi
  007b4	ff 90 ac 00 00
	00		 call	 DWORD PTR [eax+172]

; 400  :     rect.right++;    
; 401  :     rect.bottom++;
; 402  : 
; 403  :     DrawText(pDC->m_hDC, GetText(), -1, rect, GetFormat() | DT_NOPREFIX);

  007ba	8b 07		 mov	 eax, DWORD PTR [edi]
  007bc	8b cf		 mov	 ecx, edi
  007be	ff 45 1c	 inc	 DWORD PTR _rect$[ebp+8]
  007c1	ff 45 20	 inc	 DWORD PTR _rect$[ebp+12]
  007c4	ff 50 54	 call	 DWORD PTR [eax+84]
  007c7	0d 00 08 00 00	 or	 eax, 2048		; 00000800H
  007cc	8b cf		 mov	 ecx, edi
  007ce	50		 push	 eax
  007cf	8d 45 14	 lea	 eax, DWORD PTR _rect$[ebp]
  007d2	50		 push	 eax
  007d3	8b 07		 mov	 eax, DWORD PTR [edi]
  007d5	6a ff		 push	 -1
  007d7	ff 50 40	 call	 DWORD PTR [eax+64]
  007da	50		 push	 eax
  007db	ff 73 04	 push	 DWORD PTR [ebx+4]
  007de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DrawTextA@20

; 404  : 
; 405  :     pDC->RestoreDC(nSavedDC);

  007e4	8b 03		 mov	 eax, DWORD PTR [ebx]
  007e6	8b cb		 mov	 ecx, ebx
  007e8	ff b5 7c ff ff
	ff		 push	 DWORD PTR _nSavedDC$[ebp]
  007ee	ff 50 28	 call	 DWORD PTR [eax+40]

; 406  : 
; 407  :     return TRUE;

  007f1	b8 01 00 00 00	 mov	 eax, 1
  007f6	eb 02		 jmp	 SHORT $LN1@Draw
$LN3@Draw:

; 123  :         return FALSE;

  007f8	33 c0		 xor	 eax, eax
$LN1@Draw:

; 408  : }

  007fa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  007fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00804	59		 pop	 ecx
  00805	5f		 pop	 edi
  00806	5e		 pop	 esi
  00807	5b		 pop	 ebx
  00808	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0080b	33 cd		 xor	 ecx, ebp
  0080d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00812	8b e5		 mov	 esp, ebp
  00814	5d		 pop	 ebp
  00815	c2 20 00	 ret	 32			; 00000020H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z$4:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR __afxExceptionLink$23[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1AFX_EXCEPTION_LINK@@QAE@XZ ; AFX_EXCEPTION_LINK::~AFX_EXCEPTION_LINK
__unwindfunclet$?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z$6:
  00008	8d 4d b0	 lea	 ecx, DWORD PTR __afxExceptionLink$22[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1AFX_EXCEPTION_LINK@@QAE@XZ ; AFX_EXCEPTION_LINK::~AFX_EXCEPTION_LINK
__unwindfunclet$?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z$9:
  00010	8d 4d 9c	 lea	 ecx, DWORD PTR _lightpen$19[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1CPen@@UAE@XZ		; CPen::~CPen
__unwindfunclet$?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z$10:
  00018	8d 4d 94	 lea	 ecx, DWORD PTR _darkpen$14[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1CPen@@UAE@XZ		; CPen::~CPen
__unwindfunclet$?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z$12:
  00020	8d 4d 8c	 lea	 ecx, DWORD PTR _penShadow$10[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1CPen@@UAE@XZ		; CPen::~CPen
__unwindfunclet$?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z$13:
  00028	8d 4d 80	 lea	 ecx, DWORD PTR _penLight$8[ebp]
  0002b	e9 00 00 00 00	 jmp	 ??1CPen@@UAE@XZ		; CPen::~CPen
  00030	cc		 int	 3
  00031	cc		 int	 3
  00032	cc		 int	 3
  00033	cc		 int	 3
  00034	cc		 int	 3
__ehhandler$?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z:
  00035	90		 npad	 1
  00036	90		 npad	 1
  00037	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003e	8b 8a 50 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-176]
  00044	33 c8		 xor	 ecx, eax
  00046	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004b	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0004e	33 c8		 xor	 ecx, eax
  00050	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00055	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z
  0005a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Draw@CGridCellBase@@UAEHPAVCDC@@HHVCRect@@H@Z ENDP	; CGridCellBase::Draw
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
;	COMDAT ?Reset@CGridCellBase@@UAEXXZ
_TEXT	SEGMENT
?Reset@CGridCellBase@@UAEXXZ PROC			; CGridCellBase::Reset, COMDAT
; _this$ = ecx

; 75   :     m_nState  = 0;

  00000	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 76   : }

  00007	c3		 ret	 0
?Reset@CGridCellBase@@UAEXXZ ENDP			; CGridCellBase::Reset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
;	COMDAT ??4CGridCellBase@@UAEXABV0@@Z
_TEXT	SEGMENT
_cell$ = 8						; size = 4
??4CGridCellBase@@UAEXABV0@@Z PROC			; CGridCellBase::operator=, COMDAT
; _this$ = ecx

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi

; 80   : 	if (this == &cell) return;

  00005	8b 7d 08	 mov	 edi, DWORD PTR _cell$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	3b df		 cmp	 ebx, edi
  0000c	0f 84 a7 00 00
	00		 je	 $LN1@operator

; 81   : 
; 82   :     SetGrid(cell.GetGrid());    // do first in case of dependencies

  00012	8b 07		 mov	 eax, DWORD PTR [edi]
  00014	8b cf		 mov	 ecx, edi
  00016	56		 push	 esi
  00017	8b 33		 mov	 esi, DWORD PTR [ebx]
  00019	ff 50 68	 call	 DWORD PTR [eax+104]
  0001c	50		 push	 eax
  0001d	8b cb		 mov	 ecx, ebx
  0001f	ff 56 38	 call	 DWORD PTR [esi+56]

; 83   : 
; 84   :     SetText(cell.GetText());

  00022	8b 07		 mov	 eax, DWORD PTR [edi]
  00024	8b cf		 mov	 ecx, edi
  00026	8b 33		 mov	 esi, DWORD PTR [ebx]
  00028	ff 50 40	 call	 DWORD PTR [eax+64]
  0002b	50		 push	 eax
  0002c	8b cb		 mov	 ecx, ebx
  0002e	ff 56 14	 call	 DWORD PTR [esi+20]

; 85   :     SetImage(cell.GetImage());

  00031	8b 07		 mov	 eax, DWORD PTR [edi]
  00033	8b cf		 mov	 ecx, edi
  00035	8b 33		 mov	 esi, DWORD PTR [ebx]
  00037	ff 50 48	 call	 DWORD PTR [eax+72]
  0003a	50		 push	 eax
  0003b	8b cb		 mov	 ecx, ebx
  0003d	ff 56 18	 call	 DWORD PTR [esi+24]

; 86   :     SetData(cell.GetData());

  00040	8b 07		 mov	 eax, DWORD PTR [edi]
  00042	8b cf		 mov	 ecx, edi
  00044	8b 33		 mov	 esi, DWORD PTR [ebx]
  00046	ff 50 4c	 call	 DWORD PTR [eax+76]
  00049	50		 push	 eax
  0004a	8b cb		 mov	 ecx, ebx
  0004c	ff 56 1c	 call	 DWORD PTR [esi+28]

; 87   :     SetState(cell.GetState());

  0004f	8b 07		 mov	 eax, DWORD PTR [edi]
  00051	8b cf		 mov	 ecx, edi
  00053	8b 33		 mov	 esi, DWORD PTR [ebx]
  00055	ff 50 50	 call	 DWORD PTR [eax+80]
  00058	50		 push	 eax
  00059	8b cb		 mov	 ecx, ebx
  0005b	ff 56 20	 call	 DWORD PTR [esi+32]

; 88   :     SetFormat(cell.GetFormat());

  0005e	8b 07		 mov	 eax, DWORD PTR [edi]
  00060	8b cf		 mov	 ecx, edi
  00062	8b 33		 mov	 esi, DWORD PTR [ebx]
  00064	ff 50 54	 call	 DWORD PTR [eax+84]
  00067	50		 push	 eax
  00068	8b cb		 mov	 ecx, ebx
  0006a	ff 56 24	 call	 DWORD PTR [esi+36]

; 89   :     SetTextClr(cell.GetTextClr());

  0006d	8b 07		 mov	 eax, DWORD PTR [edi]
  0006f	8b cf		 mov	 ecx, edi
  00071	8b 33		 mov	 esi, DWORD PTR [ebx]
  00073	ff 50 58	 call	 DWORD PTR [eax+88]
  00076	50		 push	 eax
  00077	8b cb		 mov	 ecx, ebx
  00079	ff 56 28	 call	 DWORD PTR [esi+40]

; 90   :     SetBackClr(cell.GetBackClr());

  0007c	8b 07		 mov	 eax, DWORD PTR [edi]
  0007e	8b cf		 mov	 ecx, edi
  00080	8b 33		 mov	 esi, DWORD PTR [ebx]
  00082	ff 50 5c	 call	 DWORD PTR [eax+92]
  00085	50		 push	 eax
  00086	8b cb		 mov	 ecx, ebx
  00088	ff 56 2c	 call	 DWORD PTR [esi+44]

; 91   :     SetFont(cell.IsDefaultFont()? NULL : cell.GetFont());

  0008b	8b 07		 mov	 eax, DWORD PTR [edi]
  0008d	8b cf		 mov	 ecx, edi
  0008f	ff 50 78	 call	 DWORD PTR [eax+120]
  00092	85 c0		 test	 eax, eax
  00094	74 04		 je	 SHORT $LN4@operator
  00096	33 c0		 xor	 eax, eax
  00098	eb 07		 jmp	 SHORT $LN5@operator
$LN4@operator:
  0009a	8b 07		 mov	 eax, DWORD PTR [edi]
  0009c	8b cf		 mov	 ecx, edi
  0009e	ff 50 60	 call	 DWORD PTR [eax+96]
$LN5@operator:
  000a1	8b 13		 mov	 edx, DWORD PTR [ebx]
  000a3	8b cb		 mov	 ecx, ebx
  000a5	50		 push	 eax
  000a6	ff 52 30	 call	 DWORD PTR [edx+48]

; 92   :     SetMargin(cell.GetMargin());

  000a9	8b 07		 mov	 eax, DWORD PTR [edi]
  000ab	8b cf		 mov	 ecx, edi
  000ad	8b 33		 mov	 esi, DWORD PTR [ebx]
  000af	ff 50 70	 call	 DWORD PTR [eax+112]
  000b2	50		 push	 eax
  000b3	8b cb		 mov	 ecx, ebx
  000b5	ff 56 34	 call	 DWORD PTR [esi+52]
  000b8	5e		 pop	 esi
$LN1@operator:

; 93   : }

  000b9	5f		 pop	 edi
  000ba	5b		 pop	 ebx
  000bb	5d		 pop	 ebp
  000bc	c2 04 00	 ret	 4
??4CGridCellBase@@UAEXABV0@@Z ENDP			; CGridCellBase::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.h
;	COMDAT ?IsDropHighlighted@CGridCellBase@@UBEHXZ
_TEXT	SEGMENT
?IsDropHighlighted@CGridCellBase@@UBEHXZ PROC		; CGridCellBase::IsDropHighlighted, COMDAT
; _this$ = ecx

; 126  :     virtual BOOL IsDropHighlighted()   const                { return (m_nState & GVIS_DROPHILITED); }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 e0 04	 and	 eax, 4
  00006	c3		 ret	 0
?IsDropHighlighted@CGridCellBase@@UBEHXZ ENDP		; CGridCellBase::IsDropHighlighted
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.h
;	COMDAT ?IsModified@CGridCellBase@@UBEHXZ
_TEXT	SEGMENT
?IsModified@CGridCellBase@@UBEHXZ PROC			; CGridCellBase::IsModified, COMDAT
; _this$ = ecx

; 125  :     virtual BOOL IsModified()          const                { return (m_nState & GVIS_MODIFIED); }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00008	c3		 ret	 0
?IsModified@CGridCellBase@@UBEHXZ ENDP			; CGridCellBase::IsModified
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.h
;	COMDAT ?IsReadOnly@CGridCellBase@@UBEHXZ
_TEXT	SEGMENT
?IsReadOnly@CGridCellBase@@UBEHXZ PROC			; CGridCellBase::IsReadOnly, COMDAT
; _this$ = ecx

; 124  :     virtual BOOL IsReadOnly()          const                { return (m_nState & GVIS_READONLY); }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 e0 08	 and	 eax, 8
  00006	c3		 ret	 0
?IsReadOnly@CGridCellBase@@UBEHXZ ENDP			; CGridCellBase::IsReadOnly
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.h
;	COMDAT ?IsSelected@CGridCellBase@@UBEHXZ
_TEXT	SEGMENT
?IsSelected@CGridCellBase@@UBEHXZ PROC			; CGridCellBase::IsSelected, COMDAT
; _this$ = ecx

; 123  :     virtual BOOL IsSelected()          const                { return (m_nState & GVIS_SELECTED); }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 e0 02	 and	 eax, 2
  00006	c3		 ret	 0
?IsSelected@CGridCellBase@@UBEHXZ ENDP			; CGridCellBase::IsSelected
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.h
;	COMDAT ?IsFixedRow@CGridCellBase@@UBEHXZ
_TEXT	SEGMENT
?IsFixedRow@CGridCellBase@@UBEHXZ PROC			; CGridCellBase::IsFixedRow, COMDAT
; _this$ = ecx

; 122  :     virtual BOOL IsFixedRow()          const                { return (m_nState & GVIS_FIXEDROW); }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 e0 20	 and	 eax, 32			; 00000020H
  00006	c3		 ret	 0
?IsFixedRow@CGridCellBase@@UBEHXZ ENDP			; CGridCellBase::IsFixedRow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.h
;	COMDAT ?IsFixedCol@CGridCellBase@@UBEHXZ
_TEXT	SEGMENT
?IsFixedCol@CGridCellBase@@UBEHXZ PROC			; CGridCellBase::IsFixedCol, COMDAT
; _this$ = ecx

; 121  :     virtual BOOL IsFixedCol()          const                { return (m_nState & GVIS_FIXEDCOL); }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 e0 40	 and	 eax, 64			; 00000040H
  00006	c3		 ret	 0
?IsFixedCol@CGridCellBase@@UBEHXZ ENDP			; CGridCellBase::IsFixedCol
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.h
;	COMDAT ?IsFixed@CGridCellBase@@UBEHXZ
_TEXT	SEGMENT
?IsFixed@CGridCellBase@@UBEHXZ PROC			; CGridCellBase::IsFixed, COMDAT
; _this$ = ecx

; 120  :     virtual BOOL IsFixed()             const                { return (m_nState & GVIS_FIXED);    }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 e0 10	 and	 eax, 16			; 00000010H
  00006	c3		 ret	 0
?IsFixed@CGridCellBase@@UBEHXZ ENDP			; CGridCellBase::IsFixed
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.h
;	COMDAT ?IsFocused@CGridCellBase@@UBEHXZ
_TEXT	SEGMENT
?IsFocused@CGridCellBase@@UBEHXZ PROC			; CGridCellBase::IsFocused, COMDAT
; _this$ = ecx

; 119  :     virtual BOOL IsFocused()           const                { return (m_nState & GVIS_FOCUSED);  }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 e0 01	 and	 eax, 1
  00006	c3		 ret	 0
?IsFocused@CGridCellBase@@UBEHXZ ENDP			; CGridCellBase::IsFocused
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCtrl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCtrl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCtrl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCtrl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCtrl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
;	COMDAT ?GetDefaultCell@CGridCellBase@@UBEPAV1@XZ
_TEXT	SEGMENT
?GetDefaultCell@CGridCellBase@@UBEPAV1@XZ PROC		; CGridCellBase::GetDefaultCell, COMDAT
; _this$ = ecx

; 100  : {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 101  :     if (GetGrid())

  00003	8b 07		 mov	 eax, DWORD PTR [edi]
  00005	ff 50 68	 call	 DWORD PTR [eax+104]
  00008	85 c0		 test	 eax, eax
  0000a	74 4f		 je	 SHORT $LN2@GetDefault

; 102  :         return GetGrid()->GetDefaultCell(IsFixedRow(), IsFixedCol());

  0000c	8b 07		 mov	 eax, DWORD PTR [edi]
  0000e	8b cf		 mov	 ecx, edi
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	ff 90 88 00 00
	00		 call	 DWORD PTR [eax+136]
  00018	8b 17		 mov	 edx, DWORD PTR [edi]
  0001a	8b cf		 mov	 ecx, edi
  0001c	8b d8		 mov	 ebx, eax
  0001e	ff 92 8c 00 00
	00		 call	 DWORD PTR [edx+140]
  00024	8b 17		 mov	 edx, DWORD PTR [edi]
  00026	8b cf		 mov	 ecx, edi
  00028	8b f0		 mov	 esi, eax
  0002a	ff 52 68	 call	 DWORD PTR [edx+104]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCtrl.h

; 790  :     if (bFixedRow && bFixedCol) return (CGridCellBase*) &m_cellFixedRowColDef;

  0002d	85 f6		 test	 esi, esi
  0002f	74 15		 je	 SHORT $LN6@GetDefault
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 102  :         return GetGrid()->GetDefaultCell(IsFixedRow(), IsFixedCol());

  00031	85 db		 test	 ebx, ebx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCtrl.h

; 790  :     if (bFixedRow && bFixedCol) return (CGridCellBase*) &m_cellFixedRowColDef;

  00033	b9 f4 01 00 00	 mov	 ecx, 500		; 000001f4H
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 102  :         return GetGrid()->GetDefaultCell(IsFixedRow(), IsFixedCol());

  00038	5e		 pop	 esi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCtrl.h

; 790  :     if (bFixedRow && bFixedCol) return (CGridCellBase*) &m_cellFixedRowColDef;

  00039	ba 40 02 00 00	 mov	 edx, 576		; 00000240H
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 102  :         return GetGrid()->GetDefaultCell(IsFixedRow(), IsFixedCol());

  0003e	0f 45 ca	 cmovne	 ecx, edx
  00041	5b		 pop	 ebx
  00042	03 c1		 add	 eax, ecx
  00044	5f		 pop	 edi

; 104  : }

  00045	c3		 ret	 0
$LN6@GetDefault:

; 102  :         return GetGrid()->GetDefaultCell(IsFixedRow(), IsFixedCol());

  00046	85 db		 test	 ebx, ebx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCtrl.h

; 792  :     if (bFixedCol)              return (CGridCellBase*) &m_cellFixedColDef;

  00048	b9 5c 01 00 00	 mov	 ecx, 348		; 0000015cH
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 102  :         return GetGrid()->GetDefaultCell(IsFixedRow(), IsFixedCol());

  0004d	5e		 pop	 esi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCtrl.h

; 792  :     if (bFixedCol)              return (CGridCellBase*) &m_cellFixedColDef;

  0004e	ba a8 01 00 00	 mov	 edx, 424		; 000001a8H
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp

; 102  :         return GetGrid()->GetDefaultCell(IsFixedRow(), IsFixedCol());

  00053	0f 45 ca	 cmovne	 ecx, edx
  00056	5b		 pop	 ebx
  00057	03 c1		 add	 eax, ecx
  00059	5f		 pop	 edi

; 104  : }

  0005a	c3		 ret	 0
$LN2@GetDefault:

; 103  :     return NULL;

  0005b	33 c0		 xor	 eax, eax
  0005d	5f		 pop	 edi

; 104  : }

  0005e	c3		 ret	 0
?GetDefaultCell@CGridCellBase@@UBEPAV1@XZ ENDP		; CGridCellBase::GetDefaultCell
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.h
;	COMDAT ?GetState@CGridCellBase@@UBEKXZ
_TEXT	SEGMENT
?GetState@CGridCellBase@@UBEKXZ PROC			; CGridCellBase::GetState, COMDAT
; _this$ = ecx

; 105  :     virtual DWORD      GetState()      const                { return m_nState;  }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetState@CGridCellBase@@UBEKXZ ENDP			; CGridCellBase::GetState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.h
;	COMDAT ?GetTipText@CGridCellBase@@UBEPBDXZ
_TEXT	SEGMENT
?GetTipText@CGridCellBase@@UBEPBDXZ PROC		; CGridCellBase::GetTipText, COMDAT
; _this$ = ecx

; 102  :     virtual LPCTSTR    GetTipText()    const                { return GetText(); } // may override TitleTip return

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff 60 40	 jmp	 DWORD PTR [eax+64]
?GetTipText@CGridCellBase@@UBEPBDXZ ENDP		; CGridCellBase::GetTipText
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.h
;	COMDAT ?SetState@CGridCellBase@@UAEXK@Z
_TEXT	SEGMENT
_nState$ = 8						; size = 4
?SetState@CGridCellBase@@UAEXK@Z PROC			; CGridCellBase::SetState, COMDAT
; _this$ = ecx

; 92   :     virtual void SetState(DWORD nState)                     { m_nState = nState; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _nState$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetState@CGridCellBase@@UAEXK@Z ENDP			; CGridCellBase::SetState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
;	COMDAT ??1CGridCellBase@@UAE@XZ
_TEXT	SEGMENT
??1CGridCellBase@@UAE@XZ PROC				; CGridCellBase::~CGridCellBase, COMDAT
; _this$ = ecx

; 67   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CGridCellBase@@6B@

; 68   : }

  00006	c3		 ret	 0
??1CGridCellBase@@UAE@XZ ENDP				; CGridCellBase::~CGridCellBase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
;	COMDAT ??0CGridCellBase@@QAE@XZ
_TEXT	SEGMENT
??0CGridCellBase@@QAE@XZ PROC				; CGridCellBase::CGridCellBase, COMDAT
; _this$ = ecx

; 62   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CGridCellBase@@6B@

; 63   :     Reset();
; 64   : }

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0CGridCellBase@@QAE@XZ ENDP				; CGridCellBase::CGridCellBase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
;	COMDAT ?GetRuntimeClass@CGridCellBase@@UBEPAUCRuntimeClass@@XZ
_TEXT	SEGMENT
?GetRuntimeClass@CGridCellBase@@UBEPAUCRuntimeClass@@XZ PROC ; CGridCellBase::GetRuntimeClass, COMDAT
; _this$ = ecx

; 55   : IMPLEMENT_DYNAMIC(CGridCellBase, CObject)

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?classCGridCellBase@CGridCellBase@@2UCRuntimeClass@@B ; CGridCellBase::classCGridCellBase
  00005	c3		 ret	 0
?GetRuntimeClass@CGridCellBase@@UBEPAUCRuntimeClass@@XZ ENDP ; CGridCellBase::GetRuntimeClass
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
;	COMDAT ?GetThisClass@CGridCellBase@@SGPAUCRuntimeClass@@XZ
_TEXT	SEGMENT
?GetThisClass@CGridCellBase@@SGPAUCRuntimeClass@@XZ PROC ; CGridCellBase::GetThisClass, COMDAT

; 55   : IMPLEMENT_DYNAMIC(CGridCellBase, CObject)

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?classCGridCellBase@CGridCellBase@@2UCRuntimeClass@@B ; CGridCellBase::classCGridCellBase
  00005	c3		 ret	 0
?GetThisClass@CGridCellBase@@SGPAUCRuntimeClass@@XZ ENDP ; CGridCellBase::GetThisClass
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
;	COMDAT ?_GetBaseClass@CGridCellBase@@KGPAUCRuntimeClass@@XZ
_TEXT	SEGMENT
?_GetBaseClass@CGridCellBase@@KGPAUCRuntimeClass@@XZ PROC ; CGridCellBase::_GetBaseClass, COMDAT

; 55   : IMPLEMENT_DYNAMIC(CGridCellBase, CObject)

  00000	e9 00 00 00 00	 jmp	 ?GetThisClass@CObject@@SGPAUCRuntimeClass@@XZ ; CObject::GetThisClass
?_GetBaseClass@CGridCellBase@@KGPAUCRuntimeClass@@XZ ENDP ; CGridCellBase::_GetBaseClass
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1_GV_ITEM@@QAE@XZ
_TEXT	SEGMENT
??1_GV_ITEM@@QAE@XZ PROC				; _GV_ITEM::~_GV_ITEM, COMDAT
; _this$ = ecx
  00000	83 c1 64	 add	 ecx, 100		; 00000064H
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
??1_GV_ITEM@@QAE@XZ ENDP				; _GV_ITEM::~_GV_ITEM
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
;	COMDAT ?GetTextExtent@CDC@@QBE?AVCSize@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
_TEXT	SEGMENT
_size$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_str$ = 12						; size = 4
?GetTextExtent@CDC@@QBE?AVCSize@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC ; CDC::GetTextExtent, COMDAT
; _this$ = ecx

; 636  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 519  : 		return( GetData()->nDataLength );

  00006	8b 45 0c	 mov	 eax, DWORD PTR _str$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 639  : 		VERIFY(::GetTextExtentPoint32(m_hAttribDC, str, (int)str.GetLength(), &size));

  00009	8d 55 f8	 lea	 edx, DWORD PTR _size$[ebp]
  0000c	52		 push	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 519  : 		return( GetData()->nDataLength );

  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 639  : 		VERIFY(::GetTextExtentPoint32(m_hAttribDC, str, (int)str.GetLength(), &size));

  0000f	ff 70 f4	 push	 DWORD PTR [eax-12]
  00012	50		 push	 eax
  00013	ff 71 08	 push	 DWORD PTR [ecx+8]
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTextExtentPoint32A@16
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 318  : 	*(SIZE*)this = initSize;

  0001c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR _size$[ebp]
  00022	8b 55 fc	 mov	 edx, DWORD PTR _size$[ebp+4]
  00025	89 08		 mov	 DWORD PTR [eax], ecx
  00027	89 50 04	 mov	 DWORD PTR [eax+4], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 641  : 	}

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?GetTextExtent@CDC@@QBE?AVCSize@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CDC::GetTextExtent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
;	COMDAT ?GetCurrentPen@CDC@@QBEPAVCPen@@XZ
_TEXT	SEGMENT
?GetCurrentPen@CDC@@QBEPAVCPen@@XZ PROC			; CDC::GetCurrentPen, COMDAT
; _this$ = ecx

; 790  : 	{ ASSERT(m_hAttribDC != NULL); return CPen::FromHandle((HPEN)::GetCurrentObject(m_hAttribDC, OBJ_PEN)); }

  00000	6a 01		 push	 1
  00002	ff 71 08	 push	 DWORD PTR [ecx+8]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentObject@8

; 102  : 	{ return (CPen*) CGdiObject::FromHandle(hPen); }

  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ?FromHandle@CGdiObject@@SGPAV1@PAX@Z ; CGdiObject::FromHandle

; 790  : 	{ ASSERT(m_hAttribDC != NULL); return CPen::FromHandle((HPEN)::GetCurrentObject(m_hAttribDC, OBJ_PEN)); }

  00011	c3		 ret	 0
?GetCurrentPen@CDC@@QBEPAVCPen@@XZ ENDP			; CDC::GetCurrentPen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_GCBrush@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCBrush@@UAEPAXI@Z PROC				; CBrush::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 130  : 	{ }

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CBrush@@6B@
  0000c	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  00011	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00014	a8 01		 test	 al, 1
  00016	74 1f		 je	 SHORT $LN12@scalar
  00018	a8 04		 test	 al, 4
  0001a	75 10		 jne	 SHORT $LN3@scalar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 112  : 	{ ::operator delete(p); }

  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN3@scalar:
  0002c	6a 08		 push	 8
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  00034	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00037	8b c6		 mov	 eax, esi
  00039	5e		 pop	 esi
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
??_GCBrush@@UAEPAXI@Z ENDP				; CBrush::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
;	COMDAT ??1CBrush@@UAE@XZ
_TEXT	SEGMENT
??1CBrush@@UAE@XZ PROC					; CBrush::~CBrush, COMDAT
; _this$ = ecx

; 130  : 	{ }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CBrush@@6B@
  00006	e9 00 00 00 00	 jmp	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
??1CBrush@@UAE@XZ ENDP					; CBrush::~CBrush
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_GCPen@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCPen@@UAEPAXI@Z PROC				; CPen::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl

; 106  : 	{ }

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CPen@@6B@
  0000c	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  00011	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00014	a8 01		 test	 al, 1
  00016	74 1f		 je	 SHORT $LN12@scalar
  00018	a8 04		 test	 al, 4
  0001a	75 10		 jne	 SHORT $LN3@scalar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 112  : 	{ ::operator delete(p); }

  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN3@scalar:
  0002c	6a 08		 push	 8
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  00034	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00037	8b c6		 mov	 eax, esi
  00039	5e		 pop	 esi
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
??_GCPen@@UAEPAXI@Z ENDP				; CPen::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
;	COMDAT ??1CPen@@UAE@XZ
_TEXT	SEGMENT
??1CPen@@UAE@XZ PROC					; CPen::~CPen, COMDAT
; _this$ = ecx

; 106  : 	{ }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CPen@@6B@
  00006	e9 00 00 00 00	 jmp	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
??1CPen@@UAE@XZ ENDP					; CPen::~CPen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_GCGdiObject@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGdiObject@@UAEPAXI@Z PROC				; CGdiObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  0000b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0000e	a8 01		 test	 al, 1
  00010	74 1f		 je	 SHORT $LN9@scalar
  00012	a8 04		 test	 al, 4
  00014	75 10		 jne	 SHORT $LN3@scalar

; 112  : 	{ ::operator delete(p); }

  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	83 c4 04	 add	 esp, 4
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN3@scalar:
  00026	6a 08		 push	 8
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0002e	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??_GCGdiObject@@UAEPAXI@Z ENDP				; CGdiObject::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin1.inl
;	COMDAT ??1CGdiObject@@UAE@XZ
_TEXT	SEGMENT
_pException$2 = -540					; size = 4
_strMsg$3 = -536					; size = 4
_szErrorMessage$4 = -532				; size = 512
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
??1CGdiObject@@UAE@XZ PROC				; CGdiObject::~CGdiObject, COMDAT
; _this$ = ecx

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CGdiObject@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 10 02 00
	00		 sub	 esp, 528		; 00000210H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00031	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CGdiObject@@6B@

; 75   : 	AFX_BEGIN_DESTRUCTOR

  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 76   : 	DeleteObject();

  0003e	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject
$LN18@CGdiObject:

; 78   : }

  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00054	33 cd		 xor	 ecx, ebp
  00056	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
__catch$??1CGdiObject@@UAE@XZ$0:

; 77   : 	AFX_END_DESTRUCTOR

  0005f	8d 8d e8 fd ff
	ff		 lea	 ecx, DWORD PTR _strMsg$3[ebp]
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0006b	8b b5 e4 fd ff
	ff		 mov	 esi, DWORD PTR _pException$2[ebp]
  00071	8d 8d ec fd ff
	ff		 lea	 ecx, DWORD PTR _szErrorMessage$4[ebp]
  00077	6a 00		 push	 0
  00079	68 00 02 00 00	 push	 512			; 00000200H
  0007e	51		 push	 ecx
  0007f	8b 06		 mov	 eax, DWORD PTR [esi]
  00081	8b ce		 mov	 ecx, esi
  00083	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00087	ff 50 14	 call	 DWORD PTR [eax+20]
  0008a	85 c0		 test	 eax, eax
  0008c	74 2a		 je	 SHORT $LN9@CGdiObject
  0008e	8d 85 ec fd ff
	ff		 lea	 eax, DWORD PTR _szErrorMessage$4[ebp]
  00094	50		 push	 eax
  00095	6a 4d		 push	 77			; 0000004dH
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_0HD@JJCHHHNK@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OIEOKIDM@Exception?5thrown?5in?5destructor@
  000a1	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _strMsg$3[ebp]
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@HBOOMJBF@?$CFTs?5?$CI?$CFTs?3?$CFd?$CJ?6?$CFTs@
  000ac	50		 push	 eax
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  000b3	83 c4 18	 add	 esp, 24			; 00000018H
  000b6	eb 21		 jmp	 SHORT $LN10@CGdiObject
$LN9@CGdiObject:
  000b8	6a 4d		 push	 77			; 0000004dH
  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_0HD@JJCHHHNK@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000bf	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OIEOKIDM@Exception?5thrown?5in?5destructor@
  000c4	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _strMsg$3[ebp]
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OMEMOKLE@?$CFTs?5?$CI?$CFTs?3?$CFd?$CJ@
  000cf	50		 push	 eax
  000d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  000d6	83 c4 14	 add	 esp, 20			; 00000014H
$LN10@CGdiObject:
  000d9	6a 00		 push	 0
  000db	6a 00		 push	 0
  000dd	ff b5 e8 fd ff
	ff		 push	 DWORD PTR _strMsg$3[ebp]
  000e3	e8 00 00 00 00	 call	 ?AfxMessageBox@@YGHPBDII@Z ; AfxMessageBox
  000e8	8d 8d e8 fd ff
	ff		 lea	 ecx, DWORD PTR _strMsg$3[ebp]
  000ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000f4	8b 06		 mov	 eax, DWORD PTR [esi]
  000f6	8b ce		 mov	 ecx, esi
  000f8	6a 01		 push	 1
  000fa	ff 50 04	 call	 DWORD PTR [eax+4]
  000fd	b8 00 00 00 00	 mov	 eax, $LN18@CGdiObject
  00102	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CGdiObject@@UAE@XZ$2:
  00000	8d 8d e8 fd ff
	ff		 lea	 ecx, DWORD PTR _strMsg$3[ebp]
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$??1CGdiObject@@UAE@XZ:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 8a e0 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-544]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CGdiObject@@UAE@XZ
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CGdiObject@@UAE@XZ ENDP				; CGdiObject::~CGdiObject
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.h
;	COMDAT ??1AFX_EXCEPTION_LINK@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1AFX_EXCEPTION_LINK@@QAE@XZ PROC			; AFX_EXCEPTION_LINK::~AFX_EXCEPTION_LINK, COMDAT
; _this$ = ecx

; 819  : 		{ AfxTryCleanup(); };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1AFX_EXCEPTION_LINK@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	e8 00 00 00 00	 call	 ?AfxTryCleanup@@YGXXZ	; AfxTryCleanup
  00027	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0002a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00031	59		 pop	 ecx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
  00036	cc		 int	 3
  00037	cc		 int	 3
  00038	cc		 int	 3
  00039	cc		 int	 3
  0003a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1AFX_EXCEPTION_LINK@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1AFX_EXCEPTION_LINK@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1AFX_EXCEPTION_LINK@@QAE@XZ ENDP			; AFX_EXCEPTION_LINK::~AFX_EXCEPTION_LINK
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z PROC		; CObject::Dump, COMDAT
; _this$ = ecx

; 122  : 	{ /* no dumping in release builds */ }

  00000	c2 04 00	 ret	 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z ENDP		; CObject::Dump
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT
?AssertValid@CObject@@UBEXXZ PROC			; CObject::AssertValid, COMDAT
; _this$ = ecx

; 120  : 	{ /* no asserts in release builds */ }

  00000	c2 00 00	 ret	 0
?AssertValid@CObject@@UBEXXZ ENDP			; CObject::AssertValid
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z PROC		; CObject::Serialize, COMDAT
; _this$ = ecx

; 106  : 	{ /* CObject does not serialize anything by default */ }

  00000	c2 04 00	 ret	 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z ENDP		; CObject::Serialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT
??1CObject@@UAE@XZ PROC					; CObject::~CObject, COMDAT
; _this$ = ecx

; 104  : 	{ }

  00000	c2 00 00	 ret	 0
??1CObject@@UAE@XZ ENDP					; CObject::~CObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\HWSTRATEGYANALYSIS\GridCtrl_src\GridCellBase.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
