; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30145.0 

	TITLE	D:\git\src\IBK\IBK_DRFN\#DRfn-CS\_Obj\IndexOptimizer\DataItem.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1CObject@@UAE@XZ				; CObject::~CObject
PUBLIC	?Serialize@CObject@@UAEXAAVCArchive@@@Z		; CObject::Serialize
PUBLIC	?AssertValid@CObject@@UBEXXZ			; CObject::AssertValid
PUBLIC	?Dump@CObject@@UBEXAAVCDumpContext@@@Z		; CObject::Dump
PUBLIC	??1CIDataItem0001@@UAE@XZ			; CIDataItem0001::~CIDataItem0001
PUBLIC	??_GCIDataItem0001@@UAEPAXI@Z			; CIDataItem0001::`scalar deleting destructor'
PUBLIC	??0CSTDataItem@@QAE@XZ				; CSTDataItem::CSTDataItem
PUBLIC	??1CSTDataItem@@UAE@XZ				; CSTDataItem::~CSTDataItem
PUBLIC	?Init@CSTDataItem@@UAEHPBDHNJPAVCIDataItem0001@@@Z ; CSTDataItem::Init
PUBLIC	?SetAt@CSTDataItem@@UAEHJN@Z			; CSTDataItem::SetAt
PUBLIC	?GetAt@CSTDataItem@@UAEHJPAN@Z			; CSTDataItem::GetAt
PUBLIC	?GetAt@CSTDataItem@@UAENJ@Z			; CSTDataItem::GetAt
PUBLIC	?GetDataItemName@CSTDataItem@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; CSTDataItem::GetDataItemName
PUBLIC	?GetSize@CSTDataItem@@UAEJXZ			; CSTDataItem::GetSize
PUBLIC	?SetSize@CSTDataItem@@UAEXJ@Z			; CSTDataItem::SetSize
PUBLIC	?SetComment@CSTDataItem@@UAEXPBD0@Z		; CSTDataItem::SetComment
PUBLIC	?GetComment@CSTDataItem@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z ; CSTDataItem::GetComment
PUBLIC	?GetFirstDataIndex@CSTDataItem@@UAEJXZ		; CSTDataItem::GetFirstDataIndex
PUBLIC	??0?$CArray@NN@@QAE@XZ				; CArray<double,double>::CArray<double,double>
PUBLIC	?SetSize@?$CArray@NN@@QAEXHH@Z			; CArray<double,double>::SetSize
PUBLIC	??1?$CArray@NN@@UAE@XZ				; CArray<double,double>::~CArray<double,double>
PUBLIC	?Serialize@?$CArray@NN@@UAEXAAVCArchive@@@Z	; CArray<double,double>::Serialize
PUBLIC	??_G?$CArray@NN@@UAEPAXI@Z			; CArray<double,double>::`scalar deleting destructor'
PUBLIC	??_GCSTDataItem@@UAEPAXI@Z			; CSTDataItem::`scalar deleting destructor'
PUBLIC	??$SerializeElements@N@@YGXAAVCArchive@@PANH@Z	; SerializeElements<double>
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R3CObject@@8					; CObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObject@@8					; CObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CObject@@8			; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CIDataItem0001@@6B@				; CIDataItem0001::`vftable'
PUBLIC	??_7?$CArray@NN@@6B@				; CArray<double,double>::`vftable'
PUBLIC	??_7CSTDataItem@@6B@				; CSTDataItem::`vftable'
PUBLIC	??_R4?$CArray@NN@@6B@				; CArray<double,double>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CArray@NN@@@8				; CArray<double,double> `RTTI Type Descriptor'
PUBLIC	??_R3?$CArray@NN@@8				; CArray<double,double>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CArray@NN@@8				; CArray<double,double>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CArray@NN@@8			; CArray<double,double>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CIDataItem0001@@6B@			; CIDataItem0001::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCIDataItem0001@@@8			; CIDataItem0001 `RTTI Type Descriptor'
PUBLIC	??_R3CIDataItem0001@@8				; CIDataItem0001::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CIDataItem0001@@8				; CIDataItem0001::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CIDataItem0001@@8			; CIDataItem0001::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CSTDataItem@@6B@				; CSTDataItem::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSTDataItem@@@8				; CSTDataItem `RTTI Type Descriptor'
PUBLIC	??_R3CSTDataItem@@8				; CSTDataItem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSTDataItem@@8				; CSTDataItem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSTDataItem@@8			; CSTDataItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@7ff0000000000000
PUBLIC	__real@fff0000000000000
EXTRN	__purecall:PROC
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	?__global_delete@@YAXPAXI@Z:PROC		; __global_delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp___invalid_parameter_noinfo:PROC
EXTRN	__imp___errno:PROC
EXTRN	?AfxThrowMemoryException@@YGXXZ:PROC		; AfxThrowMemoryException
EXTRN	?AfxThrowInvalidArgException@@YGXXZ:PROC	; AfxThrowInvalidArgException
EXTRN	?AfxThrowArchiveException@@YGXHPBD@Z:PROC	; AfxThrowArchiveException
EXTRN	?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ:PROC ; CObject::GetRuntimeClass
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z:PROC
EXTRN	?Read@CArchive@@QAEIPAXI@Z:PROC			; CArchive::Read
EXTRN	?Write@CArchive@@QAEXPBXI@Z:PROC		; CArchive::Write
EXTRN	?ReadCount@CArchive@@QAEKXZ:PROC		; CArchive::ReadCount
EXTRN	?WriteCount@CArchive@@QAEXK@Z:PROC		; CArchive::WriteCount
EXTRN	??0CMapStringToString@@QAE@H@Z:PROC		; CMapStringToString::CMapStringToString
EXTRN	?Lookup@CMapStringToString@@QBEHPBDAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z:PROC ; CMapStringToString::Lookup
EXTRN	??ACMapStringToString@@QAEAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z:PROC ; CMapStringToString::operator[]
EXTRN	??1CMapStringToString@@UAE@XZ:PROC		; CMapStringToString::~CMapStringToString
EXTRN	??_ECIDataItem0001@@UAEPAXI@Z:PROC		; CIDataItem0001::`vector deleting destructor'
EXTRN	??_E?$CArray@NN@@UAEPAXI@Z:PROC			; CArray<double,double>::`vector deleting destructor'
EXTRN	??_ECSTDataItem@@UAEPAXI@Z:PROC			; CSTDataItem::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@fff0000000000000
CONST	SEGMENT
__real@fff0000000000000 DQ 0fff0000000000000r	; -inf
CONST	ENDS
;	COMDAT __real@7ff0000000000000
CONST	SEGMENT
__real@7ff0000000000000 DQ 07ff0000000000000r	; inf
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CSTDataItem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSTDataItem@@8 DD FLAT:??_R0?AVCSTDataItem@@@8 ; CSTDataItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSTDataItem@@8
rdata$r	ENDS
;	COMDAT ??_R2CSTDataItem@@8
rdata$r	SEGMENT
??_R2CSTDataItem@@8 DD FLAT:??_R1A@?0A@EA@CSTDataItem@@8 ; CSTDataItem::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CIDataItem0001@@8
rdata$r	ENDS
;	COMDAT ??_R3CSTDataItem@@8
rdata$r	SEGMENT
??_R3CSTDataItem@@8 DD 00H				; CSTDataItem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CSTDataItem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSTDataItem@@@8
data$rs	SEGMENT
??_R0?AVCSTDataItem@@@8 DD FLAT:??_7type_info@@6B@	; CSTDataItem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSTDataItem@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CSTDataItem@@6B@
rdata$r	SEGMENT
??_R4CSTDataItem@@6B@ DD 00H				; CSTDataItem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSTDataItem@@@8
	DD	FLAT:??_R3CSTDataItem@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CIDataItem0001@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CIDataItem0001@@8 DD FLAT:??_R0?AVCIDataItem0001@@@8 ; CIDataItem0001::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CIDataItem0001@@8
rdata$r	ENDS
;	COMDAT ??_R2CIDataItem0001@@8
rdata$r	SEGMENT
??_R2CIDataItem0001@@8 DD FLAT:??_R1A@?0A@EA@CIDataItem0001@@8 ; CIDataItem0001::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CIDataItem0001@@8
rdata$r	SEGMENT
??_R3CIDataItem0001@@8 DD 00H				; CIDataItem0001::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CIDataItem0001@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCIDataItem0001@@@8
data$rs	SEGMENT
??_R0?AVCIDataItem0001@@@8 DD FLAT:??_7type_info@@6B@	; CIDataItem0001 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCIDataItem0001@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CIDataItem0001@@6B@
rdata$r	SEGMENT
??_R4CIDataItem0001@@6B@ DD 00H				; CIDataItem0001::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCIDataItem0001@@@8
	DD	FLAT:??_R3CIDataItem0001@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CArray@NN@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CArray@NN@@8 DD FLAT:??_R0?AV?$CArray@NN@@@8 ; CArray<double,double>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CArray@NN@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CArray@NN@@8
rdata$r	SEGMENT
??_R2?$CArray@NN@@8 DD FLAT:??_R1A@?0A@EA@?$CArray@NN@@8 ; CArray<double,double>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CArray@NN@@8
rdata$r	SEGMENT
??_R3?$CArray@NN@@8 DD 00H				; CArray<double,double>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CArray@NN@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CArray@NN@@@8
data$rs	SEGMENT
??_R0?AV?$CArray@NN@@@8 DD FLAT:??_7type_info@@6B@	; CArray<double,double> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CArray@NN@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CArray@NN@@6B@
rdata$r	SEGMENT
??_R4?$CArray@NN@@6B@ DD 00H				; CArray<double,double>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CArray@NN@@@8
	DD	FLAT:??_R3?$CArray@NN@@8
rdata$r	ENDS
;	COMDAT ??_7CSTDataItem@@6B@
CONST	SEGMENT
??_7CSTDataItem@@6B@ DD FLAT:??_R4CSTDataItem@@6B@	; CSTDataItem::`vftable'
	DD	FLAT:??_ECSTDataItem@@UAEPAXI@Z
	DD	FLAT:?Init@CSTDataItem@@UAEHPBDHNJPAVCIDataItem0001@@@Z
	DD	FLAT:?SetAt@CSTDataItem@@UAEHJN@Z
	DD	FLAT:?GetAt@CSTDataItem@@UAENJ@Z
	DD	FLAT:?GetAt@CSTDataItem@@UAEHJPAN@Z
	DD	FLAT:?GetDataItemName@CSTDataItem@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
	DD	FLAT:?GetSize@CSTDataItem@@UAEJXZ
	DD	FLAT:?SetSize@CSTDataItem@@UAEXJ@Z
	DD	FLAT:?SetComment@CSTDataItem@@UAEXPBD0@Z
	DD	FLAT:?GetComment@CSTDataItem@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z
	DD	FLAT:?GetFirstDataIndex@CSTDataItem@@UAEJXZ
CONST	ENDS
;	COMDAT ??_7?$CArray@NN@@6B@
CONST	SEGMENT
??_7?$CArray@NN@@6B@ DD FLAT:??_R4?$CArray@NN@@6B@	; CArray<double,double>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CArray@NN@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CArray@NN@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_7CIDataItem0001@@6B@
CONST	SEGMENT
??_7CIDataItem0001@@6B@ DD FLAT:??_R4CIDataItem0001@@6B@ ; CIDataItem0001::`vftable'
	DD	FLAT:??_ECIDataItem0001@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CObject@@8
rdata$r	SEGMENT
??_R2CObject@@8 DD FLAT:??_R1A@?0A@EA@CObject@@8	; CObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObject@@8
rdata$r	SEGMENT
??_R3CObject@@8 DD 00H					; CObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
data$rs	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
data$rs	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetComment@CSTDataItem@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetComment@CSTDataItem@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z$0
__ehfuncinfo$?GetComment@CSTDataItem@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetComment@CSTDataItem@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CSTDataItem@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CSTDataItem@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CSTDataItem@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CSTDataItem@@QAE@XZ$2
__ehfuncinfo$??0CSTDataItem@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CSTDataItem@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@N@@YGXAAVCArchive@@PANH@Z
_TEXT	SEGMENT
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@N@@YGXAAVCArchive@@PANH@Z PROC	; SerializeElements<double>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR _nCount$[ebp]
  0000b	57		 push	 edi
  0000c	85 f6		 test	 esi, esi
  0000e	74 08		 je	 SHORT $LN2@SerializeE
  00010	85 c9		 test	 ecx, ecx
  00012	0f 84 89 00 00
	00		 je	 $LN34@SerializeE
$LN2@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00018	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  0001b	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0001e	f7 d0		 not	 eax
  00020	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00022	74 3c		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;
; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )

  00024	85 f6		 test	 esi, esi
  00026	74 31		 je	 SHORT $LN8@SerializeE
  00028	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL5@SerializeE:

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00030	bb ff ff ff 0f	 mov	 ebx, 268435455		; 0fffffffH
  00035	3b f3		 cmp	 esi, ebx
  00037	0f 42 de	 cmovb	 ebx, esi

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0003a	8d 3c dd 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*8]
  00041	57		 push	 edi
  00042	51		 push	 ecx
  00043	8b ca		 mov	 ecx, edx
  00045	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;
; 87   : 			pData += nElementsToWrite;

  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  00050	03 cf		 add	 ecx, edi
  00052	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  00055	2b f3		 sub	 esi, ebx
  00057	75 d7		 jne	 SHORT $LL5@SerializeE
$LN8@SerializeE:
  00059	5f		 pop	 edi

; 105  : 		}
; 106  : 	}
; 107  : }

  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	5d		 pop	 ebp
  0005d	c2 0c 00	 ret	 12			; 0000000cH
$LN10@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  00060	85 f6		 test	 esi, esi
  00062	74 f5		 je	 SHORT $LN8@SerializeE
$LL7@SerializeE:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00064	bf ff ff ff 0f	 mov	 edi, 268435455		; 0fffffffH
  00069	3b f7		 cmp	 esi, edi
  0006b	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0006e	8d 1c fd 00 00
	00 00		 lea	 ebx, DWORD PTR [edi*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00075	53		 push	 ebx
  00076	51		 push	 ecx
  00077	8b ca		 mov	 ecx, edx
  00079	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0007e	3b c3		 cmp	 eax, ebx
  00080	75 16		 jne	 SHORT $LN23@SerializeE
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  00082	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00085	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;
; 104  : 			pData += nElementsToRead;

  00088	03 cb		 add	 ecx, ebx
  0008a	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  0008d	2b f7		 sub	 esi, edi
  0008f	75 d3		 jne	 SHORT $LL7@SerializeE

; 105  : 		}
; 106  : 	}
; 107  : }

  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	5d		 pop	 ebp
  00095	c2 0c 00	 ret	 12			; 0000000cH
$LN23@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 402  : 		AfxThrowArchiveException(CArchiveException::endOfFile);

  00098	6a 00		 push	 0
  0009a	6a 03		 push	 3
  0009c	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN34@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  000a1	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN32@SerializeE:
  000a6	cc		 int	 3
??$SerializeElements@N@@YGXAAVCArchive@@PANH@Z ENDP	; SerializeElements<double>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp
;	COMDAT ??_GCSTDataItem@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSTDataItem@@UAEPAXI@Z PROC				; CSTDataItem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 27   : {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 29   : }

  00006	8d 4e 48	 lea	 ecx, DWORD PTR [esi+72]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSTDataItem@@6B@
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00015	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  00018	e8 00 00 00 00	 call	 ??1CMapStringToString@@UAE@XZ ; CMapStringToString::~CMapStringToString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 358  : 	if (m_pData != NULL)

  0001d	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00020	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], OFFSET ??_7?$CArray@NN@@6B@
  00027	85 c0		 test	 eax, eax
  00029	74 10		 je	 SHORT $LN11@scalar

; 359  : 	{
; 360  : 		for( int i = 0; i < m_nSize; i++ )

  0002b	83 7e 20 00	 cmp	 DWORD PTR [esi+32], 0
  0002f	0f 4f c0	 cmovg	 eax, eax

; 361  : 			(m_pData + i)->~TYPE();
; 362  : 		delete[] (BYTE*)m_pData;

  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00038	83 c4 04	 add	 esp, 4
$LN11@scalar:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp

; 29   : }

  0003b	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00044	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00048	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CIDataItem0001@@6B@
  0004e	74 0b		 je	 SHORT $LN18@scalar
  00050	6a 58		 push	 88			; 00000058H
  00052	56		 push	 esi
  00053	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00058	83 c4 08	 add	 esp, 8
$LN18@scalar:
  0005b	8b c6		 mov	 eax, esi
  0005d	5e		 pop	 esi
  0005e	5d		 pop	 ebp
  0005f	c2 04 00	 ret	 4
??_GCSTDataItem@@UAEPAXI@Z ENDP				; CSTDataItem::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_G?$CArray@NN@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CArray@NN@@UAEPAXI@Z PROC				; CArray<double,double>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 355  : {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 356  : 	ASSERT_VALID(this);
; 357  : 
; 358  : 	if (m_pData != NULL)

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CArray@NN@@6B@
  0000f	85 c0		 test	 eax, eax
  00011	74 09		 je	 SHORT $LN11@scalar

; 359  : 	{
; 360  : 		for( int i = 0; i < m_nSize; i++ )
; 361  : 			(m_pData + i)->~TYPE();
; 362  : 		delete[] (BYTE*)m_pData;

  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00019	83 c4 04	 add	 esp, 4
$LN11@scalar:
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0001f	a8 01		 test	 al, 1
  00021	74 1f		 je	 SHORT $LN20@scalar
  00023	a8 04		 test	 al, 4
  00025	75 10		 jne	 SHORT $LN3@scalar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 112  : 	{ ::operator delete(p); }

  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002d	83 c4 04	 add	 esp, 4
  00030	8b c6		 mov	 eax, esi
  00032	5e		 pop	 esi
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
$LN3@scalar:
  00037	6a 14		 push	 20			; 00000014H
  00039	56		 push	 esi
  0003a	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0003f	83 c4 08	 add	 esp, 8
$LN20@scalar:
  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
??_G?$CArray@NN@@UAEPAXI@Z ENDP				; CArray<double,double>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CArray@NN@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_pData$1$ = -4						; size = 4
_ar$ = 8						; size = 4
?Serialize@?$CArray@NN@@UAEXAAVCArchive@@@Z PROC	; CArray<double,double>::Serialize, COMDAT
; _this$ = ecx

; 633  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00009	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  0000c	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0000f	f7 d0		 not	 eax
  00011	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 637  : 	if (ar.IsStoring())

  00013	74 0a		 je	 SHORT $LN2@Serialize

; 638  : 	{
; 639  : 		ar.WriteCount(m_nSize);

  00015	ff 77 08	 push	 DWORD PTR [edi+8]
  00018	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 640  : 	}

  0001d	eb 0f		 jmp	 SHORT $LN3@Serialize
$LN2@Serialize:

; 641  : 	else
; 642  : 	{
; 643  : 		DWORD_PTR nOldSize = ar.ReadCount();

  0001f	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount

; 644  : 		SetSize(nOldSize, -1);

  00024	6a ff		 push	 -1
  00026	50		 push	 eax
  00027	8b cf		 mov	 ecx, edi
  00029	e8 00 00 00 00	 call	 ?SetSize@?$CArray@NN@@QAEXHH@Z ; CArray<double,double>::SetSize
$LN3@Serialize:

; 645  : 	}
; 646  : 	SerializeElements<TYPE>(ar, m_pData, m_nSize);

  0002e	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  00031	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00034	89 4d fc	 mov	 DWORD PTR _pData$1$[ebp], ecx

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00037	85 f6		 test	 esi, esi
  00039	74 08		 je	 SHORT $LN8@Serialize
  0003b	85 c9		 test	 ecx, ecx
  0003d	0f 84 8c 00 00
	00		 je	 $LN40@Serialize
$LN8@Serialize:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00043	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  00046	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00049	f7 d0		 not	 eax
  0004b	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  0004d	74 36		 je	 SHORT $LN16@Serialize

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;
; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )

  0004f	85 f6		 test	 esi, esi
  00051	74 29		 je	 SHORT $LN14@Serialize
$LL11@Serialize:

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00053	bb ff ff ff 0f	 mov	 ebx, 268435455		; 0fffffffH
  00058	3b f3		 cmp	 esi, ebx
  0005a	0f 42 de	 cmovb	 ebx, esi

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0005d	8d 3c dd 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*8]
  00064	57		 push	 edi
  00065	51		 push	 ecx
  00066	8b ca		 mov	 ecx, edx
  00068	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;
; 87   : 			pData += nElementsToWrite;

  0006d	8b 4d fc	 mov	 ecx, DWORD PTR _pData$1$[ebp]
  00070	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  00073	03 cf		 add	 ecx, edi
  00075	89 4d fc	 mov	 DWORD PTR _pData$1$[ebp], ecx
  00078	2b f3		 sub	 esi, ebx
  0007a	75 d7		 jne	 SHORT $LL11@Serialize
$LN14@Serialize:
  0007c	5f		 pop	 edi

; 647  : }

  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
$LN16@Serialize:

; 97   : 		while( nElementsLeft > 0 )

  00085	85 f6		 test	 esi, esi
  00087	74 f3		 je	 SHORT $LN14@Serialize
  00089	0f 1f 80 00 00
	00 00		 npad	 7
$LL13@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00090	bf ff ff ff 0f	 mov	 edi, 268435455		; 0fffffffH
  00095	3b f7		 cmp	 esi, edi
  00097	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0009a	8d 1c fd 00 00
	00 00		 lea	 ebx, DWORD PTR [edi*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  000a1	53		 push	 ebx
  000a2	51		 push	 ecx
  000a3	8b ca		 mov	 ecx, edx
  000a5	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  000aa	3b c3		 cmp	 eax, ebx
  000ac	75 18		 jne	 SHORT $LN30@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  000ae	8b 4d fc	 mov	 ecx, DWORD PTR _pData$1$[ebp]
  000b1	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;
; 104  : 			pData += nElementsToRead;

  000b4	03 cb		 add	 ecx, ebx
  000b6	89 4d fc	 mov	 DWORD PTR _pData$1$[ebp], ecx
  000b9	2b f7		 sub	 esi, edi
  000bb	75 d3		 jne	 SHORT $LL13@Serialize

; 647  : }

  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c2 04 00	 ret	 4
$LN30@Serialize:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 402  : 		AfxThrowArchiveException(CArchiveException::endOfFile);

  000c6	6a 00		 push	 0
  000c8	6a 03		 push	 3
  000ca	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN40@Serialize:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  000cf	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN38@Serialize:
  000d4	cc		 int	 3
?Serialize@?$CArray@NN@@UAEXAAVCArchive@@@Z ENDP	; CArray<double,double>::Serialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??1?$CArray@NN@@UAE@XZ
_TEXT	SEGMENT
??1?$CArray@NN@@UAE@XZ PROC				; CArray<double,double>::~CArray<double,double>, COMDAT
; _this$ = ecx

; 356  : 	ASSERT_VALID(this);
; 357  : 
; 358  : 	if (m_pData != NULL)

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CArray@NN@@6B@
  00009	85 c0		 test	 eax, eax
  0000b	74 07		 je	 SHORT $LN5@CArray

; 359  : 	{
; 360  : 		for( int i = 0; i < m_nSize; i++ )
; 361  : 			(m_pData + i)->~TYPE();
; 362  : 		delete[] (BYTE*)m_pData;

  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00013	59		 pop	 ecx
$LN5@CArray:

; 363  : 	}
; 364  : }

  00014	c3		 ret	 0
??1?$CArray@NN@@UAE@XZ ENDP				; CArray<double,double>::~CArray<double,double>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_memcpy_s.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_memcpy_s.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?SetSize@?$CArray@NN@@QAEXHH@Z
_TEXT	SEGMENT
__N$1$ = -8						; size = 4
__S1max$1$ = -4						; size = 4
__S2$1$ = 8						; size = 4
_nNewSize$ = 8						; size = 4
_pNewData$1$ = 12					; size = 4
_nGrowBy$ = 12						; size = 4
?SetSize@?$CArray@NN@@QAEXHH@Z PROC			; CArray<double,double>::SetSize, COMDAT
; _this$ = ecx

; 368  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 369  : 	ASSERT_VALID(this);
; 370  : 	ASSERT(nNewSize >= 0);
; 371  : 
; 372  : 	if(nNewSize < 0 )

  00008	8b 75 08	 mov	 esi, DWORD PTR _nNewSize$[ebp]
  0000b	8b d9		 mov	 ebx, ecx
  0000d	57		 push	 edi
  0000e	85 f6		 test	 esi, esi
  00010	0f 88 9a 01 00
	00		 js	 $LN56@SetSize

; 373  : 		AfxThrowInvalidArgException();
; 374  : 
; 375  : 	if (nGrowBy >= 0)

  00016	8b 45 0c	 mov	 eax, DWORD PTR _nGrowBy$[ebp]
  00019	85 c0		 test	 eax, eax
  0001b	78 03		 js	 SHORT $LN82@SetSize

; 376  : 		m_nGrowBy = nGrowBy;  // set new size

  0001d	89 43 10	 mov	 DWORD PTR [ebx+16], eax
$LN82@SetSize:

; 377  : 
; 378  : 	if (nNewSize == 0)

  00020	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00023	85 f6		 test	 esi, esi
  00025	75 27		 jne	 SHORT $LN19@SetSize

; 379  : 	{
; 380  : 		// shrink to nothing
; 381  : 		if (m_pData != NULL)

  00027	85 c9		 test	 ecx, ecx
  00029	74 0c		 je	 SHORT $LN21@SetSize

; 382  : 		{
; 383  : 			for( int i = 0; i < m_nSize; i++ )
; 384  : 				(m_pData + i)->~TYPE();
; 385  : 			delete[] (BYTE*)m_pData;

  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00031	83 c4 04	 add	 esp, 4

; 386  : 			m_pData = NULL;

  00034	89 73 04	 mov	 DWORD PTR [ebx+4], esi
$LN21@SetSize:

; 475  : }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0
  00040	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
$LN19@SetSize:

; 387  : 		}
; 388  : 		m_nSize = m_nMaxSize = 0;
; 389  : 	}
; 390  : 	else if (m_pData == NULL)

  0004e	85 c9		 test	 ecx, ecx
  00050	75 36		 jne	 SHORT $LN22@SetSize

; 391  : 	{
; 392  : 		// create buffer big enough to hold number of requested elements or
; 393  : 		// m_nGrowBy elements, whichever is larger.
; 394  : #ifdef SIZE_T_MAX
; 395  : 		ASSERT(nNewSize <= SIZE_T_MAX/sizeof(TYPE));    // no overflow
; 396  : #endif
; 397  : 		size_t nAllocSize = __max(nNewSize, m_nGrowBy);

  00052	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]
  00055	3b f7		 cmp	 esi, edi
  00057	0f 4f fe	 cmovg	 edi, esi

; 398  : 		m_pData = (TYPE*) new BYTE[(size_t)nAllocSize * sizeof(TYPE)];

  0005a	8d 34 fd 00 00
	00 00		 lea	 esi, DWORD PTR [edi*8]
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 399  : 		memset((void*)m_pData, 0, (size_t)nAllocSize * sizeof(TYPE));

  00067	56		 push	 esi
  00068	6a 00		 push	 0
  0006a	50		 push	 eax
  0006b	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  0006e	e8 00 00 00 00	 call	 _memset

; 400  : 		for( int i = 0; i < nNewSize; i++ )
; 401  : #pragma push_macro("new")
; 402  : #undef new
; 403  : 			::new( (void*)( m_pData + i ) ) TYPE;
; 404  : #pragma pop_macro("new")
; 405  : 		m_nSize = nNewSize;

  00073	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00076	83 c4 10	 add	 esp, 16			; 00000010H

; 475  : }

  00079	89 7b 0c	 mov	 DWORD PTR [ebx+12], edi
  0007c	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
$LN22@SetSize:

; 406  : 		m_nMaxSize = nAllocSize;
; 407  : 	}
; 408  : 	else if (nNewSize <= m_nMaxSize)

  00088	8b 7b 0c	 mov	 edi, DWORD PTR [ebx+12]
  0008b	3b f7		 cmp	 esi, edi
  0008d	7f 29		 jg	 SHORT $LN24@SetSize

; 409  : 	{
; 410  : 		// it fits
; 411  : 		if (nNewSize > m_nSize)

  0008f	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00092	3b f2		 cmp	 esi, edx
  00094	7e 16		 jle	 SHORT $LN26@SetSize

; 412  : 		{
; 413  : 			// initialize the new elements
; 414  : 			memset((void*)(m_pData + m_nSize), 0, (size_t)(nNewSize-m_nSize) * sizeof(TYPE));

  00096	8b c6		 mov	 eax, esi
  00098	2b c2		 sub	 eax, edx
  0009a	c1 e0 03	 shl	 eax, 3
  0009d	50		 push	 eax
  0009e	8d 04 d1	 lea	 eax, DWORD PTR [ecx+edx*8]
  000a1	6a 00		 push	 0
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 _memset
  000a9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN26@SetSize:

; 415  : 			for( int i = 0; i < nNewSize-m_nSize; i++ )
; 416  : #pragma push_macro("new")
; 417  : #undef new
; 418  : 				::new( (void*)( m_pData + m_nSize + i ) ) TYPE;
; 419  : #pragma pop_macro("new")
; 420  : 		}
; 421  : 		else if (m_nSize > nNewSize)
; 422  : 		{
; 423  : 			// destroy the old elements
; 424  : 			for( int i = 0; i < m_nSize-nNewSize; i++ )
; 425  : 				(m_pData + nNewSize + i)->~TYPE();
; 426  : 		}
; 427  : 		m_nSize = nNewSize;

  000ac	5f		 pop	 edi
  000ad	89 73 08	 mov	 DWORD PTR [ebx+8], esi

; 475  : }

  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c2 08 00	 ret	 8
$LN24@SetSize:

; 428  : 	}
; 429  : 	else
; 430  : 	{
; 431  : 		// otherwise, grow array
; 432  : 		nGrowBy = m_nGrowBy;

  000b8	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]

; 433  : 		if (nGrowBy == 0)

  000bb	85 c0		 test	 eax, eax
  000bd	75 22		 jne	 SHORT $LN37@SetSize

; 434  : 		{
; 435  : 			// heuristically determine growth when nGrowBy == 0
; 436  : 			//  (this avoids heap fragmentation in many situations)
; 437  : 			nGrowBy = m_nSize / 8;

  000bf	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  000c2	99		 cdq
  000c3	83 e2 07	 and	 edx, 7
  000c6	03 c2		 add	 eax, edx
  000c8	c1 f8 03	 sar	 eax, 3

; 438  : 			nGrowBy = (nGrowBy < 4) ? 4 : ((nGrowBy > 1024) ? 1024 : nGrowBy);

  000cb	83 f8 04	 cmp	 eax, 4
  000ce	7d 07		 jge	 SHORT $LN36@SetSize
  000d0	b8 04 00 00 00	 mov	 eax, 4
  000d5	eb 0a		 jmp	 SHORT $LN37@SetSize
$LN36@SetSize:
  000d7	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  000dc	3b c1		 cmp	 eax, ecx
  000de	0f 4f c1	 cmovg	 eax, ecx
$LN37@SetSize:

; 439  : 		}
; 440  : 		INT_PTR nNewMax;
; 441  : 		if (nNewSize < m_nMaxSize + nGrowBy)

  000e1	03 f8		 add	 edi, eax
  000e3	3b f7		 cmp	 esi, edi
  000e5	7d 0b		 jge	 SHORT $LN30@SetSize

; 445  : 
; 446  : 		ASSERT(nNewMax >= m_nMaxSize);  // no wrap around
; 447  : 
; 448  : 		if(nNewMax  < m_nMaxSize)

  000e7	3b 7b 0c	 cmp	 edi, DWORD PTR [ebx+12]
  000ea	0f 8c c0 00 00
	00		 jl	 $LN56@SetSize
  000f0	eb 02		 jmp	 SHORT $LN32@SetSize
$LN30@SetSize:

; 442  : 			nNewMax = m_nMaxSize + nGrowBy;  // granularity
; 443  : 		else
; 444  : 			nNewMax = nNewSize;  // no slush

  000f2	8b fe		 mov	 edi, esi
$LN32@SetSize:

; 449  : 			AfxThrowInvalidArgException();
; 450  : 
; 451  : #ifdef SIZE_T_MAX
; 452  : 		ASSERT(nNewMax <= SIZE_T_MAX/sizeof(TYPE)); // no overflow
; 453  : #endif
; 454  : 		TYPE* pNewData = (TYPE*) new BYTE[(size_t)nNewMax * sizeof(TYPE)];

  000f4	8d 04 fd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*8]
  000fb	50		 push	 eax
  000fc	89 45 fc	 mov	 DWORD PTR __S1max$1$[ebp], eax
  000ff	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 455  : 
; 456  : 		// copy new data from old
; 457  : 		::ATL::Checked::memcpy_s(pNewData, (size_t)nNewMax * sizeof(TYPE),

  00104	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00107	83 c4 04	 add	 esp, 4
  0010a	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0010d	c1 e1 03	 shl	 ecx, 3
  00110	89 45 0c	 mov	 DWORD PTR _pNewData$1$[ebp], eax
  00113	89 4d f8	 mov	 DWORD PTR __N$1$[ebp], ecx
  00116	89 55 08	 mov	 DWORD PTR __S2$1$[ebp], edx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_memcpy_s.h

; 46   :         if (_SourceSize == 0)

  00119	85 c9		 test	 ecx, ecx
  0011b	74 20		 je	 SHORT $LN54@SetSize

; 47   :         {
; 48   :             return 0;
; 49   :         }
; 50   : 
; 51   :         _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Destination != NULL, EINVAL);

  0011d	85 c0		 test	 eax, eax
  0011f	74 7d		 je	 SHORT $LN84@SetSize

; 52   :         if (_Source == NULL || _DestinationSize < _SourceSize)

  00121	85 d2		 test	 edx, edx
  00123	74 51		 je	 SHORT $LN76@SetSize
  00125	8d 14 fd 00 00
	00 00		 lea	 edx, DWORD PTR [edi*8]
  0012c	3b d1		 cmp	 edx, ecx
  0012e	72 46		 jb	 SHORT $LN76@SetSize

; 58   : 
; 59   :             // Unreachable, but required to suppress /analyze warnings:
; 60   :             return EINVAL;
; 61   :         }
; 62   :         memcpy(_Destination, _Source, _SourceSize);

  00130	51		 push	 ecx
  00131	ff 75 08	 push	 DWORD PTR __S2$1$[ebp]
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 _memcpy
  0013a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN54@SetSize:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 462  : 		memset((void*)(pNewData + m_nSize), 0, (size_t)(nNewSize-m_nSize) * sizeof(TYPE));

  0013d	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00140	8b c6		 mov	 eax, esi
  00142	2b c1		 sub	 eax, ecx
  00144	c1 e0 03	 shl	 eax, 3
  00147	50		 push	 eax
  00148	8b 45 0c	 mov	 eax, DWORD PTR _pNewData$1$[ebp]
  0014b	6a 00		 push	 0
  0014d	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 _memset

; 463  : 		for( int i = 0; i < nNewSize-m_nSize; i++ )
; 464  : #pragma push_macro("new")
; 465  : #undef new
; 466  : 			::new( (void*)( pNewData + m_nSize + i ) ) TYPE;
; 467  : #pragma pop_macro("new")
; 468  : 
; 469  : 		// get rid of old stuff (note: no destructors called)
; 470  : 		delete[] (BYTE*)m_pData;

  00156	ff 73 04	 push	 DWORD PTR [ebx+4]
  00159	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 471  : 		m_pData = pNewData;

  0015e	8b 45 0c	 mov	 eax, DWORD PTR _pNewData$1$[ebp]
  00161	83 c4 10	 add	 esp, 16			; 00000010H

; 475  : }

  00164	89 7b 0c	 mov	 DWORD PTR [ebx+12], edi
  00167	89 73 08	 mov	 DWORD PTR [ebx+8], esi
  0016a	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  0016d	5f		 pop	 edi
  0016e	5e		 pop	 esi
  0016f	5b		 pop	 ebx
  00170	8b e5		 mov	 esp, ebp
  00172	5d		 pop	 ebp
  00173	c2 08 00	 ret	 8
$LN76@SetSize:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_memcpy_s.h

; 54   :             memset(_Destination, 0, _DestinationSize);

  00176	8b 5d fc	 mov	 ebx, DWORD PTR __S1max$1$[ebp]
  00179	53		 push	 ebx
  0017a	6a 00		 push	 0
  0017c	50		 push	 eax
  0017d	e8 00 00 00 00	 call	 _memset
  00182	83 c4 0c	 add	 esp, 12			; 0000000cH

; 55   : 
; 56   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);

  00185	83 7d 08 00	 cmp	 DWORD PTR __S2$1$[ebp], 0
  00189	74 13		 je	 SHORT $LN84@SetSize

; 57   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);

  0018b	3b 5d f8	 cmp	 ebx, DWORD PTR __N$1$[ebp]
  0018e	73 20		 jae	 SHORT $LN56@SetSize
  00190	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___errno
  00196	c7 00 22 00 00
	00		 mov	 DWORD PTR [eax], 34	; 00000022H
  0019c	eb 0c		 jmp	 SHORT $LN85@SetSize
$LN84@SetSize:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.h

; 517  : 		AfxThrowInvalidArgException();

  0019e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___errno
  001a4	c7 00 16 00 00
	00		 mov	 DWORD PTR [eax], 22	; 00000016H
$LN85@SetSize:
  001aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo
$LN56@SetSize:
  001b0	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN83@SetSize:
  001b5	cc		 int	 3
?SetSize@?$CArray@NN@@QAEXHH@Z ENDP			; CArray<double,double>::SetSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??0?$CArray@NN@@QAE@XZ
_TEXT	SEGMENT
??0?$CArray@NN@@QAE@XZ PROC				; CArray<double,double>::CArray<double,double>, COMDAT
; _this$ = ecx

; 348  : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CArray@NN@@6B@

; 349  : 	m_pData = NULL;
; 350  : 	m_nSize = m_nMaxSize = m_nGrowBy = 0;
; 351  : }

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00016	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0001d	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00024	c3		 ret	 0
??0?$CArray@NN@@QAE@XZ ENDP				; CArray<double,double>::CArray<double,double>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp
;	COMDAT ?GetFirstDataIndex@CSTDataItem@@UAEJXZ
_TEXT	SEGMENT
?GetFirstDataIndex@CSTDataItem@@UAEJXZ PROC		; CSTDataItem::GetFirstDataIndex, COMDAT
; _this$ = ecx

; 74   : { 

  00000	8b c1		 mov	 eax, ecx

; 75   : 	if(m_pDataItemConnected)

  00002	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00005	85 c9		 test	 ecx, ecx
  00007	74 05		 je	 SHORT $LN2@GetFirstDa

; 76   : 	{
; 77   : 		return m_pDataItemConnected->GetFirstDataIndex();

  00009	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000b	ff 60 28	 jmp	 DWORD PTR [eax+40]
$LN2@GetFirstDa:

; 78   : 	}
; 79   : 	return (m_lFirstIndex + 1);

  0000e	8b 40 4c	 mov	 eax, DWORD PTR [eax+76]
  00011	40		 inc	 eax

; 80   : }

  00012	c3		 ret	 0
?GetFirstDataIndex@CSTDataItem@@UAEJXZ ENDP		; CSTDataItem::GetFirstDataIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp
;	COMDAT ?GetComment@CSTDataItem@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_lpTitle$ = 12						; size = 4
?GetComment@CSTDataItem@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z PROC ; CSTDataItem::GetComment, COMDAT
; _this$ = ecx

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetComment@CSTDataItem@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 89   : 	CString strComment;

  0002e	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00031	8b cf		 mov	 ecx, edi
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 90   : 	m_mapComment.Lookup(lpTitle,strComment);
; 91   : 	return strComment;

  00039	57		 push	 edi
  0003a	ff 75 0c	 push	 DWORD PTR _lpTitle$[ebp]
  0003d	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00047	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  0004e	e8 00 00 00 00	 call	 ?Lookup@CMapStringToString@@QBEHPBDAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CMapStringToString::Lookup
  00053	8b c7		 mov	 eax, edi

; 92   : }

  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetComment@CSTDataItem@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0d 00 00
	00		 je	 $LN4@GetComment
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN4@GetComment:
  00019	c3		 ret	 0
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?GetComment@CSTDataItem@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetComment@CSTDataItem@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetComment@CSTDataItem@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z ENDP ; CSTDataItem::GetComment
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxcoll.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxcoll.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp
;	COMDAT ?SetComment@CSTDataItem@@UAEXPBD0@Z
_TEXT	SEGMENT
_lpTitle$ = 8						; size = 4
_lpComment$ = 12					; size = 4
?SetComment@CSTDataItem@@UAEXPBD0@Z PROC		; CSTDataItem::SetComment, COMDAT
; _this$ = ecx

; 83   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxcoll.inl

; 658  : 	{ (*this)[key] = newValue; }

  00003	ff 75 0c	 push	 DWORD PTR _lpComment$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp

; 84   : 	m_mapComment.SetAt(lpTitle,lpComment);

  00006	83 c1 2c	 add	 ecx, 44			; 0000002cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxcoll.inl

; 658  : 	{ (*this)[key] = newValue; }

  00009	ff 75 08	 push	 DWORD PTR _lpTitle$[ebp]
  0000c	e8 00 00 00 00	 call	 ??ACMapStringToString@@QAEAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z ; CMapStringToString::operator[]
  00011	8b c8		 mov	 ecx, eax
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp

; 85   : }

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
?SetComment@CSTDataItem@@UAEXPBD0@Z ENDP		; CSTDataItem::SetComment
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.h
;	COMDAT ?SetSize@CSTDataItem@@UAEXJ@Z
_TEXT	SEGMENT
_lSize$ = 8						; size = 4
?SetSize@CSTDataItem@@UAEXJ@Z PROC			; CSTDataItem::SetSize, COMDAT
; _this$ = ecx

; 64   : 	void SetSize(long lSize) {	m_arrayData.SetSize(lSize);	}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	ff 75 08	 push	 DWORD PTR _lSize$[ebp]
  00008	83 c1 18	 add	 ecx, 24			; 00000018H
  0000b	e8 00 00 00 00	 call	 ?SetSize@?$CArray@NN@@QAEXHH@Z ; CArray<double,double>::SetSize
  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?SetSize@CSTDataItem@@UAEXJ@Z ENDP			; CSTDataItem::SetSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp
;	COMDAT ?GetSize@CSTDataItem@@UAEJXZ
_TEXT	SEGMENT
?GetSize@CSTDataItem@@UAEJXZ PROC			; CSTDataItem::GetSize, COMDAT
; _this$ = ecx

; 66   : 	if(m_pDataItemConnected)

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	74 07		 je	 SHORT $LN2@GetSize

; 67   : 	{
; 68   : 		return m_pDataItemConnected->GetSize();

  00007	8b 02		 mov	 eax, DWORD PTR [edx]
  00009	8b ca		 mov	 ecx, edx
  0000b	ff 60 18	 jmp	 DWORD PTR [eax+24]
$LN2@GetSize:

; 69   : 	}
; 70   : 	return m_arrayData.GetSize(); 

  0000e	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]

; 71   : }

  00011	c3		 ret	 0
?GetSize@CSTDataItem@@UAEJXZ ENDP			; CSTDataItem::GetSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp
;	COMDAT ?GetDataItemName@CSTDataItem@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetDataItemName@CSTDataItem@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ PROC ; CSTDataItem::GetDataItemName, COMDAT
; _this$ = ecx

; 55   : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	56		 push	 esi

; 56   : 	if(m_pDataItemConnected)

  00006	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 10		 je	 SHORT $LN2@GetDataIte

; 57   : 	{
; 58   : 		return m_pDataItemConnected->GetDataItemName();

  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00012	56		 push	 esi
  00013	ff 52 14	 call	 DWORD PTR [edx+20]
  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi

; 61   : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
$LN2@GetDataIte:

; 59   : 	}
; 60   : 	return m_strName;

  0001d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00020	83 c0 08	 add	 eax, 8
  00023	50		 push	 eax
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  0002a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002d	5e		 pop	 esi

; 61   : }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?GetDataItemName@CSTDataItem@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ENDP ; CSTDataItem::GetDataItemName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.h
;	COMDAT ?GetAt@CSTDataItem@@UAENJ@Z
_TEXT	SEGMENT
_lIndex$ = 8						; size = 4
?GetAt@CSTDataItem@@UAENJ@Z PROC			; CSTDataItem::GetAt, COMDAT
; _this$ = ecx

; 55   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 56   : 		if(m_pDataItemConnected) 

  00005	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00008	85 c9		 test	 ecx, ecx
  0000a	74 08		 je	 SHORT $LN2@GetAt

; 57   : 		{
; 58   : 			return m_pDataItemConnected->GetAt(lIndex);

  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]

; 61   : 	}

  00011	5d		 pop	 ebp

; 57   : 		{
; 58   : 			return m_pDataItemConnected->GetAt(lIndex);

  00012	ff e0		 jmp	 eax
$LN2@GetAt:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 288  : 	if(nIndex >= 0 && nIndex < m_nSize)

  00014	8b 4d 08	 mov	 ecx, DWORD PTR _lIndex$[ebp]
  00017	85 c9		 test	 ecx, ecx
  00019	78 0f		 js	 SHORT $LN5@GetAt
  0001b	3b 48 20	 cmp	 ecx, DWORD PTR [eax+32]
  0001e	7d 0a		 jge	 SHORT $LN5@GetAt
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.h

; 60   : 		return m_arrayData.GetAt(lIndex);

  00020	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00023	dd 04 c8	 fld	 QWORD PTR [eax+ecx*8]

; 61   : 	}

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
$LN5@GetAt:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 290  : 	AfxThrowInvalidArgException();

  0002a	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN9@GetAt:
  0002f	cc		 int	 3
?GetAt@CSTDataItem@@UAENJ@Z ENDP			; CSTDataItem::GetAt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.h
;	COMDAT ?GetAt@CSTDataItem@@UAEHJPAN@Z
_TEXT	SEGMENT
_lIndex$ = 8						; size = 4
_pdValue$ = 12						; size = 4
?GetAt@CSTDataItem@@UAEHJPAN@Z PROC			; CSTDataItem::GetAt, COMDAT
; _this$ = ecx

; 46   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 47   : 		if(m_pDataItemConnected) 

  00005	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00008	85 c9		 test	 ecx, ecx
  0000a	74 06		 je	 SHORT $LN2@GetAt

; 48   : 		{
; 49   : 			return m_pDataItemConnected->GetAt(lIndex,pdValue);

  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]

; 53   : 	}

  0000e	5d		 pop	 ebp

; 48   : 		{
; 49   : 			return m_pDataItemConnected->GetAt(lIndex,pdValue);

  0000f	ff 60 10	 jmp	 DWORD PTR [eax+16]
$LN2@GetAt:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 288  : 	if(nIndex >= 0 && nIndex < m_nSize)

  00012	8b 4d 08	 mov	 ecx, DWORD PTR _lIndex$[ebp]
  00015	85 c9		 test	 ecx, ecx
  00017	78 1d		 js	 SHORT $LN5@GetAt
  00019	3b 48 20	 cmp	 ecx, DWORD PTR [eax+32]
  0001c	7d 18		 jge	 SHORT $LN5@GetAt
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.h

; 51   : 		*pdValue = m_arrayData.GetAt(lIndex);

  0001e	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00021	f2 0f 10 04 c8	 movsd	 xmm0, QWORD PTR [eax+ecx*8]
  00026	8b 45 0c	 mov	 eax, DWORD PTR _pdValue$[ebp]
  00029	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0

; 52   : 		return TRUE;

  0002d	b8 01 00 00 00	 mov	 eax, 1

; 53   : 	}

  00032	5d		 pop	 ebp
  00033	c2 08 00	 ret	 8
$LN5@GetAt:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 290  : 	AfxThrowInvalidArgException();

  00036	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN9@GetAt:
  0003b	cc		 int	 3
?GetAt@CSTDataItem@@UAEHJPAN@Z ENDP			; CSTDataItem::GetAt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.h
;	COMDAT ?SetAt@CSTDataItem@@UAEHJN@Z
_TEXT	SEGMENT
_lIndex$ = 8						; size = 4
_dValue$ = 12						; size = 8
?SetAt@CSTDataItem@@UAEHJN@Z PROC			; CSTDataItem::SetAt, COMDAT
; _this$ = ecx

; 20   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 21   : 		if(m_pDataItemConnected) return FALSE;

  00003	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00007	74 06		 je	 SHORT $LN2@SetAt
  00009	33 c0		 xor	 eax, eax

; 44   : 	}

  0000b	5d		 pop	 ebp
  0000c	c2 0c 00	 ret	 12			; 0000000cH
$LN2@SetAt:

; 22   : 		if(dValue==HUGE_VAL||dValue==-HUGE_VAL)

  0000f	f2 0f 10 45 0c	 movsd	 xmm0, QWORD PTR _dValue$[ebp]
  00014	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@7ff0000000000000
  0001c	8b 55 08	 mov	 edx, DWORD PTR _lIndex$[ebp]
  0001f	9f		 lahf
  00020	f6 c4 44	 test	 ah, 68			; 00000044H
  00023	7b 20		 jnp	 SHORT $LN5@SetAt
  00025	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@fff0000000000000
  0002d	9f		 lahf
  0002e	f6 c4 44	 test	 ah, 68			; 00000044H
  00031	7b 12		 jnp	 SHORT $LN5@SetAt

; 30   : 			{
; 31   : 				dValue = 0.;
; 32   : 			}
; 33   : 		}
; 34   : 		else
; 35   : 		{
; 36   : 			if(!m_bSetValue)

  00033	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  00037	75 29		 jne	 SHORT $LN8@SetAt

; 37   : 			{
; 38   : 				m_lFirstIndex = lIndex;

  00039	89 51 4c	 mov	 DWORD PTR [ecx+76], edx

; 39   : 				m_bSetValue = TRUE;

  0003c	c7 41 50 01 00
	00 00		 mov	 DWORD PTR [ecx+80], 1
  00043	eb 1d		 jmp	 SHORT $LN8@SetAt
$LN5@SetAt:

; 23   : 		{
; 24   : 			if(m_lFirstIndex == lIndex)

  00045	39 51 4c	 cmp	 DWORD PTR [ecx+76], edx
  00048	75 0f		 jne	 SHORT $LN6@SetAt

; 25   : 			{
; 26   : 				m_lFirstIndex = lIndex + 1;

  0004a	8d 42 01	 lea	 eax, DWORD PTR [edx+1]

; 27   : 				m_bSetValue = FALSE;

  0004d	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0
  00054	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 28   : 			}

  00057	eb 09		 jmp	 SHORT $LN8@SetAt
$LN6@SetAt:

; 29   : 			else if(m_bSetValue)

  00059	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  0005d	74 03		 je	 SHORT $LN8@SetAt
  0005f	0f 57 c0	 xorps	 xmm0, xmm0
$LN8@SetAt:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 304  : 	if(nIndex >= 0 && nIndex < m_nSize)

  00062	85 d2		 test	 edx, edx
  00064	78 16		 js	 SHORT $LN12@SetAt
  00066	3b 51 20	 cmp	 edx, DWORD PTR [ecx+32]
  00069	7d 11		 jge	 SHORT $LN12@SetAt

; 305  : 		m_pData[nIndex] = newElement;

  0006b	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0006e	f2 0f 11 04 d0	 movsd	 QWORD PTR [eax+edx*8], xmm0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.h

; 43   : 		return TRUE;

  00073	b8 01 00 00 00	 mov	 eax, 1

; 44   : 	}

  00078	5d		 pop	 ebp
  00079	c2 0c 00	 ret	 12			; 0000000cH
$LN12@SetAt:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 307  : 		AfxThrowInvalidArgException();

  0007c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN16@SetAt:
  00081	cc		 int	 3
?SetAt@CSTDataItem@@UAEHJN@Z ENDP			; CSTDataItem::SetAt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp
;	COMDAT ?Init@CSTDataItem@@UAEHPBDHNJPAVCIDataItem0001@@@Z
_TEXT	SEGMENT
_lpName$ = 8						; size = 4
_nType$ = 12						; size = 4
_dInitValue$ = 16					; size = 8
_lCntOfAllData$ = 24					; size = 4
_pDataItemForConnection$ = 28				; size = 4
?Init@CSTDataItem@@UAEHPBDHNJPAVCIDataItem0001@@@Z PROC	; CSTDataItem::Init, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi

; 33   : 	m_strName = lpName;

  00005	ff 75 08	 push	 DWORD PTR _lpName$[ebp]
  00008	8b f9		 mov	 edi, ecx
  0000a	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 34   : 	m_nType = nType;	

  00013	8b 45 0c	 mov	 eax, DWORD PTR _nType$[ebp]

; 35   : 	m_dInitValue = dInitValue;

  00016	f2 0f 10 45 10	 movsd	 xmm0, QWORD PTR _dInitValue$[ebp]
  0001b	89 47 0c	 mov	 DWORD PTR [edi+12], eax

; 36   : 	if(pDataItemForConnection)

  0001e	8b 45 1c	 mov	 eax, DWORD PTR _pDataItemForConnection$[ebp]
  00021	f2 0f 11 47 10	 movsd	 QWORD PTR [edi+16], xmm0
  00026	85 c0		 test	 eax, eax
  00028	74 3a		 je	 SHORT $LN2@Init

; 37   : 	{
; 38   : 		m_pDataItemConnected = pDataItemForConnection;

  0002a	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 381  : 		if (m_pData != NULL)

  0002d	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00030	85 c0		 test	 eax, eax
  00032	74 17		 je	 SHORT $LN25@Init

; 382  : 		{
; 383  : 			for( int i = 0; i < m_nSize; i++ )

  00034	83 7f 20 00	 cmp	 DWORD PTR [edi+32], 0
  00038	0f 4f c0	 cmovg	 eax, eax

; 384  : 				(m_pData + i)->~TYPE();
; 385  : 			delete[] (BYTE*)m_pData;

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00041	83 c4 04	 add	 esp, 4

; 386  : 			m_pData = NULL;

  00044	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0
$LN25@Init:

; 388  : 		m_nSize = m_nMaxSize = 0;

  0004b	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp

; 50   : }

  00052	b8 01 00 00 00	 mov	 eax, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 388  : 		m_nSize = m_nMaxSize = 0;

  00057	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0
  0005e	5f		 pop	 edi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp

; 50   : }

  0005f	5b		 pop	 ebx
  00060	5d		 pop	 ebp
  00061	c2 18 00	 ret	 24			; 00000018H
$LN2@Init:

; 39   : 		m_arrayData.SetSize(0);
; 40   : 	}
; 41   : 	else
; 42   : 	{
; 43   : 		m_pDataItemConnected = NULL;

  00064	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 381  : 		if (m_pData != NULL)

  0006b	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0006e	85 c0		 test	 eax, eax
  00070	74 17		 je	 SHORT $LN87@Init

; 382  : 		{
; 383  : 			for( int i = 0; i < m_nSize; i++ )

  00072	83 7f 20 00	 cmp	 DWORD PTR [edi+32], 0
  00076	0f 4f c0	 cmovg	 eax, eax

; 384  : 				(m_pData + i)->~TYPE();
; 385  : 			delete[] (BYTE*)m_pData;

  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0007f	83 c4 04	 add	 esp, 4

; 386  : 			m_pData = NULL;

  00082	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0
$LN87@Init:
  00089	56		 push	 esi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp

; 45   : 		m_arrayData.SetSize(lCntOfAllData);

  0008a	8b 75 18	 mov	 esi, DWORD PTR _lCntOfAllData$[ebp]
  0008d	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  00090	6a ff		 push	 -1
  00092	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 388  : 		m_nSize = m_nMaxSize = 0;

  00093	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0
  0009a	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp

; 45   : 		m_arrayData.SetSize(lCntOfAllData);

  000a1	e8 00 00 00 00	 call	 ?SetSize@?$CArray@NN@@QAEXHH@Z ; CArray<double,double>::SetSize

; 46   : 		m_bSetValue = FALSE;
; 47   : 		m_lFirstIndex = lCntOfAllData - 1;

  000a6	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  000a9	c7 47 50 00 00
	00 00		 mov	 DWORD PTR [edi+80], 0

; 48   : 	}	
; 49   : 	return TRUE;

  000b0	5e		 pop	 esi
  000b1	89 47 4c	 mov	 DWORD PTR [edi+76], eax

; 50   : }

  000b4	b8 01 00 00 00	 mov	 eax, 1
  000b9	5f		 pop	 edi
  000ba	5b		 pop	 ebx
  000bb	5d		 pop	 ebp
  000bc	c2 18 00	 ret	 24			; 00000018H
?Init@CSTDataItem@@UAEHPBDHNJPAVCIDataItem0001@@@Z ENDP	; CSTDataItem::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp
;	COMDAT ??1CSTDataItem@@UAE@XZ
_TEXT	SEGMENT
??1CSTDataItem@@UAE@XZ PROC				; CSTDataItem::~CSTDataItem, COMDAT
; _this$ = ecx

; 27   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 29   : }

  00003	8d 4e 48	 lea	 ecx, DWORD PTR [esi+72]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSTDataItem@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00012	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  00015	e8 00 00 00 00	 call	 ??1CMapStringToString@@UAE@XZ ; CMapStringToString::~CMapStringToString
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 358  : 	if (m_pData != NULL)

  0001a	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0001d	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], OFFSET ??_7?$CArray@NN@@6B@
  00024	85 c0		 test	 eax, eax
  00026	74 10		 je	 SHORT $LN7@CSTDataIte

; 359  : 	{
; 360  : 		for( int i = 0; i < m_nSize; i++ )

  00028	83 7e 20 00	 cmp	 DWORD PTR [esi+32], 0
  0002c	0f 4f c0	 cmovg	 eax, eax

; 361  : 			(m_pData + i)->~TYPE();
; 362  : 		delete[] (BYTE*)m_pData;

  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00035	83 c4 04	 add	 esp, 4
$LN7@CSTDataIte:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp

; 29   : }

  00038	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00041	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CIDataItem0001@@6B@
  00047	5e		 pop	 esi
  00048	c3		 ret	 0
??1CSTDataItem@@UAE@XZ ENDP				; CSTDataItem::~CSTDataItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp
;	COMDAT ??0CSTDataItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CSTDataItem@@QAE@XZ PROC				; CSTDataItem::CSTDataItem, COMDAT
; _this$ = ecx

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CSTDataItem@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0002c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00033	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSTDataItem@@6B@
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 348  : {

  0003f	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], OFFSET ??_7?$CArray@NN@@6B@

; 349  : 	m_pData = NULL;

  00046	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 350  : 	m_nSize = m_nMaxSize = m_nGrowBy = 0;

  0004d	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  00054	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
  0005b	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp

; 19   : {

  00062	6a 0a		 push	 10			; 0000000aH
  00064	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  00067	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0006b	e8 00 00 00 00	 call	 ??0CMapStringToString@@QAE@H@Z ; CMapStringToString::CMapStringToString
  00070	8d 4e 48	 lea	 ecx, DWORD PTR [esi+72]
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00079	0f 57 c0	 xorps	 xmm0, xmm0

; 20   : 	m_pDataItemConnected = NULL;

  0007c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 21   : 	m_dInitValue = 0;

  00083	f2 0f 11 46 10	 movsd	 QWORD PTR [esi+16], xmm0

; 22   : 	m_lFirstIndex = 0;
; 23   : 	m_bSetValue = FALSE;
; 24   : }

  00088	8b c6		 mov	 eax, esi
  0008a	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
  00091	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0
  00098	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a2	59		 pop	 ecx
  000a3	5e		 pop	 esi
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CSTDataItem@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CIDataItem0001@@UAE@XZ ; CIDataItem0001::~CIDataItem0001
__unwindfunclet$??0CSTDataItem@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 08	 add	 ecx, 8
  0000e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$??0CSTDataItem@@QAE@XZ$2:
  00014	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	83 c1 18	 add	 ecx, 24			; 00000018H
  0001a	e9 00 00 00 00	 jmp	 ??1?$CArray@NN@@UAE@XZ	; CArray<double,double>::~CArray<double,double>
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
__ehhandler$??0CSTDataItem@@QAE@XZ:
  00024	90		 npad	 1
  00025	90		 npad	 1
  00026	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CSTDataItem@@QAE@XZ
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CSTDataItem@@QAE@XZ ENDP				; CSTDataItem::CSTDataItem
; Function compile flags: /Ogtp
;	COMDAT ??_GCIDataItem0001@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCIDataItem0001@@UAEPAXI@Z PROC			; CIDataItem0001::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CIDataItem0001@@6B@
  00010	74 0b		 je	 SHORT $LN4@scalar
  00012	6a 04		 push	 4
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_GCIDataItem0001@@UAEPAXI@Z ENDP			; CIDataItem0001::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\IDataItem.h
;	COMDAT ??1CIDataItem0001@@UAE@XZ
_TEXT	SEGMENT
??1CIDataItem0001@@UAE@XZ PROC				; CIDataItem0001::~CIDataItem0001, COMDAT
; _this$ = ecx

; 16   : 	virtual ~CIDataItem0001() {};

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CIDataItem0001@@6B@
  00006	c3		 ret	 0
??1CIDataItem0001@@UAE@XZ ENDP				; CIDataItem0001::~CIDataItem0001
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z PROC		; CObject::Dump, COMDAT
; _this$ = ecx

; 122  : 	{ /* no dumping in release builds */ }

  00000	c2 04 00	 ret	 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z ENDP		; CObject::Dump
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT
?AssertValid@CObject@@UBEXXZ PROC			; CObject::AssertValid, COMDAT
; _this$ = ecx

; 120  : 	{ /* no asserts in release builds */ }

  00000	c2 00 00	 ret	 0
?AssertValid@CObject@@UBEXXZ ENDP			; CObject::AssertValid
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z PROC		; CObject::Serialize, COMDAT
; _this$ = ecx

; 106  : 	{ /* CObject does not serialize anything by default */ }

  00000	c2 04 00	 ret	 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z ENDP		; CObject::Serialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT
??1CObject@@UAE@XZ PROC					; CObject::~CObject, COMDAT
; _this$ = ecx

; 104  : 	{ }

  00000	c2 00 00	 ret	 0
??1CObject@@UAE@XZ ENDP					; CObject::~CObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Chart\Common_ST\DataItem.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
