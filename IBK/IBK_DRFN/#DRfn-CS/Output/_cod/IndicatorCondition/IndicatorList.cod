; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30145.0 

	TITLE	D:\git\src\IBK\IBK_DRFN\#DRfn-CS\_Obj\IndicatorCondition\IndicatorList.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1CObject@@UAE@XZ				; CObject::~CObject
PUBLIC	?Serialize@CObject@@UAEXAAVCArchive@@@Z		; CObject::Serialize
PUBLIC	?AssertValid@CObject@@UBEXXZ			; CObject::AssertValid
PUBLIC	?Dump@CObject@@UBEXAAVCDumpContext@@@Z		; CObject::Dump
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??0CIndicatorList@@QAE@PAUHWND__@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@11W4CHART_MODE@CChartInfo@@@Z ; CIndicatorList::CIndicatorList
PUBLIC	??1CIndicatorList@@UAE@XZ			; CIndicatorList::~CIndicatorList
PUBLIC	?LoadIndicatorInfo@CIndicatorList@@QAEHW4EIndicatorListType@@PBD@Z ; CIndicatorList::LoadIndicatorInfo
PUBLIC	?LoadIndicatorInfoFromString@CIndicatorList@@QAEHW4EIndicatorListType@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CIndicatorList::LoadIndicatorInfoFromString
PUBLIC	?SaveIndicatorInfo@CIndicatorList@@QAEHW4EIndicatorListType@@PBD@Z ; CIndicatorList::SaveIndicatorInfo
PUBLIC	?GetSaveIndicatorInfoString@CIndicatorList@@QAEHW4EIndicatorListType@@AAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CIndicatorList::GetSaveIndicatorInfoString
PUBLIC	?GetCfgFileVersion@CIndicatorList@@QBENW4EIndicatorListType@@@Z ; CIndicatorList::GetCfgFileVersion
PUBLIC	?GetIndicatorNameList@CIndicatorList@@QBEHW4EIndicatorListType@@W4EIndicatorInfoType@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z ; CIndicatorList::GetIndicatorNameList
PUBLIC	?GetGraphNameList@CIndicatorList@@QBEHW4EIndicatorListType@@W4EIndicatorInfoType@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z ; CIndicatorList::GetGraphNameList
PUBLIC	?GetAllIndicatorNameWithGroupName@CIndicatorList@@QAEPAVCIndicatorGroupDataList@@XZ ; CIndicatorList::GetAllIndicatorNameWithGroupName
PUBLIC	?GetGraphTypeAndStyleData@CIndicatorList@@QAEPBVCGraphTypeAndStyleData@@XZ ; CIndicatorList::GetGraphTypeAndStyleData
PUBLIC	?GetGraphIndicatorInfo@CIndicatorList@@QAEPAVCIndicatorInfo@@W4EIndicatorListType@@PBD1W4EIndicatorInfoGettingType@@@Z ; CIndicatorList::GetGraphIndicatorInfo
PUBLIC	?CreateGraphIndicatorInfo@CIndicatorList@@QAEPAVCIndicatorInfo@@PBD@Z ; CIndicatorList::CreateGraphIndicatorInfo
PUBLIC	?GetFirstIndicatorInfo@CIndicatorList@@QAEPAVCIndicatorInfo@@W4EIndicatorListType@@PBDPAPAU__POSITION@@@Z ; CIndicatorList::GetFirstIndicatorInfo
PUBLIC	?GetNextIndicatorInfo@CIndicatorList@@QAEXW4EIndicatorListType@@PBDPAPAU__POSITION@@AAPAVCIndicatorInfo@@@Z ; CIndicatorList::GetNextIndicatorInfo
PUBLIC	?GetDefaultIndicatorInfo@CIndicatorList@@QAEPAVCIndicatorInfo@@W4EIndicatorListType@@PBDW4EIndicatorInfoGettingType@@@Z ; CIndicatorList::GetDefaultIndicatorInfo
PUBLIC	?RemoveGraphIndicatorInfo@CIndicatorList@@QAEHPBD@Z ; CIndicatorList::RemoveGraphIndicatorInfo
PUBLIC	?RemoveAllIndicatorInfo@CIndicatorList@@QAEHW4EIndicatorListType@@@Z ; CIndicatorList::RemoveAllIndicatorInfo
PUBLIC	?RemoveAllIndicatorInfo@CIndicatorList@@QAEHW4EIndicatorListType@@PBD@Z ; CIndicatorList::RemoveAllIndicatorInfo
PUBLIC	??0CIndicatorList@@QAE@ABV0@@Z			; CIndicatorList::CIndicatorList
PUBLIC	??4CIndicatorList@@QAEAAV0@ABV0@@Z		; CIndicatorList::operator=
PUBLIC	??_GCIndicatorList@@UAEPAXI@Z			; CIndicatorList::`scalar deleting destructor'
PUBLIC	??_ECIndicatorList@@UAEPAXI@Z			; CIndicatorList::`vector deleting destructor'
PUBLIC	??_FCSignalData@@QAEXXZ				; CSignalData::`default constructor closure'
PUBLIC	??0CGraphData@@QAE@XZ				; CGraphData::CGraphData
PUBLIC	?SetIndicatorName@CGraphData@@MAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CGraphData::SetIndicatorName
PUBLIC	?SetGraphName@CGraphData@@MAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CGraphData::SetGraphName
PUBLIC	?GetGraphName@CGraphData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; CGraphData::GetGraphName
PUBLIC	?GetIndicatorName@CGraphData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; CGraphData::GetIndicatorName
PUBLIC	?GetGraphName2@CGraphData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; CGraphData::GetGraphName2
PUBLIC	?GetIndicatorName2@CGraphData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; CGraphData::GetIndicatorName2
PUBLIC	??1CGraphData@@QAE@XZ				; CGraphData::~CGraphData
PUBLIC	??0CGraphData@@QAE@ABV0@@Z			; CGraphData::CGraphData
PUBLIC	?GetHorizontalLine@CSubGraphDataBase@@QBEABV?$CArray@PAU_ST_HORZLINE@@PAU1@@@XZ ; CSubGraphDataBase::GetHorizontalLine
PUBLIC	?_Xlen@?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@ABEXXZ ; std::deque<CGraphTypeData *,std::allocator<CGraphTypeData *> >::_Xlen
PUBLIC	?_Growmap@?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@AAEXI@Z ; std::deque<CGraphTypeData *,std::allocator<CGraphTypeData *> >::_Growmap
PUBLIC	?_Tidy@?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@AAEXXZ ; std::deque<CGraphTypeData *,std::allocator<CGraphTypeData *> >::_Tidy
PUBLIC	??0CGraphTypeDataList@@QAE@ABV0@@Z		; CGraphTypeDataList::CGraphTypeDataList
PUBLIC	??_GCGraphTypeDataList@@UAEPAXI@Z		; CGraphTypeDataList::`scalar deleting destructor'
PUBLIC	??0CGraphTypeAndStyleData@@QAE@XZ		; CGraphTypeAndStyleData::CGraphTypeAndStyleData
PUBLIC	??0CGraphTypeAndStyleData@@QAE@ABV0@@Z		; CGraphTypeAndStyleData::CGraphTypeAndStyleData
PUBLIC	??4CGraphTypeAndStyleData@@QAEAAV0@ABV0@@Z	; CGraphTypeAndStyleData::operator=
PUBLIC	??_GCGraphTypeAndStyleData@@UAEPAXI@Z		; CGraphTypeAndStyleData::`scalar deleting destructor'
PUBLIC	??_ECGraphTypeAndStyleData@@UAEPAXI@Z		; CGraphTypeAndStyleData::`vector deleting destructor'
PUBLIC	??_FCIndicatorGroupData@@QAEXXZ			; CIndicatorGroupData::`default constructor closure'
PUBLIC	??0?$CList@PAVCIndicatorGroupData@@PAV1@@@QAE@H@Z ; CList<CIndicatorGroupData *,CIndicatorGroupData *>::CList<CIndicatorGroupData *,CIndicatorGroupData *>
PUBLIC	?AddTail@?$CList@PAVCIndicatorGroupData@@PAV1@@@QAEPAU__POSITION@@PAVCIndicatorGroupData@@@Z ; CList<CIndicatorGroupData *,CIndicatorGroupData *>::AddTail
PUBLIC	?RemoveAll@?$CList@PAVCIndicatorGroupData@@PAV1@@@QAEXXZ ; CList<CIndicatorGroupData *,CIndicatorGroupData *>::RemoveAll
PUBLIC	?NewNode@?$CList@PAVCIndicatorGroupData@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<CIndicatorGroupData *,CIndicatorGroupData *>::NewNode
PUBLIC	??1?$CList@PAVCIndicatorGroupData@@PAV1@@@UAE@XZ ; CList<CIndicatorGroupData *,CIndicatorGroupData *>::~CList<CIndicatorGroupData *,CIndicatorGroupData *>
PUBLIC	?Serialize@?$CList@PAVCIndicatorGroupData@@PAV1@@@UAEXAAVCArchive@@@Z ; CList<CIndicatorGroupData *,CIndicatorGroupData *>::Serialize
PUBLIC	??_G?$CList@PAVCIndicatorGroupData@@PAV1@@@UAEPAXI@Z ; CList<CIndicatorGroupData *,CIndicatorGroupData *>::`scalar deleting destructor'
PUBLIC	??0CIndicatorGroupDataList@@QAE@XZ		; CIndicatorGroupDataList::CIndicatorGroupDataList
PUBLIC	??_GCIndicatorGroupDataList@@UAEPAXI@Z		; CIndicatorGroupDataList::`scalar deleting destructor'
PUBLIC	??_ECIndicatorGroupDataList@@UAEPAXI@Z		; CIndicatorGroupDataList::`vector deleting destructor'
PUBLIC	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??$assign@V?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCGraphTypeData@@@std@@@std@@@std@@$0A@@?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@QAEXV?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCGraphTypeData@@@std@@@std@@@1@0@Z ; std::deque<CGraphTypeData *,std::allocator<CGraphTypeData *> >::assign<std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<CGraphTypeData *> > >,0>
PUBLIC	??$SerializeElements@PAVCIndicatorGroupData@@@@YGXAAVCArchive@@PAPAVCIndicatorGroupData@@H@Z ; SerializeElements<CIndicatorGroupData *>
PUBLIC	??1?$_Tidy_guard@V?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::deque<CGraphTypeData *,std::allocator<CGraphTypeData *> > >::~_Tidy_guard<std::deque<CGraphTypeData *,std::allocator<CGraphTypeData *> > >
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$uninitialized_copy@PAPAPAVCGraphTypeData@@PAPAPAV1@@std@@YAPAPAPAVCGraphTypeData@@QAPAPAV1@0PAPAPAV1@@Z ; std::uninitialized_copy<CGraphTypeData * * *,CGraphTypeData * * *>
PUBLIC	??$_Uninitialized_value_construct_n_unchecked1@PAPAPAVCGraphTypeData@@I@std@@YAPAPAPAVCGraphTypeData@@PAPAPAV1@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<CGraphTypeData * * *,unsigned int>
PUBLIC	??$_Zero_range@PAPAPAVCGraphTypeData@@@std@@YAPAPAPAVCGraphTypeData@@QAPAPAV1@0@Z ; std::_Zero_range<CGraphTypeData * * *>
PUBLIC	??$_Copy_memmove@PAPAPAVCGraphTypeData@@PAPAPAV1@@std@@YAPAPAPAVCGraphTypeData@@PAPAPAV1@00@Z ; std::_Copy_memmove<CGraphTypeData * * *,CGraphTypeData * * *>
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R3CObject@@8					; CObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObject@@8					; CObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CObject@@8			; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_7CIndicatorList@@6B@				; CIndicatorList::`vftable'
PUBLIC	??_7CGraphDataBase@@6B@				; CGraphDataBase::`vftable'
PUBLIC	??_7CGraphData@@6B@				; CGraphData::`vftable'
PUBLIC	??_7CGraphTypeDataList@@6B@			; CGraphTypeDataList::`vftable'
PUBLIC	??_7CGraphTypeAndStyleData@@6B@			; CGraphTypeAndStyleData::`vftable'
PUBLIC	??_7?$CList@PAVCIndicatorGroupData@@PAV1@@@6B@	; CList<CIndicatorGroupData *,CIndicatorGroupData *>::`vftable'
PUBLIC	??_7CIndicatorGroupDataList@@6B@		; CIndicatorGroupDataList::`vftable'
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CGraphTypeAndStyleData@@6B@		; CGraphTypeAndStyleData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGraphTypeAndStyleData@@@8		; CGraphTypeAndStyleData `RTTI Type Descriptor'
PUBLIC	??_R3CGraphTypeAndStyleData@@8			; CGraphTypeAndStyleData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphTypeAndStyleData@@8			; CGraphTypeAndStyleData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphTypeAndStyleData@@8		; CGraphTypeAndStyleData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CIndicatorGroupDataList@@6B@		; CIndicatorGroupDataList::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCIndicatorGroupDataList@@@8		; CIndicatorGroupDataList `RTTI Type Descriptor'
PUBLIC	??_R3CIndicatorGroupDataList@@8			; CIndicatorGroupDataList::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CIndicatorGroupDataList@@8			; CIndicatorGroupDataList::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CIndicatorGroupDataList@@8	; CIndicatorGroupDataList::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CIndicatorList@@6B@			; CIndicatorList::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCIndicatorList@@@8			; CIndicatorList `RTTI Type Descriptor'
PUBLIC	??_R3CIndicatorList@@8				; CIndicatorList::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CIndicatorList@@8				; CIndicatorList::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CIndicatorList@@8			; CIndicatorList::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CGraphDataBase@@6B@			; CGraphDataBase::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGraphDataBase@@@8			; CGraphDataBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphDataBase@@8				; CGraphDataBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphDataBase@@8				; CGraphDataBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphDataBase@@8			; CGraphDataBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CGraphData@@6B@				; CGraphData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGraphData@@@8				; CGraphData `RTTI Type Descriptor'
PUBLIC	??_R3CGraphData@@8				; CGraphData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphData@@8				; CGraphData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphData@@8			; CGraphData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CGraphTypeDataList@@6B@			; CGraphTypeDataList::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGraphTypeDataList@@@8			; CGraphTypeDataList `RTTI Type Descriptor'
PUBLIC	??_R3CGraphTypeDataList@@8			; CGraphTypeDataList::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphTypeDataList@@8			; CGraphTypeDataList::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphTypeDataList@@8		; CGraphTypeDataList::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CList@PAVCIndicatorGroupData@@PAV1@@@6B@	; CList<CIndicatorGroupData *,CIndicatorGroupData *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CList@PAVCIndicatorGroupData@@PAV1@@@@8 ; CList<CIndicatorGroupData *,CIndicatorGroupData *> `RTTI Type Descriptor'
PUBLIC	??_R3?$CList@PAVCIndicatorGroupData@@PAV1@@@8	; CList<CIndicatorGroupData *,CIndicatorGroupData *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CList@PAVCIndicatorGroupData@@PAV1@@@8	; CList<CIndicatorGroupData *,CIndicatorGroupData *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CList@PAVCIndicatorGroupData@@PAV1@@@8 ; CList<CIndicatorGroupData *,CIndicatorGroupData *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	?__global_delete@@YAXPAXI@Z:PROC		; __global_delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	___std_terminate:PROC
EXTRN	__imp___invalid_parameter_noinfo_noreturn:PROC
EXTRN	?AfxThrowInvalidArgException@@YGXXZ:PROC	; AfxThrowInvalidArgException
EXTRN	?AfxThrowArchiveException@@YGXHPBD@Z:PROC	; AfxThrowArchiveException
EXTRN	?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ:PROC ; CObject::GetRuntimeClass
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z:PROC
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z:PROC
EXTRN	?Read@CArchive@@QAEIPAXI@Z:PROC			; CArchive::Read
EXTRN	?Write@CArchive@@QAEXPBXI@Z:PROC		; CArchive::Write
EXTRN	?ReadCount@CArchive@@QAEKXZ:PROC		; CArchive::ReadCount
EXTRN	?WriteCount@CArchive@@QAEXK@Z:PROC		; CArchive::WriteCount
EXTRN	?Create@CPlex@@SGPAU1@AAPAU1@II@Z:PROC		; CPlex::Create
EXTRN	?FreeDataChain@CPlex@@QAEXXZ:PROC		; CPlex::FreeDataChain
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?LoadMetaTable@IMetaTable@@QAEXXZ:PROC		; IMetaTable::LoadMetaTable
EXTRN	??0CGraphDataDrawingData@@QAE@XZ:PROC		; CGraphDataDrawingData::CGraphDataDrawingData
EXTRN	??0CGraphDataDrawingData@@QAE@ABV0@@Z:PROC	; CGraphDataDrawingData::CGraphDataDrawingData
EXTRN	??0CSignalData@@QAE@_N0@Z:PROC			; CSignalData::CSignalData
EXTRN	??0CSignalData@@QAE@ABV0@@Z:PROC		; CSignalData::CSignalData
EXTRN	??1CSignalData@@QAE@XZ:PROC			; CSignalData::~CSignalData
EXTRN	??1CGraphTypeDataList@@UAE@XZ:PROC		; CGraphTypeDataList::~CGraphTypeDataList
EXTRN	??_ECGraphTypeDataList@@UAEPAXI@Z:PROC		; CGraphTypeDataList::`vector deleting destructor'
EXTRN	??1CGraphTypeAndStyleData@@UAE@XZ:PROC		; CGraphTypeAndStyleData::~CGraphTypeAndStyleData
EXTRN	??0CIndicatorGroupData@@QAE@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z:PROC ; CIndicatorGroupData::CIndicatorGroupData
EXTRN	??1CIndicatorGroupDataList@@UAE@XZ:PROC		; CIndicatorGroupDataList::~CIndicatorGroupDataList
EXTRN	??_E?$CList@PAVCIndicatorGroupData@@PAV1@@@UAEPAXI@Z:PROC ; CList<CIndicatorGroupData *,CIndicatorGroupData *>::`vector deleting destructor'
EXTRN	??0CIndicatorListImplementation@@QAE@PAUHWND__@@PAVCIndicatorList@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@22W4CHART_MODE@CChartInfo@@@Z:PROC ; CIndicatorListImplementation::CIndicatorListImplementation
EXTRN	?LoadIndicatorInfo@CIndicatorListImplementation@@QAEHW4EIndicatorListType@@PBD@Z:PROC ; CIndicatorListImplementation::LoadIndicatorInfo
EXTRN	?LoadIndicatorInfoFromString@CIndicatorListImplementation@@QAEHW4EIndicatorListType@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z:PROC ; CIndicatorListImplementation::LoadIndicatorInfoFromString
EXTRN	?SaveIndicatorInfo@CIndicatorListImplementation@@QAEHW4EIndicatorListType@@PBD@Z:PROC ; CIndicatorListImplementation::SaveIndicatorInfo
EXTRN	?GetSaveIndicatorInfoString@CIndicatorListImplementation@@QAEHW4EIndicatorListType@@AAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z:PROC ; CIndicatorListImplementation::GetSaveIndicatorInfoString
EXTRN	?GetCfgFileVersion@CIndicatorListImplementation@@QBENW4EIndicatorListType@@@Z:PROC ; CIndicatorListImplementation::GetCfgFileVersion
EXTRN	?GetIndicatorNameList@CIndicatorListImplementation@@QBEHW4EIndicatorListType@@W4EIndicatorInfoType@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z:PROC ; CIndicatorListImplementation::GetIndicatorNameList
EXTRN	?GetGraphNameList@CIndicatorListImplementation@@QBEHW4EIndicatorListType@@W4EIndicatorInfoType@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z:PROC ; CIndicatorListImplementation::GetGraphNameList
EXTRN	?GetAllIndicatorNameWithGroupName@CIndicatorListImplementation@@QAEPAVCIndicatorGroupDataList@@XZ:PROC ; CIndicatorListImplementation::GetAllIndicatorNameWithGroupName
EXTRN	?GetGraphTypeAndStyleData@CIndicatorListImplementation@@QAEPBVCGraphTypeAndStyleData@@XZ:PROC ; CIndicatorListImplementation::GetGraphTypeAndStyleData
EXTRN	?GetGraphIndicatorInfo@CIndicatorListImplementation@@QAEPAVCIndicatorInfo@@W4EIndicatorListType@@PBD1W4EIndicatorInfoGettingType@@@Z:PROC ; CIndicatorListImplementation::GetGraphIndicatorInfo
EXTRN	?CreateGraphIndicatorInfo@CIndicatorListImplementation@@QAEPAVCIndicatorInfo@@PBD@Z:PROC ; CIndicatorListImplementation::CreateGraphIndicatorInfo
EXTRN	?GetFirstIndicatorInfo@CIndicatorListImplementation@@QAEPAVCIndicatorInfo@@W4EIndicatorListType@@PBDPAPAU__POSITION@@@Z:PROC ; CIndicatorListImplementation::GetFirstIndicatorInfo
EXTRN	?GetNextIndicatorInfo@CIndicatorListImplementation@@QAEXW4EIndicatorListType@@PBDPAPAU__POSITION@@AAPAVCIndicatorInfo@@@Z:PROC ; CIndicatorListImplementation::GetNextIndicatorInfo
EXTRN	?GetDefaultIndicatorInfo@CIndicatorListImplementation@@QAEPAVCIndicatorInfo@@W4EIndicatorListType@@PBDW4EIndicatorInfoGettingType@@@Z:PROC ; CIndicatorListImplementation::GetDefaultIndicatorInfo
EXTRN	?RemoveGraphIndicatorInfo@CIndicatorListImplementation@@QAEHPBD@Z:PROC ; CIndicatorListImplementation::RemoveGraphIndicatorInfo
EXTRN	?RemoveAllIndicatorInfo@CIndicatorListImplementation@@QAEHW4EIndicatorListType@@@Z:PROC ; CIndicatorListImplementation::RemoveAllIndicatorInfo
EXTRN	?RemoveAllIndicatorInfo@CIndicatorListImplementation@@QAEHW4EIndicatorListType@@PBD@Z:PROC ; CIndicatorListImplementation::RemoveAllIndicatorInfo
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?g_iMetaTable@@3VIMetaTable@@A:BYTE		; g_iMetaTable
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ??_R1A@?0A@EA@?$CList@PAVCIndicatorGroupData@@PAV1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CList@PAVCIndicatorGroupData@@PAV1@@@8 DD FLAT:??_R0?AV?$CList@PAVCIndicatorGroupData@@PAV1@@@@8 ; CList<CIndicatorGroupData *,CIndicatorGroupData *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CList@PAVCIndicatorGroupData@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CList@PAVCIndicatorGroupData@@PAV1@@@8
rdata$r	SEGMENT
??_R2?$CList@PAVCIndicatorGroupData@@PAV1@@@8 DD FLAT:??_R1A@?0A@EA@?$CList@PAVCIndicatorGroupData@@PAV1@@@8 ; CList<CIndicatorGroupData *,CIndicatorGroupData *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CList@PAVCIndicatorGroupData@@PAV1@@@8
rdata$r	SEGMENT
??_R3?$CList@PAVCIndicatorGroupData@@PAV1@@@8 DD 00H	; CList<CIndicatorGroupData *,CIndicatorGroupData *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CList@PAVCIndicatorGroupData@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CList@PAVCIndicatorGroupData@@PAV1@@@@8
data$rs	SEGMENT
??_R0?AV?$CList@PAVCIndicatorGroupData@@PAV1@@@@8 DD FLAT:??_7type_info@@6B@ ; CList<CIndicatorGroupData *,CIndicatorGroupData *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CList@PAVCIndicatorGroupData@@PAV1@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CList@PAVCIndicatorGroupData@@PAV1@@@6B@
rdata$r	SEGMENT
??_R4?$CList@PAVCIndicatorGroupData@@PAV1@@@6B@ DD 00H	; CList<CIndicatorGroupData *,CIndicatorGroupData *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CList@PAVCIndicatorGroupData@@PAV1@@@@8
	DD	FLAT:??_R3?$CList@PAVCIndicatorGroupData@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphTypeDataList@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphTypeDataList@@8 DD FLAT:??_R0?AVCGraphTypeDataList@@@8 ; CGraphTypeDataList::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphTypeDataList@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphTypeDataList@@8
rdata$r	SEGMENT
??_R2CGraphTypeDataList@@8 DD FLAT:??_R1A@?0A@EA@CGraphTypeDataList@@8 ; CGraphTypeDataList::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphTypeDataList@@8
rdata$r	SEGMENT
??_R3CGraphTypeDataList@@8 DD 00H			; CGraphTypeDataList::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphTypeDataList@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphTypeDataList@@@8
data$rs	SEGMENT
??_R0?AVCGraphTypeDataList@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphTypeDataList `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphTypeDataList@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CGraphTypeDataList@@6B@
rdata$r	SEGMENT
??_R4CGraphTypeDataList@@6B@ DD 00H			; CGraphTypeDataList::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGraphTypeDataList@@@8
	DD	FLAT:??_R3CGraphTypeDataList@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphData@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphData@@8 DD FLAT:??_R0?AVCGraphData@@@8 ; CGraphData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphData@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphData@@8
rdata$r	SEGMENT
??_R2CGraphData@@8 DD FLAT:??_R1A@?0A@EA@CGraphData@@8	; CGraphData::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphDataBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphData@@8
rdata$r	SEGMENT
??_R3CGraphData@@8 DD 00H				; CGraphData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphData@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphData@@@8
data$rs	SEGMENT
??_R0?AVCGraphData@@@8 DD FLAT:??_7type_info@@6B@	; CGraphData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphData@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CGraphData@@6B@
rdata$r	SEGMENT
??_R4CGraphData@@6B@ DD 00H				; CGraphData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGraphData@@@8
	DD	FLAT:??_R3CGraphData@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphDataBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphDataBase@@8 DD FLAT:??_R0?AVCGraphDataBase@@@8 ; CGraphDataBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphDataBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphDataBase@@8
rdata$r	SEGMENT
??_R2CGraphDataBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphDataBase@@8 ; CGraphDataBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphDataBase@@8
rdata$r	SEGMENT
??_R3CGraphDataBase@@8 DD 00H				; CGraphDataBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphDataBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphDataBase@@@8
data$rs	SEGMENT
??_R0?AVCGraphDataBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphDataBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphDataBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CGraphDataBase@@6B@
rdata$r	SEGMENT
??_R4CGraphDataBase@@6B@ DD 00H				; CGraphDataBase::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGraphDataBase@@@8
	DD	FLAT:??_R3CGraphDataBase@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CIndicatorList@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CIndicatorList@@8 DD FLAT:??_R0?AVCIndicatorList@@@8 ; CIndicatorList::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CIndicatorList@@8
rdata$r	ENDS
;	COMDAT ??_R2CIndicatorList@@8
rdata$r	SEGMENT
??_R2CIndicatorList@@8 DD FLAT:??_R1A@?0A@EA@CIndicatorList@@8 ; CIndicatorList::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CIndicatorList@@8
rdata$r	SEGMENT
??_R3CIndicatorList@@8 DD 00H				; CIndicatorList::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CIndicatorList@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCIndicatorList@@@8
data$rs	SEGMENT
??_R0?AVCIndicatorList@@@8 DD FLAT:??_7type_info@@6B@	; CIndicatorList `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCIndicatorList@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CIndicatorList@@6B@
rdata$r	SEGMENT
??_R4CIndicatorList@@6B@ DD 00H				; CIndicatorList::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCIndicatorList@@@8
	DD	FLAT:??_R3CIndicatorList@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CIndicatorGroupDataList@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CIndicatorGroupDataList@@8 DD FLAT:??_R0?AVCIndicatorGroupDataList@@@8 ; CIndicatorGroupDataList::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CIndicatorGroupDataList@@8
rdata$r	ENDS
;	COMDAT ??_R2CIndicatorGroupDataList@@8
rdata$r	SEGMENT
??_R2CIndicatorGroupDataList@@8 DD FLAT:??_R1A@?0A@EA@CIndicatorGroupDataList@@8 ; CIndicatorGroupDataList::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CIndicatorGroupDataList@@8
rdata$r	SEGMENT
??_R3CIndicatorGroupDataList@@8 DD 00H			; CIndicatorGroupDataList::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CIndicatorGroupDataList@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCIndicatorGroupDataList@@@8
data$rs	SEGMENT
??_R0?AVCIndicatorGroupDataList@@@8 DD FLAT:??_7type_info@@6B@ ; CIndicatorGroupDataList `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCIndicatorGroupDataList@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CIndicatorGroupDataList@@6B@
rdata$r	SEGMENT
??_R4CIndicatorGroupDataList@@6B@ DD 00H		; CIndicatorGroupDataList::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCIndicatorGroupDataList@@@8
	DD	FLAT:??_R3CIndicatorGroupDataList@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphTypeAndStyleData@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphTypeAndStyleData@@8 DD FLAT:??_R0?AVCGraphTypeAndStyleData@@@8 ; CGraphTypeAndStyleData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphTypeAndStyleData@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphTypeAndStyleData@@8
rdata$r	SEGMENT
??_R2CGraphTypeAndStyleData@@8 DD FLAT:??_R1A@?0A@EA@CGraphTypeAndStyleData@@8 ; CGraphTypeAndStyleData::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphTypeAndStyleData@@8
rdata$r	SEGMENT
??_R3CGraphTypeAndStyleData@@8 DD 00H			; CGraphTypeAndStyleData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphTypeAndStyleData@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphTypeAndStyleData@@@8
data$rs	SEGMENT
??_R0?AVCGraphTypeAndStyleData@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphTypeAndStyleData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphTypeAndStyleData@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CGraphTypeAndStyleData@@6B@
rdata$r	SEGMENT
??_R4CGraphTypeAndStyleData@@6B@ DD 00H			; CGraphTypeAndStyleData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGraphTypeAndStyleData@@@8
	DD	FLAT:??_R3CGraphTypeAndStyleData@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@ DB 'deque<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CIndicatorGroupDataList@@6B@
CONST	SEGMENT
??_7CIndicatorGroupDataList@@6B@ DD FLAT:??_R4CIndicatorGroupDataList@@6B@ ; CIndicatorGroupDataList::`vftable'
	DD	FLAT:??_ECIndicatorGroupDataList@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CList@PAVCIndicatorGroupData@@PAV1@@@6B@
CONST	SEGMENT
??_7?$CList@PAVCIndicatorGroupData@@PAV1@@@6B@ DD FLAT:??_R4?$CList@PAVCIndicatorGroupData@@PAV1@@@6B@ ; CList<CIndicatorGroupData *,CIndicatorGroupData *>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CList@PAVCIndicatorGroupData@@PAV1@@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CList@PAVCIndicatorGroupData@@PAV1@@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_7CGraphTypeAndStyleData@@6B@
CONST	SEGMENT
??_7CGraphTypeAndStyleData@@6B@ DD FLAT:??_R4CGraphTypeAndStyleData@@6B@ ; CGraphTypeAndStyleData::`vftable'
	DD	FLAT:??_ECGraphTypeAndStyleData@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CGraphTypeDataList@@6B@
CONST	SEGMENT
??_7CGraphTypeDataList@@6B@ DD FLAT:??_R4CGraphTypeDataList@@6B@ ; CGraphTypeDataList::`vftable'
	DD	FLAT:??_ECGraphTypeDataList@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CGraphData@@6B@
CONST	SEGMENT
??_7CGraphData@@6B@ DD FLAT:??_R4CGraphData@@6B@	; CGraphData::`vftable'
	DD	FLAT:?SetIndicatorName@CGraphData@@MAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
	DD	FLAT:?SetGraphName@CGraphData@@MAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
CONST	ENDS
;	COMDAT ??_7CGraphDataBase@@6B@
CONST	SEGMENT
??_7CGraphDataBase@@6B@ DD FLAT:??_R4CGraphDataBase@@6B@ ; CGraphDataBase::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7CIndicatorList@@6B@
CONST	SEGMENT
??_7CIndicatorList@@6B@ DD FLAT:??_R4CIndicatorList@@6B@ ; CIndicatorList::`vftable'
	DD	FLAT:??_ECIndicatorList@@UAEPAXI@Z
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CObject@@8
rdata$r	SEGMENT
??_R2CObject@@8 DD FLAT:??_R1A@?0A@EA@CObject@@8	; CObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObject@@8
rdata$r	SEGMENT
??_R3CObject@@8 DD 00H					; CObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
data$rs	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
data$rs	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct@V?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCGraphTypeData@@@std@@@std@@@std@@@?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@AAEXV?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCGraphTypeData@@@std@@@std@@@1@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@V?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCGraphTypeData@@@std@@@std@@@std@@@?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@AAEXV?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCGraphTypeData@@@std@@@std@@@1@0@Z$0
__ehfuncinfo$??$_Construct@V?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCGraphTypeData@@@std@@@std@@@std@@@?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@AAEXV?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCGraphTypeData@@@std@@@std@@@1@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@V?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCGraphTypeData@@@std@@@std@@@std@@@?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@AAEXV?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCGraphTypeData@@@std@@@std@@@1@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ECIndicatorGroupDataList@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$CList@PAVCIndicatorGroupData@@PAV1@@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_G?$CList@PAVCIndicatorGroupData@@PAV1@@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$CList@PAVCIndicatorGroupData@@PAV1@@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CList@PAVCIndicatorGroupData@@PAV1@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_FCIndicatorGroupData@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_FCIndicatorGroupData@@QAEXXZ$0
__ehfuncinfo$??_FCIndicatorGroupData@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_FCIndicatorGroupData@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ECGraphTypeAndStyleData@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CGraphTypeAndStyleData@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CGraphTypeAndStyleData@@QAE@ABV0@@Z$0
__ehfuncinfo$??0CGraphTypeAndStyleData@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CGraphTypeAndStyleData@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CGraphTypeAndStyleData@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CGraphTypeAndStyleData@@QAE@XZ$0
__ehfuncinfo$??0CGraphTypeAndStyleData@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CGraphTypeAndStyleData@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CGraphTypeDataList@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CGraphTypeDataList@@QAE@ABV0@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??0CGraphTypeDataList@@QAE@ABV0@@Z$2
__ehfuncinfo$??0CGraphTypeDataList@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CGraphTypeDataList@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CGraphData@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CGraphData@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CGraphData@@QAE@ABV0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CGraphData@@QAE@ABV0@@Z$2
__ehfuncinfo$??0CGraphData@@QAE@ABV0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CGraphData@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CGraphData@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CGraphData@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CGraphData@@QAE@XZ$1
__ehfuncinfo$??0CGraphData@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CGraphData@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ECIndicatorList@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CIndicatorList@@QAE@PAUHWND__@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@11W4CHART_MODE@CChartInfo@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CIndicatorList@@QAE@PAUHWND__@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@11W4CHART_MODE@CChartInfo@@@Z$0
__ehfuncinfo$??0CIndicatorList@@QAE@PAUHWND__@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@11W4CHART_MODE@CChartInfo@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CIndicatorList@@QAE@PAUHWND__@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@11W4CHART_MODE@CChartInfo@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAPAVCGraphTypeData@@PAPAPAV1@@std@@YAPAPAPAVCGraphTypeData@@PAPAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAPAVCGraphTypeData@@PAPAPAV1@@std@@YAPAPAPAVCGraphTypeData@@PAPAPAV1@00@Z PROC ; std::_Copy_memmove<CGraphTypeData * * *,CGraphTypeData * * *>, COMDAT

; 4058 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4059 :     auto _FirstPtr              = _To_address(_First);
; 4060 :     auto _LastPtr               = _To_address(_Last);
; 4061 :     auto _DestPtr               = _To_address(_Dest);
; 4062 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4063 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4064 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4067 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4069 :     } else {
; 4070 :         return _Dest + (_LastPtr - _FirstPtr);
; 4071 :     }
; 4072 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAPAVCGraphTypeData@@PAPAPAV1@@std@@YAPAPAPAVCGraphTypeData@@PAPAPAV1@00@Z ENDP ; std::_Copy_memmove<CGraphTypeData * * *,CGraphTypeData * * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Zero_range@PAPAPAVCGraphTypeData@@@std@@YAPAPAPAVCGraphTypeData@@QAPAPAV1@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Zero_range@PAPAPAVCGraphTypeData@@@std@@YAPAPAPAVCGraphTypeData@@QAPAPAV1@0@Z PROC ; std::_Zero_range<CGraphTypeData * * *>, COMDAT

; 1789 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1790 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));
; 1791 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));
; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	6a 00		 push	 0
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _memset

; 1793 :     return _Last;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1794 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Zero_range@PAPAPAVCGraphTypeData@@@std@@YAPAPAPAVCGraphTypeData@@QAPAPAV1@0@Z ENDP ; std::_Zero_range<CGraphTypeData * * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n_unchecked1@PAPAPAVCGraphTypeData@@I@std@@YAPAPAPAVCGraphTypeData@@PAPAPAV1@I@Z
_TEXT	SEGMENT
__UFirst$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Uninitialized_value_construct_n_unchecked1@PAPAPAVCGraphTypeData@@I@std@@YAPAPAPAVCGraphTypeData@@PAPAPAV1@I@Z PROC ; std::_Uninitialized_value_construct_n_unchecked1<CGraphTypeData * * *,unsigned int>, COMDAT

; 1821 : _NoThrowFwdIt _Uninitialized_value_construct_n_unchecked1(_NoThrowFwdIt _UFirst, _Diff _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1822 :     // value-initialize all elements in [_UFirst, _UFirst + _Count_raw)
; 1823 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 1824 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 1825 :         return _Zero_range(_UFirst, _UFirst + _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	56		 push	 esi

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00007	8b 75 08	 mov	 esi, DWORD PTR __UFirst$[ebp]

; 1821 : _NoThrowFwdIt _Uninitialized_value_construct_n_unchecked1(_NoThrowFwdIt _UFirst, _Diff _Count) {

  0000a	57		 push	 edi

; 1822 :     // value-initialize all elements in [_UFirst, _UFirst + _Count_raw)
; 1823 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 1824 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 1825 :         return _Zero_range(_UFirst, _UFirst + _Count);

  0000b	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00012	57		 push	 edi
  00013	6a 00		 push	 0
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 _memset
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1822 :     // value-initialize all elements in [_UFirst, _UFirst + _Count_raw)
; 1823 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 1824 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 1825 :         return _Zero_range(_UFirst, _UFirst + _Count);

  0001e	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 1826 :     } else {
; 1827 :         _Uninitialized_backout<_NoThrowFwdIt> _Backout{_UFirst};
; 1828 :         for (; 0 < _Count; --_Count) {
; 1829 :             _Backout._Emplace_back();
; 1830 :         }
; 1831 : 
; 1832 :         return _Backout._Release();
; 1833 :     }
; 1834 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_value_construct_n_unchecked1@PAPAPAVCGraphTypeData@@I@std@@YAPAPAPAVCGraphTypeData@@PAPAPAV1@I@Z ENDP ; std::_Uninitialized_value_construct_n_unchecked1<CGraphTypeData * * *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$uninitialized_copy@PAPAPAVCGraphTypeData@@PAPAPAV1@@std@@YAPAPAPAVCGraphTypeData@@QAPAPAV1@0PAPAPAV1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$uninitialized_copy@PAPAPAVCGraphTypeData@@PAPAPAV1@@std@@YAPAPAPAVCGraphTypeData@@QAPAPAV1@0PAPAPAV1@@Z PROC ; std::uninitialized_copy<CGraphTypeData * * *,CGraphTypeData * * *>, COMDAT

; 1687 : _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1687 : _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

  00006	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1687 : _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

  0000a	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4067 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1694 :     return _Dest;

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 1695 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$uninitialized_copy@PAPAPAVCGraphTypeData@@PAPAPAV1@@std@@YAPAPAPAVCGraphTypeData@@QAPAPAV1@0PAPAPAV1@@Z ENDP ; std::uninitialized_copy<CGraphTypeData * * *,CGraphTypeData * * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 79   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 79   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Tidy_guard@V?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tidy_guard@V?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tidy_guard<std::deque<CGraphTypeData *,std::allocator<CGraphTypeData *> > >::~_Tidy_guard<std::deque<CGraphTypeData *,std::allocator<CGraphTypeData *> > >, COMDAT
; _this$ = ecx

; 34   :         if (_Target) {

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	0f 85 00 00 00
	00		 jne	 ?_Tidy@?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@AAEXXZ ; std::deque<CGraphTypeData *,std::allocator<CGraphTypeData *> >::_Tidy

; 35   :             _Target->_Tidy();
; 36   :         }
; 37   :     }

  0000a	c3		 ret	 0
??1?$_Tidy_guard@V?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tidy_guard<std::deque<CGraphTypeData *,std::allocator<CGraphTypeData *> > >::~_Tidy_guard<std::deque<CGraphTypeData *,std::allocator<CGraphTypeData *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@PAVCIndicatorGroupData@@@@YGXAAVCArchive@@PAPAVCIndicatorGroupData@@H@Z
_TEXT	SEGMENT
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@PAVCIndicatorGroupData@@@@YGXAAVCArchive@@PAPAVCIndicatorGroupData@@H@Z PROC ; SerializeElements<CIndicatorGroupData *>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR _nCount$[ebp]
  0000b	57		 push	 edi
  0000c	85 f6		 test	 esi, esi
  0000e	74 08		 je	 SHORT $LN2@SerializeE
  00010	85 c9		 test	 ecx, ecx
  00012	0f 84 89 00 00
	00		 je	 $LN34@SerializeE
$LN2@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00018	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  0001b	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0001e	f7 d0		 not	 eax
  00020	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00022	74 3c		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;
; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )

  00024	85 f6		 test	 esi, esi
  00026	74 31		 je	 SHORT $LN8@SerializeE
  00028	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL5@SerializeE:

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00030	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00035	3b f3		 cmp	 esi, ebx
  00037	0f 42 de	 cmovb	 ebx, esi

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0003a	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
  00041	57		 push	 edi
  00042	51		 push	 ecx
  00043	8b ca		 mov	 ecx, edx
  00045	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;
; 87   : 			pData += nElementsToWrite;

  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  00050	03 cf		 add	 ecx, edi
  00052	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  00055	2b f3		 sub	 esi, ebx
  00057	75 d7		 jne	 SHORT $LL5@SerializeE
$LN8@SerializeE:
  00059	5f		 pop	 edi

; 105  : 		}
; 106  : 	}
; 107  : }

  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	5d		 pop	 ebp
  0005d	c2 0c 00	 ret	 12			; 0000000cH
$LN10@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  00060	85 f6		 test	 esi, esi
  00062	74 f5		 je	 SHORT $LN8@SerializeE
$LL7@SerializeE:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00064	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00069	3b f7		 cmp	 esi, edi
  0006b	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0006e	8d 1c bd 00 00
	00 00		 lea	 ebx, DWORD PTR [edi*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00075	53		 push	 ebx
  00076	51		 push	 ecx
  00077	8b ca		 mov	 ecx, edx
  00079	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0007e	3b c3		 cmp	 eax, ebx
  00080	75 16		 jne	 SHORT $LN23@SerializeE
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  00082	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00085	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;
; 104  : 			pData += nElementsToRead;

  00088	03 cb		 add	 ecx, ebx
  0008a	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  0008d	2b f7		 sub	 esi, edi
  0008f	75 d3		 jne	 SHORT $LL7@SerializeE

; 105  : 		}
; 106  : 	}
; 107  : }

  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	5d		 pop	 ebp
  00095	c2 0c 00	 ret	 12			; 0000000cH
$LN23@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 402  : 		AfxThrowArchiveException(CArchiveException::endOfFile);

  00098	6a 00		 push	 0
  0009a	6a 03		 push	 3
  0009c	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN34@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  000a1	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN32@SerializeE:
  000a6	cc		 int	 3
??$SerializeElements@PAVCIndicatorGroupData@@@@YGXAAVCArchive@@PAPAVCIndicatorGroupData@@H@Z ENDP ; SerializeElements<CIndicatorGroupData *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
;	COMDAT ??$assign@V?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCGraphTypeData@@@std@@@std@@@std@@$0A@@?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@QAEXV?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCGraphTypeData@@@std@@@std@@@1@0@Z
_TEXT	SEGMENT
__ULast$1$ = -28					; size = 4
$T1 = -20						; size = 4
tv846 = -20						; size = 4
$T2 = -20						; size = 4
__Count$1$ = -16					; size = 4
__UFirst$2$ = -12					; size = 4
__Myfirst$$sroa$161$1$ = -8				; size = 4
__UFirst$1$ = -4					; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
??$assign@V?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCGraphTypeData@@@std@@@std@@@std@@$0A@@?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@QAEXV?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCGraphTypeData@@@std@@@std@@@1@0@Z PROC ; std::deque<CGraphTypeData *,std::allocator<CGraphTypeData *> >::assign<std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<CGraphTypeData *> > >,0>, COMDAT
; _this$ = ecx

; 1153 :     void assign(_Iter _First, _Iter _Last) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 1154 :         _Orphan_all();
; 1155 :         _Adl_verify_range(_First, _Last);
; 1156 :         auto _UFirst       = _Get_unwrapped(_First);

  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	8b 55 0c	 mov	 edx, DWORD PTR __First$[ebp+4]
  0000c	53		 push	 ebx
  0000d	56		 push	 esi
  0000e	8b f1		 mov	 esi, ecx
  00010	89 45 f4	 mov	 DWORD PTR __UFirst$2$[ebp], eax

; 1157 :         const auto _ULast  = _Get_unwrapped(_Last);

  00013	8b 4d 14	 mov	 ecx, DWORD PTR __Last$[ebp+4]
  00016	57		 push	 edi
  00017	89 55 fc	 mov	 DWORD PTR __UFirst$1$[ebp], edx

; 43   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  0001a	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]

; 913  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  0001d	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00020	03 c7		 add	 eax, edi

; 1157 :         const auto _ULast  = _Get_unwrapped(_Last);

  00022	89 4d e4	 mov	 DWORD PTR __ULast$1$[ebp], ecx

; 43   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  00025	89 7d f8	 mov	 DWORD PTR __Myfirst$$sroa$161$1$[ebp], edi

; 913  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00028	89 45 f0	 mov	 DWORD PTR __Count$1$[ebp], eax

; 43   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  0002b	3b d1		 cmp	 edx, ecx

; 1158 :         auto _Myfirst      = _Unchecked_begin();
; 1159 :         const auto _Mylast = _Unchecked_end();
; 1160 :         for (; _UFirst != _ULast; ++_UFirst) { // try to assign over an element in the container

  0002d	74 5c		 je	 SHORT $LN3@assign
  0002f	8b ca		 mov	 ecx, edx
  00031	89 55 ec	 mov	 DWORD PTR $T1[ebp], edx
$LL23@assign:

; 106  :         return _Myoff == _Right._Myoff;

  00034	3b f8		 cmp	 edi, eax

; 1161 :             if (_Myfirst == _Mylast) { // container wasn't big enough, insert what's left at end

  00036	74 73		 je	 SHORT $LN118@assign

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00038	8b 5d f4	 mov	 ebx, DWORD PTR __UFirst$2$[ebp]
  0003b	8b c2		 mov	 eax, edx
  0003d	c1 e8 02	 shr	 eax, 2

; 47   :         _Size_type _Off   = _Myoff % _Block_size;

  00040	83 e2 03	 and	 edx, 3

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00043	c1 ef 02	 shr	 edi, 2

; 47   :         _Size_type _Off   = _Myoff % _Block_size;

  00046	89 55 ec	 mov	 DWORD PTR tv846[ebp], edx

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00049	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 47   :         _Size_type _Off   = _Myoff % _Block_size;

  0004c	8b 55 f8	 mov	 edx, DWORD PTR __Myfirst$$sroa$161$1$[ebp]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0004f	49		 dec	 ecx
  00050	23 c8		 and	 ecx, eax

; 47   :         _Size_type _Off   = _Myoff % _Block_size;

  00052	83 e2 03	 and	 edx, 3

; 1166 :                 return;
; 1167 :             }
; 1168 : 
; 1169 :             *_Myfirst = *_UFirst;

  00055	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00058	8b 1c 88	 mov	 ebx, DWORD PTR [eax+ecx*4]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0005b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 1166 :                 return;
; 1167 :             }
; 1168 : 
; 1169 :             *_Myfirst = *_UFirst;

  0005e	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00061	48		 dec	 eax
  00062	23 f8		 and	 edi, eax

; 1166 :                 return;
; 1167 :             }
; 1168 : 
; 1169 :             *_Myfirst = *_UFirst;

  00064	8b 45 ec	 mov	 eax, DWORD PTR tv846[ebp]
  00067	8b 0c b9	 mov	 ecx, DWORD PTR [ecx+edi*4]
  0006a	8b 04 83	 mov	 eax, DWORD PTR [ebx+eax*4]

; 56   :         ++_Myoff;

  0006d	8b 7d f8	 mov	 edi, DWORD PTR __Myfirst$$sroa$161$1$[ebp]
  00070	47		 inc	 edi

; 1166 :                 return;
; 1167 :             }
; 1168 : 
; 1169 :             *_Myfirst = *_UFirst;

  00071	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 56   :         ++_Myoff;

  00074	8b 55 fc	 mov	 edx, DWORD PTR __UFirst$1$[ebp]

; 1158 :         auto _Myfirst      = _Unchecked_begin();
; 1159 :         const auto _Mylast = _Unchecked_end();
; 1160 :         for (; _UFirst != _ULast; ++_UFirst) { // try to assign over an element in the container

  00077	8b 45 f0	 mov	 eax, DWORD PTR __Count$1$[ebp]

; 56   :         ++_Myoff;

  0007a	42		 inc	 edx
  0007b	8b ca		 mov	 ecx, edx
  0007d	89 7d f8	 mov	 DWORD PTR __Myfirst$$sroa$161$1$[ebp], edi
  00080	89 55 fc	 mov	 DWORD PTR __UFirst$1$[ebp], edx
  00083	89 4d ec	 mov	 DWORD PTR $T1[ebp], ecx

; 106  :         return _Myoff == _Right._Myoff;

  00086	3b 55 e4	 cmp	 edx, DWORD PTR __ULast$1$[ebp]

; 1158 :         auto _Myfirst      = _Unchecked_begin();
; 1159 :         const auto _Mylast = _Unchecked_end();
; 1160 :         for (; _UFirst != _ULast; ++_UFirst) { // try to assign over an element in the container

  00089	75 a9		 jne	 SHORT $LL23@assign
$LN3@assign:

; 98   :         return static_cast<difference_type>(_Myoff - _Right._Myoff);

  0008b	2b c7		 sub	 eax, edi

; 1325 :         for (; 0 < _Count; --_Count) {

  0008d	74 13		 je	 SHORT $LN99@assign
  0008f	90		 npad	 1
$LL100@assign:

; 1146 :         if (--_Mysize() == 0) {

  00090	83 46 10 ff	 add	 DWORD PTR [esi+16], -1
  00094	75 07		 jne	 SHORT $LN98@assign

; 1147 :             _Myoff() = 0;

  00096	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN98@assign:

; 1325 :         for (; 0 < _Count; --_Count) {

  0009d	83 e8 01	 sub	 eax, 1
  000a0	75 ee		 jne	 SHORT $LL100@assign
$LN99@assign:
  000a2	5f		 pop	 edi

; 1170 :             ++_Myfirst;
; 1171 :         }
; 1172 : 
; 1173 :         _Erase_last_n(static_cast<size_type>(_Mylast - _Myfirst));
; 1174 :     }

  000a3	5e		 pop	 esi
  000a4	5b		 pop	 ebx
  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c2 10 00	 ret	 16			; 00000010H
$LN118@assign:
  000ab	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  000ae	8b fb		 mov	 edi, ebx
  000b0	8b 55 ec	 mov	 edx, DWORD PTR $T1[ebp]
$LL7@assign:

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  000b3	8b 45 f4	 mov	 eax, DWORD PTR __UFirst$2$[ebp]

; 48   :         return _Mycont->_Map[_Block][_Off];

  000b6	83 e2 03	 and	 edx, 3

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  000b9	c1 e9 02	 shr	 ecx, 2
  000bc	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000bf	48		 dec	 eax
  000c0	23 c8		 and	 ecx, eax

; 48   :         return _Mycont->_Map[_Block][_Off];

  000c2	8b 45 f4	 mov	 eax, DWORD PTR __UFirst$2$[ebp]
  000c5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000c8	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  000cb	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]

; 1106 :         if ((_Myoff() + _Mysize()) % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  000ce	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]

; 48   :         return _Mycont->_Map[_Block][_Off];

  000d1	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax

; 1106 :         if ((_Myoff() + _Mysize()) % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  000d4	8d 04 1a	 lea	 eax, DWORD PTR [edx+ebx]
  000d7	a8 03		 test	 al, 3
  000d9	75 1a		 jne	 SHORT $LN37@assign
  000db	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000de	c1 e8 02	 shr	 eax, 2
  000e1	39 46 08	 cmp	 DWORD PTR [esi+8], eax
  000e4	77 0f		 ja	 SHORT $LN37@assign

; 1107 :             _Growmap(1);

  000e6	6a 01		 push	 1
  000e8	8b ce		 mov	 ecx, esi
  000ea	e8 00 00 00 00	 call	 ?_Growmap@?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@AAEXI@Z ; std::deque<CGraphTypeData *,std::allocator<CGraphTypeData *> >::_Growmap
  000ef	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  000f2	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
$LN37@assign:

; 1108 :         }
; 1109 :         _Myoff() &= _Mapsize() * _Block_size - 1;

  000f5	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000f8	8d 04 8d ff ff
	ff ff		 lea	 eax, DWORD PTR [ecx*4-1]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  000ff	49		 dec	 ecx

; 1109 :         _Myoff() &= _Mapsize() * _Block_size - 1;

  00100	23 c2		 and	 eax, edx
  00102	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 1110 :         size_type _Newoff = _Myoff() + _Mysize();

  00105	8d 1c 38	 lea	 ebx, DWORD PTR [eax+edi]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00108	8b c3		 mov	 eax, ebx
  0010a	c1 e8 02	 shr	 eax, 2
  0010d	23 c8		 and	 ecx, eax

; 1112 :         if (_Map()[_Block] == nullptr) {

  0010f	8d 3c 8d 00 00
	00 00		 lea	 edi, DWORD PTR [ecx*4]
  00116	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00119	83 3c 39 00	 cmp	 DWORD PTR [ecx+edi], 0
  0011d	75 13		 jne	 SHORT $LN127@assign
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  0011f	6a 10		 push	 16			; 00000010H
  00121	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1113 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  00126	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00129	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1113 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  0012c	89 04 0f	 mov	 DWORD PTR [edi+ecx], eax
  0012f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
$LN127@assign:

; 1114 :         }
; 1115 : 
; 1116 :         _Alty_traits::construct(

  00132	8b 0c 0f	 mov	 ecx, DWORD PTR [edi+ecx]
  00135	83 e3 03	 and	 ebx, 3
  00138	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  0013b	8b 00		 mov	 eax, DWORD PTR [eax]
  0013d	89 04 99	 mov	 DWORD PTR [ecx+ebx*4], eax

; 56   :         ++_Myoff;

  00140	8b 45 fc	 mov	 eax, DWORD PTR __UFirst$1$[ebp]

; 1119 :         ++_Mysize();

  00143	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]

; 56   :         ++_Myoff;

  00146	40		 inc	 eax

; 1119 :         ++_Mysize();

  00147	43		 inc	 ebx

; 56   :         ++_Myoff;

  00148	89 45 fc	 mov	 DWORD PTR __UFirst$1$[ebp], eax
  0014b	8b c8		 mov	 ecx, eax

; 1119 :         ++_Mysize();

  0014d	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00150	8b fb		 mov	 edi, ebx

; 56   :         ++_Myoff;

  00152	3b 4d e4	 cmp	 ecx, DWORD PTR __ULast$1$[ebp]

; 1162 :                 do {
; 1163 :                     emplace_back(*_UFirst);
; 1164 :                     ++_UFirst;
; 1165 :                 } while (_UFirst != _ULast);

  00155	0f 84 47 ff ff
	ff		 je	 $LN99@assign
  0015b	8b d1		 mov	 edx, ecx
  0015d	e9 51 ff ff ff	 jmp	 $LL7@assign
??$assign@V?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCGraphTypeData@@@std@@@std@@@std@@$0A@@?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@QAEXV?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCGraphTypeData@@@std@@@std@@@1@0@Z ENDP ; std::deque<CGraphTypeData *,std::allocator<CGraphTypeData *> >::assign<std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<CGraphTypeData *> > >,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1296 :         if (_Ptr) {

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	74 0b		 je	 SHORT $LN12@Container_

; 255  :         ::operator delete(_Ptr, _Bytes);

  00006	6a 08		 push	 8
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
$LN12@Container_:

; 1297 :             _Delete_plain_internal(_Al, _Ptr);
; 1298 :         }
; 1299 :     }

  00011	c3		 ret	 0
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_ECIndicatorGroupDataList@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECIndicatorGroupDataList@@UAEPAXI@Z PROC		; CIndicatorGroupDataList::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ECIndicatorGroupDataList@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002a	8b d8		 mov	 ebx, eax
  0002c	83 e3 01	 and	 ebx, 1
  0002f	a8 02		 test	 al, 2
  00031	74 3f		 je	 SHORT $LN2@vector
  00033	68 00 00 00 00	 push	 OFFSET ??1CIndicatorGroupDataList@@UAE@XZ ; CIndicatorGroupDataList::~CIndicatorGroupDataList
  00038	ff 76 fc	 push	 DWORD PTR [esi-4]
  0003b	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003e	6a 20		 push	 32			; 00000020H
  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00046	85 db		 test	 ebx, ebx
  00048	74 12		 je	 SHORT $LN3@vector
  0004a	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0004c	c1 e1 05	 shl	 ecx, 5
  0004f	83 c1 04	 add	 ecx, 4
  00052	51		 push	 ecx
  00053	57		 push	 edi
  00054	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  00059	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005c	8b c7		 mov	 eax, edi
  0005e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00061	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00068	59		 pop	 ecx
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
$LN2@vector:
  00072	e8 00 00 00 00	 call	 ??1CIndicatorGroupDataList@@UAE@XZ ; CIndicatorGroupDataList::~CIndicatorGroupDataList
  00077	85 db		 test	 ebx, ebx
  00079	74 0b		 je	 SHORT $LN4@vector
  0007b	6a 20		 push	 32			; 00000020H
  0007d	56		 push	 esi
  0007e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00083	83 c4 08	 add	 esp, 8
$LN4@vector:
  00086	8b c6		 mov	 eax, esi
  00088	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00092	59		 pop	 ecx
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 04 00	 ret	 4
  0009c	cc		 int	 3
  0009d	cc		 int	 3
  0009e	cc		 int	 3
  0009f	cc		 int	 3
  000a0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ECIndicatorGroupDataList@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ECIndicatorGroupDataList@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ECIndicatorGroupDataList@@UAEPAXI@Z ENDP		; CIndicatorGroupDataList::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_GCIndicatorGroupDataList@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCIndicatorGroupDataList@@UAEPAXI@Z PROC		; CIndicatorGroupDataList::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CIndicatorGroupDataList@@UAE@XZ ; CIndicatorGroupDataList::~CIndicatorGroupDataList
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 20		 push	 32			; 00000020H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCIndicatorGroupDataList@@UAEPAXI@Z ENDP		; CIndicatorGroupDataList::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??0CIndicatorGroupDataList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CIndicatorGroupDataList@@QAE@XZ PROC			; CIndicatorGroupDataList::CIndicatorGroupDataList, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CIndicatorGroupDataList@@6B@
  0000a	8b c1		 mov	 eax, ecx
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 851  : {

  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_7?$CList@PAVCIndicatorGroupData@@PAV1@@@6B@

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;

  00016	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  0001d	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00024	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0002b	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 856  : 	m_pBlocks = NULL;

  00032	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 857  : 	m_nBlockSize = nBlockSize;

  00039	c7 41 1c 0a 00
	00 00		 mov	 DWORD PTR [ecx+28], 10	; 0000000aH
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??0CIndicatorGroupDataList@@QAE@XZ ENDP			; CIndicatorGroupDataList::CIndicatorGroupDataList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_G?$CList@PAVCIndicatorGroupData@@PAV1@@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$CList@PAVCIndicatorGroupData@@PAV1@@@UAEPAXI@Z PROC ; CList<CIndicatorGroupData *,CIndicatorGroupData *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$CList@PAVCIndicatorGroupData@@PAV1@@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00025	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 878  : {

  00028	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@PAVCIndicatorGroupData@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  00035	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  0003c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00043	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0004a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 872  : 	m_pBlocks->FreeDataChain();

  00051	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00056	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00059	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00060	a8 01		 test	 al, 1
  00062	74 2c		 je	 SHORT $LN22@scalar
  00064	a8 04		 test	 al, 4
  00066	75 1d		 jne	 SHORT $LN3@scalar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 112  : 	{ ::operator delete(p); }

  00068	56		 push	 esi
  00069	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006e	83 c4 04	 add	 esp, 4
  00071	8b c6		 mov	 eax, esi
  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007d	59		 pop	 ecx
  0007e	5e		 pop	 esi
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
$LN3@scalar:
  00085	6a 1c		 push	 28			; 0000001cH
  00087	56		 push	 esi
  00088	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0008d	83 c4 08	 add	 esp, 8
$LN22@scalar:
  00090	8b c6		 mov	 eax, esi
  00092	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00095	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009c	59		 pop	 ecx
  0009d	5e		 pop	 esi
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 04 00	 ret	 4
  000a4	cc		 int	 3
  000a5	cc		 int	 3
  000a6	cc		 int	 3
  000a7	cc		 int	 3
  000a8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_G?$CList@PAVCIndicatorGroupData@@PAV1@@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$CList@PAVCIndicatorGroupData@@PAV1@@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$CList@PAVCIndicatorGroupData@@PAV1@@@UAEPAXI@Z ENDP ; CList<CIndicatorGroupData *,CIndicatorGroupData *>::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CList@PAVCIndicatorGroupData@@PAV1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_nNewCount$1$ = -16					; size = 4
_newData$1 = -12					; size = 4
_pData$1$ = -8						; size = 4
_pData$1$ = -8						; size = 4
_pNode$1$ = -8						; size = 4
_nElementsLeft$1$ = -4					; size = 4
_this$1$ = -4						; size = 4
_ar$ = 8						; size = 4
?Serialize@?$CList@PAVCIndicatorGroupData@@PAV1@@@UAEXAAVCArchive@@@Z PROC ; CList<CIndicatorGroupData *,CIndicatorGroupData *>::Serialize, COMDAT
; _this$ = ecx

; 1169 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00009	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1169 : {

  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00011	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00014	f7 d0		 not	 eax
  00016	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1174 : 	if (ar.IsStoring())

  00018	0f 84 ae 00 00
	00		 je	 $LN7@Serialize

; 1175 : 	{
; 1176 : 		ar.WriteCount(m_nCount);

  0001e	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00021	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00026	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00029	89 45 f8	 mov	 DWORD PTR _pNode$1$[ebp], eax
  0002c	85 c0		 test	 eax, eax
  0002e	0f 84 b9 01 00
	00		 je	 $LN86@Serialize
$LL4@Serialize:

; 1178 : 		{
; 1179 : 			ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1180 : 			TYPE* pData;
; 1181 : 			/*
; 1182 : 			 * in some cases the & operator might be overloaded, and we cannot use it to obtain
; 1183 : 			 * the address of a given object.  We then use the following trick to get the address
; 1184 : 			 */
; 1185 : 			pData = reinterpret_cast< TYPE* >( &reinterpret_cast< int& >( static_cast< TYPE& >( pNode->data ) ) );

  00034	8d 70 08	 lea	 esi, DWORD PTR [eax+8]

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00037	85 f6		 test	 esi, esi
  00039	0f 84 c0 01 00
	00		 je	 $LN76@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00042	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00045	f7 d0		 not	 eax
  00047	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00049	74 33		 je	 SHORT $LN21@Serialize

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0004b	b8 01 00 00 00	 mov	 eax, 1
  00050	89 45 fc	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
$LL16@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00053	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00058	3b c3		 cmp	 eax, ebx
  0005a	0f 42 d8	 cmovb	 ebx, eax

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0005d	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
  00064	57		 push	 edi
  00065	56		 push	 esi
  00066	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _nElementsLeft$1$[ebp]

; 87   : 			pData += nElementsToWrite;

  0006e	03 f7		 add	 esi, edi
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00073	2b c3		 sub	 eax, ebx
  00075	89 45 fc	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
  00078	85 c0		 test	 eax, eax
  0007a	75 d7		 jne	 SHORT $LL16@Serialize

; 88   : 		}
; 89   : 	}

  0007c	eb 35		 jmp	 SHORT $LN2@Serialize
$LN21@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  0007e	bf 01 00 00 00	 mov	 edi, 1
$LL18@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00083	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00088	3b fb		 cmp	 edi, ebx
  0008a	0f 42 df	 cmovb	 ebx, edi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0008d	8d 04 9d 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00094	50		 push	 eax
  00095	56		 push	 esi
  00096	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0009b	8d 0c 9d 00 00
	00 00		 lea	 ecx, DWORD PTR [ebx*4]
  000a2	3b c1		 cmp	 eax, ecx
  000a4	0f 85 4c 01 00
	00		 jne	 $LN75@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  000aa	03 f1		 add	 esi, ecx
  000ac	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;

  000af	2b fb		 sub	 edi, ebx
  000b1	75 d0		 jne	 SHORT $LL18@Serialize
$LN2@Serialize:

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  000b3	8b 45 f8	 mov	 eax, DWORD PTR _pNode$1$[ebp]
  000b6	8b 00		 mov	 eax, DWORD PTR [eax]
  000b8	89 45 f8	 mov	 DWORD PTR _pNode$1$[ebp], eax
  000bb	85 c0		 test	 eax, eax
  000bd	0f 85 71 ff ff
	ff		 jne	 $LL4@Serialize

; 1197 : 		}
; 1198 : 	}
; 1199 : }

  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 04 00	 ret	 4
$LN7@Serialize:

; 1186 : 			SerializeElements<TYPE>(ar, pData, 1);
; 1187 : 		}
; 1188 : 	}
; 1189 : 	else
; 1190 : 	{
; 1191 : 		DWORD_PTR nNewCount = ar.ReadCount();

  000cc	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount

; 1192 : 		while (nNewCount--)

  000d1	85 c0		 test	 eax, eax
  000d3	0f 84 14 01 00
	00		 je	 $LN86@Serialize
  000d9	0f 1f 80 00 00
	00 00		 npad	 7
$LL5@Serialize:
  000e0	48		 dec	 eax
  000e1	89 45 f0	 mov	 DWORD PTR _nNewCount$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  000e4	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  000e7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000ea	f7 d1		 not	 ecx
  000ec	f6 c1 01	 test	 cl, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  000ef	74 3d		 je	 SHORT $LN42@Serialize

; 79   : 		pData = pElements;

  000f1	8d 4d f4	 lea	 ecx, DWORD PTR _newData$1[ebp]
  000f4	bb 01 00 00 00	 mov	 ebx, 1
  000f9	89 4d f8	 mov	 DWORD PTR _pData$1$[ebp], ecx
  000fc	0f 1f 40 00	 npad	 4
$LL37@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00100	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00105	3b df		 cmp	 ebx, edi
  00107	0f 42 fb	 cmovb	 edi, ebx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0010a	8d 34 bd 00 00
	00 00		 lea	 esi, DWORD PTR [edi*4]
  00111	56		 push	 esi
  00112	51		 push	 ecx
  00113	8b c8		 mov	 ecx, eax
  00115	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 87   : 			pData += nElementsToWrite;

  0011a	8b 4d f8	 mov	 ecx, DWORD PTR _pData$1$[ebp]
  0011d	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  00120	03 ce		 add	 ecx, esi
  00122	89 4d f8	 mov	 DWORD PTR _pData$1$[ebp], ecx
  00125	2b df		 sub	 ebx, edi
  00127	75 d7		 jne	 SHORT $LL37@Serialize

; 88   : 		}
; 89   : 	}

  00129	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  0012c	eb 4a		 jmp	 SHORT $LN40@Serialize
$LN42@Serialize:

; 96   : 		pData = pElements;

  0012e	8d 55 f4	 lea	 edx, DWORD PTR _newData$1[ebp]
  00131	be 01 00 00 00	 mov	 esi, 1
  00136	89 55 f8	 mov	 DWORD PTR _pData$1$[ebp], edx
  00139	0f 1f 80 00 00
	00 00		 npad	 7
$LL39@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00140	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00145	3b f7		 cmp	 esi, edi
  00147	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0014a	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00151	51		 push	 ecx
  00152	52		 push	 edx
  00153	8b c8		 mov	 ecx, eax
  00155	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0015a	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
  00161	3b c1		 cmp	 eax, ecx
  00163	0f 85 8d 00 00
	00		 jne	 $LN75@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  00169	8b 55 f8	 mov	 edx, DWORD PTR _pData$1$[ebp]
  0016c	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]

; 104  : 			pData += nElementsToRead;

  0016f	03 d1		 add	 edx, ecx
  00171	89 55 f8	 mov	 DWORD PTR _pData$1$[ebp], edx
  00174	2b f7		 sub	 esi, edi
  00176	75 c8		 jne	 SHORT $LL39@Serialize
$LN40@Serialize:

; 902  : 	if (m_pNodeFree == NULL)

  00178	83 7b 10 00	 cmp	 DWORD PTR [ebx+16], 0

; 1193 : 		{
; 1194 : 			TYPE newData[1];
; 1195 : 			SerializeElements<TYPE>(ar, newData, 1);
; 1196 : 			AddTail(newData[0]);

  0017c	8b 75 f4	 mov	 esi, DWORD PTR _newData$1[ebp]

; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  0017f	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]

; 902  : 	if (m_pNodeFree == NULL)

  00182	75 32		 jne	 SHORT $LN63@Serialize

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  00184	6a 0c		 push	 12			; 0000000cH
  00186	ff 73 18	 push	 DWORD PTR [ebx+24]
  00189	8d 43 14	 lea	 eax, DWORD PTR [ebx+20]
  0018c	50		 push	 eax
  0018d	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  00192	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  00195	83 c0 08	 add	 eax, 8
  00198	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  0019b	83 c2 ff	 add	 edx, -1
  0019e	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  001a1	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  001a4	78 10		 js	 SHORT $LN63@Serialize
$LL60@Serialize:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  001a6	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  001a9	89 01		 mov	 DWORD PTR [ecx], eax

; 915  : 			m_pNodeFree = pNode;

  001ab	89 4b 10	 mov	 DWORD PTR [ebx+16], ecx
  001ae	83 e9 0c	 sub	 ecx, 12			; 0000000cH
  001b1	83 ea 01	 sub	 edx, 1
  001b4	79 f0		 jns	 SHORT $LL60@Serialize
$LN63@Serialize:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  001b6	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  001b9	85 c9		 test	 ecx, ecx
  001bb	74 42		 je	 SHORT $LN76@Serialize

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  001bd	8b 01		 mov	 eax, DWORD PTR [ecx]
  001bf	89 43 10	 mov	 DWORD PTR [ebx+16], eax

; 922  : 	pNode->pPrev = pPrev;

  001c2	89 79 04	 mov	 DWORD PTR [ecx+4], edi

; 923  : 	pNode->pNext = pNext;

  001c5	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 924  : 	m_nCount++;

  001cb	ff 43 0c	 inc	 DWORD PTR [ebx+12]

; 969  : 	pNewNode->data = newElement;

  001ce	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 970  : 	if (m_pNodeTail != NULL)

  001d1	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  001d4	85 c0		 test	 eax, eax
  001d6	74 04		 je	 SHORT $LN54@Serialize

; 971  : 		m_pNodeTail->pNext = pNewNode;

  001d8	89 08		 mov	 DWORD PTR [eax], ecx
  001da	eb 03		 jmp	 SHORT $LN55@Serialize
$LN54@Serialize:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;

  001dc	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
$LN55@Serialize:

; 1192 : 		while (nNewCount--)

  001df	8b 45 f0	 mov	 eax, DWORD PTR _nNewCount$1$[ebp]

; 974  : 	m_pNodeTail = pNewNode;

  001e2	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx

; 1192 : 		while (nNewCount--)

  001e5	85 c0		 test	 eax, eax
  001e7	0f 85 f3 fe ff
	ff		 jne	 $LL5@Serialize
$LN86@Serialize:
  001ed	5f		 pop	 edi

; 1197 : 		}
; 1198 : 	}
; 1199 : }

  001ee	5e		 pop	 esi
  001ef	5b		 pop	 ebx
  001f0	8b e5		 mov	 esp, ebp
  001f2	5d		 pop	 ebp
  001f3	c2 04 00	 ret	 4
$LN75@Serialize:
  001f6	6a 00		 push	 0
  001f8	6a 03		 push	 3
  001fa	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN76@Serialize:
  001ff	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN105@Serialize:
  00204	cc		 int	 3
?Serialize@?$CList@PAVCIndicatorGroupData@@PAV1@@@UAEXAAVCArchive@@@Z ENDP ; CList<CIndicatorGroupData *,CIndicatorGroupData *>::Serialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??1?$CList@PAVCIndicatorGroupData@@PAV1@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CList@PAVCIndicatorGroupData@@PAV1@@@UAE@XZ PROC	; CList<CIndicatorGroupData *,CIndicatorGroupData *>::~CList<CIndicatorGroupData *,CIndicatorGroupData *>, COMDAT
; _this$ = ecx

; 878  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CList@PAVCIndicatorGroupData@@PAV1@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 872  : 	m_pBlocks->FreeDataChain();

  00025	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 878  : {

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@PAVCIndicatorGroupData@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  0002e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00035	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0003c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00043	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 872  : 	m_pBlocks->FreeDataChain();

  0004a	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0004f	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 879  : 	RemoveAll();
; 880  : 	ASSERT(m_nCount == 0);
; 881  : }

  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	5e		 pop	 esi
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
  00066	cc		 int	 3
  00067	cc		 int	 3
  00068	cc		 int	 3
  00069	cc		 int	 3
  0006a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CList@PAVCIndicatorGroupData@@PAV1@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CList@PAVCIndicatorGroupData@@PAV1@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CList@PAVCIndicatorGroupData@@PAV1@@@UAE@XZ ENDP	; CList<CIndicatorGroupData *,CIndicatorGroupData *>::~CList<CIndicatorGroupData *,CIndicatorGroupData *>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?NewNode@?$CList@PAVCIndicatorGroupData@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z
_TEXT	SEGMENT
_pPrev$ = 8						; size = 4
_pNext$ = 12						; size = 4
?NewNode@?$CList@PAVCIndicatorGroupData@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z PROC ; CList<CIndicatorGroupData *,CIndicatorGroupData *>::NewNode, COMDAT
; _this$ = ecx

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 902  : 	if (m_pNodeFree == NULL)

  00006	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0000a	75 34		 jne	 SHORT $LN7@NewNode

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  0000c	6a 0c		 push	 12			; 0000000cH
  0000e	ff 76 18	 push	 DWORD PTR [esi+24]
  00011	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001a	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0001d	83 c0 08	 add	 eax, 8
  00020	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  00023	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00026	83 c0 f4	 add	 eax, -12		; fffffff4H

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00029	83 c2 ff	 add	 edx, -1
  0002c	78 12		 js	 SHORT $LN7@NewNode
  0002e	66 90		 npad	 2
$LL4@NewNode:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	89 08		 mov	 DWORD PTR [eax], ecx

; 915  : 			m_pNodeFree = pNode;

  00035	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00038	83 e8 0c	 sub	 eax, 12			; 0000000cH
  0003b	83 ea 01	 sub	 edx, 1
  0003e	79 f0		 jns	 SHORT $LL4@NewNode
$LN7@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00040	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00043	85 c0		 test	 eax, eax
  00045	74 18		 je	 SHORT $LN17@NewNode

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00047	8b 08		 mov	 ecx, DWORD PTR [eax]
  00049	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 922  : 	pNode->pPrev = pPrev;

  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _pPrev$[ebp]
  0004f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 923  : 	pNode->pNext = pNext;

  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _pNext$[ebp]
  00055	89 08		 mov	 DWORD PTR [eax], ecx

; 924  : 	m_nCount++;

  00057	ff 46 0c	 inc	 DWORD PTR [esi+12]

; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;
; 930  : #pragma pop_macro("new")
; 931  : 	return pNode;

  0005a	5e		 pop	 esi

; 932  : }

  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
$LN17@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  0005f	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN15@NewNode:
  00064	cc		 int	 3
?NewNode@?$CList@PAVCIndicatorGroupData@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z ENDP ; CList<CIndicatorGroupData *,CIndicatorGroupData *>::NewNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAll@?$CList@PAVCIndicatorGroupData@@PAV1@@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@?$CList@PAVCIndicatorGroupData@@PAV1@@@QAEXXZ PROC ; CList<CIndicatorGroupData *,CIndicatorGroupData *>::RemoveAll, COMDAT
; _this$ = ecx

; 862  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 863  : 	ASSERT_VALID(this);
; 864  : 
; 865  : 	// destroy elements
; 866  : 	CNode* pNode;
; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)
; 868  : 		pNode->data.~TYPE();
; 869  : 
; 870  : 	m_nCount = 0;
; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 872  : 	m_pBlocks->FreeDataChain();

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0000d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00014	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0001b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00022	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00027	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0002e	5e		 pop	 esi

; 874  : }

  0002f	c3		 ret	 0
?RemoveAll@?$CList@PAVCIndicatorGroupData@@PAV1@@@QAEXXZ ENDP ; CList<CIndicatorGroupData *,CIndicatorGroupData *>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?AddTail@?$CList@PAVCIndicatorGroupData@@PAV1@@@QAEPAU__POSITION@@PAVCIndicatorGroupData@@@Z
_TEXT	SEGMENT
_newElement$ = 8					; size = 4
?AddTail@?$CList@PAVCIndicatorGroupData@@PAV1@@@QAEPAU__POSITION@@PAVCIndicatorGroupData@@@Z PROC ; CList<CIndicatorGroupData *,CIndicatorGroupData *>::AddTail, COMDAT
; _this$ = ecx

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 902  : 	if (m_pNodeFree == NULL)

  00007	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0

; 966  : 	ASSERT_VALID(this);
; 967  : 
; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  0000b	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 902  : 	if (m_pNodeFree == NULL)

  0000e	75 32		 jne	 SHORT $LN11@AddTail

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  00010	6a 0c		 push	 12			; 0000000cH
  00012	ff 76 18	 push	 DWORD PTR [esi+24]
  00015	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001e	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00021	83 c0 08	 add	 eax, 8
  00024	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00027	83 c2 ff	 add	 edx, -1
  0002a	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  0002d	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  00030	78 10		 js	 SHORT $LN11@AddTail
$LL8@AddTail:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00032	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00035	89 01		 mov	 DWORD PTR [ecx], eax

; 915  : 			m_pNodeFree = pNode;

  00037	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0003a	83 e9 0c	 sub	 ecx, 12			; 0000000cH
  0003d	83 ea 01	 sub	 edx, 1
  00040	79 f0		 jns	 SHORT $LL8@AddTail
$LN11@AddTail:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00042	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00045	85 c9		 test	 ecx, ecx
  00047	74 39		 je	 SHORT $LN22@AddTail

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00049	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004b	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 969  : 	pNewNode->data = newElement;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]

; 922  : 	pNode->pPrev = pPrev;

  00051	89 79 04	 mov	 DWORD PTR [ecx+4], edi

; 923  : 	pNode->pNext = pNext;

  00054	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 924  : 	m_nCount++;

  0005a	ff 46 0c	 inc	 DWORD PTR [esi+12]

; 969  : 	pNewNode->data = newElement;

  0005d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 970  : 	if (m_pNodeTail != NULL)

  00060	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00063	85 c0		 test	 eax, eax
  00065	74 0d		 je	 SHORT $LN2@AddTail

; 971  : 		m_pNodeTail->pNext = pNewNode;

  00067	89 08		 mov	 DWORD PTR [eax], ecx

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00069	8b c1		 mov	 eax, ecx
  0006b	5f		 pop	 edi
  0006c	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0006f	5e		 pop	 esi

; 976  : }

  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
$LN2@AddTail:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00074	5f		 pop	 edi
  00075	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00078	8b c1		 mov	 eax, ecx
  0007a	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0007d	5e		 pop	 esi

; 976  : }

  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
$LN22@AddTail:

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00082	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN20@AddTail:
  00087	cc		 int	 3
?AddTail@?$CList@PAVCIndicatorGroupData@@PAV1@@@QAEPAU__POSITION@@PAVCIndicatorGroupData@@@Z ENDP ; CList<CIndicatorGroupData *,CIndicatorGroupData *>::AddTail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??0?$CList@PAVCIndicatorGroupData@@PAV1@@@QAE@H@Z
_TEXT	SEGMENT
_nBlockSize$ = 8					; size = 4
??0?$CList@PAVCIndicatorGroupData@@PAV1@@@QAE@H@Z PROC	; CList<CIndicatorGroupData *,CIndicatorGroupData *>::CList<CIndicatorGroupData *,CIndicatorGroupData *>, COMDAT
; _this$ = ecx

; 851  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;
; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 856  : 	m_pBlocks = NULL;
; 857  : 	m_nBlockSize = nBlockSize;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nBlockSize$[ebp]
  00006	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 858  : }

  00009	8b c1		 mov	 eax, ecx
  0000b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CList@PAVCIndicatorGroupData@@PAV1@@@6B@
  00011	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00018	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0001f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00026	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0002d	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??0?$CList@PAVCIndicatorGroupData@@PAV1@@@QAE@H@Z ENDP	; CList<CIndicatorGroupData *,CIndicatorGroupData *>::CList<CIndicatorGroupData *,CIndicatorGroupData *>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_FCIndicatorGroupData@@QAEXXZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??_FCIndicatorGroupData@@QAEXXZ PROC			; CIndicatorGroupData::`default constructor closure', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_FCIndicatorGroupData@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0002b	8d 4d f0	 lea	 ecx, DWORD PTR $T2[ebp]
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  00034	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ??0CIndicatorGroupData@@QAE@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CIndicatorGroupData::CIndicatorGroupData
  00046	8d 4d f0	 lea	 ecx, DWORD PTR $T2[ebp]
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00059	59		 pop	 ecx
  0005a	5e		 pop	 esi
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_FCIndicatorGroupData@@QAEXXZ$0:
  00000	8d 4d f0	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
__ehhandler$??_FCIndicatorGroupData@@QAEXXZ:
  0000e	90		 npad	 1
  0000f	90		 npad	 1
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_FCIndicatorGroupData@@QAEXXZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_FCIndicatorGroupData@@QAEXXZ ENDP			; CIndicatorGroupData::`default constructor closure'
; Function compile flags: /Ogtp
;	COMDAT ??_ECGraphTypeAndStyleData@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECGraphTypeAndStyleData@@UAEPAXI@Z PROC		; CGraphTypeAndStyleData::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ECGraphTypeAndStyleData@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002a	8b d8		 mov	 ebx, eax
  0002c	83 e3 01	 and	 ebx, 1
  0002f	a8 02		 test	 al, 2
  00031	74 3d		 je	 SHORT $LN2@vector
  00033	68 00 00 00 00	 push	 OFFSET ??1CGraphTypeAndStyleData@@UAE@XZ ; CGraphTypeAndStyleData::~CGraphTypeAndStyleData
  00038	ff 76 fc	 push	 DWORD PTR [esi-4]
  0003b	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003e	6a 34		 push	 52			; 00000034H
  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00046	85 db		 test	 ebx, ebx
  00048	74 10		 je	 SHORT $LN3@vector
  0004a	6b 0f 34	 imul	 ecx, DWORD PTR [edi], 52
  0004d	83 c1 04	 add	 ecx, 4
  00050	51		 push	 ecx
  00051	57		 push	 edi
  00052	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  00057	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005a	8b c7		 mov	 eax, edi
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00066	59		 pop	 ecx
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 04 00	 ret	 4
$LN2@vector:
  00070	e8 00 00 00 00	 call	 ??1CGraphTypeAndStyleData@@UAE@XZ ; CGraphTypeAndStyleData::~CGraphTypeAndStyleData
  00075	85 db		 test	 ebx, ebx
  00077	74 0b		 je	 SHORT $LN4@vector
  00079	6a 34		 push	 52			; 00000034H
  0007b	56		 push	 esi
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00081	83 c4 08	 add	 esp, 8
$LN4@vector:
  00084	8b c6		 mov	 eax, esi
  00086	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 04 00	 ret	 4
  0009a	cc		 int	 3
  0009b	cc		 int	 3
  0009c	cc		 int	 3
  0009d	cc		 int	 3
  0009e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ECGraphTypeAndStyleData@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ECGraphTypeAndStyleData@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ECGraphTypeAndStyleData@@UAEPAXI@Z ENDP		; CGraphTypeAndStyleData::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_GCGraphTypeAndStyleData@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGraphTypeAndStyleData@@UAEPAXI@Z PROC		; CGraphTypeAndStyleData::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGraphTypeAndStyleData@@UAE@XZ ; CGraphTypeAndStyleData::~CGraphTypeAndStyleData
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 34		 push	 52			; 00000034H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCGraphTypeAndStyleData@@UAEPAXI@Z ENDP		; CGraphTypeAndStyleData::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
;	COMDAT ??4CGraphTypeAndStyleData@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4CGraphTypeAndStyleData@@QAEAAV0@ABV0@@Z PROC		; CGraphTypeAndStyleData::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 881  :         if (this != _STD addressof(_Right)) {

  00003	53		 push	 ebx
  00004	8b 5d 08	 mov	 ebx, DWORD PTR ___that$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	8d 7b 08	 lea	 edi, DWORD PTR [ebx+8]
  0000e	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00011	3b cf		 cmp	 ecx, edi
  00013	74 11		 je	 SHORT $LN6@operator

; 917  :         return _Unchecked_const_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00015	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  00018	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0001b	03 c2		 add	 eax, edx

; 868  :         assign(_Right._Unchecked_begin(), _Right._Unchecked_end());

  0001d	50		 push	 eax
  0001e	57		 push	 edi
  0001f	52		 push	 edx
  00020	57		 push	 edi
  00021	e8 00 00 00 00	 call	 ??$assign@V?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCGraphTypeData@@@std@@@std@@@std@@$0A@@?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@QAEXV?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCGraphTypeData@@@std@@@std@@@1@0@Z ; std::deque<CGraphTypeData *,std::allocator<CGraphTypeData *> >::assign<std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<CGraphTypeData *> > >,0>
$LN6@operator:
  00026	8d 7b 20	 lea	 edi, DWORD PTR [ebx+32]
  00029	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]

; 881  :         if (this != _STD addressof(_Right)) {

  0002c	3b cf		 cmp	 ecx, edi
  0002e	74 11		 je	 SHORT $LN33@operator

; 917  :         return _Unchecked_const_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00030	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  00033	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00036	03 c2		 add	 eax, edx

; 868  :         assign(_Right._Unchecked_begin(), _Right._Unchecked_end());

  00038	50		 push	 eax
  00039	57		 push	 edi
  0003a	52		 push	 edx
  0003b	57		 push	 edi
  0003c	e8 00 00 00 00	 call	 ??$assign@V?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCGraphTypeData@@@std@@@std@@@std@@$0A@@?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@QAEXV?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCGraphTypeData@@@std@@@std@@@1@0@Z ; std::deque<CGraphTypeData *,std::allocator<CGraphTypeData *> >::assign<std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<CGraphTypeData *> > >,0>
$LN33@operator:
  00041	5f		 pop	 edi
  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
??4CGraphTypeAndStyleData@@QAEAAV0@ABV0@@Z ENDP		; CGraphTypeAndStyleData::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0CGraphTypeAndStyleData@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CGraphTypeAndStyleData@@QAE@ABV0@@Z PROC		; CGraphTypeAndStyleData::CGraphTypeAndStyleData, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CGraphTypeAndStyleData@@QAE@ABV0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002a	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  0002d	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00030	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CGraphTypeAndStyleData@@6B@
  00036	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ??0CGraphTypeDataList@@QAE@ABV0@@Z
  0003f	8d 46 1c	 lea	 eax, DWORD PTR [esi+28]
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00049	50		 push	 eax
  0004a	8d 4f 1c	 lea	 ecx, DWORD PTR [edi+28]
  0004d	e8 00 00 00 00	 call	 ??0CGraphTypeDataList@@QAE@ABV0@@Z
  00052	8b c7		 mov	 eax, edi
  00054	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00057	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005e	59		 pop	 ecx
  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CGraphTypeAndStyleData@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1CGraphTypeDataList@@UAE@XZ ; CGraphTypeDataList::~CGraphTypeDataList
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$??0CGraphTypeAndStyleData@@QAE@ABV0@@Z:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CGraphTypeAndStyleData@@QAE@ABV0@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CGraphTypeAndStyleData@@QAE@ABV0@@Z ENDP		; CGraphTypeAndStyleData::CGraphTypeAndStyleData
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0CGraphTypeAndStyleData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CGraphTypeAndStyleData@@QAE@XZ PROC			; CGraphTypeAndStyleData::CGraphTypeAndStyleData, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CGraphTypeAndStyleData@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CGraphTypeAndStyleData@@6B@
  00032	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00035	8d 70 04	 lea	 esi, DWORD PTR [eax+4]
  00038	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CGraphTypeDataList@@6B@

; 79   :         return ::operator new(_Bytes);

  0003e	6a 08		 push	 8
  00040	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax

; 1033 :     _Container_proxy* _Myproxy = nullptr;

  00043	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 555  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

  00049	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00050	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00057	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0005e	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00065	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 1003 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

  0006a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1020 :         _Myproxy            = _New_proxy;

  00071	89 06		 mov	 DWORD PTR [esi], eax

; 1021 :         _New_proxy->_Mycont = this;

  00073	89 30		 mov	 DWORD PTR [eax], esi
  00075	8d 47 1c	 lea	 eax, DWORD PTR [edi+28]
  00078	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007f	8d 70 04	 lea	 esi, DWORD PTR [eax+4]
  00082	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CGraphTypeDataList@@6B@

; 79   :         return ::operator new(_Bytes);

  00088	6a 08		 push	 8
  0008a	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax

; 1033 :     _Container_proxy* _Myproxy = nullptr;

  0008d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 555  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

  00093	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0009a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  000a1	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  000a8	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  000af	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b4	83 c4 08	 add	 esp, 8

; 1003 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

  000b7	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1020 :         _Myproxy            = _New_proxy;

  000be	89 06		 mov	 DWORD PTR [esi], eax

; 1021 :         _New_proxy->_Mycont = this;

  000c0	89 30		 mov	 DWORD PTR [eax], esi
  000c2	8b c7		 mov	 eax, edi
  000c4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ce	59		 pop	 ecx
  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi
  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CGraphTypeAndStyleData@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1CGraphTypeDataList@@UAE@XZ ; CGraphTypeDataList::~CGraphTypeDataList
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$??0CGraphTypeAndStyleData@@QAE@XZ:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CGraphTypeAndStyleData@@QAE@XZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CGraphTypeAndStyleData@@QAE@XZ ENDP			; CGraphTypeAndStyleData::CGraphTypeAndStyleData
; Function compile flags: /Ogtp
;	COMDAT ??_GCGraphTypeDataList@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGraphTypeDataList@@UAEPAXI@Z PROC			; CGraphTypeDataList::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGraphTypeDataList@@UAE@XZ ; CGraphTypeDataList::~CGraphTypeDataList
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 18		 push	 24			; 00000018H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCGraphTypeDataList@@UAEPAXI@Z ENDP			; CGraphTypeDataList::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
;	COMDAT ??0CGraphTypeDataList@@QAE@ABV0@@Z
_TEXT	SEGMENT
__Proxy$4 = -44						; size = 8
__Guard$5 = -36						; size = 4
_this$ = -32						; size = 4
$T1$sroa$252$1$ = -28					; size = 4
$T6 = -24						; size = 4
tv946 = -20						; size = 4
$T7 = -20						; size = 4
__Alproxy$8 = -13					; size = 1
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CGraphTypeDataList@@QAE@ABV0@@Z PROC			; CGraphTypeDataList::CGraphTypeDataList, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CGraphTypeDataList@@QAE@ABV0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
  0002a	89 7d e0	 mov	 DWORD PTR _this$[ebp], edi
  0002d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CGraphTypeDataList@@6B@
  00033	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1281 :     _CONSTEXPR20_CONTAINER _Container_proxy_ptr12(_Alloc& _Al_, _Container_base12& _Mycont) : _Al(_Al_) {

  00036	8d 45 f3	 lea	 eax, DWORD PTR __Alproxy$8[ebp]

; 1033 :     _Container_proxy* _Myproxy = nullptr;

  00039	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 79   :         return ::operator new(_Bytes);

  0003f	6a 08		 push	 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 555  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

  00041	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00048	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0004f	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00056	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1281 :     _CONSTEXPR20_CONTAINER _Container_proxy_ptr12(_Alloc& _Al_, _Container_base12& _Mycont) : _Al(_Al_) {

  0005d	89 45 d8	 mov	 DWORD PTR __Proxy$4[ebp+4], eax

; 79   :         return ::operator new(_Bytes);

  00060	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00065	83 c4 04	 add	 esp, 4

; 1283 :         _Ptr = _Unfancy(_Al_.allocate(1));

  00068	89 45 d4	 mov	 DWORD PTR __Proxy$4[ebp], eax

; 1000 :     _CONSTEXPR20_CONTAINER _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

  0006b	89 30		 mov	 DWORD PTR [eax], esi

; 1001 : 
; 1002 :     const _Container_base12* _Mycont       = nullptr;
; 1003 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

  0006d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1285 :         _Mycont._Myproxy = _Ptr;

  00074	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 917  :         return _Unchecked_const_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00076	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]

; 643  :         _Container_proxy_ptr12<_Alproxy_ty> _Proxy(_Alproxy, _Get_data());

  00079	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 674  :         _Tidy_guard<deque> _Guard{this};

  00080	89 75 dc	 mov	 DWORD PTR __Guard$5[ebp], esi

; 917  :         return _Unchecked_const_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00083	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00086	8b 59 10	 mov	 ebx, DWORD PTR [ecx+16]
  00089	03 c3		 add	 eax, ebx
  0008b	89 45 e4	 mov	 DWORD PTR $T1$sroa$252$1$[ebp], eax

; 674  :         _Tidy_guard<deque> _Guard{this};

  0008e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 106  :         return _Myoff == _Right._Myoff;

  00092	3b d8		 cmp	 ebx, eax

; 675  :         for (; _First != _Last; ++_First) {

  00094	0f 84 ce 00 00
	00		 je	 $LN151@CGraphType
  0009a	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  0009d	0f 1f 00	 npad	 3
$LL64@CGraphType:

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  000a0	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  000a3	8b d3		 mov	 edx, ebx
  000a5	48		 dec	 eax
  000a6	c1 ea 02	 shr	 edx, 2
  000a9	23 d0		 and	 edx, eax

; 1106 :         if ((_Myoff() + _Mysize()) % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  000ab	89 7d ec	 mov	 DWORD PTR $T7[ebp], edi

; 48   :         return _Mycont->_Map[_Block][_Off];

  000ae	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000b1	8b cb		 mov	 ecx, ebx
  000b3	83 e1 03	 and	 ecx, 3
  000b6	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]

; 1106 :         if ((_Myoff() + _Mysize()) % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  000b9	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]

; 48   :         return _Mycont->_Map[_Block][_Off];

  000bc	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  000bf	89 45 e8	 mov	 DWORD PTR $T6[ebp], eax

; 1106 :         if ((_Myoff() + _Mysize()) % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  000c2	8d 04 3a	 lea	 eax, DWORD PTR [edx+edi]
  000c5	a8 03		 test	 al, 3
  000c7	75 20		 jne	 SHORT $LN76@CGraphType
  000c9	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000cc	89 7d ec	 mov	 DWORD PTR $T7[ebp], edi
  000cf	c1 e8 02	 shr	 eax, 2
  000d2	39 46 08	 cmp	 DWORD PTR [esi+8], eax
  000d5	77 12		 ja	 SHORT $LN76@CGraphType

; 1107 :             _Growmap(1);

  000d7	6a 01		 push	 1
  000d9	8b ce		 mov	 ecx, esi
  000db	e8 00 00 00 00	 call	 ?_Growmap@?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@AAEXI@Z ; std::deque<CGraphTypeData *,std::allocator<CGraphTypeData *> >::_Growmap
  000e0	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000e3	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  000e6	89 45 ec	 mov	 DWORD PTR $T7[ebp], eax
$LN76@CGraphType:

; 1108 :         }
; 1109 :         _Myoff() &= _Mapsize() * _Block_size - 1;

  000e9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 1110 :         size_type _Newoff = _Myoff() + _Mysize();

  000ec	8b 7d ec	 mov	 edi, DWORD PTR $T7[ebp]
  000ef	8d 04 8d ff ff
	ff ff		 lea	 eax, DWORD PTR [ecx*4-1]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  000f6	49		 dec	 ecx

; 1109 :         _Myoff() &= _Mapsize() * _Block_size - 1;

  000f7	23 c2		 and	 eax, edx
  000f9	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 1110 :         size_type _Newoff = _Myoff() + _Mysize();

  000fc	03 f8		 add	 edi, eax

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  000fe	8b c7		 mov	 eax, edi
  00100	c1 e8 02	 shr	 eax, 2
  00103	23 c8		 and	 ecx, eax

; 1112 :         if (_Map()[_Block] == nullptr) {

  00105	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  0010c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0010f	89 45 ec	 mov	 DWORD PTR tv946[ebp], eax
  00112	83 3c 01 00	 cmp	 DWORD PTR [ecx+eax], 0
  00116	75 18		 jne	 SHORT $LN150@CGraphType
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00118	6a 10		 push	 16			; 00000010H
  0011a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1113 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  0011f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00122	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1113 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  00125	8b 55 ec	 mov	 edx, DWORD PTR tv946[ebp]
  00128	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax
  0012b	8b c2		 mov	 eax, edx
  0012d	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
$LN150@CGraphType:

; 1114 :         }
; 1115 : 
; 1116 :         _Alty_traits::construct(

  00130	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  00133	83 e7 03	 and	 edi, 3
  00136	8b 45 e8	 mov	 eax, DWORD PTR $T6[ebp]

; 56   :         ++_Myoff;

  00139	43		 inc	 ebx

; 1116 :         _Alty_traits::construct(

  0013a	8b 00		 mov	 eax, DWORD PTR [eax]
  0013c	89 04 b9	 mov	 DWORD PTR [ecx+edi*4], eax

; 1117 :             _Getal(), _Unfancy(_Map()[_Block] + _Newoff % _Block_size), _STD forward<_Tys>(_Vals)...);
; 1118 : 
; 1119 :         ++_Mysize();

  0013f	ff 46 10	 inc	 DWORD PTR [esi+16]
  00142	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]

; 675  :         for (; _First != _Last; ++_First) {

  00145	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]

; 106  :         return _Myoff == _Right._Myoff;

  00148	3b 5d e4	 cmp	 ebx, DWORD PTR $T1$sroa$252$1$[ebp]

; 675  :         for (; _First != _Last; ++_First) {

  0014b	0f 85 4f ff ff
	ff		 jne	 $LL64@CGraphType
  00151	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00154	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00157	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0015e	59		 pop	 ecx
  0015f	5f		 pop	 edi
  00160	5e		 pop	 esi
  00161	5b		 pop	 ebx
  00162	8b e5		 mov	 esp, ebp
  00164	5d		 pop	 ebp
  00165	c2 04 00	 ret	 4
$LN151@CGraphType:
  00168	8b c7		 mov	 eax, edi
  0016a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0016d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00174	59		 pop	 ecx
  00175	5f		 pop	 edi
  00176	5e		 pop	 esi
  00177	5b		 pop	 ebx
  00178	8b e5		 mov	 esp, ebp
  0017a	5d		 pop	 ebp
  0017b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CGraphTypeDataList@@QAE@ABV0@@Z$1:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
__unwindfunclet$??0CGraphTypeDataList@@QAE@ABV0@@Z$2:
  00008	8d 4d dc	 lea	 ecx, DWORD PTR __Guard$5[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tidy_guard@V?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::deque<CGraphTypeData *,std::allocator<CGraphTypeData *> > >::~_Tidy_guard<std::deque<CGraphTypeData *,std::allocator<CGraphTypeData *> > >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??0CGraphTypeDataList@@QAE@ABV0@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CGraphTypeDataList@@QAE@ABV0@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CGraphTypeDataList@@QAE@ABV0@@Z ENDP			; CGraphTypeDataList::CGraphTypeDataList
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
;	COMDAT ?_Tidy@?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@AAEXXZ PROC ; std::deque<CGraphTypeData *,std::allocator<CGraphTypeData *> >::_Tidy, COMDAT
; _this$ = ecx

; 1471 :     void _Tidy() noexcept { // free all storage

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 1002 :         return _Mysize() == 0;

  00003	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00006	85 c9		 test	 ecx, ecx

; 1472 :         _Orphan_all();
; 1473 : 
; 1474 :         _Alpty _Almap(_Getal());
; 1475 :         while (!empty()) {

  00008	74 15		 je	 SHORT $LN60@Tidy
  0000a	66 0f 1f 44 00
	00		 npad	 6
$LL2@Tidy:

; 1146 :         if (--_Mysize() == 0) {

  00010	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00013	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00016	8b c8		 mov	 ecx, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 f4		 jne	 SHORT $LL2@Tidy

; 1147 :             _Myoff() = 0;

  0001c	89 47 0c	 mov	 DWORD PTR [edi+12], eax
$LN60@Tidy:
  0001f	56		 push	 esi

; 1479 :         for (size_type _Block = _Mapsize(); 0 < _Block;) { // free storage for a block and destroy pointer

  00020	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  00023	85 f6		 test	 esi, esi
  00025	74 1a		 je	 SHORT $LN5@Tidy
$LL4@Tidy:

; 1480 :             if (_Map()[--_Block]) { // free block and destroy its pointer

  00027	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0002a	4e		 dec	 esi
  0002b	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  0002e	85 c0		 test	 eax, eax
  00030	74 0b		 je	 SHORT $LN23@Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00032	6a 10		 push	 16			; 00000010H
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003a	83 c4 08	 add	 esp, 8
$LN23@Tidy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1479 :         for (size_type _Block = _Mapsize(); 0 < _Block;) { // free storage for a block and destroy pointer

  0003d	85 f6		 test	 esi, esi
  0003f	75 e6		 jne	 SHORT $LL4@Tidy
$LN5@Tidy:

; 1481 :                 _Getal().deallocate(_Map()[_Block], _Block_size);
; 1482 :                 _Destroy_in_place(_Map()[_Block]);
; 1483 :             }
; 1484 :         }
; 1485 : 
; 1486 :         if (_Map() != _Mapptr()) {

  00041	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00044	5e		 pop	 esi
  00045	85 c0		 test	 eax, eax
  00047	74 2a		 je	 SHORT $LN41@Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00049	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0004c	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0004f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00055	72 12		 jb	 SHORT $LN51@Tidy

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00057	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0005a	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0005d	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00062	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00065	77 1c		 ja	 SHORT $LN48@Tidy

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00067	8b c2		 mov	 eax, edx
$LN51@Tidy:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00069	51		 push	 ecx
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00070	83 c4 08	 add	 esp, 8
$LN41@Tidy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1490 :         _Mapsize() = 0;

  00073	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1491 :         _Map()     = _Mapptr();

  0007a	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00081	5f		 pop	 edi

; 1492 :     }

  00082	c3		 ret	 0
$LN48@Tidy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN62@Tidy:
  00089	cc		 int	 3
?_Tidy@?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@AAEXXZ ENDP ; std::deque<CGraphTypeData *,std::allocator<CGraphTypeData *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
;	COMDAT ?_Growmap@?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Myptr$1$ = -16					; size = 4
__Myboff$1$ = -12					; size = 4
_this$1$ = -8						; size = 4
__Count$1$ = -4						; size = 4
$T1 = 8							; size = 4
__Count$ = 8						; size = 4
?_Growmap@?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@AAEXI@Z PROC ; std::deque<CGraphTypeData *,std::allocator<CGraphTypeData *> >::_Growmap, COMDAT
; _this$ = ecx

; 1432 :     void _Growmap(size_type _Count) { // grow map by at least _Count pointers, _Mapsize() a power of 2

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 1433 :         static_assert(1 < _Minimum_map_size, "The _Xlen() test should always be performed.");
; 1434 : 
; 1435 :         _Alpty _Almap(_Getal());
; 1436 :         size_type _Newsize = 0 < _Mapsize() ? _Mapsize() : 1;

  0000a	b8 01 00 00 00	 mov	 eax, 1
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]
  00013	89 75 f8	 mov	 DWORD PTR _this$1$[ebp], esi
  00016	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00019	85 d2		 test	 edx, edx
  0001b	0f 45 c2	 cmovne	 eax, edx
  0001e	66 90		 npad	 2
$LL2@Growmap:

; 1437 :         while (_Newsize - _Mapsize() < _Count || _Newsize < _Minimum_map_size) {

  00020	8b d8		 mov	 ebx, eax
  00022	2b da		 sub	 ebx, edx
  00024	3b df		 cmp	 ebx, edi
  00026	72 05		 jb	 SHORT $LN4@Growmap
  00028	83 f8 08	 cmp	 eax, 8
  0002b	73 13		 jae	 SHORT $LN3@Growmap
$LN4@Growmap:

; 1438 :             // scale _Newsize to 2^N >= _Mapsize() + _Count
; 1439 :             if (max_size() / _Block_size - _Newsize < _Newsize) {

  0002d	b9 ff ff ff 0f	 mov	 ecx, 268435455		; 0fffffffH
  00032	2b c8		 sub	 ecx, eax
  00034	3b c8		 cmp	 ecx, eax
  00036	0f 82 49 01 00
	00		 jb	 $LN138@Growmap

; 1441 :             }
; 1442 : 
; 1443 :             _Newsize *= 2;

  0003c	03 c0		 add	 eax, eax

; 1444 :         }

  0003e	eb e0		 jmp	 SHORT $LL2@Growmap
$LN3@Growmap:

; 1445 :         _Count = _Newsize - _Mapsize();
; 1446 : 
; 1447 :         size_type _Myboff = _Myoff() / _Block_size;

  00040	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00043	c1 ef 02	 shr	 edi, 2
  00046	89 7d f4	 mov	 DWORD PTR __Myboff$1$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00049	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0004e	0f 87 38 01 00
	00		 ja	 $LN142@Growmap

; 61   :             _Throw_bad_array_new_length(); // multiply overflow
; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00054	c1 e0 02	 shl	 eax, 2

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00057	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0005c	72 27		 jb	 SHORT $LN19@Growmap

; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  0005e	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00061	3b c8		 cmp	 ecx, eax
  00063	0f 86 23 01 00
	00		 jbe	 $LN142@Growmap

; 79   :         return ::operator new(_Bytes);

  00069	51		 push	 ecx
  0006a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0006f	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00072	85 c0		 test	 eax, eax
  00074	0f 84 05 01 00
	00		 je	 $LN130@Growmap

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  0007a	8d 50 23	 lea	 edx, DWORD PTR [eax+35]
  0007d	83 e2 e0	 and	 edx, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00080	89 42 fc	 mov	 DWORD PTR [edx-4], eax

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00083	eb 13		 jmp	 SHORT $LN145@Growmap
$LN19@Growmap:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00085	85 c0		 test	 eax, eax
  00087	74 0d		 je	 SHORT $LN20@Growmap

; 79   :         return ::operator new(_Bytes);

  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0008f	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00092	8b d0		 mov	 edx, eax
  00094	eb 02		 jmp	 SHORT $LN145@Growmap
$LN20@Growmap:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00096	33 d2		 xor	 edx, edx
$LN145@Growmap:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1451 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

  00098	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0009b	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  0009e	c1 e7 02	 shl	 edi, 2
  000a1	c1 e6 02	 shl	 esi, 2
  000a4	89 7d fc	 mov	 DWORD PTR __Count$1$[ebp], edi
  000a7	89 55 08	 mov	 DWORD PTR $T1[ebp], edx
  000aa	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  000ad	03 fa		 add	 edi, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  000af	2b f1		 sub	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1451 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

  000b1	03 f0		 add	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  000b3	56		 push	 esi
  000b4	51		 push	 ecx
  000b5	57		 push	 edi
  000b6	e8 00 00 00 00	 call	 _memmove

; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  000bb	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  000be	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1451 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

  000c1	8b 75 f8	 mov	 esi, DWORD PTR _this$1$[ebp]

; 1452 :         if (_Myboff <= _Count) { // increment greater than offset of initial block

  000c4	8b 7d f4	 mov	 edi, DWORD PTR __Myboff$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  000c7	89 45 f0	 mov	 DWORD PTR __Myptr$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1451 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

  000ca	8b 56 04	 mov	 edx, DWORD PTR [esi+4]

; 1452 :         if (_Myboff <= _Count) { // increment greater than offset of initial block

  000cd	3b fb		 cmp	 edi, ebx
  000cf	77 35		 ja	 SHORT $LN6@Growmap
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  000d1	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
  000d8	51		 push	 ecx
  000d9	52		 push	 edx
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 _memmove
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  000e0	8b c3		 mov	 eax, ebx
  000e2	2b c7		 sub	 eax, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  000e4	8b 7d fc	 mov	 edi, DWORD PTR __Count$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  000e7	c1 e0 02	 shl	 eax, 2
  000ea	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  000eb	8b 45 f0	 mov	 eax, DWORD PTR __Myptr$1$[ebp]
  000ee	03 c7		 add	 eax, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  000f0	6a 00		 push	 0
  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 _memset
  000f8	57		 push	 edi
  000f9	8b 7d 08	 mov	 edi, DWORD PTR $T1[ebp]
  000fc	6a 00		 push	 0
  000fe	57		 push	 edi
  000ff	e8 00 00 00 00	 call	 _memset
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1456 :         } else { // increment not greater than offset of initial block

  00104	eb 36		 jmp	 SHORT $LN146@Growmap
$LN6@Growmap:

; 1457 :             _STD uninitialized_copy(_Map(), _Map() + _Count, _Myptr); // copy more old

  00106	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  0010d	57		 push	 edi
  0010e	52		 push	 edx
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 _memmove
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1458 :             _Myptr = _STD uninitialized_copy(_Map() + _Count, _Map() + _Myboff, _Newmap); // copy rest of old

  00115	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00118	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  0011b	2b f0		 sub	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1458 :             _Myptr = _STD uninitialized_copy(_Map() + _Count, _Map() + _Myboff, _Newmap); // copy rest of old

  0011d	03 75 fc	 add	 esi, DWORD PTR __Count$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00120	56		 push	 esi
  00121	50		 push	 eax
  00122	ff 75 08	 push	 DWORD PTR $T1[ebp]
  00125	e8 00 00 00 00	 call	 _memmove
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  0012a	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0012b	8b 7d 08	 mov	 edi, DWORD PTR $T1[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  0012e	6a 00		 push	 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  00130	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00133	50		 push	 eax
  00134	e8 00 00 00 00	 call	 _memset
  00139	8b 75 f8	 mov	 esi, DWORD PTR _this$1$[ebp]
$LN146@Growmap:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1463 :         if (_Map() != _Mapptr()) {

  0013c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0013f	83 c4 24	 add	 esp, 36			; 00000024H
  00142	85 c0		 test	 eax, eax
  00144	74 2a		 je	 SHORT $LN123@Growmap
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00146	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00149	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0014c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00152	72 12		 jb	 SHORT $LN133@Growmap

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00154	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00157	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0015a	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0015c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0015f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00162	77 1b		 ja	 SHORT $LN130@Growmap

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00164	8b c2		 mov	 eax, edx
$LN133@Growmap:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00166	51		 push	 ecx
  00167	50		 push	 eax
  00168	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0016d	83 c4 08	 add	 esp, 8
$LN123@Growmap:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1468 :         _Mapsize() += _Count;

  00170	01 5e 08	 add	 DWORD PTR [esi+8], ebx
  00173	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  00176	5f		 pop	 edi
  00177	5e		 pop	 esi
  00178	5b		 pop	 ebx

; 1469 :     }

  00179	8b e5		 mov	 esp, ebp
  0017b	5d		 pop	 ebp
  0017c	c2 04 00	 ret	 4
$LN130@Growmap:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0017f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN138@Growmap:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1440 :                 _Xlen(); // result too long

  00185	8b ce		 mov	 ecx, esi
  00187	e8 00 00 00 00	 call	 ?_Xlen@?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@ABEXXZ ; std::deque<CGraphTypeData *,std::allocator<CGraphTypeData *> >::_Xlen
$LN142@Growmap:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 131  :         _Throw_bad_array_new_length(); // add overflow

  0018c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN144@Growmap:
  00191	cc		 int	 3
?_Growmap@?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@AAEXI@Z ENDP ; std::deque<CGraphTypeData *,std::allocator<CGraphTypeData *> >::_Growmap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
;	COMDAT ?_Xlen@?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@ABEXXZ
_TEXT	SEGMENT
?_Xlen@?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@ABEXXZ PROC ; std::deque<CGraphTypeData *,std::allocator<CGraphTypeData *> >::_Xlen, COMDAT
; _this$ = ecx

; 1425 :         _Xlength_error("deque<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$deque@PAVCGraphTypeData@@V?$allocator@PAVCGraphTypeData@@@std@@@std@@ABEXXZ ENDP ; std::deque<CGraphTypeData *,std::allocator<CGraphTypeData *> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\GraphData.h
;	COMDAT ?GetHorizontalLine@CSubGraphDataBase@@QBEABV?$CArray@PAU_ST_HORZLINE@@PAU1@@@XZ
_TEXT	SEGMENT
?GetHorizontalLine@CSubGraphDataBase@@QBEABV?$CArray@PAU_ST_HORZLINE@@PAU1@@@XZ PROC ; CSubGraphDataBase::GetHorizontalLine, COMDAT
; _this$ = ecx

; 313  : 	const CArray<ST_HORZLINE*, ST_HORZLINE*>& GetHorizontalLine() const { return m_arrHorzLine; }

  00000	8d 41 70	 lea	 eax, DWORD PTR [ecx+112]
  00003	c3		 ret	 0
?GetHorizontalLine@CSubGraphDataBase@@QBEABV?$CArray@PAU_ST_HORZLINE@@PAU1@@@XZ ENDP ; CSubGraphDataBase::GetHorizontalLine
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0CGraphData@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CGraphData@@QAE@ABV0@@Z PROC				; CGraphData::CGraphData, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CGraphData@@QAE@ABV0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002a	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  0002d	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00030	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CGraphData@@6B@
  00036	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00039	50		 push	 eax
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00040	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	50		 push	 eax
  0004b	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0004e	e8 00 00 00 00	 call	 ??0CSignalData@@QAE@ABV0@@Z ; CSignalData::CSignalData
  00053	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00056	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0005a	50		 push	 eax
  0005b	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0005e	e8 00 00 00 00	 call	 ??0CGraphDataDrawingData@@QAE@ABV0@@Z ; CGraphDataDrawingData::CGraphDataDrawingData
  00063	8d 46 1c	 lea	 eax, DWORD PTR [esi+28]
  00066	50		 push	 eax
  00067	8d 4f 1c	 lea	 ecx, DWORD PTR [edi+28]
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00070	8d 46 20	 lea	 eax, DWORD PTR [esi+32]
  00073	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00077	50		 push	 eax
  00078	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00081	8b c7		 mov	 eax, edi
  00083	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00086	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008d	59		 pop	 ecx
  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CGraphData@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$??0CGraphData@@QAE@ABV0@@Z$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 08	 add	 ecx, 8
  00012	e9 00 00 00 00	 jmp	 ??1CSignalData@@QAE@XZ	; CSignalData::~CSignalData
__unwindfunclet$??0CGraphData@@QAE@ABV0@@Z$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0001d	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00023	cc		 int	 3
  00024	cc		 int	 3
  00025	cc		 int	 3
  00026	cc		 int	 3
  00027	cc		 int	 3
__ehhandler$??0CGraphData@@QAE@ABV0@@Z:
  00028	90		 npad	 1
  00029	90		 npad	 1
  0002a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00031	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CGraphData@@QAE@ABV0@@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CGraphData@@QAE@ABV0@@Z ENDP				; CGraphData::CGraphData
; Function compile flags: /Ogtp
;	COMDAT ??1CGraphData@@QAE@XZ
_TEXT	SEGMENT
??1CGraphData@@QAE@XZ PROC				; CGraphData::~CGraphData, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0000c	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00015	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00018	e8 00 00 00 00	 call	 ??1CSignalData@@QAE@XZ	; CSignalData::~CSignalData
  0001d	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00020	5e		 pop	 esi
  00021	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
??1CGraphData@@QAE@XZ ENDP				; CGraphData::~CGraphData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\GraphData.h
;	COMDAT ?GetIndicatorName2@CGraphData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetIndicatorName2@CGraphData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ PROC ; CGraphData::GetIndicatorName2, COMDAT
; _this$ = ecx

; 232  : 	CString			GetIndicatorName2( void) const							{	return GetIndicatorName();					}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  : 	CString			GetIndicatorName( void) const							{	return m_strIndicatorName;					}

  00003	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z

; 232  : 	CString			GetIndicatorName2( void) const							{	return GetIndicatorName();					}

  00010	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?GetIndicatorName2@CGraphData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ENDP ; CGraphData::GetIndicatorName2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\GraphData.h
;	COMDAT ?GetGraphName2@CGraphData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetGraphName2@CGraphData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ PROC ; CGraphData::GetGraphName2, COMDAT
; _this$ = ecx

; 231  : 	CString			GetGraphName2( void) const								{	return GetGraphName();						}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 228  : 	CString			GetGraphName( void) const								{	return m_strGraphName;						}

  00003	8d 41 20	 lea	 eax, DWORD PTR [ecx+32]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z

; 231  : 	CString			GetGraphName2( void) const								{	return GetGraphName();						}

  00010	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?GetGraphName2@CGraphData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ENDP ; CGraphData::GetGraphName2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\GraphData.h
;	COMDAT ?GetIndicatorName@CGraphData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetIndicatorName@CGraphData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ PROC ; CGraphData::GetIndicatorName, COMDAT
; _this$ = ecx

; 229  : 	CString			GetIndicatorName( void) const							{	return m_strIndicatorName;					}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00010	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?GetIndicatorName@CGraphData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ENDP ; CGraphData::GetIndicatorName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\GraphData.h
;	COMDAT ?GetGraphName@CGraphData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetGraphName@CGraphData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ PROC ; CGraphData::GetGraphName, COMDAT
; _this$ = ecx

; 228  : 	CString			GetGraphName( void) const								{	return m_strGraphName;						}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8d 41 20	 lea	 eax, DWORD PTR [ecx+32]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00010	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?GetGraphName@CGraphData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ENDP ; CGraphData::GetGraphName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\GraphData.h
;	COMDAT ?SetGraphName@CGraphData@@MAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
_TEXT	SEGMENT
_p_strGraphName$ = 8					; size = 4
?SetGraphName@CGraphData@@MAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC ; CGraphData::SetGraphName, COMDAT
; _this$ = ecx

; 225  : 	virtual void	SetGraphName(		const CString &p_strGraphName)		{	m_strGraphName		= p_strGraphName;		}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 c1 20	 add	 ecx, 32			; 00000020H
  00006	5d		 pop	 ebp
  00007	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
?SetGraphName@CGraphData@@MAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CGraphData::SetGraphName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\GraphData.h
;	COMDAT ?SetIndicatorName@CGraphData@@MAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
_TEXT	SEGMENT
_p_strIndicatorName$ = 8				; size = 4
?SetIndicatorName@CGraphData@@MAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC ; CGraphData::SetIndicatorName, COMDAT
; _this$ = ecx

; 224  : 	virtual void	SetIndicatorName(	const CString &p_strIndicatorName)	{	m_strIndicatorName	= p_strIndicatorName;	}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00006	5d		 pop	 ebp
  00007	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
?SetIndicatorName@CGraphData@@MAEXABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CGraphData::SetIndicatorName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\GraphData.h
;	COMDAT ??0CGraphData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CGraphData@@QAE@XZ PROC				; CGraphData::CGraphData, COMDAT
; _this$ = ecx

; 181  : 	CGraphData()	{}							// (2006/11/26 - Seung-Won, Bae) Created by CIndicatorInfo Consturctor.

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CGraphData@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGraphData@@6B@
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00038	6a 00		 push	 0
  0003a	6a 00		 push	 0
  0003c	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	e8 00 00 00 00	 call	 ??0CSignalData@@QAE@_N0@Z ; CSignalData::CSignalData
  0004b	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  0004e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00052	e8 00 00 00 00	 call	 ??0CGraphDataDrawingData@@QAE@XZ ; CGraphDataDrawingData::CGraphDataDrawingData
  00057	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00060	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00069	8b c6		 mov	 eax, esi
  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	5e		 pop	 esi
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CGraphData@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$??0CGraphData@@QAE@XZ$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 08	 add	 ecx, 8
  00012	e9 00 00 00 00	 jmp	 ??1CSignalData@@QAE@XZ	; CSignalData::~CSignalData
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
__ehhandler$??0CGraphData@@QAE@XZ:
  0001c	90		 npad	 1
  0001d	90		 npad	 1
  0001e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00022	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00025	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CGraphData@@QAE@XZ
  00034	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CGraphData@@QAE@XZ ENDP				; CGraphData::CGraphData
; Function compile flags: /Ogtp
;	COMDAT ??_FCSignalData@@QAEXXZ
_TEXT	SEGMENT
??_FCSignalData@@QAEXXZ PROC				; CSignalData::`default constructor closure', COMDAT
; _this$ = ecx
  00000	6a 00		 push	 0
  00002	6a 00		 push	 0
  00004	e8 00 00 00 00	 call	 ??0CSignalData@@QAE@_N0@Z ; CSignalData::CSignalData
  00009	c3		 ret	 0
??_FCSignalData@@QAEXXZ ENDP				; CSignalData::`default constructor closure'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\IndicatorCondition\IndicatorList.cpp
;	COMDAT ??_ECIndicatorList@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECIndicatorList@@UAEPAXI@Z PROC			; CIndicatorList::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ECIndicatorList@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 41		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1CIndicatorList@@UAE@XZ ; CIndicatorList::~CIndicatorList
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	6a 08		 push	 8
  0003c	56		 push	 esi
  0003d	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00042	f6 c3 01	 test	 bl, 1
  00045	74 13		 je	 SHORT $LN3@vector
  00047	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00049	8d 0c cd 04 00
	00 00		 lea	 ecx, DWORD PTR [ecx*8+4]
  00050	51		 push	 ecx
  00051	57		 push	 edi
  00052	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  00057	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005a	8b c7		 mov	 eax, edi
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00066	59		 pop	 ecx
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 04 00	 ret	 4
$LN2@vector:

; 31   : 	delete m_pIndicatorListImpl;

  00070	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00073	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CIndicatorList@@6B@
  00079	85 c9		 test	 ecx, ecx
  0007b	74 06		 je	 SHORT $LN8@vector
  0007d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0007f	6a 01		 push	 1
  00081	ff 10		 call	 DWORD PTR [eax]
$LN8@vector:
  00083	f6 c3 01	 test	 bl, 1
  00086	74 0b		 je	 SHORT $LN4@vector
  00088	6a 08		 push	 8
  0008a	56		 push	 esi
  0008b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00090	83 c4 08	 add	 esp, 8
$LN4@vector:
  00093	8b c6		 mov	 eax, esi
  00095	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00098	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009f	59		 pop	 ecx
  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c2 04 00	 ret	 4
  000a9	cc		 int	 3
  000aa	cc		 int	 3
  000ab	cc		 int	 3
  000ac	cc		 int	 3
  000ad	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ECIndicatorList@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ECIndicatorList@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ECIndicatorList@@UAEPAXI@Z ENDP			; CIndicatorList::`vector deleting destructor'
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\IndicatorCondition\IndicatorList.cpp
;	COMDAT ??_GCIndicatorList@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCIndicatorList@@UAEPAXI@Z PROC			; CIndicatorList::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 30   : {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 31   : 	delete m_pIndicatorListImpl;

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CIndicatorList@@6B@
  0000f	85 c9		 test	 ecx, ecx
  00011	74 06		 je	 SHORT $LN6@scalar
  00013	8b 01		 mov	 eax, DWORD PTR [ecx]
  00015	6a 01		 push	 1
  00017	ff 10		 call	 DWORD PTR [eax]
$LN6@scalar:
  00019	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001d	74 0b		 je	 SHORT $LN8@scalar
  0001f	6a 08		 push	 8
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN8@scalar:
  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
??_GCIndicatorList@@UAEPAXI@Z ENDP			; CIndicatorList::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??4CIndicatorList@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4CIndicatorList@@QAEAAV0@ABV0@@Z PROC			; CIndicatorList::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00009	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0000c	8b c1		 mov	 eax, ecx
  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
??4CIndicatorList@@QAEAAV0@ABV0@@Z ENDP			; CIndicatorList::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0CIndicatorList@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0CIndicatorList@@QAE@ABV0@@Z PROC			; CIndicatorList::CIndicatorList, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CIndicatorList@@6B@
  0000c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000f	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0CIndicatorList@@QAE@ABV0@@Z ENDP			; CIndicatorList::CIndicatorList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\IndicatorCondition\IndicatorList.cpp
;	COMDAT ?RemoveAllIndicatorInfo@CIndicatorList@@QAEHW4EIndicatorListType@@PBD@Z
_TEXT	SEGMENT
_p_eIndicatorListType$ = 8				; size = 4
_p_szIndicatorName$ = 12				; size = 4
?RemoveAllIndicatorInfo@CIndicatorList@@QAEHW4EIndicatorListType@@PBD@Z PROC ; CIndicatorList::RemoveAllIndicatorInfo, COMDAT
; _this$ = ecx

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 154  : 	return m_pIndicatorListImpl->RemoveAllIndicatorInfo( p_eIndicatorListType, p_szIndicatorName);

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 155  : }

  00006	5d		 pop	 ebp

; 154  : 	return m_pIndicatorListImpl->RemoveAllIndicatorInfo( p_eIndicatorListType, p_szIndicatorName);

  00007	e9 00 00 00 00	 jmp	 ?RemoveAllIndicatorInfo@CIndicatorListImplementation@@QAEHW4EIndicatorListType@@PBD@Z ; CIndicatorListImplementation::RemoveAllIndicatorInfo
?RemoveAllIndicatorInfo@CIndicatorList@@QAEHW4EIndicatorListType@@PBD@Z ENDP ; CIndicatorList::RemoveAllIndicatorInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\IndicatorCondition\IndicatorList.cpp
;	COMDAT ?RemoveAllIndicatorInfo@CIndicatorList@@QAEHW4EIndicatorListType@@@Z
_TEXT	SEGMENT
_p_eIndicatorListType$ = 8				; size = 4
?RemoveAllIndicatorInfo@CIndicatorList@@QAEHW4EIndicatorListType@@@Z PROC ; CIndicatorList::RemoveAllIndicatorInfo, COMDAT
; _this$ = ecx

; 148  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 149  : 	return m_pIndicatorListImpl->RemoveAllIndicatorInfo( p_eIndicatorListType);

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 150  : }

  00006	5d		 pop	 ebp

; 149  : 	return m_pIndicatorListImpl->RemoveAllIndicatorInfo( p_eIndicatorListType);

  00007	e9 00 00 00 00	 jmp	 ?RemoveAllIndicatorInfo@CIndicatorListImplementation@@QAEHW4EIndicatorListType@@@Z ; CIndicatorListImplementation::RemoveAllIndicatorInfo
?RemoveAllIndicatorInfo@CIndicatorList@@QAEHW4EIndicatorListType@@@Z ENDP ; CIndicatorList::RemoveAllIndicatorInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\IndicatorCondition\IndicatorList.cpp
;	COMDAT ?RemoveGraphIndicatorInfo@CIndicatorList@@QAEHPBD@Z
_TEXT	SEGMENT
_p_szGraphName$ = 8					; size = 4
?RemoveGraphIndicatorInfo@CIndicatorList@@QAEHPBD@Z PROC ; CIndicatorList::RemoveGraphIndicatorInfo, COMDAT
; _this$ = ecx

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 144  : 	return m_pIndicatorListImpl->RemoveGraphIndicatorInfo( p_szGraphName);

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 145  : }

  00006	5d		 pop	 ebp

; 144  : 	return m_pIndicatorListImpl->RemoveGraphIndicatorInfo( p_szGraphName);

  00007	e9 00 00 00 00	 jmp	 ?RemoveGraphIndicatorInfo@CIndicatorListImplementation@@QAEHPBD@Z ; CIndicatorListImplementation::RemoveGraphIndicatorInfo
?RemoveGraphIndicatorInfo@CIndicatorList@@QAEHPBD@Z ENDP ; CIndicatorList::RemoveGraphIndicatorInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\IndicatorCondition\IndicatorList.cpp
;	COMDAT ?GetDefaultIndicatorInfo@CIndicatorList@@QAEPAVCIndicatorInfo@@W4EIndicatorListType@@PBDW4EIndicatorInfoGettingType@@@Z
_TEXT	SEGMENT
_p_eIndicatorListType$ = 8				; size = 4
_p_szIndicatorName$ = 12				; size = 4
_p_nDefaultOption$ = 16					; size = 4
?GetDefaultIndicatorInfo@CIndicatorList@@QAEPAVCIndicatorInfo@@W4EIndicatorListType@@PBDW4EIndicatorInfoGettingType@@@Z PROC ; CIndicatorList::GetDefaultIndicatorInfo, COMDAT
; _this$ = ecx

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 133  : 	return m_pIndicatorListImpl->GetDefaultIndicatorInfo( p_eIndicatorListType, p_szIndicatorName, p_nDefaultOption);

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 134  : }

  00006	5d		 pop	 ebp

; 133  : 	return m_pIndicatorListImpl->GetDefaultIndicatorInfo( p_eIndicatorListType, p_szIndicatorName, p_nDefaultOption);

  00007	e9 00 00 00 00	 jmp	 ?GetDefaultIndicatorInfo@CIndicatorListImplementation@@QAEPAVCIndicatorInfo@@W4EIndicatorListType@@PBDW4EIndicatorInfoGettingType@@@Z ; CIndicatorListImplementation::GetDefaultIndicatorInfo
?GetDefaultIndicatorInfo@CIndicatorList@@QAEPAVCIndicatorInfo@@W4EIndicatorListType@@PBDW4EIndicatorInfoGettingType@@@Z ENDP ; CIndicatorList::GetDefaultIndicatorInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\IndicatorCondition\IndicatorList.cpp
;	COMDAT ?GetNextIndicatorInfo@CIndicatorList@@QAEXW4EIndicatorListType@@PBDPAPAU__POSITION@@AAPAVCIndicatorInfo@@@Z
_TEXT	SEGMENT
_p_eIndicatorListType$ = 8				; size = 4
_p_szIndicatorName$ = 12				; size = 4
_p_ppsnIndicator$ = 16					; size = 4
_p_pPrevIndicatorInfo$ = 20				; size = 4
?GetNextIndicatorInfo@CIndicatorList@@QAEXW4EIndicatorListType@@PBDPAPAU__POSITION@@AAPAVCIndicatorInfo@@@Z PROC ; CIndicatorList::GetNextIndicatorInfo, COMDAT
; _this$ = ecx

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 126  : 	m_pIndicatorListImpl->GetNextIndicatorInfo( p_eIndicatorListType, p_szIndicatorName, p_ppsnIndicator, p_pPrevIndicatorInfo);

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 127  : }

  00006	5d		 pop	 ebp

; 126  : 	m_pIndicatorListImpl->GetNextIndicatorInfo( p_eIndicatorListType, p_szIndicatorName, p_ppsnIndicator, p_pPrevIndicatorInfo);

  00007	e9 00 00 00 00	 jmp	 ?GetNextIndicatorInfo@CIndicatorListImplementation@@QAEXW4EIndicatorListType@@PBDPAPAU__POSITION@@AAPAVCIndicatorInfo@@@Z ; CIndicatorListImplementation::GetNextIndicatorInfo
?GetNextIndicatorInfo@CIndicatorList@@QAEXW4EIndicatorListType@@PBDPAPAU__POSITION@@AAPAVCIndicatorInfo@@@Z ENDP ; CIndicatorList::GetNextIndicatorInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\IndicatorCondition\IndicatorList.cpp
;	COMDAT ?GetFirstIndicatorInfo@CIndicatorList@@QAEPAVCIndicatorInfo@@W4EIndicatorListType@@PBDPAPAU__POSITION@@@Z
_TEXT	SEGMENT
_p_eIndicatorListType$ = 8				; size = 4
_p_szIndicatorName$ = 12				; size = 4
_p_ppsnIndicator$ = 16					; size = 4
?GetFirstIndicatorInfo@CIndicatorList@@QAEPAVCIndicatorInfo@@W4EIndicatorListType@@PBDPAPAU__POSITION@@@Z PROC ; CIndicatorList::GetFirstIndicatorInfo, COMDAT
; _this$ = ecx

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 119  : 	return m_pIndicatorListImpl->GetFirstIndicatorInfo( p_eIndicatorListType, p_szIndicatorName, p_ppsnIndicator);

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 120  : }

  00006	5d		 pop	 ebp

; 119  : 	return m_pIndicatorListImpl->GetFirstIndicatorInfo( p_eIndicatorListType, p_szIndicatorName, p_ppsnIndicator);

  00007	e9 00 00 00 00	 jmp	 ?GetFirstIndicatorInfo@CIndicatorListImplementation@@QAEPAVCIndicatorInfo@@W4EIndicatorListType@@PBDPAPAU__POSITION@@@Z ; CIndicatorListImplementation::GetFirstIndicatorInfo
?GetFirstIndicatorInfo@CIndicatorList@@QAEPAVCIndicatorInfo@@W4EIndicatorListType@@PBDPAPAU__POSITION@@@Z ENDP ; CIndicatorList::GetFirstIndicatorInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\IndicatorCondition\IndicatorList.cpp
;	COMDAT ?CreateGraphIndicatorInfo@CIndicatorList@@QAEPAVCIndicatorInfo@@PBD@Z
_TEXT	SEGMENT
_p_szIndicatorName$ = 8					; size = 4
?CreateGraphIndicatorInfo@CIndicatorList@@QAEPAVCIndicatorInfo@@PBD@Z PROC ; CIndicatorList::CreateGraphIndicatorInfo, COMDAT
; _this$ = ecx

; 111  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 112  : 	return m_pIndicatorListImpl->CreateGraphIndicatorInfo( p_szIndicatorName);

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 113  : }

  00006	5d		 pop	 ebp

; 112  : 	return m_pIndicatorListImpl->CreateGraphIndicatorInfo( p_szIndicatorName);

  00007	e9 00 00 00 00	 jmp	 ?CreateGraphIndicatorInfo@CIndicatorListImplementation@@QAEPAVCIndicatorInfo@@PBD@Z ; CIndicatorListImplementation::CreateGraphIndicatorInfo
?CreateGraphIndicatorInfo@CIndicatorList@@QAEPAVCIndicatorInfo@@PBD@Z ENDP ; CIndicatorList::CreateGraphIndicatorInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\IndicatorCondition\IndicatorList.cpp
;	COMDAT ?GetGraphIndicatorInfo@CIndicatorList@@QAEPAVCIndicatorInfo@@W4EIndicatorListType@@PBD1W4EIndicatorInfoGettingType@@@Z
_TEXT	SEGMENT
_p_eIndicatorListType$ = 8				; size = 4
_p_szGraphName$ = 12					; size = 4
_p_szIndicatorName$ = 16				; size = 4
_p_nDefaultOption$ = 20					; size = 4
?GetGraphIndicatorInfo@CIndicatorList@@QAEPAVCIndicatorInfo@@W4EIndicatorListType@@PBD1W4EIndicatorInfoGettingType@@@Z PROC ; CIndicatorList::GetGraphIndicatorInfo, COMDAT
; _this$ = ecx

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 106  : 	return m_pIndicatorListImpl->GetGraphIndicatorInfo( p_eIndicatorListType, p_szGraphName, p_szIndicatorName, p_nDefaultOption);

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 107  : }

  00006	5d		 pop	 ebp

; 106  : 	return m_pIndicatorListImpl->GetGraphIndicatorInfo( p_eIndicatorListType, p_szGraphName, p_szIndicatorName, p_nDefaultOption);

  00007	e9 00 00 00 00	 jmp	 ?GetGraphIndicatorInfo@CIndicatorListImplementation@@QAEPAVCIndicatorInfo@@W4EIndicatorListType@@PBD1W4EIndicatorInfoGettingType@@@Z ; CIndicatorListImplementation::GetGraphIndicatorInfo
?GetGraphIndicatorInfo@CIndicatorList@@QAEPAVCIndicatorInfo@@W4EIndicatorListType@@PBD1W4EIndicatorInfoGettingType@@@Z ENDP ; CIndicatorList::GetGraphIndicatorInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\IndicatorCondition\IndicatorList.cpp
;	COMDAT ?GetGraphTypeAndStyleData@CIndicatorList@@QAEPBVCGraphTypeAndStyleData@@XZ
_TEXT	SEGMENT
?GetGraphTypeAndStyleData@CIndicatorList@@QAEPBVCGraphTypeAndStyleData@@XZ PROC ; CIndicatorList::GetGraphTypeAndStyleData, COMDAT
; _this$ = ecx

; 88   : 	return m_pIndicatorListImpl->GetGraphTypeAndStyleData();

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	e9 00 00 00 00	 jmp	 ?GetGraphTypeAndStyleData@CIndicatorListImplementation@@QAEPBVCGraphTypeAndStyleData@@XZ ; CIndicatorListImplementation::GetGraphTypeAndStyleData
?GetGraphTypeAndStyleData@CIndicatorList@@QAEPBVCGraphTypeAndStyleData@@XZ ENDP ; CIndicatorList::GetGraphTypeAndStyleData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\IndicatorCondition\IndicatorList.cpp
;	COMDAT ?GetAllIndicatorNameWithGroupName@CIndicatorList@@QAEPAVCIndicatorGroupDataList@@XZ
_TEXT	SEGMENT
?GetAllIndicatorNameWithGroupName@CIndicatorList@@QAEPAVCIndicatorGroupDataList@@XZ PROC ; CIndicatorList::GetAllIndicatorNameWithGroupName, COMDAT
; _this$ = ecx

; 83   : 	return m_pIndicatorListImpl->GetAllIndicatorNameWithGroupName();

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	e9 00 00 00 00	 jmp	 ?GetAllIndicatorNameWithGroupName@CIndicatorListImplementation@@QAEPAVCIndicatorGroupDataList@@XZ ; CIndicatorListImplementation::GetAllIndicatorNameWithGroupName
?GetAllIndicatorNameWithGroupName@CIndicatorList@@QAEPAVCIndicatorGroupDataList@@XZ ENDP ; CIndicatorList::GetAllIndicatorNameWithGroupName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\IndicatorCondition\IndicatorList.cpp
;	COMDAT ?GetGraphNameList@CIndicatorList@@QBEHW4EIndicatorListType@@W4EIndicatorInfoType@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z
_TEXT	SEGMENT
_p_eIndicatorListType$ = 8				; size = 4
_p_eIndicatorInfoType$ = 12				; size = 4
_graphNameList$ = 16					; size = 4
?GetGraphNameList@CIndicatorList@@QBEHW4EIndicatorListType@@W4EIndicatorInfoType@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z PROC ; CIndicatorList::GetGraphNameList, COMDAT
; _this$ = ecx

; 76   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 77   : 	return m_pIndicatorListImpl->GetGraphNameList( p_eIndicatorListType, p_eIndicatorInfoType, graphNameList);

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 78   : }

  00006	5d		 pop	 ebp

; 77   : 	return m_pIndicatorListImpl->GetGraphNameList( p_eIndicatorListType, p_eIndicatorInfoType, graphNameList);

  00007	e9 00 00 00 00	 jmp	 ?GetGraphNameList@CIndicatorListImplementation@@QBEHW4EIndicatorListType@@W4EIndicatorInfoType@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z ; CIndicatorListImplementation::GetGraphNameList
?GetGraphNameList@CIndicatorList@@QBEHW4EIndicatorListType@@W4EIndicatorInfoType@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z ENDP ; CIndicatorList::GetGraphNameList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\IndicatorCondition\IndicatorList.cpp
;	COMDAT ?GetIndicatorNameList@CIndicatorList@@QBEHW4EIndicatorListType@@W4EIndicatorInfoType@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z
_TEXT	SEGMENT
_p_eIndicatorListType$ = 8				; size = 4
_p_eIndicatorInfoType$ = 12				; size = 4
_IndicatorNameList$ = 16				; size = 4
?GetIndicatorNameList@CIndicatorList@@QBEHW4EIndicatorListType@@W4EIndicatorInfoType@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z PROC ; CIndicatorList::GetIndicatorNameList, COMDAT
; _this$ = ecx

; 71   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   : 	return m_pIndicatorListImpl->GetIndicatorNameList( p_eIndicatorListType, p_eIndicatorInfoType, IndicatorNameList);

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 73   : }

  00006	5d		 pop	 ebp

; 72   : 	return m_pIndicatorListImpl->GetIndicatorNameList( p_eIndicatorListType, p_eIndicatorInfoType, IndicatorNameList);

  00007	e9 00 00 00 00	 jmp	 ?GetIndicatorNameList@CIndicatorListImplementation@@QBEHW4EIndicatorListType@@W4EIndicatorInfoType@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z ; CIndicatorListImplementation::GetIndicatorNameList
?GetIndicatorNameList@CIndicatorList@@QBEHW4EIndicatorListType@@W4EIndicatorInfoType@@AAV?$CList@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@V12@@@@Z ENDP ; CIndicatorList::GetIndicatorNameList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\IndicatorCondition\IndicatorList.cpp
;	COMDAT ?GetCfgFileVersion@CIndicatorList@@QBENW4EIndicatorListType@@@Z
_TEXT	SEGMENT
_p_eIndicatorListType$ = 8				; size = 4
?GetCfgFileVersion@CIndicatorList@@QBENW4EIndicatorListType@@@Z PROC ; CIndicatorList::GetCfgFileVersion, COMDAT
; _this$ = ecx

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 66   : 	return m_pIndicatorListImpl->GetCfgFileVersion( p_eIndicatorListType);

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 67   : }

  00006	5d		 pop	 ebp

; 66   : 	return m_pIndicatorListImpl->GetCfgFileVersion( p_eIndicatorListType);

  00007	e9 00 00 00 00	 jmp	 ?GetCfgFileVersion@CIndicatorListImplementation@@QBENW4EIndicatorListType@@@Z ; CIndicatorListImplementation::GetCfgFileVersion
?GetCfgFileVersion@CIndicatorList@@QBENW4EIndicatorListType@@@Z ENDP ; CIndicatorList::GetCfgFileVersion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\IndicatorCondition\IndicatorList.cpp
;	COMDAT ?GetSaveIndicatorInfoString@CIndicatorList@@QAEHW4EIndicatorListType@@AAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
_TEXT	SEGMENT
_p_eIndicatorListType$ = 8				; size = 4
_p_strIndicatorList$ = 12				; size = 4
?GetSaveIndicatorInfoString@CIndicatorList@@QAEHW4EIndicatorListType@@AAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC ; CIndicatorList::GetSaveIndicatorInfoString, COMDAT
; _this$ = ecx

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return m_pIndicatorListImpl->GetSaveIndicatorInfoString( p_eIndicatorListType, p_strIndicatorList);

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 58   : }

  00006	5d		 pop	 ebp

; 57   : 	return m_pIndicatorListImpl->GetSaveIndicatorInfoString( p_eIndicatorListType, p_strIndicatorList);

  00007	e9 00 00 00 00	 jmp	 ?GetSaveIndicatorInfoString@CIndicatorListImplementation@@QAEHW4EIndicatorListType@@AAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CIndicatorListImplementation::GetSaveIndicatorInfoString
?GetSaveIndicatorInfoString@CIndicatorList@@QAEHW4EIndicatorListType@@AAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CIndicatorList::GetSaveIndicatorInfoString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\IndicatorCondition\IndicatorList.cpp
;	COMDAT ?SaveIndicatorInfo@CIndicatorList@@QAEHW4EIndicatorListType@@PBD@Z
_TEXT	SEGMENT
_p_eIndicatorListType$ = 8				; size = 4
_szFilePath$ = 12					; size = 4
?SaveIndicatorInfo@CIndicatorList@@QAEHW4EIndicatorListType@@PBD@Z PROC ; CIndicatorList::SaveIndicatorInfo, COMDAT
; _this$ = ecx

; 52   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 53   : 	return m_pIndicatorListImpl->SaveIndicatorInfo( p_eIndicatorListType, szFilePath);

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 54   : }

  00006	5d		 pop	 ebp

; 53   : 	return m_pIndicatorListImpl->SaveIndicatorInfo( p_eIndicatorListType, szFilePath);

  00007	e9 00 00 00 00	 jmp	 ?SaveIndicatorInfo@CIndicatorListImplementation@@QAEHW4EIndicatorListType@@PBD@Z ; CIndicatorListImplementation::SaveIndicatorInfo
?SaveIndicatorInfo@CIndicatorList@@QAEHW4EIndicatorListType@@PBD@Z ENDP ; CIndicatorList::SaveIndicatorInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\IndicatorCondition\IndicatorList.cpp
;	COMDAT ?LoadIndicatorInfoFromString@CIndicatorList@@QAEHW4EIndicatorListType@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
_TEXT	SEGMENT
_p_eIndicatorListType$ = 8				; size = 4
_p_strIndicatorList$ = 12				; size = 4
?LoadIndicatorInfoFromString@CIndicatorList@@QAEHW4EIndicatorListType@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC ; CIndicatorList::LoadIndicatorInfoFromString, COMDAT
; _this$ = ecx

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 44   : 	return m_pIndicatorListImpl->LoadIndicatorInfoFromString( p_eIndicatorListType, p_strIndicatorList);

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 45   : }

  00006	5d		 pop	 ebp

; 44   : 	return m_pIndicatorListImpl->LoadIndicatorInfoFromString( p_eIndicatorListType, p_strIndicatorList);

  00007	e9 00 00 00 00	 jmp	 ?LoadIndicatorInfoFromString@CIndicatorListImplementation@@QAEHW4EIndicatorListType@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CIndicatorListImplementation::LoadIndicatorInfoFromString
?LoadIndicatorInfoFromString@CIndicatorList@@QAEHW4EIndicatorListType@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CIndicatorList::LoadIndicatorInfoFromString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\IndicatorCondition\IndicatorList.cpp
;	COMDAT ?LoadIndicatorInfo@CIndicatorList@@QAEHW4EIndicatorListType@@PBD@Z
_TEXT	SEGMENT
_p_eIndicatorListType$ = 8				; size = 4
_szFilePath$ = 12					; size = 4
?LoadIndicatorInfo@CIndicatorList@@QAEHW4EIndicatorListType@@PBD@Z PROC ; CIndicatorList::LoadIndicatorInfo, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 40   : 	return m_pIndicatorListImpl->LoadIndicatorInfo( p_eIndicatorListType, szFilePath);

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 41   : }

  00006	5d		 pop	 ebp

; 40   : 	return m_pIndicatorListImpl->LoadIndicatorInfo( p_eIndicatorListType, szFilePath);

  00007	e9 00 00 00 00	 jmp	 ?LoadIndicatorInfo@CIndicatorListImplementation@@QAEHW4EIndicatorListType@@PBD@Z ; CIndicatorListImplementation::LoadIndicatorInfo
?LoadIndicatorInfo@CIndicatorList@@QAEHW4EIndicatorListType@@PBD@Z ENDP ; CIndicatorList::LoadIndicatorInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\IndicatorCondition\IndicatorList.cpp
;	COMDAT ??1CIndicatorList@@UAE@XZ
_TEXT	SEGMENT
??1CIndicatorList@@UAE@XZ PROC				; CIndicatorList::~CIndicatorList, COMDAT
; _this$ = ecx

; 30   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CIndicatorList@@6B@

; 31   : 	delete m_pIndicatorListImpl;

  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 06		 je	 SHORT $LN3@CIndicator
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	6a 01		 push	 1
  00011	ff 10		 call	 DWORD PTR [eax]
$LN3@CIndicator:

; 32   : }

  00013	c3		 ret	 0
??1CIndicatorList@@UAE@XZ ENDP				; CIndicatorList::~CIndicatorList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\IndicatorCondition\IndicatorList.cpp
;	COMDAT ??0CIndicatorList@@QAE@PAUHWND__@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@11W4CHART_MODE@CChartInfo@@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p_hOcxWnd$ = 8						; size = 4
_strMainDefaultFilePathAndName$ = 12			; size = 4
_strUserDefaultFilePathAndName$ = 16			; size = 4
_strUserFilePathAndName$ = 20				; size = 4
_p_eChartMode$ = 24					; size = 4
??0CIndicatorList@@QAE@PAUHWND__@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@11W4CHART_MODE@CChartInfo@@@Z PROC ; CIndicatorList::CIndicatorList, COMDAT
; _this$ = ecx

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CIndicatorList@@QAE@PAUHWND__@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@11W4CHART_MODE@CChartInfo@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 23   : 	// (2008/1/20 - Seung-Won, Bae) for MultiLanguage.
; 24   : 	g_iMetaTable.LoadMetaTable();

  00026	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_iMetaTable@@3VIMetaTable@@A ; g_iMetaTable
  0002b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CIndicatorList@@6B@
  00031	e8 00 00 00 00	 call	 ?LoadMetaTable@IMetaTable@@QAEXXZ ; IMetaTable::LoadMetaTable

; 25   : 
; 26   : 	m_pIndicatorListImpl = new CIndicatorListImplementation( p_hOcxWnd, this, strMainDefaultFilePathAndName, strUserDefaultFilePathAndName, strUserFilePathAndName, p_eChartMode);

  00036	68 88 00 00 00	 push	 136			; 00000088H
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 c0		 test	 eax, eax
  0004f	74 2e		 je	 SHORT $LN3@CIndicator
  00051	ff 75 18	 push	 DWORD PTR _p_eChartMode$[ebp]
  00054	8b c8		 mov	 ecx, eax
  00056	ff 75 14	 push	 DWORD PTR _strUserFilePathAndName$[ebp]
  00059	ff 75 10	 push	 DWORD PTR _strUserDefaultFilePathAndName$[ebp]
  0005c	ff 75 0c	 push	 DWORD PTR _strMainDefaultFilePathAndName$[ebp]
  0005f	56		 push	 esi
  00060	ff 75 08	 push	 DWORD PTR _p_hOcxWnd$[ebp]
  00063	e8 00 00 00 00	 call	 ??0CIndicatorListImplementation@@QAE@PAUHWND__@@PAVCIndicatorList@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@22W4CHART_MODE@CChartInfo@@@Z ; CIndicatorListImplementation::CIndicatorListImplementation
  00068	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 27   : }

  0006b	8b c6		 mov	 eax, esi
  0006d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00070	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00077	59		 pop	 ecx
  00078	5e		 pop	 esi
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 14 00	 ret	 20			; 00000014H
$LN3@CIndicator:

; 25   : 
; 26   : 	m_pIndicatorListImpl = new CIndicatorListImplementation( p_hOcxWnd, this, strMainDefaultFilePathAndName, strUserDefaultFilePathAndName, strUserFilePathAndName, p_eChartMode);

  0007f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 27   : }

  00086	8b c6		 mov	 eax, esi
  00088	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00092	59		 pop	 ecx
  00093	5e		 pop	 esi
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 14 00	 ret	 20			; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CIndicatorList@@QAE@PAUHWND__@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@11W4CHART_MODE@CChartInfo@@@Z$0:
  00000	68 88 00 00 00	 push	 136			; 00000088H
  00005	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
__ehhandler$??0CIndicatorList@@QAE@PAUHWND__@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@11W4CHART_MODE@CChartInfo@@@Z:
  00017	90		 npad	 1
  00018	90		 npad	 1
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CIndicatorList@@QAE@PAUHWND__@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@11W4CHART_MODE@CChartInfo@@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CIndicatorList@@QAE@PAUHWND__@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@11W4CHART_MODE@CChartInfo@@@Z ENDP ; CIndicatorList::CIndicatorList
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 315  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 316  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z PROC		; CObject::Dump, COMDAT
; _this$ = ecx

; 122  : 	{ /* no dumping in release builds */ }

  00000	c2 04 00	 ret	 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z ENDP		; CObject::Dump
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT
?AssertValid@CObject@@UBEXXZ PROC			; CObject::AssertValid, COMDAT
; _this$ = ecx

; 120  : 	{ /* no asserts in release builds */ }

  00000	c2 00 00	 ret	 0
?AssertValid@CObject@@UBEXXZ ENDP			; CObject::AssertValid
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z PROC		; CObject::Serialize, COMDAT
; _this$ = ecx

; 106  : 	{ /* CObject does not serialize anything by default */ }

  00000	c2 04 00	 ret	 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z ENDP		; CObject::Serialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT
??1CObject@@UAE@XZ PROC					; CObject::~CObject, COMDAT
; _this$ = ecx

; 104  : 	{ }

  00000	c2 00 00	 ret	 0
??1CObject@@UAE@XZ ENDP					; CObject::~CObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\IndicatorCondition\IndicatorList.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\IndicatorCondition\IndicatorList.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
