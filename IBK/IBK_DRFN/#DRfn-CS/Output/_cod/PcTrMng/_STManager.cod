; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30145.0 

	TITLE	D:\git\src\IBK\IBK_DRFN\#DRfn-CS\_Obj\PcTrMng\_STManager.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@BKKCOCLK@RMSG_INTERFACE@		; `string'
PUBLIC	??_C@_0BB@GOOPDKI@RMSG_GETPCTRDATA@		; `string'
PUBLIC	??_C@_0BB@JPACFCL@RMSG_SETPCTRDATA@		; `string'
PUBLIC	??_C@_0BB@EPGJDGDK@RMSG_CONCERNHWND@		; `string'
PUBLIC	??_C@_0BA@JHANHJCN@RMSG_INTREQUEST@		; `string'
PUBLIC	??_C@_0BF@MNPNIDPI@RMSG_GWANSIMREGISTER@	; `string'
;	COMDAT ??_C@_0BF@MNPNIDPI@RMSG_GWANSIMREGISTER@
CONST	SEGMENT
??_C@_0BF@MNPNIDPI@RMSG_GWANSIMREGISTER@ DB 'RMSG_GWANSIMREGISTER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JHANHJCN@RMSG_INTREQUEST@
CONST	SEGMENT
??_C@_0BA@JHANHJCN@RMSG_INTREQUEST@ DB 'RMSG_INTREQUEST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EPGJDGDK@RMSG_CONCERNHWND@
CONST	SEGMENT
??_C@_0BB@EPGJDGDK@RMSG_CONCERNHWND@ DB 'RMSG_CONCERNHWND', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JPACFCL@RMSG_SETPCTRDATA@
CONST	SEGMENT
??_C@_0BB@JPACFCL@RMSG_SETPCTRDATA@ DB 'RMSG_SETPCTRDATA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GOOPDKI@RMSG_GETPCTRDATA@
CONST	SEGMENT
??_C@_0BB@GOOPDKI@RMSG_GETPCTRDATA@ DB 'RMSG_GETPCTRDATA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BKKCOCLK@RMSG_INTERFACE@
CONST	SEGMENT
??_C@_0P@BKKCOCLK@RMSG_INTERFACE@ DB 'RMSG_INTERFACE', 00H ; `string'
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1CObject@@UAE@XZ				; CObject::~CObject
PUBLIC	?Serialize@CObject@@UAEXAAVCArchive@@@Z		; CObject::Serialize
PUBLIC	?AssertValid@CObject@@UBEXXZ			; CObject::AssertValid
PUBLIC	?Dump@CObject@@UBEXAAVCDumpContext@@@Z		; CObject::Dump
PUBLIC	?AddSTRunINfo@CSTManager@@UAGHPBDH@Z		; CSTManager::AddSTRunINfo
PUBLIC	?GetSTRunINfo@CSTManager@@UAGHPBD@Z		; CSTManager::GetSTRunINfo
PUBLIC	??1CSTManager@@QAE@XZ				; CSTManager::~CSTManager
PUBLIC	?FindItem@CSTManager@@QAEPAU__POSITION@@PBDAAPAVCSTManager_Info@@@Z ; CSTManager::FindItem
PUBLIC	?RemoveAll@CSTManager@@QAEXXZ			; CSTManager::RemoveAll
PUBLIC	?AddTail@?$CList@PAVCSTManager_Info@@PAV1@@@QAEPAU__POSITION@@PAVCSTManager_Info@@@Z ; CList<CSTManager_Info *,CSTManager_Info *>::AddTail
PUBLIC	?RemoveAll@?$CList@PAVCSTManager_Info@@PAV1@@@QAEXXZ ; CList<CSTManager_Info *,CSTManager_Info *>::RemoveAll
PUBLIC	?RemoveAt@?$CList@PAVCSTManager_Info@@PAV1@@@QAEXPAU__POSITION@@@Z ; CList<CSTManager_Info *,CSTManager_Info *>::RemoveAt
PUBLIC	?NewNode@?$CList@PAVCSTManager_Info@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<CSTManager_Info *,CSTManager_Info *>::NewNode
PUBLIC	?FreeNode@?$CList@PAVCSTManager_Info@@PAV1@@@IAEXPAUCNode@1@@Z ; CList<CSTManager_Info *,CSTManager_Info *>::FreeNode
PUBLIC	??1?$CList@PAVCSTManager_Info@@PAV1@@@UAE@XZ	; CList<CSTManager_Info *,CSTManager_Info *>::~CList<CSTManager_Info *,CSTManager_Info *>
PUBLIC	?Serialize@?$CList@PAVCSTManager_Info@@PAV1@@@UAEXAAVCArchive@@@Z ; CList<CSTManager_Info *,CSTManager_Info *>::Serialize
PUBLIC	??_G?$CList@PAVCSTManager_Info@@PAV1@@@UAEPAXI@Z ; CList<CSTManager_Info *,CSTManager_Info *>::`scalar deleting destructor'
PUBLIC	??$SerializeElements@PAVCSTManager_Info@@@@YGXAAVCArchive@@PAPAVCSTManager_Info@@H@Z ; SerializeElements<CSTManager_Info *>
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R3CObject@@8					; CObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObject@@8					; CObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CObject@@8			; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$CList@PAVCSTManager_Info@@PAV1@@@6B@	; CList<CSTManager_Info *,CSTManager_Info *>::`vftable'
PUBLIC	??_7CSTManager@@6B@				; CSTManager::`vftable'
PUBLIC	??_R4?$CList@PAVCSTManager_Info@@PAV1@@@6B@	; CList<CSTManager_Info *,CSTManager_Info *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CList@PAVCSTManager_Info@@PAV1@@@@8	; CList<CSTManager_Info *,CSTManager_Info *> `RTTI Type Descriptor'
PUBLIC	??_R3?$CList@PAVCSTManager_Info@@PAV1@@@8	; CList<CSTManager_Info *,CSTManager_Info *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CList@PAVCSTManager_Info@@PAV1@@@8	; CList<CSTManager_Info *,CSTManager_Info *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CList@PAVCSTManager_Info@@PAV1@@@8 ; CList<CSTManager_Info *,CSTManager_Info *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CSTManager@@6B@				; CSTManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSTManager@@@8				; CSTManager `RTTI Type Descriptor'
PUBLIC	??_R3CSTManager@@8				; CSTManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSTManager@@8				; CSTManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSTManager@@8			; CSTManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ISTManager@@8			; ISTManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUISTManager@@@8				; ISTManager `RTTI Type Descriptor'
PUBLIC	??_R3ISTManager@@8				; ISTManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISTManager@@8				; ISTManager::`RTTI Base Class Array'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	?__global_delete@@YAXPAXI@Z:PROC		; __global_delete
EXTRN	___std_terminate:PROC
EXTRN	__imp__RegisterWindowMessageA@4:PROC
EXTRN	?AfxThrowInvalidArgException@@YGXXZ:PROC	; AfxThrowInvalidArgException
EXTRN	?AfxThrowArchiveException@@YGXHPBD@Z:PROC	; AfxThrowArchiveException
EXTRN	?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ:PROC ; CObject::GetRuntimeClass
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z:PROC
EXTRN	__imp_?CompareNoCase@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z:PROC
EXTRN	?Read@CArchive@@QAEIPAXI@Z:PROC			; CArchive::Read
EXTRN	?Write@CArchive@@QAEXPBXI@Z:PROC		; CArchive::Write
EXTRN	?ReadCount@CArchive@@QAEKXZ:PROC		; CArchive::ReadCount
EXTRN	?WriteCount@CArchive@@QAEXK@Z:PROC		; CArchive::WriteCount
EXTRN	?Create@CPlex@@SGPAU1@AAPAU1@II@Z:PROC		; CPlex::Create
EXTRN	?FreeDataChain@CPlex@@QAEXXZ:PROC		; CPlex::FreeDataChain
EXTRN	??_E?$CList@PAVCSTManager_Info@@PAV1@@@UAEPAXI@Z:PROC ; CList<CSTManager_Info *,CSTManager_Info *>::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?RMSG_INTERFACE@@3IB DD 01H DUP (?)			; RMSG_INTERFACE
?RMSG_GETPCTRDATA@@3IB DD 01H DUP (?)			; RMSG_GETPCTRDATA
?RMSG_SETPCTRDATA@@3IB DD 01H DUP (?)			; RMSG_SETPCTRDATA
?RMSG_CONCERNHWND@@3IB DD 01H DUP (?)			; RMSG_CONCERNHWND
?RMSG_INTREQUEST@@3IB DD 01H DUP (?)			; RMSG_INTREQUEST
?RMSG_GWANSIMREGISTER@@3IB DD 01H DUP (?)		; RMSG_GWANSIMREGISTER
_BSS	ENDS
CRT$XCU	SEGMENT
?RMSG_INTERFACE$initializer$@@3P6AXXZA DD FLAT:??__ERMSG_INTERFACE@@YAXXZ ; RMSG_INTERFACE$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R2ISTManager@@8
rdata$r	SEGMENT
??_R2ISTManager@@8 DD FLAT:??_R1A@?0A@EA@ISTManager@@8	; ISTManager::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ISTManager@@8
rdata$r	SEGMENT
??_R3ISTManager@@8 DD 00H				; ISTManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ISTManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISTManager@@@8
data$rs	SEGMENT
??_R0?AUISTManager@@@8 DD FLAT:??_7type_info@@6B@	; ISTManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISTManager@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@ISTManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISTManager@@8 DD FLAT:??_R0?AUISTManager@@@8 ; ISTManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISTManager@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CSTManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSTManager@@8 DD FLAT:??_R0?AVCSTManager@@@8 ; CSTManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSTManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CSTManager@@8
rdata$r	SEGMENT
??_R2CSTManager@@8 DD FLAT:??_R1A@?0A@EA@CSTManager@@8	; CSTManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISTManager@@8
rdata$r	ENDS
;	COMDAT ??_R3CSTManager@@8
rdata$r	SEGMENT
??_R3CSTManager@@8 DD 00H				; CSTManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CSTManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSTManager@@@8
data$rs	SEGMENT
??_R0?AVCSTManager@@@8 DD FLAT:??_7type_info@@6B@	; CSTManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSTManager@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CSTManager@@6B@
rdata$r	SEGMENT
??_R4CSTManager@@6B@ DD 00H				; CSTManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSTManager@@@8
	DD	FLAT:??_R3CSTManager@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CList@PAVCSTManager_Info@@PAV1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CList@PAVCSTManager_Info@@PAV1@@@8 DD FLAT:??_R0?AV?$CList@PAVCSTManager_Info@@PAV1@@@@8 ; CList<CSTManager_Info *,CSTManager_Info *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CList@PAVCSTManager_Info@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CList@PAVCSTManager_Info@@PAV1@@@8
rdata$r	SEGMENT
??_R2?$CList@PAVCSTManager_Info@@PAV1@@@8 DD FLAT:??_R1A@?0A@EA@?$CList@PAVCSTManager_Info@@PAV1@@@8 ; CList<CSTManager_Info *,CSTManager_Info *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CList@PAVCSTManager_Info@@PAV1@@@8
rdata$r	SEGMENT
??_R3?$CList@PAVCSTManager_Info@@PAV1@@@8 DD 00H	; CList<CSTManager_Info *,CSTManager_Info *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CList@PAVCSTManager_Info@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CList@PAVCSTManager_Info@@PAV1@@@@8
data$rs	SEGMENT
??_R0?AV?$CList@PAVCSTManager_Info@@PAV1@@@@8 DD FLAT:??_7type_info@@6B@ ; CList<CSTManager_Info *,CSTManager_Info *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CList@PAVCSTManager_Info@@PAV1@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CList@PAVCSTManager_Info@@PAV1@@@6B@
rdata$r	SEGMENT
??_R4?$CList@PAVCSTManager_Info@@PAV1@@@6B@ DD 00H	; CList<CSTManager_Info *,CSTManager_Info *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CList@PAVCSTManager_Info@@PAV1@@@@8
	DD	FLAT:??_R3?$CList@PAVCSTManager_Info@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_7CSTManager@@6B@
CONST	SEGMENT
??_7CSTManager@@6B@ DD FLAT:??_R4CSTManager@@6B@	; CSTManager::`vftable'
	DD	FLAT:?AddSTRunINfo@CSTManager@@UAGHPBDH@Z
	DD	FLAT:?GetSTRunINfo@CSTManager@@UAGHPBD@Z
CONST	ENDS
;	COMDAT ??_7?$CList@PAVCSTManager_Info@@PAV1@@@6B@
CONST	SEGMENT
??_7?$CList@PAVCSTManager_Info@@PAV1@@@6B@ DD FLAT:??_R4?$CList@PAVCSTManager_Info@@PAV1@@@6B@ ; CList<CSTManager_Info *,CSTManager_Info *>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CList@PAVCSTManager_Info@@PAV1@@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CList@PAVCSTManager_Info@@PAV1@@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CObject@@8
rdata$r	SEGMENT
??_R2CObject@@8 DD FLAT:??_R1A@?0A@EA@CObject@@8	; CObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObject@@8
rdata$r	SEGMENT
??_R3CObject@@8 DD 00H					; CObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
data$rs	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
data$rs	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$CList@PAVCSTManager_Info@@PAV1@@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_G?$CList@PAVCSTManager_Info@@PAV1@@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$CList@PAVCSTManager_Info@@PAV1@@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CList@PAVCSTManager_Info@@PAV1@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CSTManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1CSTManager@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CSTManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
CRT$XCU	SEGMENT
?RMSG_GETPCTRDATA$initializer$@@3P6AXXZA DD FLAT:??__ERMSG_GETPCTRDATA@@YAXXZ ; RMSG_GETPCTRDATA$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?RMSG_SETPCTRDATA$initializer$@@3P6AXXZA DD FLAT:??__ERMSG_SETPCTRDATA@@YAXXZ ; RMSG_SETPCTRDATA$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?RMSG_CONCERNHWND$initializer$@@3P6AXXZA DD FLAT:??__ERMSG_CONCERNHWND@@YAXXZ ; RMSG_CONCERNHWND$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?RMSG_INTREQUEST$initializer$@@3P6AXXZA DD FLAT:??__ERMSG_INTREQUEST@@YAXXZ ; RMSG_INTREQUEST$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?RMSG_GWANSIMREGISTER$initializer$@@3P6AXXZA DD FLAT:??__ERMSG_GWANSIMREGISTER@@YAXXZ ; RMSG_GWANSIMREGISTER$initializer$
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@PAVCSTManager_Info@@@@YGXAAVCArchive@@PAPAVCSTManager_Info@@H@Z
_TEXT	SEGMENT
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@PAVCSTManager_Info@@@@YGXAAVCArchive@@PAPAVCSTManager_Info@@H@Z PROC ; SerializeElements<CSTManager_Info *>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR _nCount$[ebp]
  0000b	57		 push	 edi
  0000c	85 f6		 test	 esi, esi
  0000e	74 08		 je	 SHORT $LN2@SerializeE
  00010	85 c9		 test	 ecx, ecx
  00012	0f 84 89 00 00
	00		 je	 $LN34@SerializeE
$LN2@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00018	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  0001b	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0001e	f7 d0		 not	 eax
  00020	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00022	74 3c		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;
; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )

  00024	85 f6		 test	 esi, esi
  00026	74 31		 je	 SHORT $LN8@SerializeE
  00028	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL5@SerializeE:

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00030	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00035	3b f3		 cmp	 esi, ebx
  00037	0f 42 de	 cmovb	 ebx, esi

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0003a	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
  00041	57		 push	 edi
  00042	51		 push	 ecx
  00043	8b ca		 mov	 ecx, edx
  00045	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;
; 87   : 			pData += nElementsToWrite;

  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  00050	03 cf		 add	 ecx, edi
  00052	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  00055	2b f3		 sub	 esi, ebx
  00057	75 d7		 jne	 SHORT $LL5@SerializeE
$LN8@SerializeE:
  00059	5f		 pop	 edi

; 105  : 		}
; 106  : 	}
; 107  : }

  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	5d		 pop	 ebp
  0005d	c2 0c 00	 ret	 12			; 0000000cH
$LN10@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  00060	85 f6		 test	 esi, esi
  00062	74 f5		 je	 SHORT $LN8@SerializeE
$LL7@SerializeE:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00064	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00069	3b f7		 cmp	 esi, edi
  0006b	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0006e	8d 1c bd 00 00
	00 00		 lea	 ebx, DWORD PTR [edi*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00075	53		 push	 ebx
  00076	51		 push	 ecx
  00077	8b ca		 mov	 ecx, edx
  00079	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0007e	3b c3		 cmp	 eax, ebx
  00080	75 16		 jne	 SHORT $LN23@SerializeE
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  00082	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00085	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;
; 104  : 			pData += nElementsToRead;

  00088	03 cb		 add	 ecx, ebx
  0008a	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  0008d	2b f7		 sub	 esi, edi
  0008f	75 d3		 jne	 SHORT $LL7@SerializeE

; 105  : 		}
; 106  : 	}
; 107  : }

  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	5d		 pop	 ebp
  00095	c2 0c 00	 ret	 12			; 0000000cH
$LN23@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 402  : 		AfxThrowArchiveException(CArchiveException::endOfFile);

  00098	6a 00		 push	 0
  0009a	6a 03		 push	 3
  0009c	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN34@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  000a1	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN32@SerializeE:
  000a6	cc		 int	 3
??$SerializeElements@PAVCSTManager_Info@@@@YGXAAVCArchive@@PAPAVCSTManager_Info@@H@Z ENDP ; SerializeElements<CSTManager_Info *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_G?$CList@PAVCSTManager_Info@@PAV1@@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$CList@PAVCSTManager_Info@@PAV1@@@UAEPAXI@Z PROC	; CList<CSTManager_Info *,CSTManager_Info *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$CList@PAVCSTManager_Info@@PAV1@@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00025	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 878  : {

  00028	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@PAVCSTManager_Info@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  00035	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  0003c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00043	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0004a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 872  : 	m_pBlocks->FreeDataChain();

  00051	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00056	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00059	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00060	a8 01		 test	 al, 1
  00062	74 2c		 je	 SHORT $LN22@scalar
  00064	a8 04		 test	 al, 4
  00066	75 1d		 jne	 SHORT $LN3@scalar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 112  : 	{ ::operator delete(p); }

  00068	56		 push	 esi
  00069	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006e	83 c4 04	 add	 esp, 4
  00071	8b c6		 mov	 eax, esi
  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007d	59		 pop	 ecx
  0007e	5e		 pop	 esi
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
$LN3@scalar:
  00085	6a 1c		 push	 28			; 0000001cH
  00087	56		 push	 esi
  00088	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0008d	83 c4 08	 add	 esp, 8
$LN22@scalar:
  00090	8b c6		 mov	 eax, esi
  00092	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00095	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009c	59		 pop	 ecx
  0009d	5e		 pop	 esi
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 04 00	 ret	 4
  000a4	cc		 int	 3
  000a5	cc		 int	 3
  000a6	cc		 int	 3
  000a7	cc		 int	 3
  000a8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_G?$CList@PAVCSTManager_Info@@PAV1@@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$CList@PAVCSTManager_Info@@PAV1@@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$CList@PAVCSTManager_Info@@PAV1@@@UAEPAXI@Z ENDP	; CList<CSTManager_Info *,CSTManager_Info *>::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CList@PAVCSTManager_Info@@PAV1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_nNewCount$1$ = -16					; size = 4
_newData$1 = -12					; size = 4
_pData$1$ = -8						; size = 4
_pNode$1$ = -8						; size = 4
_nElementsLeft$1$ = -4					; size = 4
_this$1$ = -4						; size = 4
_ar$ = 8						; size = 4
?Serialize@?$CList@PAVCSTManager_Info@@PAV1@@@UAEXAAVCArchive@@@Z PROC ; CList<CSTManager_Info *,CSTManager_Info *>::Serialize, COMDAT
; _this$ = ecx

; 1169 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00009	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1169 : {

  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00011	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00014	f7 d0		 not	 eax
  00016	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1174 : 	if (ar.IsStoring())

  00018	0f 84 ae 00 00
	00		 je	 $LN7@Serialize

; 1175 : 	{
; 1176 : 		ar.WriteCount(m_nCount);

  0001e	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00021	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00026	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00029	89 45 f8	 mov	 DWORD PTR _pNode$1$[ebp], eax
  0002c	85 c0		 test	 eax, eax
  0002e	0f 84 43 01 00
	00		 je	 $LN68@Serialize
$LL4@Serialize:

; 1178 : 		{
; 1179 : 			ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1180 : 			TYPE* pData;
; 1181 : 			/*
; 1182 : 			 * in some cases the & operator might be overloaded, and we cannot use it to obtain
; 1183 : 			 * the address of a given object.  We then use the following trick to get the address
; 1184 : 			 */
; 1185 : 			pData = reinterpret_cast< TYPE* >( &reinterpret_cast< int& >( static_cast< TYPE& >( pNode->data ) ) );

  00034	8d 70 08	 lea	 esi, DWORD PTR [eax+8]

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00037	85 f6		 test	 esi, esi
  00039	0f 84 4a 01 00
	00		 je	 $LN60@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00042	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00045	f7 d0		 not	 eax
  00047	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00049	74 33		 je	 SHORT $LN21@Serialize

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0004b	b8 01 00 00 00	 mov	 eax, 1
  00050	89 45 fc	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
$LL16@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00053	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00058	3b c3		 cmp	 eax, ebx
  0005a	0f 42 d8	 cmovb	 ebx, eax

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0005d	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
  00064	57		 push	 edi
  00065	56		 push	 esi
  00066	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _nElementsLeft$1$[ebp]

; 87   : 			pData += nElementsToWrite;

  0006e	03 f7		 add	 esi, edi
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00073	2b c3		 sub	 eax, ebx
  00075	89 45 fc	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
  00078	85 c0		 test	 eax, eax
  0007a	75 d7		 jne	 SHORT $LL16@Serialize

; 88   : 		}
; 89   : 	}

  0007c	eb 35		 jmp	 SHORT $LN2@Serialize
$LN21@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  0007e	bf 01 00 00 00	 mov	 edi, 1
$LL18@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00083	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00088	3b fb		 cmp	 edi, ebx
  0008a	0f 42 df	 cmovb	 ebx, edi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0008d	8d 04 9d 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00094	50		 push	 eax
  00095	56		 push	 esi
  00096	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0009b	8d 0c 9d 00 00
	00 00		 lea	 ecx, DWORD PTR [ebx*4]
  000a2	3b c1		 cmp	 eax, ecx
  000a4	0f 85 d6 00 00
	00		 jne	 $LN59@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  000aa	03 f1		 add	 esi, ecx
  000ac	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;

  000af	2b fb		 sub	 edi, ebx
  000b1	75 d0		 jne	 SHORT $LL18@Serialize
$LN2@Serialize:

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  000b3	8b 45 f8	 mov	 eax, DWORD PTR _pNode$1$[ebp]
  000b6	8b 00		 mov	 eax, DWORD PTR [eax]
  000b8	89 45 f8	 mov	 DWORD PTR _pNode$1$[ebp], eax
  000bb	85 c0		 test	 eax, eax
  000bd	0f 85 71 ff ff
	ff		 jne	 $LL4@Serialize

; 1197 : 		}
; 1198 : 	}
; 1199 : }

  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 04 00	 ret	 4
$LN7@Serialize:

; 1186 : 			SerializeElements<TYPE>(ar, pData, 1);
; 1187 : 		}
; 1188 : 	}
; 1189 : 	else
; 1190 : 	{
; 1191 : 		DWORD_PTR nNewCount = ar.ReadCount();

  000cc	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount

; 1192 : 		while (nNewCount--)

  000d1	85 c0		 test	 eax, eax
  000d3	0f 84 9e 00 00
	00		 je	 $LN68@Serialize
  000d9	0f 1f 80 00 00
	00 00		 npad	 7
$LL5@Serialize:
  000e0	48		 dec	 eax
  000e1	89 45 f0	 mov	 DWORD PTR _nNewCount$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  000e4	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  000e7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000ea	f7 d1		 not	 ecx
  000ec	f6 c1 01	 test	 cl, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  000ef	74 3a		 je	 SHORT $LN42@Serialize

; 79   : 		pData = pElements;

  000f1	8d 4d f4	 lea	 ecx, DWORD PTR _newData$1[ebp]
  000f4	bb 01 00 00 00	 mov	 ebx, 1
  000f9	89 4d f8	 mov	 DWORD PTR _pData$1$[ebp], ecx
  000fc	0f 1f 40 00	 npad	 4
$LL37@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00100	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00105	3b df		 cmp	 ebx, edi
  00107	0f 42 fb	 cmovb	 edi, ebx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0010a	8d 34 bd 00 00
	00 00		 lea	 esi, DWORD PTR [edi*4]
  00111	56		 push	 esi
  00112	51		 push	 ecx
  00113	8b c8		 mov	 ecx, eax
  00115	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 87   : 			pData += nElementsToWrite;

  0011a	8b 4d f8	 mov	 ecx, DWORD PTR _pData$1$[ebp]
  0011d	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  00120	03 ce		 add	 ecx, esi
  00122	89 4d f8	 mov	 DWORD PTR _pData$1$[ebp], ecx
  00125	2b df		 sub	 ebx, edi
  00127	75 d7		 jne	 SHORT $LL37@Serialize

; 88   : 		}
; 89   : 	}

  00129	eb 36		 jmp	 SHORT $LN40@Serialize
$LN42@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  0012b	be 01 00 00 00	 mov	 esi, 1

; 96   : 		pData = pElements;

  00130	8d 5d f4	 lea	 ebx, DWORD PTR _newData$1[ebp]
$LL39@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00133	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00138	3b f7		 cmp	 esi, edi
  0013a	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0013d	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00144	51		 push	 ecx
  00145	53		 push	 ebx
  00146	8b c8		 mov	 ecx, eax
  00148	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0014d	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
  00154	3b c1		 cmp	 eax, ecx
  00156	75 28		 jne	 SHORT $LN59@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 104  : 			pData += nElementsToRead;

  00158	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  0015b	03 d9		 add	 ebx, ecx
  0015d	2b f7		 sub	 esi, edi
  0015f	75 d2		 jne	 SHORT $LL39@Serialize
$LN40@Serialize:

; 1193 : 		{
; 1194 : 			TYPE newData[1];
; 1195 : 			SerializeElements<TYPE>(ar, newData, 1);
; 1196 : 			AddTail(newData[0]);

  00161	ff 75 f4	 push	 DWORD PTR _newData$1[ebp]
  00164	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00167	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCSTManager_Info@@PAV1@@@QAEPAU__POSITION@@PAVCSTManager_Info@@@Z ; CList<CSTManager_Info *,CSTManager_Info *>::AddTail
  0016c	8b 45 f0	 mov	 eax, DWORD PTR _nNewCount$1$[ebp]
  0016f	85 c0		 test	 eax, eax
  00171	0f 85 69 ff ff
	ff		 jne	 $LL5@Serialize
$LN68@Serialize:
  00177	5f		 pop	 edi

; 1197 : 		}
; 1198 : 	}
; 1199 : }

  00178	5e		 pop	 esi
  00179	5b		 pop	 ebx
  0017a	8b e5		 mov	 esp, ebp
  0017c	5d		 pop	 ebp
  0017d	c2 04 00	 ret	 4
$LN59@Serialize:
  00180	6a 00		 push	 0
  00182	6a 03		 push	 3
  00184	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN60@Serialize:

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00189	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN85@Serialize:
  0018e	cc		 int	 3
?Serialize@?$CList@PAVCSTManager_Info@@PAV1@@@UAEXAAVCArchive@@@Z ENDP ; CList<CSTManager_Info *,CSTManager_Info *>::Serialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??1?$CList@PAVCSTManager_Info@@PAV1@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CList@PAVCSTManager_Info@@PAV1@@@UAE@XZ PROC	; CList<CSTManager_Info *,CSTManager_Info *>::~CList<CSTManager_Info *,CSTManager_Info *>, COMDAT
; _this$ = ecx

; 878  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CList@PAVCSTManager_Info@@PAV1@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 872  : 	m_pBlocks->FreeDataChain();

  00025	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 878  : {

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@PAVCSTManager_Info@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  0002e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00035	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0003c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00043	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 872  : 	m_pBlocks->FreeDataChain();

  0004a	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0004f	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 879  : 	RemoveAll();
; 880  : 	ASSERT(m_nCount == 0);
; 881  : }

  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	5e		 pop	 esi
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
  00066	cc		 int	 3
  00067	cc		 int	 3
  00068	cc		 int	 3
  00069	cc		 int	 3
  0006a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CList@PAVCSTManager_Info@@PAV1@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CList@PAVCSTManager_Info@@PAV1@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CList@PAVCSTManager_Info@@PAV1@@@UAE@XZ ENDP	; CList<CSTManager_Info *,CSTManager_Info *>::~CList<CSTManager_Info *,CSTManager_Info *>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?FreeNode@?$CList@PAVCSTManager_Info@@PAV1@@@IAEXPAUCNode@1@@Z
_TEXT	SEGMENT
_pNode$ = 8						; size = 4
?FreeNode@?$CList@PAVCSTManager_Info@@PAV1@@@IAEXPAUCNode@1@@Z PROC ; CList<CSTManager_Info *,CSTManager_Info *>::FreeNode, COMDAT
; _this$ = ecx

; 936  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 937  : 	pNode->data.~TYPE();
; 938  : 	pNode->pNext = m_pNodeFree;

  00003	8b 55 08	 mov	 edx, DWORD PTR _pNode$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 939  : 	m_pNodeFree = pNode;
; 940  : 	m_nCount--;

  0000e	83 46 0c ff	 add	 DWORD PTR [esi+12], -1
  00012	89 56 10	 mov	 DWORD PTR [esi+16], edx

; 941  : 	ASSERT(m_nCount >= 0);  // make sure we don't underflow
; 942  : 
; 943  : 	// if no more elements, cleanup completely
; 944  : 	if (m_nCount == 0)

  00015	75 2b		 jne	 SHORT $LN2@FreeNode

; 872  : 	m_pBlocks->FreeDataChain();

  00017	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0001a	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00021	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00028	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0002f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00036	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0003b	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
$LN2@FreeNode:
  00042	5e		 pop	 esi

; 945  : 		RemoveAll();
; 946  : }

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
?FreeNode@?$CList@PAVCSTManager_Info@@PAV1@@@IAEXPAUCNode@1@@Z ENDP ; CList<CSTManager_Info *,CSTManager_Info *>::FreeNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?NewNode@?$CList@PAVCSTManager_Info@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z
_TEXT	SEGMENT
_pPrev$ = 8						; size = 4
_pNext$ = 12						; size = 4
?NewNode@?$CList@PAVCSTManager_Info@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z PROC ; CList<CSTManager_Info *,CSTManager_Info *>::NewNode, COMDAT
; _this$ = ecx

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 902  : 	if (m_pNodeFree == NULL)

  00006	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0000a	75 34		 jne	 SHORT $LN7@NewNode

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  0000c	6a 0c		 push	 12			; 0000000cH
  0000e	ff 76 18	 push	 DWORD PTR [esi+24]
  00011	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001a	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0001d	83 c0 08	 add	 eax, 8
  00020	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  00023	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00026	83 c0 f4	 add	 eax, -12		; fffffff4H

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00029	83 c2 ff	 add	 edx, -1
  0002c	78 12		 js	 SHORT $LN7@NewNode
  0002e	66 90		 npad	 2
$LL4@NewNode:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	89 08		 mov	 DWORD PTR [eax], ecx

; 915  : 			m_pNodeFree = pNode;

  00035	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00038	83 e8 0c	 sub	 eax, 12			; 0000000cH
  0003b	83 ea 01	 sub	 edx, 1
  0003e	79 f0		 jns	 SHORT $LL4@NewNode
$LN7@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00040	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00043	85 c0		 test	 eax, eax
  00045	74 18		 je	 SHORT $LN17@NewNode

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00047	8b 08		 mov	 ecx, DWORD PTR [eax]
  00049	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 922  : 	pNode->pPrev = pPrev;

  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _pPrev$[ebp]
  0004f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 923  : 	pNode->pNext = pNext;

  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _pNext$[ebp]
  00055	89 08		 mov	 DWORD PTR [eax], ecx

; 924  : 	m_nCount++;

  00057	ff 46 0c	 inc	 DWORD PTR [esi+12]

; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;
; 930  : #pragma pop_macro("new")
; 931  : 	return pNode;

  0005a	5e		 pop	 esi

; 932  : }

  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
$LN17@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  0005f	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN15@NewNode:
  00064	cc		 int	 3
?NewNode@?$CList@PAVCSTManager_Info@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z ENDP ; CList<CSTManager_Info *,CSTManager_Info *>::NewNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAt@?$CList@PAVCSTManager_Info@@PAV1@@@QAEXPAU__POSITION@@@Z
_TEXT	SEGMENT
_position$ = 8						; size = 4
?RemoveAt@?$CList@PAVCSTManager_Info@@PAV1@@@QAEXPAU__POSITION@@@Z PROC ; CList<CSTManager_Info *,CSTManager_Info *>::RemoveAt, COMDAT
; _this$ = ecx

; 1100 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1101 : 	ASSERT_VALID(this);
; 1102 : 
; 1103 : 	CNode* pOldNode = (CNode*) position;
; 1104 : 	ASSERT(AfxIsValidAddress(pOldNode, sizeof(CNode)));
; 1105 : 
; 1106 : 	// remove pOldNode from list
; 1107 : 	if (pOldNode == m_pNodeHead)

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _position$[ebp]
  00009	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000b	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  0000e	75 05		 jne	 SHORT $LN2@RemoveAt

; 1108 : 	{
; 1109 : 		m_pNodeHead = pOldNode->pNext;

  00010	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 1110 : 	}

  00013	eb 05		 jmp	 SHORT $LN3@RemoveAt
$LN2@RemoveAt:

; 1111 : 	else
; 1112 : 	{
; 1113 : 		ASSERT(AfxIsValidAddress(pOldNode->pPrev, sizeof(CNode)));
; 1114 : 		pOldNode->pPrev->pNext = pOldNode->pNext;

  00015	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00018	89 10		 mov	 DWORD PTR [eax], edx
$LN3@RemoveAt:

; 1115 : 	}
; 1116 : 	if (pOldNode == m_pNodeTail)

  0001a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001d	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00020	75 05		 jne	 SHORT $LN4@RemoveAt

; 1117 : 	{
; 1118 : 		m_pNodeTail = pOldNode->pPrev;

  00022	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1119 : 	}

  00025	eb 05		 jmp	 SHORT $LN5@RemoveAt
$LN4@RemoveAt:

; 1120 : 	else
; 1121 : 	{
; 1122 : 		ASSERT(AfxIsValidAddress(pOldNode->pNext, sizeof(CNode)));
; 1123 : 		pOldNode->pNext->pPrev = pOldNode->pPrev;

  00027	8b 01		 mov	 eax, DWORD PTR [ecx]
  00029	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN5@RemoveAt:

; 938  : 	pNode->pNext = m_pNodeFree;

  0002c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002f	89 01		 mov	 DWORD PTR [ecx], eax

; 939  : 	m_pNodeFree = pNode;
; 940  : 	m_nCount--;

  00031	83 46 0c ff	 add	 DWORD PTR [esi+12], -1
  00035	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 941  : 	ASSERT(m_nCount >= 0);  // make sure we don't underflow
; 942  : 
; 943  : 	// if no more elements, cleanup completely
; 944  : 	if (m_nCount == 0)

  00038	75 2b		 jne	 SHORT $LN8@RemoveAt

; 872  : 	m_pBlocks->FreeDataChain();

  0003a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0003d	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00044	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0004b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00052	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00059	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0005e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
$LN8@RemoveAt:
  00065	5e		 pop	 esi

; 1124 : 	}
; 1125 : 	FreeNode(pOldNode);
; 1126 : }

  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
?RemoveAt@?$CList@PAVCSTManager_Info@@PAV1@@@QAEXPAU__POSITION@@@Z ENDP ; CList<CSTManager_Info *,CSTManager_Info *>::RemoveAt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAll@?$CList@PAVCSTManager_Info@@PAV1@@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@?$CList@PAVCSTManager_Info@@PAV1@@@QAEXXZ PROC ; CList<CSTManager_Info *,CSTManager_Info *>::RemoveAll, COMDAT
; _this$ = ecx

; 862  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 863  : 	ASSERT_VALID(this);
; 864  : 
; 865  : 	// destroy elements
; 866  : 	CNode* pNode;
; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)
; 868  : 		pNode->data.~TYPE();
; 869  : 
; 870  : 	m_nCount = 0;
; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 872  : 	m_pBlocks->FreeDataChain();

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0000d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00014	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0001b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00022	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00027	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0002e	5e		 pop	 esi

; 874  : }

  0002f	c3		 ret	 0
?RemoveAll@?$CList@PAVCSTManager_Info@@PAV1@@@QAEXXZ ENDP ; CList<CSTManager_Info *,CSTManager_Info *>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?AddTail@?$CList@PAVCSTManager_Info@@PAV1@@@QAEPAU__POSITION@@PAVCSTManager_Info@@@Z
_TEXT	SEGMENT
_newElement$ = 8					; size = 4
?AddTail@?$CList@PAVCSTManager_Info@@PAV1@@@QAEPAU__POSITION@@PAVCSTManager_Info@@@Z PROC ; CList<CSTManager_Info *,CSTManager_Info *>::AddTail, COMDAT
; _this$ = ecx

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 902  : 	if (m_pNodeFree == NULL)

  00007	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0

; 966  : 	ASSERT_VALID(this);
; 967  : 
; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  0000b	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 902  : 	if (m_pNodeFree == NULL)

  0000e	75 32		 jne	 SHORT $LN11@AddTail

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  00010	6a 0c		 push	 12			; 0000000cH
  00012	ff 76 18	 push	 DWORD PTR [esi+24]
  00015	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001e	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00021	83 c0 08	 add	 eax, 8
  00024	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00027	83 c2 ff	 add	 edx, -1
  0002a	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  0002d	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  00030	78 10		 js	 SHORT $LN11@AddTail
$LL8@AddTail:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00032	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00035	89 01		 mov	 DWORD PTR [ecx], eax

; 915  : 			m_pNodeFree = pNode;

  00037	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0003a	83 e9 0c	 sub	 ecx, 12			; 0000000cH
  0003d	83 ea 01	 sub	 edx, 1
  00040	79 f0		 jns	 SHORT $LL8@AddTail
$LN11@AddTail:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00042	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00045	85 c9		 test	 ecx, ecx
  00047	74 39		 je	 SHORT $LN22@AddTail

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00049	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004b	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 969  : 	pNewNode->data = newElement;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]

; 922  : 	pNode->pPrev = pPrev;

  00051	89 79 04	 mov	 DWORD PTR [ecx+4], edi

; 923  : 	pNode->pNext = pNext;

  00054	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 924  : 	m_nCount++;

  0005a	ff 46 0c	 inc	 DWORD PTR [esi+12]

; 969  : 	pNewNode->data = newElement;

  0005d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 970  : 	if (m_pNodeTail != NULL)

  00060	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00063	85 c0		 test	 eax, eax
  00065	74 0d		 je	 SHORT $LN2@AddTail

; 971  : 		m_pNodeTail->pNext = pNewNode;

  00067	89 08		 mov	 DWORD PTR [eax], ecx

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00069	8b c1		 mov	 eax, ecx
  0006b	5f		 pop	 edi
  0006c	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0006f	5e		 pop	 esi

; 976  : }

  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
$LN2@AddTail:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00074	5f		 pop	 edi
  00075	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00078	8b c1		 mov	 eax, ecx
  0007a	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0007d	5e		 pop	 esi

; 976  : }

  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
$LN22@AddTail:

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00082	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN20@AddTail:
  00087	cc		 int	 3
?AddTail@?$CList@PAVCSTManager_Info@@PAV1@@@QAEPAU__POSITION@@PAVCSTManager_Info@@@Z ENDP ; CList<CSTManager_Info *,CSTManager_Info *>::AddTail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_STManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_STManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_STManager.cpp
;	COMDAT ?RemoveAll@CSTManager@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@CSTManager@@QAEXXZ PROC			; CSTManager::RemoveAll, COMDAT
; _this$ = ecx

; 13   : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi

; 14   : 	for(POSITION pos=m_List.GetHeadPosition(); pos;)

  00004	8b 73 08	 mov	 esi, DWORD PTR [ebx+8]
  00007	85 f6		 test	 esi, esi
  00009	74 26		 je	 SHORT $LN18@RemoveAll
  0000b	57		 push	 edi
  0000c	0f 1f 40 00	 npad	 4
$LL2@RemoveAll:

; 15   : 		delete m_List.GetNext(pos);

  00010	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00013	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_STManager.cpp

; 15   : 		delete m_List.GetNext(pos);

  00015	85 ff		 test	 edi, edi
  00017	74 13		 je	 SHORT $LN11@RemoveAll
  00019	8b cf		 mov	 ecx, edi
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00021	6a 08		 push	 8
  00023	57		 push	 edi
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN11@RemoveAll:

; 14   : 	for(POSITION pos=m_List.GetHeadPosition(); pos;)

  0002c	85 f6		 test	 esi, esi
  0002e	75 e0		 jne	 SHORT $LL2@RemoveAll
  00030	5f		 pop	 edi
$LN18@RemoveAll:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00031	8b 4b 18	 mov	 ecx, DWORD PTR [ebx+24]
  00034	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  0003b	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
  00042	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0
  00049	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
  00050	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00055	5e		 pop	 esi
  00056	c7 43 18 00 00
	00 00		 mov	 DWORD PTR [ebx+24], 0
  0005d	5b		 pop	 ebx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_STManager.cpp

; 18   : }

  0005e	c3		 ret	 0
?RemoveAll@CSTManager@@QAEXXZ ENDP			; CSTManager::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_STManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_STManager.cpp
;	COMDAT ?FindItem@CSTManager@@QAEPAU__POSITION@@PBDAAPAVCSTManager_Info@@@Z
_TEXT	SEGMENT
_szSTPath$ = 8						; size = 4
_pInfo$ = 12						; size = 4
?FindItem@CSTManager@@QAEPAU__POSITION@@PBDAAPAVCSTManager_Info@@@Z PROC ; CSTManager::FindItem, COMDAT
; _this$ = ecx

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 32   : 	POSITION posInfo = NULL;
; 33   : 	pInfo = NULL;

  00006	8b 7d 0c	 mov	 edi, DWORD PTR _pInfo$[ebp]
  00009	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 34   : 	for(POSITION pos=m_List.GetHeadPosition(); pos;)

  0000f	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00012	85 f6		 test	 esi, esi
  00014	74 1a		 je	 SHORT $LN3@FindItem
$LL2@FindItem:

; 35   : 	{
; 36   : 		posInfo = pos;
; 37   : 		pInfo = m_List.GetNext(pos);

  00016	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00019	8b de		 mov	 ebx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  0001b	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_STManager.cpp

; 38   : 		if(pInfo->m_szSTPath.CompareNoCase(szSTPath)==0) 

  0001d	ff 75 08	 push	 DWORD PTR _szSTPath$[ebp]
  00020	89 0f		 mov	 DWORD PTR [edi], ecx
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?CompareNoCase@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z
  00028	85 c0		 test	 eax, eax
  0002a	74 0d		 je	 SHORT $LN10@FindItem

; 34   : 	for(POSITION pos=m_List.GetHeadPosition(); pos;)

  0002c	85 f6		 test	 esi, esi
  0002e	75 e6		 jne	 SHORT $LL2@FindItem
$LN3@FindItem:
  00030	5f		 pop	 edi

; 39   : 			return posInfo;
; 40   : 	}
; 41   : 
; 42   : 	return NULL;
; 43   : }

  00031	5e		 pop	 esi
  00032	33 c0		 xor	 eax, eax
  00034	5b		 pop	 ebx
  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
$LN10@FindItem:
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	8b c3		 mov	 eax, ebx
  0003d	5b		 pop	 ebx
  0003e	5d		 pop	 ebp
  0003f	c2 08 00	 ret	 8
?FindItem@CSTManager@@QAEPAU__POSITION@@PBDAAPAVCSTManager_Info@@@Z ENDP ; CSTManager::FindItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_STManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_STManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_STManager.cpp
;	COMDAT ??1CSTManager@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CSTManager@@QAE@XZ PROC				; CSTManager::~CSTManager, COMDAT
; _this$ = ecx

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CSTManager@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b d9		 mov	 ebx, ecx

; 14   : 	for(POSITION pos=m_List.GetHeadPosition(); pos;)

  00027	8b 73 08	 mov	 esi, DWORD PTR [ebx+8]

; 8    : {

  0002a	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7CSTManager@@6B@

; 14   : 	for(POSITION pos=m_List.GetHeadPosition(); pos;)

  00030	85 f6		 test	 esi, esi
  00032	74 20		 je	 SHORT $LN20@CSTManager
$LL4@CSTManager:

; 15   : 		delete m_List.GetNext(pos);

  00034	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00037	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_STManager.cpp

; 15   : 		delete m_List.GetNext(pos);

  00039	85 ff		 test	 edi, edi
  0003b	74 13		 je	 SHORT $LN13@CSTManager
  0003d	8b cf		 mov	 ecx, edi
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00045	6a 08		 push	 8
  00047	57		 push	 edi
  00048	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0004d	83 c4 08	 add	 esp, 8
$LN13@CSTManager:

; 11   : 
; 12   : void CSTManager::RemoveAll()
; 13   : {
; 14   : 	for(POSITION pos=m_List.GetHeadPosition(); pos;)

  00050	85 f6		 test	 esi, esi
  00052	75 e0		 jne	 SHORT $LL4@CSTManager
$LN20@CSTManager:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00054	8b 4b 18	 mov	 ecx, DWORD PTR [ebx+24]
  00057	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  0005e	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
  00065	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0
  0006c	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
  00073	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00078	c7 43 18 00 00
	00 00		 mov	 DWORD PTR [ebx+24], 0

; 872  : 	m_pBlocks->FreeDataChain();

  0007f	8b 4b 18	 mov	 ecx, DWORD PTR [ebx+24]

; 878  : {

  00082	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00089	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], OFFSET ??_7?$CList@PAVCSTManager_Info@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  00090	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00097	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
  0009e	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0
  000a5	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0

; 872  : 	m_pBlocks->FreeDataChain();

  000ac	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  000b1	c7 43 18 00 00
	00 00		 mov	 DWORD PTR [ebx+24], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_STManager.cpp

; 10   : }

  000b8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c2	59		 pop	 ecx
  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c3		 ret	 0
  000ca	cc		 int	 3
  000cb	cc		 int	 3
  000cc	cc		 int	 3
  000cd	cc		 int	 3
  000ce	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CSTManager@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CSTManager@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CSTManager@@QAE@XZ ENDP				; CSTManager::~CSTManager
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_STManager.cpp
;	COMDAT ?GetSTRunINfo@CSTManager@@UAGHPBD@Z
_TEXT	SEGMENT
_pItem$ = -4						; size = 4
_this$ = 8						; size = 4
_szSTPath$ = 12						; size = 4
?GetSTRunINfo@CSTManager@@UAGHPBD@Z PROC		; CSTManager::GetSTRunINfo, COMDAT

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 90   : 	CSTManager_Info* pItem = NULL;
; 91   : 	POSITION pos = FindItem(szSTPath, pItem);

  00004	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00007	8d 45 fc	 lea	 eax, DWORD PTR _pItem$[ebp]
  0000a	50		 push	 eax
  0000b	ff 75 0c	 push	 DWORD PTR _szSTPath$[ebp]
  0000e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pItem$[ebp], 0
  00015	e8 00 00 00 00	 call	 ?FindItem@CSTManager@@QAEPAU__POSITION@@PBDAAPAVCSTManager_Info@@@Z ; CSTManager::FindItem

; 92   : 	if(!pos) return 0;		// Count = 0;

  0001a	85 c0		 test	 eax, eax
  0001c	75 06		 jne	 SHORT $LN2@GetSTRunIN

; 95   : }

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
$LN2@GetSTRunIN:

; 93   : 
; 94   : 	return pItem->m_nCount;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _pItem$[ebp]
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 95   : }

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?GetSTRunINfo@CSTManager@@UAGHPBD@Z ENDP		; CSTManager::GetSTRunINfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_STManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_STManager.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\PcTrMng.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_STManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_STManager.cpp
;	COMDAT ?AddSTRunINfo@CSTManager@@UAGHPBDH@Z
_TEXT	SEGMENT
_pItem$ = -4						; size = 4
_this$ = 8						; size = 4
_szSTPath$ = 12						; size = 4
_bAdd$ = 16						; size = 4
?AddSTRunINfo@CSTManager@@UAGHPBDH@Z PROC		; CSTManager::AddSTRunINfo, COMDAT

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 47   : 	CSTManager_Info* pItem = NULL;
; 48   : 	POSITION pos = FindItem(szSTPath, pItem);

  00006	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]
  00009	8d 45 fc	 lea	 eax, DWORD PTR _pItem$[ebp]
  0000c	57		 push	 edi
  0000d	50		 push	 eax
  0000e	ff 75 0c	 push	 DWORD PTR _szSTPath$[ebp]
  00011	8b ce		 mov	 ecx, esi
  00013	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pItem$[ebp], 0
  0001a	e8 00 00 00 00	 call	 ?FindItem@CSTManager@@QAEPAU__POSITION@@PBDAAPAVCSTManager_Info@@@Z ; CSTManager::FindItem
  0001f	8b c8		 mov	 ecx, eax

; 49   : 
; 50   : 	int nItemCount = 0;

  00021	33 db		 xor	 ebx, ebx

; 51   : 	if(pos)

  00023	85 c9		 test	 ecx, ecx
  00025	0f 84 95 00 00
	00		 je	 $LN2@AddSTRunIN

; 52   : 	{
; 53   : 		if(bAdd)

  0002b	39 5d 10	 cmp	 DWORD PTR _bAdd$[ebp], ebx
  0002e	74 0e		 je	 SHORT $LN4@AddSTRunIN

; 54   : 		{
; 55   : 			nItemCount = ++pItem->m_nCount;

  00030	8b 45 fc	 mov	 eax, DWORD PTR _pItem$[ebp]
  00033	ff 40 04	 inc	 DWORD PTR [eax+4]
  00036	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]

; 56   : 		}

  00039	e9 c0 00 00 00	 jmp	 $LN8@AddSTRunIN
$LN4@AddSTRunIN:

; 57   : 		else
; 58   : 		{
; 59   : 			if((nItemCount = --pItem->m_nCount) > 0)

  0003e	8b 7d fc	 mov	 edi, DWORD PTR _pItem$[ebp]
  00041	ff 4f 04	 dec	 DWORD PTR [edi+4]
  00044	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  00047	85 db		 test	 ebx, ebx
  00049	0f 8f e0 00 00
	00		 jg	 $LN9@AddSTRunIN
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1107 : 	if (pOldNode == m_pNodeHead)

  0004f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00051	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00054	75 05		 jne	 SHORT $LN16@AddSTRunIN

; 1108 : 	{
; 1109 : 		m_pNodeHead = pOldNode->pNext;

  00056	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1110 : 	}

  00059	eb 05		 jmp	 SHORT $LN17@AddSTRunIN
$LN16@AddSTRunIN:

; 1111 : 	else
; 1112 : 	{
; 1113 : 		ASSERT(AfxIsValidAddress(pOldNode->pPrev, sizeof(CNode)));
; 1114 : 		pOldNode->pPrev->pNext = pOldNode->pNext;

  0005b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0005e	89 10		 mov	 DWORD PTR [eax], edx
$LN17@AddSTRunIN:

; 1115 : 	}
; 1116 : 	if (pOldNode == m_pNodeTail)

  00060	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00063	3b 4e 0c	 cmp	 ecx, DWORD PTR [esi+12]
  00066	75 05		 jne	 SHORT $LN18@AddSTRunIN

; 1117 : 	{
; 1118 : 		m_pNodeTail = pOldNode->pPrev;

  00068	89 56 0c	 mov	 DWORD PTR [esi+12], edx

; 1119 : 	}

  0006b	eb 05		 jmp	 SHORT $LN19@AddSTRunIN
$LN18@AddSTRunIN:

; 1120 : 	else
; 1121 : 	{
; 1122 : 		ASSERT(AfxIsValidAddress(pOldNode->pNext, sizeof(CNode)));
; 1123 : 		pOldNode->pNext->pPrev = pOldNode->pPrev;

  0006d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0006f	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN19@AddSTRunIN:

; 938  : 	pNode->pNext = m_pNodeFree;

  00072	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00075	89 01		 mov	 DWORD PTR [ecx], eax

; 939  : 	m_pNodeFree = pNode;
; 940  : 	m_nCount--;

  00077	83 46 10 ff	 add	 DWORD PTR [esi+16], -1
  0007b	89 4e 14	 mov	 DWORD PTR [esi+20], ecx

; 941  : 	ASSERT(m_nCount >= 0);  // make sure we don't underflow
; 942  : 
; 943  : 	// if no more elements, cleanup completely
; 944  : 	if (m_nCount == 0)

  0007e	75 2b		 jne	 SHORT $LN51@AddSTRunIN

; 872  : 	m_pBlocks->FreeDataChain();

  00080	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00083	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0008a	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00091	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00098	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0009f	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  000a4	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN51@AddSTRunIN:
  000ab	8b cf		 mov	 ecx, edi
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000b3	6a 08		 push	 8
  000b5	57		 push	 edi
  000b6	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000bb	83 c4 08	 add	 esp, 8
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_STManager.cpp

; 70   : 	}

  000be	eb 3e		 jmp	 SHORT $LN8@AddSTRunIN
$LN2@AddSTRunIN:

; 71   : 	else
; 72   : 	{
; 73   : 		if(bAdd)

  000c0	39 5d 10	 cmp	 DWORD PTR _bAdd$[ebp], ebx
  000c3	74 39		 je	 SHORT $LN8@AddSTRunIN

; 75   : 			pItem = new CSTManager_Info;

  000c5	6a 08		 push	 8
  000c7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000cc	8b f8		 mov	 edi, eax
  000ce	83 c4 04	 add	 esp, 4
  000d1	85 ff		 test	 edi, edi
  000d3	74 0d		 je	 SHORT $LN13@AddSTRunIN
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\PcTrMng.h

; 1842 : 	{

  000d5	8b cf		 mov	 ecx, edi
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 1841 : 	CSTManager_Info() : m_nCount(0)

  000dd	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_STManager.cpp

; 75   : 			pItem = new CSTManager_Info;

  000e0	eb 02		 jmp	 SHORT $LN14@AddSTRunIN
$LN13@AddSTRunIN:
  000e2	33 ff		 xor	 edi, edi
$LN14@AddSTRunIN:

; 76   : 			nItemCount = ++pItem->m_nCount;

  000e4	ff 47 04	 inc	 DWORD PTR [edi+4]

; 77   : 			pItem->m_szSTPath = szSTPath;

  000e7	8b cf		 mov	 ecx, edi
  000e9	ff 75 0c	 push	 DWORD PTR _szSTPath$[ebp]
  000ec	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  000ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 78   : 			m_List.AddTail(pItem);

  000f5	57		 push	 edi
  000f6	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  000f9	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCSTManager_Info@@PAV1@@@QAEPAU__POSITION@@PAVCSTManager_Info@@@Z ; CList<CSTManager_Info *,CSTManager_Info *>::AddTail
$LN8@AddSTRunIN:

; 79   : 		}
; 80   : 	}
; 81   : 
; 82   : 	if(m_List.GetCount() == 0)

  000fe	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  00102	75 2b		 jne	 SHORT $LN9@AddSTRunIN
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 870  : 	m_nCount = 0;

  00104	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 872  : 	m_pBlocks->FreeDataChain();

  0010b	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0010e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00115	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0011c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00123	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00128	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN9@AddSTRunIN:
  0012f	5f		 pop	 edi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_STManager.cpp

; 86   : }

  00130	5e		 pop	 esi
  00131	8b c3		 mov	 eax, ebx
  00133	5b		 pop	 ebx
  00134	8b e5		 mov	 esp, ebp
  00136	5d		 pop	 ebp
  00137	c2 0c 00	 ret	 12			; 0000000cH
?AddSTRunINfo@CSTManager@@UAGHPBDH@Z ENDP		; CSTManager::AddSTRunINfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\inc\IAUGwanMng.h
;	COMDAT ??__ERMSG_GWANSIMREGISTER@@YAXXZ
text$di	SEGMENT
??__ERMSG_GWANSIMREGISTER@@YAXXZ PROC			; `dynamic initializer for 'RMSG_GWANSIMREGISTER'', COMDAT

; 173  : const UINT RMSG_GWANSIMREGISTER		=   ::RegisterWindowMessage("RMSG_GWANSIMREGISTER");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MNPNIDPI@RMSG_GWANSIMREGISTER@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterWindowMessageA@4
  0000b	a3 00 00 00 00	 mov	 DWORD PTR ?RMSG_GWANSIMREGISTER@@3IB, eax
  00010	c3		 ret	 0
??__ERMSG_GWANSIMREGISTER@@YAXXZ ENDP			; `dynamic initializer for 'RMSG_GWANSIMREGISTER''
text$di	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\inc\Define_Gwansim.h
;	COMDAT ??__ERMSG_INTREQUEST@@YAXXZ
text$di	SEGMENT
??__ERMSG_INTREQUEST@@YAXXZ PROC			; `dynamic initializer for 'RMSG_INTREQUEST'', COMDAT

; 10   : const UINT RMSG_INTREQUEST = ::RegisterWindowMessage(_T("RMSG_INTREQUEST") );

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JHANHJCN@RMSG_INTREQUEST@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterWindowMessageA@4
  0000b	a3 00 00 00 00	 mov	 DWORD PTR ?RMSG_INTREQUEST@@3IB, eax
  00010	c3		 ret	 0
??__ERMSG_INTREQUEST@@YAXXZ ENDP			; `dynamic initializer for 'RMSG_INTREQUEST''
text$di	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\inc\Define_Gwansim.h
;	COMDAT ??__ERMSG_CONCERNHWND@@YAXXZ
text$di	SEGMENT
??__ERMSG_CONCERNHWND@@YAXXZ PROC			; `dynamic initializer for 'RMSG_CONCERNHWND'', COMDAT

; 9    : const UINT RMSG_CONCERNHWND = ::RegisterWindowMessage(_T("RMSG_CONCERNHWND") );

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@EPGJDGDK@RMSG_CONCERNHWND@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterWindowMessageA@4
  0000b	a3 00 00 00 00	 mov	 DWORD PTR ?RMSG_CONCERNHWND@@3IB, eax
  00010	c3		 ret	 0
??__ERMSG_CONCERNHWND@@YAXXZ ENDP			; `dynamic initializer for 'RMSG_CONCERNHWND''
text$di	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Inc\IBaseDefine.h
;	COMDAT ??__ERMSG_SETPCTRDATA@@YAXXZ
text$di	SEGMENT
??__ERMSG_SETPCTRDATA@@YAXXZ PROC			; `dynamic initializer for 'RMSG_SETPCTRDATA'', COMDAT

; 172  : const UINT RMSG_SETPCTRDATA = ::RegisterWindowMessage("RMSG_SETPCTRDATA");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JPACFCL@RMSG_SETPCTRDATA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterWindowMessageA@4
  0000b	a3 00 00 00 00	 mov	 DWORD PTR ?RMSG_SETPCTRDATA@@3IB, eax
  00010	c3		 ret	 0
??__ERMSG_SETPCTRDATA@@YAXXZ ENDP			; `dynamic initializer for 'RMSG_SETPCTRDATA''
text$di	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Inc\IBaseDefine.h
;	COMDAT ??__ERMSG_GETPCTRDATA@@YAXXZ
text$di	SEGMENT
??__ERMSG_GETPCTRDATA@@YAXXZ PROC			; `dynamic initializer for 'RMSG_GETPCTRDATA'', COMDAT

; 171  : const UINT RMSG_GETPCTRDATA = ::RegisterWindowMessage("RMSG_GETPCTRDATA");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GOOPDKI@RMSG_GETPCTRDATA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterWindowMessageA@4
  0000b	a3 00 00 00 00	 mov	 DWORD PTR ?RMSG_GETPCTRDATA@@3IB, eax
  00010	c3		 ret	 0
??__ERMSG_GETPCTRDATA@@YAXXZ ENDP			; `dynamic initializer for 'RMSG_GETPCTRDATA''
text$di	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Inc\IBaseDefine.h
;	COMDAT ??__ERMSG_INTERFACE@@YAXXZ
text$di	SEGMENT
??__ERMSG_INTERFACE@@YAXXZ PROC				; `dynamic initializer for 'RMSG_INTERFACE'', COMDAT

; 170  : const UINT RMSG_INTERFACE = ::RegisterWindowMessage("RMSG_INTERFACE");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BKKCOCLK@RMSG_INTERFACE@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterWindowMessageA@4
  0000b	a3 00 00 00 00	 mov	 DWORD PTR ?RMSG_INTERFACE@@3IB, eax
  00010	c3		 ret	 0
??__ERMSG_INTERFACE@@YAXXZ ENDP				; `dynamic initializer for 'RMSG_INTERFACE''
text$di	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z PROC		; CObject::Dump, COMDAT
; _this$ = ecx

; 122  : 	{ /* no dumping in release builds */ }

  00000	c2 04 00	 ret	 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z ENDP		; CObject::Dump
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT
?AssertValid@CObject@@UBEXXZ PROC			; CObject::AssertValid, COMDAT
; _this$ = ecx

; 120  : 	{ /* no asserts in release builds */ }

  00000	c2 00 00	 ret	 0
?AssertValid@CObject@@UBEXXZ ENDP			; CObject::AssertValid
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z PROC		; CObject::Serialize, COMDAT
; _this$ = ecx

; 106  : 	{ /* CObject does not serialize anything by default */ }

  00000	c2 04 00	 ret	 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z ENDP		; CObject::Serialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT
??1CObject@@UAE@XZ PROC					; CObject::~CObject, COMDAT
; _this$ = ecx

; 104  : 	{ }

  00000	c2 00 00	 ret	 0
??1CObject@@UAE@XZ ENDP					; CObject::~CObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_STManager.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_STManager.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
