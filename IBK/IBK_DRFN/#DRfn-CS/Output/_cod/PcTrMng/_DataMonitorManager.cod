; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30148.0 

	TITLE	D:\git\src\IBK\IBK_DRFN\#DRfn-CS\_Obj\PcTrMng\_DataMonitorManager.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@BKKCOCLK@RMSG_INTERFACE@		; `string'
PUBLIC	??_C@_0BB@GOOPDKI@RMSG_GETPCTRDATA@		; `string'
PUBLIC	??_C@_0BB@JPACFCL@RMSG_SETPCTRDATA@		; `string'
PUBLIC	??_C@_0BB@EPGJDGDK@RMSG_CONCERNHWND@		; `string'
PUBLIC	??_C@_0BA@JHANHJCN@RMSG_INTREQUEST@		; `string'
PUBLIC	??_C@_0BF@MNPNIDPI@RMSG_GWANSIMREGISTER@	; `string'
;	COMDAT ??_C@_0BF@MNPNIDPI@RMSG_GWANSIMREGISTER@
CONST	SEGMENT
??_C@_0BF@MNPNIDPI@RMSG_GWANSIMREGISTER@ DB 'RMSG_GWANSIMREGISTER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JHANHJCN@RMSG_INTREQUEST@
CONST	SEGMENT
??_C@_0BA@JHANHJCN@RMSG_INTREQUEST@ DB 'RMSG_INTREQUEST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EPGJDGDK@RMSG_CONCERNHWND@
CONST	SEGMENT
??_C@_0BB@EPGJDGDK@RMSG_CONCERNHWND@ DB 'RMSG_CONCERNHWND', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JPACFCL@RMSG_SETPCTRDATA@
CONST	SEGMENT
??_C@_0BB@JPACFCL@RMSG_SETPCTRDATA@ DB 'RMSG_SETPCTRDATA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GOOPDKI@RMSG_GETPCTRDATA@
CONST	SEGMENT
??_C@_0BB@GOOPDKI@RMSG_GETPCTRDATA@ DB 'RMSG_GETPCTRDATA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BKKCOCLK@RMSG_INTERFACE@
CONST	SEGMENT
??_C@_0P@BKKCOCLK@RMSG_INTERFACE@ DB 'RMSG_INTERFACE', 00H ; `string'
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1CObject@@UAE@XZ				; CObject::~CObject
PUBLIC	?Serialize@CObject@@UAEXAAVCArchive@@@Z		; CObject::Serialize
PUBLIC	?AssertValid@CObject@@UBEXXZ			; CObject::AssertValid
PUBLIC	?Dump@CObject@@UBEXAAVCDumpContext@@@Z		; CObject::Dump
PUBLIC	??0CDMMngInfo@@QAE@XZ				; CDMMngInfo::CDMMngInfo
PUBLIC	??0CDMMngInfo@@QAE@PBDJJP6GX0JJJJ@Z@Z		; CDMMngInfo::CDMMngInfo
PUBLIC	??1CDMMngInfo@@QAE@XZ				; CDMMngInfo::~CDMMngInfo
PUBLIC	?Advise@CAUDataMonitorManager@@UAGJPBDJJP6GX0JJJJ@Z@Z ; CAUDataMonitorManager::Advise
PUBLIC	?UnAdvise@CAUDataMonitorManager@@UAGXJ@Z	; CAUDataMonitorManager::UnAdvise
PUBLIC	?NotifyData@CAUDataMonitorManager@@UAGXPBDJJ@Z	; CAUDataMonitorManager::NotifyData
PUBLIC	??0CAUDataMonitorManager@@QAE@XZ		; CAUDataMonitorManager::CAUDataMonitorManager
PUBLIC	??1CAUDataMonitorManager@@QAE@XZ		; CAUDataMonitorManager::~CAUDataMonitorManager
PUBLIC	?ClearListAll@CAUDataMonitorManager@@QAEXXZ	; CAUDataMonitorManager::ClearListAll
PUBLIC	??0?$CList@VCDMMngInfo@@V1@@@QAE@H@Z		; CList<CDMMngInfo,CDMMngInfo>::CList<CDMMngInfo,CDMMngInfo>
PUBLIC	?AddTail@?$CList@VCDMMngInfo@@V1@@@QAEPAU__POSITION@@VCDMMngInfo@@@Z ; CList<CDMMngInfo,CDMMngInfo>::AddTail
PUBLIC	?RemoveAll@?$CList@VCDMMngInfo@@V1@@@QAEXXZ	; CList<CDMMngInfo,CDMMngInfo>::RemoveAll
PUBLIC	?RemoveAt@?$CList@VCDMMngInfo@@V1@@@QAEXPAU__POSITION@@@Z ; CList<CDMMngInfo,CDMMngInfo>::RemoveAt
PUBLIC	?NewNode@?$CList@VCDMMngInfo@@V1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<CDMMngInfo,CDMMngInfo>::NewNode
PUBLIC	?FreeNode@?$CList@VCDMMngInfo@@V1@@@IAEXPAUCNode@1@@Z ; CList<CDMMngInfo,CDMMngInfo>::FreeNode
PUBLIC	??1?$CList@VCDMMngInfo@@V1@@@UAE@XZ		; CList<CDMMngInfo,CDMMngInfo>::~CList<CDMMngInfo,CDMMngInfo>
PUBLIC	?Serialize@?$CList@VCDMMngInfo@@V1@@@UAEXAAVCArchive@@@Z ; CList<CDMMngInfo,CDMMngInfo>::Serialize
PUBLIC	??_G?$CList@VCDMMngInfo@@V1@@@UAEPAXI@Z		; CList<CDMMngInfo,CDMMngInfo>::`scalar deleting destructor'
PUBLIC	??$SerializeElements@VCDMMngInfo@@@@YGXAAVCArchive@@PAVCDMMngInfo@@H@Z ; SerializeElements<CDMMngInfo>
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R3CObject@@8					; CObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObject@@8					; CObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CObject@@8			; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$CList@VCDMMngInfo@@V1@@@6B@		; CList<CDMMngInfo,CDMMngInfo>::`vftable'
PUBLIC	??_7CAUDataMonitorManager@@6B@			; CAUDataMonitorManager::`vftable'
PUBLIC	??_R0?AUIAUDataMonitorManager@@@8		; IAUDataMonitorManager `RTTI Type Descriptor'
PUBLIC	??_R3IAUDataMonitorManager@@8			; IAUDataMonitorManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IAUDataMonitorManager@@8			; IAUDataMonitorManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IAUDataMonitorManager@@8		; IAUDataMonitorManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CList@VCDMMngInfo@@V1@@@6B@		; CList<CDMMngInfo,CDMMngInfo>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CList@VCDMMngInfo@@V1@@@@8		; CList<CDMMngInfo,CDMMngInfo> `RTTI Type Descriptor'
PUBLIC	??_R3?$CList@VCDMMngInfo@@V1@@@8		; CList<CDMMngInfo,CDMMngInfo>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CList@VCDMMngInfo@@V1@@@8		; CList<CDMMngInfo,CDMMngInfo>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CList@VCDMMngInfo@@V1@@@8	; CList<CDMMngInfo,CDMMngInfo>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CAUDataMonitorManager@@6B@			; CAUDataMonitorManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCAUDataMonitorManager@@@8		; CAUDataMonitorManager `RTTI Type Descriptor'
PUBLIC	??_R3CAUDataMonitorManager@@8			; CAUDataMonitorManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CAUDataMonitorManager@@8			; CAUDataMonitorManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CAUDataMonitorManager@@8		; CAUDataMonitorManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	?__global_delete@@YAXPAXI@Z:PROC		; __global_delete
EXTRN	___std_terminate:PROC
EXTRN	__imp__RegisterWindowMessageA@4:PROC
EXTRN	?AfxThrowInvalidArgException@@YGXXZ:PROC	; AfxThrowInvalidArgException
EXTRN	?AfxThrowArchiveException@@YGXHPBD@Z:PROC	; AfxThrowArchiveException
EXTRN	?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ:PROC ; CObject::GetRuntimeClass
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z:PROC
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z:PROC
EXTRN	__imp_?Compare@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z:PROC
EXTRN	?Read@CArchive@@QAEIPAXI@Z:PROC			; CArchive::Read
EXTRN	?Write@CArchive@@QAEXPBXI@Z:PROC		; CArchive::Write
EXTRN	?ReadCount@CArchive@@QAEKXZ:PROC		; CArchive::ReadCount
EXTRN	?WriteCount@CArchive@@QAEXK@Z:PROC		; CArchive::WriteCount
EXTRN	?Create@CPlex@@SGPAU1@AAPAU1@II@Z:PROC		; CPlex::Create
EXTRN	?FreeDataChain@CPlex@@QAEXXZ:PROC		; CPlex::FreeDataChain
EXTRN	??_E?$CList@VCDMMngInfo@@V1@@@UAEPAXI@Z:PROC	; CList<CDMMngInfo,CDMMngInfo>::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?RMSG_INTERFACE@@3IB DD 01H DUP (?)			; RMSG_INTERFACE
?RMSG_GETPCTRDATA@@3IB DD 01H DUP (?)			; RMSG_GETPCTRDATA
?RMSG_SETPCTRDATA@@3IB DD 01H DUP (?)			; RMSG_SETPCTRDATA
?RMSG_CONCERNHWND@@3IB DD 01H DUP (?)			; RMSG_CONCERNHWND
?RMSG_INTREQUEST@@3IB DD 01H DUP (?)			; RMSG_INTREQUEST
?RMSG_GWANSIMREGISTER@@3IB DD 01H DUP (?)		; RMSG_GWANSIMREGISTER
_BSS	ENDS
CRT$XCU	SEGMENT
?RMSG_INTERFACE$initializer$@@3P6AXXZA DD FLAT:??__ERMSG_INTERFACE@@YAXXZ ; RMSG_INTERFACE$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CAUDataMonitorManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CAUDataMonitorManager@@8 DD FLAT:??_R0?AVCAUDataMonitorManager@@@8 ; CAUDataMonitorManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CAUDataMonitorManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CAUDataMonitorManager@@8
rdata$r	SEGMENT
??_R2CAUDataMonitorManager@@8 DD FLAT:??_R1A@?0A@EA@CAUDataMonitorManager@@8 ; CAUDataMonitorManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IAUDataMonitorManager@@8
rdata$r	ENDS
;	COMDAT ??_R3CAUDataMonitorManager@@8
rdata$r	SEGMENT
??_R3CAUDataMonitorManager@@8 DD 00H			; CAUDataMonitorManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CAUDataMonitorManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCAUDataMonitorManager@@@8
data$rs	SEGMENT
??_R0?AVCAUDataMonitorManager@@@8 DD FLAT:??_7type_info@@6B@ ; CAUDataMonitorManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCAUDataMonitorManager@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CAUDataMonitorManager@@6B@
rdata$r	SEGMENT
??_R4CAUDataMonitorManager@@6B@ DD 00H			; CAUDataMonitorManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCAUDataMonitorManager@@@8
	DD	FLAT:??_R3CAUDataMonitorManager@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CList@VCDMMngInfo@@V1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CList@VCDMMngInfo@@V1@@@8 DD FLAT:??_R0?AV?$CList@VCDMMngInfo@@V1@@@@8 ; CList<CDMMngInfo,CDMMngInfo>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CList@VCDMMngInfo@@V1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CList@VCDMMngInfo@@V1@@@8
rdata$r	SEGMENT
??_R2?$CList@VCDMMngInfo@@V1@@@8 DD FLAT:??_R1A@?0A@EA@?$CList@VCDMMngInfo@@V1@@@8 ; CList<CDMMngInfo,CDMMngInfo>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CList@VCDMMngInfo@@V1@@@8
rdata$r	SEGMENT
??_R3?$CList@VCDMMngInfo@@V1@@@8 DD 00H			; CList<CDMMngInfo,CDMMngInfo>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CList@VCDMMngInfo@@V1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CList@VCDMMngInfo@@V1@@@@8
data$rs	SEGMENT
??_R0?AV?$CList@VCDMMngInfo@@V1@@@@8 DD FLAT:??_7type_info@@6B@ ; CList<CDMMngInfo,CDMMngInfo> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CList@VCDMMngInfo@@V1@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CList@VCDMMngInfo@@V1@@@6B@
rdata$r	SEGMENT
??_R4?$CList@VCDMMngInfo@@V1@@@6B@ DD 00H		; CList<CDMMngInfo,CDMMngInfo>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CList@VCDMMngInfo@@V1@@@@8
	DD	FLAT:??_R3?$CList@VCDMMngInfo@@V1@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IAUDataMonitorManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IAUDataMonitorManager@@8 DD FLAT:??_R0?AUIAUDataMonitorManager@@@8 ; IAUDataMonitorManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IAUDataMonitorManager@@8
rdata$r	ENDS
;	COMDAT ??_R2IAUDataMonitorManager@@8
rdata$r	SEGMENT
??_R2IAUDataMonitorManager@@8 DD FLAT:??_R1A@?0A@EA@IAUDataMonitorManager@@8 ; IAUDataMonitorManager::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IAUDataMonitorManager@@8
rdata$r	SEGMENT
??_R3IAUDataMonitorManager@@8 DD 00H			; IAUDataMonitorManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IAUDataMonitorManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIAUDataMonitorManager@@@8
data$rs	SEGMENT
??_R0?AUIAUDataMonitorManager@@@8 DD FLAT:??_7type_info@@6B@ ; IAUDataMonitorManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIAUDataMonitorManager@@', 00H
data$rs	ENDS
;	COMDAT ??_7CAUDataMonitorManager@@6B@
CONST	SEGMENT
??_7CAUDataMonitorManager@@6B@ DD FLAT:??_R4CAUDataMonitorManager@@6B@ ; CAUDataMonitorManager::`vftable'
	DD	FLAT:?Advise@CAUDataMonitorManager@@UAGJPBDJJP6GX0JJJJ@Z@Z
	DD	FLAT:?UnAdvise@CAUDataMonitorManager@@UAGXJ@Z
	DD	FLAT:?NotifyData@CAUDataMonitorManager@@UAGXPBDJJ@Z
CONST	ENDS
;	COMDAT ??_7?$CList@VCDMMngInfo@@V1@@@6B@
CONST	SEGMENT
??_7?$CList@VCDMMngInfo@@V1@@@6B@ DD FLAT:??_R4?$CList@VCDMMngInfo@@V1@@@6B@ ; CList<CDMMngInfo,CDMMngInfo>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CList@VCDMMngInfo@@V1@@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CList@VCDMMngInfo@@V1@@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CObject@@8
rdata$r	SEGMENT
??_R2CObject@@8 DD FLAT:??_R1A@?0A@EA@CObject@@8	; CObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObject@@8
rdata$r	SEGMENT
??_R3CObject@@8 DD 00H					; CObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
data$rs	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
data$rs	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$CList@VCDMMngInfo@@V1@@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_G?$CList@VCDMMngInfo@@V1@@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$CList@VCDMMngInfo@@V1@@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Serialize@?$CList@VCDMMngInfo@@V1@@@UAEXAAVCArchive@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Serialize@?$CList@VCDMMngInfo@@V1@@@UAEXAAVCArchive@@@Z$0
__ehfuncinfo$?Serialize@?$CList@VCDMMngInfo@@V1@@@UAEXAAVCArchive@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Serialize@?$CList@VCDMMngInfo@@V1@@@UAEXAAVCArchive@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CList@VCDMMngInfo@@V1@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddTail@?$CList@VCDMMngInfo@@V1@@@QAEPAU__POSITION@@VCDMMngInfo@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddTail@?$CList@VCDMMngInfo@@V1@@@QAEPAU__POSITION@@VCDMMngInfo@@@Z$0
__ehfuncinfo$?AddTail@?$CList@VCDMMngInfo@@V1@@@QAEPAU__POSITION@@VCDMMngInfo@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddTail@?$CList@VCDMMngInfo@@V1@@@QAEPAU__POSITION@@VCDMMngInfo@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CAUDataMonitorManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1CAUDataMonitorManager@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CAUDataMonitorManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CDMMngInfo@@QAE@PBDJJP6GX0JJJJ@Z@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CDMMngInfo@@QAE@PBDJJP6GX0JJJJ@Z@Z$0
__ehfuncinfo$??0CDMMngInfo@@QAE@PBDJJP6GX0JJJJ@Z@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CDMMngInfo@@QAE@PBDJJP6GX0JJJJ@Z@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
?RMSG_GETPCTRDATA$initializer$@@3P6AXXZA DD FLAT:??__ERMSG_GETPCTRDATA@@YAXXZ ; RMSG_GETPCTRDATA$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?RMSG_SETPCTRDATA$initializer$@@3P6AXXZA DD FLAT:??__ERMSG_SETPCTRDATA@@YAXXZ ; RMSG_SETPCTRDATA$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?RMSG_CONCERNHWND$initializer$@@3P6AXXZA DD FLAT:??__ERMSG_CONCERNHWND@@YAXXZ ; RMSG_CONCERNHWND$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?RMSG_INTREQUEST$initializer$@@3P6AXXZA DD FLAT:??__ERMSG_INTREQUEST@@YAXXZ ; RMSG_INTREQUEST$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?RMSG_GWANSIMREGISTER$initializer$@@3P6AXXZA DD FLAT:??__ERMSG_GWANSIMREGISTER@@YAXXZ ; RMSG_GWANSIMREGISTER$initializer$
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@VCDMMngInfo@@@@YGXAAVCArchive@@PAVCDMMngInfo@@H@Z
_TEXT	SEGMENT
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@VCDMMngInfo@@@@YGXAAVCArchive@@PAVCDMMngInfo@@H@Z PROC ; SerializeElements<CDMMngInfo>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR _nCount$[ebp]
  0000b	57		 push	 edi
  0000c	85 f6		 test	 esi, esi
  0000e	74 04		 je	 SHORT $LN2@SerializeE
  00010	85 c9		 test	 ecx, ecx
  00012	74 7d		 je	 SHORT $LN34@SerializeE
$LN2@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00014	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  00017	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0001a	f7 d0		 not	 eax
  0001c	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  0001e	74 32		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;
; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )

  00020	85 f6		 test	 esi, esi
  00022	74 27		 je	 SHORT $LN8@SerializeE
$LL5@SerializeE:

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00024	bb ff ff ff 07	 mov	 ebx, 134217727		; 07ffffffH
  00029	3b f3		 cmp	 esi, ebx
  0002b	0f 42 de	 cmovb	 ebx, esi

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0002e	8b fb		 mov	 edi, ebx
  00030	c1 e7 04	 shl	 edi, 4
  00033	57		 push	 edi
  00034	51		 push	 ecx
  00035	8b ca		 mov	 ecx, edx
  00037	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;
; 87   : 			pData += nElementsToWrite;

  0003c	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  0003f	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  00042	03 cf		 add	 ecx, edi
  00044	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  00047	2b f3		 sub	 esi, ebx
  00049	75 d9		 jne	 SHORT $LL5@SerializeE
$LN8@SerializeE:
  0004b	5f		 pop	 edi

; 105  : 		}
; 106  : 	}
; 107  : }

  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	5d		 pop	 ebp
  0004f	c2 0c 00	 ret	 12			; 0000000cH
$LN10@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  00052	85 f6		 test	 esi, esi
  00054	74 f5		 je	 SHORT $LN8@SerializeE
$LL7@SerializeE:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00056	bb ff ff ff 07	 mov	 ebx, 134217727		; 07ffffffH
  0005b	3b f3		 cmp	 esi, ebx
  0005d	0f 42 de	 cmovb	 ebx, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  00060	8b fb		 mov	 edi, ebx
  00062	c1 e7 04	 shl	 edi, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00065	57		 push	 edi
  00066	51		 push	 ecx
  00067	8b ca		 mov	 ecx, edx
  00069	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0006e	3b c7		 cmp	 eax, edi
  00070	75 16		 jne	 SHORT $LN23@SerializeE
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  00072	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00075	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;
; 104  : 			pData += nElementsToRead;

  00078	03 cf		 add	 ecx, edi
  0007a	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  0007d	2b f3		 sub	 esi, ebx
  0007f	75 d5		 jne	 SHORT $LL7@SerializeE

; 105  : 		}
; 106  : 	}
; 107  : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	5d		 pop	 ebp
  00085	c2 0c 00	 ret	 12			; 0000000cH
$LN23@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 402  : 		AfxThrowArchiveException(CArchiveException::endOfFile);

  00088	6a 00		 push	 0
  0008a	6a 03		 push	 3
  0008c	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN34@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00091	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN32@SerializeE:
  00096	cc		 int	 3
??$SerializeElements@VCDMMngInfo@@@@YGXAAVCArchive@@PAVCDMMngInfo@@H@Z ENDP ; SerializeElements<CDMMngInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_G?$CList@VCDMMngInfo@@V1@@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$CList@VCDMMngInfo@@V1@@@UAEPAXI@Z PROC		; CList<CDMMngInfo,CDMMngInfo>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$CList@VCDMMngInfo@@V1@@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 878  : {

  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@VCDMMngInfo@@V1@@@6B@

; 879  : 	RemoveAll();

  00032	e8 00 00 00 00	 call	 ?RemoveAll@?$CList@VCDMMngInfo@@V1@@@QAEXXZ ; CList<CDMMngInfo,CDMMngInfo>::RemoveAll
  00037	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0003a	a8 01		 test	 al, 1
  0003c	74 2c		 je	 SHORT $LN12@scalar
  0003e	a8 04		 test	 al, 4
  00040	75 1d		 jne	 SHORT $LN3@scalar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 112  : 	{ ::operator delete(p); }

  00042	56		 push	 esi
  00043	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00048	83 c4 04	 add	 esp, 4
  0004b	8b c6		 mov	 eax, esi
  0004d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00050	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00057	59		 pop	 ecx
  00058	5e		 pop	 esi
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
$LN3@scalar:
  0005f	6a 1c		 push	 28			; 0000001cH
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  00067	83 c4 08	 add	 esp, 8
$LN12@scalar:
  0006a	8b c6		 mov	 eax, esi
  0006c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00076	59		 pop	 ecx
  00077	5e		 pop	 esi
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
  0007e	cc		 int	 3
  0007f	cc		 int	 3
  00080	cc		 int	 3
  00081	cc		 int	 3
  00082	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_G?$CList@VCDMMngInfo@@V1@@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$CList@VCDMMngInfo@@V1@@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$CList@VCDMMngInfo@@V1@@@UAEPAXI@Z ENDP		; CList<CDMMngInfo,CDMMngInfo>::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CList@VCDMMngInfo@@V1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_newData$2 = -40					; size = 16
_nNewCount$1$ = -24					; size = 4
_nElementsToRead$1$ = -20				; size = 4
_pData$1$ = -20						; size = 4
_pNode$1$ = -20						; size = 4
_this$ = -20						; size = 4
_nElementsToRead$1$ = -16				; size = 4
_nElementsLeft$1$ = -16					; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ar$ = 8						; size = 4
?Serialize@?$CList@VCDMMngInfo@@V1@@@UAEXAAVCArchive@@@Z PROC ; CList<CDMMngInfo,CDMMngInfo>::Serialize, COMDAT
; _this$ = ecx

; 1169 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Serialize@?$CList@VCDMMngInfo@@V1@@@UAEXAAVCArchive@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d f0	 mov	 DWORD PTR _this$1$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00030	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00033	f7 d0		 not	 eax
  00035	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1174 : 	if (ar.IsStoring())

  00037	0f 84 b2 00 00
	00		 je	 $LN7@Serialize

; 1175 : 	{
; 1176 : 		ar.WriteCount(m_nCount);

  0003d	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00040	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00045	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00048	89 45 ec	 mov	 DWORD PTR _pNode$1$[ebp], eax
  0004b	85 c0		 test	 eax, eax
  0004d	0f 84 96 01 00
	00		 je	 $LN73@Serialize
$LL4@Serialize:

; 1178 : 		{
; 1179 : 			ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1180 : 			TYPE* pData;
; 1181 : 			/*
; 1182 : 			 * in some cases the & operator might be overloaded, and we cannot use it to obtain
; 1183 : 			 * the address of a given object.  We then use the following trick to get the address
; 1184 : 			 */
; 1185 : 			pData = reinterpret_cast< TYPE* >( &reinterpret_cast< int& >( static_cast< TYPE& >( pNode->data ) ) );

  00053	8d 70 08	 lea	 esi, DWORD PTR [eax+8]

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00056	85 f6		 test	 esi, esi
  00058	0f 84 a8 01 00
	00		 je	 $LN65@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00061	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00064	f7 d0		 not	 eax
  00066	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00068	74 31		 je	 SHORT $LN23@Serialize

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0006a	b8 01 00 00 00	 mov	 eax, 1
  0006f	89 45 f0	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
$LL18@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00072	bb ff ff ff 07	 mov	 ebx, 134217727		; 07ffffffH
  00077	3b c3		 cmp	 eax, ebx
  00079	0f 42 d8	 cmovb	 ebx, eax

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0007c	8b fb		 mov	 edi, ebx
  0007e	c1 e7 04	 shl	 edi, 4
  00081	57		 push	 edi
  00082	56		 push	 esi
  00083	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  00088	8b 45 f0	 mov	 eax, DWORD PTR _nElementsLeft$1$[ebp]

; 87   : 			pData += nElementsToWrite;

  0008b	03 f7		 add	 esi, edi
  0008d	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00090	2b c3		 sub	 eax, ebx
  00092	89 45 f0	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
  00095	85 c0		 test	 eax, eax
  00097	75 d9		 jne	 SHORT $LL18@Serialize

; 88   : 		}
; 89   : 	}

  00099	eb 30		 jmp	 SHORT $LN2@Serialize
$LN23@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  0009b	bf 01 00 00 00	 mov	 edi, 1
$LL20@Serialize:

; 97   : 		while( nElementsLeft > 0 )
; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  000a0	b8 ff ff ff 07	 mov	 eax, 134217727		; 07ffffffH
  000a5	3b f8		 cmp	 edi, eax
  000a7	0f 42 c7	 cmovb	 eax, edi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  000aa	8b d8		 mov	 ebx, eax
  000ac	89 45 f0	 mov	 DWORD PTR _nElementsToRead$1$[ebp], eax
  000af	c1 e3 04	 shl	 ebx, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  000b2	53		 push	 ebx
  000b3	56		 push	 esi
  000b4	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  000b9	3b c3		 cmp	 eax, ebx
  000bb	0f 85 3c 01 00
	00		 jne	 $LN64@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 104  : 			pData += nElementsToRead;

  000c1	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000c4	03 f3		 add	 esi, ebx
  000c6	2b 7d f0	 sub	 edi, DWORD PTR _nElementsToRead$1$[ebp]
  000c9	75 d5		 jne	 SHORT $LL20@Serialize
$LN2@Serialize:

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  000cb	8b 45 ec	 mov	 eax, DWORD PTR _pNode$1$[ebp]
  000ce	8b 00		 mov	 eax, DWORD PTR [eax]
  000d0	89 45 ec	 mov	 DWORD PTR _pNode$1$[ebp], eax
  000d3	85 c0		 test	 eax, eax
  000d5	0f 85 78 ff ff
	ff		 jne	 $LL4@Serialize

; 1198 : 	}
; 1199 : }

  000db	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000de	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e5	59		 pop	 ecx
  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi
  000e8	5b		 pop	 ebx
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 04 00	 ret	 4
$LN7@Serialize:

; 1186 : 			SerializeElements<TYPE>(ar, pData, 1);
; 1187 : 		}
; 1188 : 	}
; 1189 : 	else
; 1190 : 	{
; 1191 : 		DWORD_PTR nNewCount = ar.ReadCount();

  000ef	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount

; 1192 : 		while (nNewCount--)

  000f4	85 c0		 test	 eax, eax
  000f6	0f 84 ed 00 00
	00		 je	 $LN73@Serialize
  000fc	0f 1f 40 00	 npad	 4
$LL5@Serialize:

; 1194 : 			TYPE newData[1];

  00100	68 00 00 00 00	 push	 OFFSET ??1CDMMngInfo@@QAE@XZ
  00105	68 00 00 00 00	 push	 OFFSET ??0CDMMngInfo@@QAE@XZ ; CDMMngInfo::CDMMngInfo
  0010a	48		 dec	 eax
  0010b	6a 01		 push	 1
  0010d	89 45 e8	 mov	 DWORD PTR _nNewCount$1$[ebp], eax
  00110	8d 45 d8	 lea	 eax, DWORD PTR _newData$2[ebp]
  00113	6a 10		 push	 16			; 00000010H
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0011b	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1194 : 			TYPE newData[1];

  0011e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00125	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00128	f7 d0		 not	 eax
  0012a	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  0012c	74 39		 je	 SHORT $LN44@Serialize

; 79   : 		pData = pElements;

  0012e	8d 45 d8	 lea	 eax, DWORD PTR _newData$2[ebp]
  00131	bb 01 00 00 00	 mov	 ebx, 1
  00136	89 45 ec	 mov	 DWORD PTR _pData$1$[ebp], eax
  00139	0f 1f 80 00 00
	00 00		 npad	 7
$LL39@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00140	bf ff ff ff 07	 mov	 edi, 134217727		; 07ffffffH
  00145	3b df		 cmp	 ebx, edi
  00147	0f 42 fb	 cmovb	 edi, ebx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0014a	8b f7		 mov	 esi, edi
  0014c	c1 e6 04	 shl	 esi, 4
  0014f	56		 push	 esi
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 87   : 			pData += nElementsToWrite;

  00156	8b 45 ec	 mov	 eax, DWORD PTR _pData$1$[ebp]
  00159	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  0015c	03 c6		 add	 eax, esi
  0015e	89 45 ec	 mov	 DWORD PTR _pData$1$[ebp], eax
  00161	2b df		 sub	 ebx, edi
  00163	75 db		 jne	 SHORT $LL39@Serialize

; 88   : 		}
; 89   : 	}

  00165	eb 30		 jmp	 SHORT $LN42@Serialize
$LN44@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  00167	be 01 00 00 00	 mov	 esi, 1

; 96   : 		pData = pElements;

  0016c	8d 5d d8	 lea	 ebx, DWORD PTR _newData$2[ebp]
  0016f	90		 npad	 1
$LL41@Serialize:

; 97   : 		while( nElementsLeft > 0 )
; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00170	b8 ff ff ff 07	 mov	 eax, 134217727		; 07ffffffH
  00175	3b f0		 cmp	 esi, eax
  00177	0f 42 c6	 cmovb	 eax, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0017a	8b f8		 mov	 edi, eax
  0017c	89 45 ec	 mov	 DWORD PTR _nElementsToRead$1$[ebp], eax
  0017f	c1 e7 04	 shl	 edi, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00182	57		 push	 edi
  00183	53		 push	 ebx
  00184	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  00189	3b c7		 cmp	 eax, edi
  0018b	75 70		 jne	 SHORT $LN64@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 104  : 			pData += nElementsToRead;

  0018d	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00190	03 df		 add	 ebx, edi
  00192	2b 75 ec	 sub	 esi, DWORD PTR _nElementsToRead$1$[ebp]
  00195	75 d9		 jne	 SHORT $LL41@Serialize
$LN42@Serialize:

; 1195 : 			SerializeElements<TYPE>(ar, newData, 1);
; 1196 : 			AddTail(newData[0]);

  00197	83 ec 10	 sub	 esp, 16			; 00000010H
  0019a	8d 45 d8	 lea	 eax, DWORD PTR _newData$2[ebp]
  0019d	8b f4		 mov	 esi, esp
  0019f	8b ce		 mov	 ecx, esi
  001a1	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  001a4	50		 push	 eax
  001a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  001ab	8b 45 dc	 mov	 eax, DWORD PTR _newData$2[ebp+4]
  001ae	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001b1	89 46 04	 mov	 DWORD PTR [esi+4], eax
  001b4	8b 45 e0	 mov	 eax, DWORD PTR _newData$2[ebp+8]
  001b7	89 46 08	 mov	 DWORD PTR [esi+8], eax
  001ba	8b 45 e4	 mov	 eax, DWORD PTR _newData$2[ebp+12]
  001bd	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  001c0	e8 00 00 00 00	 call	 ?AddTail@?$CList@VCDMMngInfo@@V1@@@QAEPAU__POSITION@@VCDMMngInfo@@@Z ; CList<CDMMngInfo,CDMMngInfo>::AddTail

; 1197 : 		}

  001c5	68 00 00 00 00	 push	 OFFSET ??1CDMMngInfo@@QAE@XZ
  001ca	6a 01		 push	 1
  001cc	6a 10		 push	 16			; 00000010H
  001ce	8d 45 d8	 lea	 eax, DWORD PTR _newData$2[ebp]
  001d1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001d8	50		 push	 eax
  001d9	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  001de	8b 45 e8	 mov	 eax, DWORD PTR _nNewCount$1$[ebp]
  001e1	85 c0		 test	 eax, eax
  001e3	0f 85 17 ff ff
	ff		 jne	 $LL5@Serialize
$LN73@Serialize:

; 1198 : 	}
; 1199 : }

  001e9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001ec	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001f3	59		 pop	 ecx
  001f4	5f		 pop	 edi
  001f5	5e		 pop	 esi
  001f6	5b		 pop	 ebx
  001f7	8b e5		 mov	 esp, ebp
  001f9	5d		 pop	 ebp
  001fa	c2 04 00	 ret	 4
$LN64@Serialize:
  001fd	6a 00		 push	 0
  001ff	6a 03		 push	 3
  00201	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN65@Serialize:

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00206	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN91@Serialize:
  0020b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Serialize@?$CList@VCDMMngInfo@@V1@@@UAEXAAVCArchive@@@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ??1CDMMngInfo@@QAE@XZ
  00005	6a 01		 push	 1
  00007	6a 10		 push	 16			; 00000010H
  00009	8d 45 d8	 lea	 eax, DWORD PTR _newData$2[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00012	c3		 ret	 0
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$?Serialize@?$CList@VCDMMngInfo@@V1@@@UAEXAAVCArchive@@@Z:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Serialize@?$CList@VCDMMngInfo@@V1@@@UAEXAAVCArchive@@@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Serialize@?$CList@VCDMMngInfo@@V1@@@UAEXAAVCArchive@@@Z ENDP ; CList<CDMMngInfo,CDMMngInfo>::Serialize
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??1?$CList@VCDMMngInfo@@V1@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CList@VCDMMngInfo@@V1@@@UAE@XZ PROC		; CList<CDMMngInfo,CDMMngInfo>::~CList<CDMMngInfo,CDMMngInfo>, COMDAT
; _this$ = ecx

; 878  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CList@VCDMMngInfo@@V1@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CList@VCDMMngInfo@@V1@@@6B@

; 879  : 	RemoveAll();

  00028	e8 00 00 00 00	 call	 ?RemoveAll@?$CList@VCDMMngInfo@@V1@@@QAEXXZ ; CList<CDMMngInfo,CDMMngInfo>::RemoveAll

; 880  : 	ASSERT(m_nCount == 0);
; 881  : }

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00030	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00037	59		 pop	 ecx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
  0003c	cc		 int	 3
  0003d	cc		 int	 3
  0003e	cc		 int	 3
  0003f	cc		 int	 3
  00040	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CList@VCDMMngInfo@@V1@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CList@VCDMMngInfo@@V1@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CList@VCDMMngInfo@@V1@@@UAE@XZ ENDP		; CList<CDMMngInfo,CDMMngInfo>::~CList<CDMMngInfo,CDMMngInfo>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?FreeNode@?$CList@VCDMMngInfo@@V1@@@IAEXPAUCNode@1@@Z
_TEXT	SEGMENT
_pNode$ = 8						; size = 4
?FreeNode@?$CList@VCDMMngInfo@@V1@@@IAEXPAUCNode@1@@Z PROC ; CList<CDMMngInfo,CDMMngInfo>::FreeNode, COMDAT
; _this$ = ecx

; 936  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 937  : 	pNode->data.~TYPE();

  00004	8b 75 08	 mov	 esi, DWORD PTR _pNode$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 938  : 	pNode->pNext = m_pNodeFree;

  00013	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00016	89 06		 mov	 DWORD PTR [esi], eax

; 939  : 	m_pNodeFree = pNode;
; 940  : 	m_nCount--;

  00018	83 47 0c ff	 add	 DWORD PTR [edi+12], -1
  0001c	89 77 10	 mov	 DWORD PTR [edi+16], esi

; 941  : 	ASSERT(m_nCount >= 0);  // make sure we don't underflow
; 942  : 
; 943  : 	// if no more elements, cleanup completely
; 944  : 	if (m_nCount == 0)

  0001f	75 07		 jne	 SHORT $LN2@FreeNode

; 945  : 		RemoveAll();

  00021	8b cf		 mov	 ecx, edi
  00023	e8 00 00 00 00	 call	 ?RemoveAll@?$CList@VCDMMngInfo@@V1@@@QAEXXZ ; CList<CDMMngInfo,CDMMngInfo>::RemoveAll
$LN2@FreeNode:

; 946  : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?FreeNode@?$CList@VCDMMngInfo@@V1@@@IAEXPAUCNode@1@@Z ENDP ; CList<CDMMngInfo,CDMMngInfo>::FreeNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?NewNode@?$CList@VCDMMngInfo@@V1@@@IAEPAUCNode@1@PAU21@0@Z
_TEXT	SEGMENT
_pPrev$ = 8						; size = 4
_pNext$ = 12						; size = 4
?NewNode@?$CList@VCDMMngInfo@@V1@@@IAEPAUCNode@1@PAU21@0@Z PROC ; CList<CDMMngInfo,CDMMngInfo>::NewNode, COMDAT
; _this$ = ecx

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 902  : 	if (m_pNodeFree == NULL)

  00007	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0000b	75 33		 jne	 SHORT $LN7@NewNode

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  0000d	6a 18		 push	 24			; 00000018H
  0000f	ff 76 18	 push	 DWORD PTR [esi+24]
  00012	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001b	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0001e	83 c0 08	 add	 eax, 8
  00021	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  00024	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  00027	83 c0 e8	 add	 eax, -24		; ffffffe8H

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  0002a	83 c2 ff	 add	 edx, -1
  0002d	78 11		 js	 SHORT $LN7@NewNode
  0002f	90		 npad	 1
$LL4@NewNode:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	89 08		 mov	 DWORD PTR [eax], ecx

; 915  : 			m_pNodeFree = pNode;

  00035	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00038	83 e8 18	 sub	 eax, 24			; 00000018H
  0003b	83 ea 01	 sub	 edx, 1
  0003e	79 f0		 jns	 SHORT $LL4@NewNode
$LN7@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00040	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  00043	85 ff		 test	 edi, edi
  00045	74 39		 je	 SHORT $LN19@NewNode

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00047	8b 07		 mov	 eax, DWORD PTR [edi]

; 923  : 	pNode->pNext = pNext;

  00049	8b 4d 0c	 mov	 ecx, DWORD PTR _pNext$[ebp]
  0004c	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0004f	8b 45 08	 mov	 eax, DWORD PTR _pPrev$[ebp]
  00052	89 0f		 mov	 DWORD PTR [edi], ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp

; 7    : {

  00054	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 922  : 	pNode->pPrev = pPrev;

  00057	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 924  : 	m_nCount++;

  0005a	ff 46 0c	 inc	 DWORD PTR [esi+12]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp

; 7    : {

  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 8    : 	m_pThisPoint = NULL;

  00063	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 931  : 	return pNode;

  0006a	8b c7		 mov	 eax, edi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp

; 9    : 	m_dwKey = 0;

  0006c	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 10   : 	m_pCallFunc = 0;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 931  : 	return pNode;

  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi

; 932  : }

  0007c	5d		 pop	 ebp
  0007d	c2 08 00	 ret	 8
$LN19@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00080	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN17@NewNode:
  00085	cc		 int	 3
?NewNode@?$CList@VCDMMngInfo@@V1@@@IAEPAUCNode@1@PAU21@0@Z ENDP ; CList<CDMMngInfo,CDMMngInfo>::NewNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAt@?$CList@VCDMMngInfo@@V1@@@QAEXPAU__POSITION@@@Z
_TEXT	SEGMENT
_position$ = 8						; size = 4
?RemoveAt@?$CList@VCDMMngInfo@@V1@@@QAEXPAU__POSITION@@@Z PROC ; CList<CDMMngInfo,CDMMngInfo>::RemoveAt, COMDAT
; _this$ = ecx

; 1100 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1101 : 	ASSERT_VALID(this);
; 1102 : 
; 1103 : 	CNode* pOldNode = (CNode*) position;
; 1104 : 	ASSERT(AfxIsValidAddress(pOldNode, sizeof(CNode)));
; 1105 : 
; 1106 : 	// remove pOldNode from list
; 1107 : 	if (pOldNode == m_pNodeHead)

  00004	8b 75 08	 mov	 esi, DWORD PTR _position$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000c	3b 77 04	 cmp	 esi, DWORD PTR [edi+4]
  0000f	75 05		 jne	 SHORT $LN2@RemoveAt

; 1108 : 	{
; 1109 : 		m_pNodeHead = pOldNode->pNext;

  00011	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 1110 : 	}

  00014	eb 05		 jmp	 SHORT $LN3@RemoveAt
$LN2@RemoveAt:

; 1111 : 	else
; 1112 : 	{
; 1113 : 		ASSERT(AfxIsValidAddress(pOldNode->pPrev, sizeof(CNode)));
; 1114 : 		pOldNode->pPrev->pNext = pOldNode->pNext;

  00016	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00019	89 08		 mov	 DWORD PTR [eax], ecx
$LN3@RemoveAt:

; 1115 : 	}
; 1116 : 	if (pOldNode == m_pNodeTail)

  0001b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001e	3b 77 08	 cmp	 esi, DWORD PTR [edi+8]
  00021	75 05		 jne	 SHORT $LN4@RemoveAt

; 1117 : 	{
; 1118 : 		m_pNodeTail = pOldNode->pPrev;

  00023	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 1119 : 	}

  00026	eb 05		 jmp	 SHORT $LN5@RemoveAt
$LN4@RemoveAt:

; 1120 : 	else
; 1121 : 	{
; 1122 : 		ASSERT(AfxIsValidAddress(pOldNode->pNext, sizeof(CNode)));
; 1123 : 		pOldNode->pNext->pPrev = pOldNode->pPrev;

  00028	8b 06		 mov	 eax, DWORD PTR [esi]
  0002a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN5@RemoveAt:

; 937  : 	pNode->data.~TYPE();

  0002d	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 938  : 	pNode->pNext = m_pNodeFree;

  00036	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00039	89 06		 mov	 DWORD PTR [esi], eax

; 939  : 	m_pNodeFree = pNode;
; 940  : 	m_nCount--;

  0003b	83 47 0c ff	 add	 DWORD PTR [edi+12], -1
  0003f	89 77 10	 mov	 DWORD PTR [edi+16], esi

; 941  : 	ASSERT(m_nCount >= 0);  // make sure we don't underflow
; 942  : 
; 943  : 	// if no more elements, cleanup completely
; 944  : 	if (m_nCount == 0)

  00042	75 07		 jne	 SHORT $LN8@RemoveAt

; 945  : 		RemoveAll();

  00044	8b cf		 mov	 ecx, edi
  00046	e8 00 00 00 00	 call	 ?RemoveAll@?$CList@VCDMMngInfo@@V1@@@QAEXXZ ; CList<CDMMngInfo,CDMMngInfo>::RemoveAll
$LN8@RemoveAt:
  0004b	5f		 pop	 edi

; 1124 : 	}
; 1125 : 	FreeNode(pOldNode);
; 1126 : }

  0004c	5e		 pop	 esi
  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
?RemoveAt@?$CList@VCDMMngInfo@@V1@@@QAEXPAU__POSITION@@@Z ENDP ; CList<CDMMngInfo,CDMMngInfo>::RemoveAt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAll@?$CList@VCDMMngInfo@@V1@@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@?$CList@VCDMMngInfo@@V1@@@QAEXXZ PROC	; CList<CDMMngInfo,CDMMngInfo>::RemoveAll, COMDAT
; _this$ = ecx

; 862  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 863  : 	ASSERT_VALID(this);
; 864  : 
; 865  : 	// destroy elements
; 866  : 	CNode* pNode;
; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00004	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00007	85 f6		 test	 esi, esi
  00009	74 14		 je	 SHORT $LN3@RemoveAll
  0000b	0f 1f 44 00 00	 npad	 5
$LL4@RemoveAll:

; 868  : 		pNode->data.~TYPE();

  00010	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00019	8b 36		 mov	 esi, DWORD PTR [esi]
  0001b	85 f6		 test	 esi, esi
  0001d	75 f1		 jne	 SHORT $LL4@RemoveAll
$LN3@RemoveAll:

; 869  : 
; 870  : 	m_nCount = 0;
; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 872  : 	m_pBlocks->FreeDataChain();

  0001f	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00022	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00029	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00030	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00037	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0003e	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00043	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi

; 874  : }

  0004c	c3		 ret	 0
?RemoveAll@?$CList@VCDMMngInfo@@V1@@@QAEXXZ ENDP	; CList<CDMMngInfo,CDMMngInfo>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?AddTail@?$CList@VCDMMngInfo@@V1@@@QAEPAU__POSITION@@VCDMMngInfo@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_newElement$ = 8					; size = 16
?AddTail@?$CList@VCDMMngInfo@@V1@@@QAEPAU__POSITION@@VCDMMngInfo@@@Z PROC ; CList<CDMMngInfo,CDMMngInfo>::AddTail, COMDAT
; _this$ = ecx

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AddTail@?$CList@VCDMMngInfo@@V1@@@QAEPAU__POSITION@@VCDMMngInfo@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx

; 902  : 	if (m_pNodeFree == NULL)

  00027	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0

; 966  : 	ASSERT_VALID(this);
; 967  : 
; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  0002b	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 902  : 	if (m_pNodeFree == NULL)

  00035	75 39		 jne	 SHORT $LN12@AddTail

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  00037	6a 18		 push	 24			; 00000018H
  00039	ff 76 18	 push	 DWORD PTR [esi+24]
  0003c	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  00045	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00048	83 c0 08	 add	 eax, 8
  0004b	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  0004e	83 c2 ff	 add	 edx, -1
  00051	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  00054	8d 0c c8	 lea	 ecx, DWORD PTR [eax+ecx*8]
  00057	78 17		 js	 SHORT $LN12@AddTail
  00059	0f 1f 80 00 00
	00 00		 npad	 7
$LL9@AddTail:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00060	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00063	89 01		 mov	 DWORD PTR [ecx], eax

; 915  : 			m_pNodeFree = pNode;

  00065	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00068	83 e9 18	 sub	 ecx, 24			; 00000018H
  0006b	83 ea 01	 sub	 edx, 1
  0006e	79 f0		 jns	 SHORT $LL9@AddTail
$LN12@AddTail:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00070	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00073	85 db		 test	 ebx, ebx
  00075	74 7e		 je	 SHORT $LN31@AddTail

; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00077	8b 03		 mov	 eax, DWORD PTR [ebx]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp

; 7    : {

  00079	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  0007c	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 922  : 	pNode->pPrev = pPrev;

  0007f	89 7b 04	 mov	 DWORD PTR [ebx+4], edi

; 923  : 	pNode->pNext = pNext;

  00082	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0

; 924  : 	m_nCount++;

  00088	ff 46 0c	 inc	 DWORD PTR [esi+12]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp

; 7    : {

  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00091	8d 45 08	 lea	 eax, DWORD PTR _newElement$[ebp]

; 8    : 	m_pThisPoint = NULL;

  00094	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0
  0009b	50		 push	 eax
  0009c	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]

; 9    : 	m_dwKey = 0;

  0009f	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 10   : 	m_pCallFunc = 0;

  000a6	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  000b3	8b 45 0c	 mov	 eax, DWORD PTR _newElement$[ebp+4]
  000b6	89 43 0c	 mov	 DWORD PTR [ebx+12], eax
  000b9	8b 45 10	 mov	 eax, DWORD PTR _newElement$[ebp+8]
  000bc	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  000bf	8b 45 14	 mov	 eax, DWORD PTR _newElement$[ebp+12]
  000c2	89 43 14	 mov	 DWORD PTR [ebx+20], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 970  : 	if (m_pNodeTail != NULL)

  000c5	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000c8	85 c0		 test	 eax, eax
  000ca	74 04		 je	 SHORT $LN2@AddTail

; 971  : 		m_pNodeTail->pNext = pNewNode;

  000cc	89 18		 mov	 DWORD PTR [eax], ebx
  000ce	eb 03		 jmp	 SHORT $LN3@AddTail
$LN2@AddTail:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;

  000d0	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
$LN3@AddTail:
  000d3	8d 4d 08	 lea	 ecx, DWORD PTR _newElement$[ebp]

; 974  : 	m_pNodeTail = pNewNode;

  000d6	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 975  : 	return (POSITION) pNewNode;

  000df	8b c3		 mov	 eax, ebx

; 976  : }

  000e1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000eb	59		 pop	 ecx
  000ec	5f		 pop	 edi
  000ed	5e		 pop	 esi
  000ee	5b		 pop	 ebx
  000ef	8b e5		 mov	 esp, ebp
  000f1	5d		 pop	 ebp
  000f2	c2 10 00	 ret	 16			; 00000010H
$LN31@AddTail:

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  000f5	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN29@AddTail:
  000fa	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddTail@?$CList@VCDMMngInfo@@V1@@@QAEPAU__POSITION@@VCDMMngInfo@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _newElement$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CDMMngInfo@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?AddTail@?$CList@VCDMMngInfo@@V1@@@QAEPAU__POSITION@@VCDMMngInfo@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddTail@?$CList@VCDMMngInfo@@V1@@@QAEPAU__POSITION@@VCDMMngInfo@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddTail@?$CList@VCDMMngInfo@@V1@@@QAEPAU__POSITION@@VCDMMngInfo@@@Z ENDP ; CList<CDMMngInfo,CDMMngInfo>::AddTail
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??0?$CList@VCDMMngInfo@@V1@@@QAE@H@Z
_TEXT	SEGMENT
_nBlockSize$ = 8					; size = 4
??0?$CList@VCDMMngInfo@@V1@@@QAE@H@Z PROC		; CList<CDMMngInfo,CDMMngInfo>::CList<CDMMngInfo,CDMMngInfo>, COMDAT
; _this$ = ecx

; 851  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;
; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 856  : 	m_pBlocks = NULL;
; 857  : 	m_nBlockSize = nBlockSize;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nBlockSize$[ebp]
  00006	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 858  : }

  00009	8b c1		 mov	 eax, ecx
  0000b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CList@VCDMMngInfo@@V1@@@6B@
  00011	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00018	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0001f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00026	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0002d	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??0?$CList@VCDMMngInfo@@V1@@@QAE@H@Z ENDP		; CList<CDMMngInfo,CDMMngInfo>::CList<CDMMngInfo,CDMMngInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp
;	COMDAT ?ClearListAll@CAUDataMonitorManager@@QAEXXZ
_TEXT	SEGMENT
?ClearListAll@CAUDataMonitorManager@@QAEXXZ PROC	; CAUDataMonitorManager::ClearListAll, COMDAT
; _this$ = ecx

; 35   : 	m_List.RemoveAll();

  00000	83 c1 04	 add	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?RemoveAll@?$CList@VCDMMngInfo@@V1@@@QAEXXZ ; CList<CDMMngInfo,CDMMngInfo>::RemoveAll
?ClearListAll@CAUDataMonitorManager@@QAEXXZ ENDP	; CAUDataMonitorManager::ClearListAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp
;	COMDAT ??1CAUDataMonitorManager@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CAUDataMonitorManager@@QAE@XZ PROC			; CAUDataMonitorManager::~CAUDataMonitorManager, COMDAT
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CAUDataMonitorManager@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 35   : 	m_List.RemoveAll();

  00023	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]

; 29   : {

  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CAUDataMonitorManager@@6B@

; 35   : 	m_List.RemoveAll();

  0002c	8b ce		 mov	 ecx, esi
  0002e	e8 00 00 00 00	 call	 ?RemoveAll@?$CList@VCDMMngInfo@@V1@@@QAEXXZ ; CList<CDMMngInfo,CDMMngInfo>::RemoveAll
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 879  : 	RemoveAll();

  00033	8b ce		 mov	 ecx, esi
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@VCDMMngInfo@@V1@@@6B@
  00042	e8 00 00 00 00	 call	 ?RemoveAll@?$CList@VCDMMngInfo@@V1@@@QAEXXZ ; CList<CDMMngInfo,CDMMngInfo>::RemoveAll
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp

; 31   : }

  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	5e		 pop	 esi
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
  00057	cc		 int	 3
  00058	cc		 int	 3
  00059	cc		 int	 3
  0005a	cc		 int	 3
  0005b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CAUDataMonitorManager@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CAUDataMonitorManager@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CAUDataMonitorManager@@QAE@XZ ENDP			; CAUDataMonitorManager::~CAUDataMonitorManager
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp
;	COMDAT ??0CAUDataMonitorManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CAUDataMonitorManager@@QAE@XZ PROC			; CAUDataMonitorManager::CAUDataMonitorManager, COMDAT
; _this$ = ecx

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CAUDataMonitorManager@@6B@

; 25   : }

  0000a	8b c1		 mov	 eax, ecx
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 851  : {

  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_7?$CList@VCDMMngInfo@@V1@@@6B@

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;

  00016	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  0001d	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00024	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0002b	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 856  : 	m_pBlocks = NULL;

  00032	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 857  : 	m_nBlockSize = nBlockSize;

  00039	c7 41 1c 0a 00
	00 00		 mov	 DWORD PTR [ecx+28], 10	; 0000000aH
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp

; 25   : }

  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??0CAUDataMonitorManager@@QAE@XZ ENDP			; CAUDataMonitorManager::CAUDataMonitorManager
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp
;	COMDAT ?NotifyData@CAUDataMonitorManager@@UAGXPBDJJ@Z
_TEXT	SEGMENT
_item$1 = -16						; size = 16
_this$ = 8						; size = 4
_szKey$ = 12						; size = 4
_dwSubKey$ = 16						; size = 4
_dwNotifyData$ = 20					; size = 4
?NotifyData@CAUDataMonitorManager@@UAGXPBDJJ@Z PROC	; CAUDataMonitorManager::NotifyData, COMDAT

; 52   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi

; 53   : 	for(POSITION pos=m_List.GetHeadPosition(); pos;)

  00007	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]
  0000a	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  0000d	85 f6		 test	 esi, esi
  0000f	74 5d		 je	 SHORT $LN3@NotifyData
  00011	53		 push	 ebx
  00012	8b 5d 14	 mov	 ebx, DWORD PTR _dwNotifyData$[ebp]
  00015	57		 push	 edi
$LL2@NotifyData:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 811  : 	{ CNode* pNode = (CNode*) rPosition;

  00016	8b fe		 mov	 edi, esi
  00018	8d 4d f0	 lea	 ecx, DWORD PTR _item$1[ebp]

; 812  : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 813  : 		rPosition = (POSITION) pNode->pNext;

  0001b	8b 36		 mov	 esi, DWORD PTR [esi]

; 814  : 		return pNode->data; }

  0001d	83 c7 08	 add	 edi, 8
  00020	57		 push	 edi
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00027	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp

; 56   : 		if(item.m_szKey.Compare(szKey)==0 && item.m_pCallFunc!=NULL)

  0002a	8d 4d f0	 lea	 ecx, DWORD PTR _item$1[ebp]
  0002d	ff 75 0c	 push	 DWORD PTR _szKey$[ebp]
  00030	89 45 f4	 mov	 DWORD PTR _item$1[ebp+4], eax
  00033	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00036	89 45 f8	 mov	 DWORD PTR _item$1[ebp+8], eax
  00039	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0003c	89 45 fc	 mov	 DWORD PTR _item$1[ebp+12], eax
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Compare@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z
  00045	85 c0		 test	 eax, eax
  00047	75 16		 jne	 SHORT $LN5@NotifyData
  00049	8b 45 fc	 mov	 eax, DWORD PTR _item$1[ebp+12]
  0004c	85 c0		 test	 eax, eax
  0004e	74 0f		 je	 SHORT $LN5@NotifyData

; 57   : 		{
; 58   : 			item.m_pCallFunc(item.m_szKey, item.m_pThisPoint, item.m_dwKey, dwSubKey, dwNotifyData);

  00050	53		 push	 ebx
  00051	ff 75 10	 push	 DWORD PTR _dwSubKey$[ebp]
  00054	ff 75 f8	 push	 DWORD PTR _item$1[ebp+8]
  00057	ff 75 f4	 push	 DWORD PTR _item$1[ebp+4]
  0005a	ff 75 f0	 push	 DWORD PTR _item$1[ebp]
  0005d	ff d0		 call	 eax
$LN5@NotifyData:

; 53   : 	for(POSITION pos=m_List.GetHeadPosition(); pos;)

  0005f	8d 4d f0	 lea	 ecx, DWORD PTR _item$1[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00068	85 f6		 test	 esi, esi
  0006a	75 aa		 jne	 SHORT $LL2@NotifyData
  0006c	5f		 pop	 edi
  0006d	5b		 pop	 ebx
$LN3@NotifyData:
  0006e	5e		 pop	 esi

; 59   : 		}
; 60   : 	}
; 61   : }

  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 10 00	 ret	 16			; 00000010H
?NotifyData@CAUDataMonitorManager@@UAGXPBDJJ@Z ENDP	; CAUDataMonitorManager::NotifyData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp
;	COMDAT ?UnAdvise@CAUDataMonitorManager@@UAGXJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_dwRet$ = 12						; size = 4
?UnAdvise@CAUDataMonitorManager@@UAGXJ@Z PROC		; CAUDataMonitorManager::UnAdvise, COMDAT

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 48   : 	if(pos)	m_List.RemoveAt(pos);

  00004	8b 75 0c	 mov	 esi, DWORD PTR _dwRet$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 47		 je	 SHORT $LN11@UnAdvise
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1107 : 	if (pOldNode == m_pNodeHead)

  0000b	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp

; 48   : 	if(pos)	m_List.RemoveAt(pos);

  0000d	57		 push	 edi
  0000e	8b 7d 08	 mov	 edi, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1107 : 	if (pOldNode == m_pNodeHead)

  00011	3b 77 08	 cmp	 esi, DWORD PTR [edi+8]
  00014	75 05		 jne	 SHORT $LN5@UnAdvise

; 1108 : 	{
; 1109 : 		m_pNodeHead = pOldNode->pNext;

  00016	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 1110 : 	}

  00019	eb 05		 jmp	 SHORT $LN6@UnAdvise
$LN5@UnAdvise:

; 1111 : 	else
; 1112 : 	{
; 1113 : 		ASSERT(AfxIsValidAddress(pOldNode->pPrev, sizeof(CNode)));
; 1114 : 		pOldNode->pPrev->pNext = pOldNode->pNext;

  0001b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001e	89 08		 mov	 DWORD PTR [eax], ecx
$LN6@UnAdvise:

; 1115 : 	}
; 1116 : 	if (pOldNode == m_pNodeTail)

  00020	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00023	3b 77 0c	 cmp	 esi, DWORD PTR [edi+12]
  00026	75 05		 jne	 SHORT $LN7@UnAdvise

; 1117 : 	{
; 1118 : 		m_pNodeTail = pOldNode->pPrev;

  00028	89 4f 0c	 mov	 DWORD PTR [edi+12], ecx

; 1119 : 	}

  0002b	eb 05		 jmp	 SHORT $LN8@UnAdvise
$LN7@UnAdvise:

; 1120 : 	else
; 1121 : 	{
; 1122 : 		ASSERT(AfxIsValidAddress(pOldNode->pNext, sizeof(CNode)));
; 1123 : 		pOldNode->pNext->pPrev = pOldNode->pPrev;

  0002d	8b 06		 mov	 eax, DWORD PTR [esi]
  0002f	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN8@UnAdvise:

; 937  : 	pNode->data.~TYPE();

  00032	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 938  : 	pNode->pNext = m_pNodeFree;

  0003b	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0003e	89 06		 mov	 DWORD PTR [esi], eax

; 939  : 	m_pNodeFree = pNode;
; 940  : 	m_nCount--;

  00040	83 47 10 ff	 add	 DWORD PTR [edi+16], -1
  00044	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 941  : 	ASSERT(m_nCount >= 0);  // make sure we don't underflow
; 942  : 
; 943  : 	// if no more elements, cleanup completely
; 944  : 	if (m_nCount == 0)

  00047	75 08		 jne	 SHORT $LN19@UnAdvise

; 945  : 		RemoveAll();

  00049	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  0004c	e8 00 00 00 00	 call	 ?RemoveAll@?$CList@VCDMMngInfo@@V1@@@QAEXXZ ; CList<CDMMngInfo,CDMMngInfo>::RemoveAll
$LN19@UnAdvise:
  00051	5f		 pop	 edi
$LN11@UnAdvise:
  00052	5e		 pop	 esi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp

; 49   : }

  00053	5d		 pop	 ebp
  00054	c2 08 00	 ret	 8
?UnAdvise@CAUDataMonitorManager@@UAGXJ@Z ENDP		; CAUDataMonitorManager::UnAdvise
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp
;	COMDAT ?Advise@CAUDataMonitorManager@@UAGJPBDJJP6GX0JJJJ@Z@Z
_TEXT	SEGMENT
_newInfo$ = -16						; size = 16
_this$ = 8						; size = 4
_szKey$ = 12						; size = 4
_pThisPoint$ = 16					; size = 4
_dwKey$ = 20						; size = 4
_pCallFunc$ = 24					; size = 4
?Advise@CAUDataMonitorManager@@UAGJPBDJJP6GX0JJJJ@Z@Z PROC ; CAUDataMonitorManager::Advise, COMDAT

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi

; 14   : {

  00007	8d 4d f0	 lea	 ecx, DWORD PTR _newInfo$[ebp]
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 15   : 	m_szKey = szKey;

  00010	ff 75 0c	 push	 DWORD PTR _szKey$[ebp]
  00013	8d 4d f0	 lea	 ecx, DWORD PTR _newInfo$[ebp]
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 16   : 	m_pThisPoint = pThisPoint;

  0001c	8b 45 10	 mov	 eax, DWORD PTR _pThisPoint$[ebp]

; 40   : 	CDMMngInfo newInfo(szKey, pThisPoint, dwKey, pCallFunc);
; 41   : 	POSITION pos = m_List.AddTail(newInfo);

  0001f	83 ec 10	 sub	 esp, 16			; 00000010H

; 16   : 	m_pThisPoint = pThisPoint;

  00022	89 45 f4	 mov	 DWORD PTR _newInfo$[ebp+4], eax

; 40   : 	CDMMngInfo newInfo(szKey, pThisPoint, dwKey, pCallFunc);
; 41   : 	POSITION pos = m_List.AddTail(newInfo);

  00025	8b f4		 mov	 esi, esp

; 17   : 	m_dwKey = dwKey;

  00027	8b 45 14	 mov	 eax, DWORD PTR _dwKey$[ebp]
  0002a	8b ce		 mov	 ecx, esi
  0002c	89 45 f8	 mov	 DWORD PTR _newInfo$[ebp+8], eax

; 18   : 	m_pCallFunc = pCallFunc;

  0002f	8b 45 18	 mov	 eax, DWORD PTR _pCallFunc$[ebp]
  00032	89 45 fc	 mov	 DWORD PTR _newInfo$[ebp+12], eax
  00035	8d 45 f0	 lea	 eax, DWORD PTR _newInfo$[ebp]
  00038	50		 push	 eax
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  0003f	8b 45 f4	 mov	 eax, DWORD PTR _newInfo$[ebp+4]

; 40   : 	CDMMngInfo newInfo(szKey, pThisPoint, dwKey, pCallFunc);
; 41   : 	POSITION pos = m_List.AddTail(newInfo);

  00042	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00048	8b 45 f8	 mov	 eax, DWORD PTR _newInfo$[ebp+8]
  0004b	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004e	8b 45 fc	 mov	 eax, DWORD PTR _newInfo$[ebp+12]
  00051	8d 49 04	 lea	 ecx, DWORD PTR [ecx+4]
  00054	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00057	e8 00 00 00 00	 call	 ?AddTail@?$CList@VCDMMngInfo@@V1@@@QAEPAU__POSITION@@VCDMMngInfo@@@Z ; CList<CDMMngInfo,CDMMngInfo>::AddTail
  0005c	8d 4d f0	 lea	 ecx, DWORD PTR _newInfo$[ebp]
  0005f	8b f0		 mov	 esi, eax
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 42   : 	return (long)pos;

  00067	8b c6		 mov	 eax, esi

; 43   : }

  00069	5e		 pop	 esi
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 14 00	 ret	 20			; 00000014H
?Advise@CAUDataMonitorManager@@UAGJPBDJJP6GX0JJJJ@Z@Z ENDP ; CAUDataMonitorManager::Advise
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1CDMMngInfo@@QAE@XZ
_TEXT	SEGMENT
??1CDMMngInfo@@QAE@XZ PROC				; CDMMngInfo::~CDMMngInfo, COMDAT
; _this$ = ecx
  00000	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
??1CDMMngInfo@@QAE@XZ ENDP				; CDMMngInfo::~CDMMngInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp
;	COMDAT ??0CDMMngInfo@@QAE@PBDJJP6GX0JJJJ@Z@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_szKey$ = 8						; size = 4
_pThisPoint$ = 12					; size = 4
_dwKey$ = 16						; size = 4
_pCallFunc$ = 20					; size = 4
??0CDMMngInfo@@QAE@PBDJJP6GX0JJJJ@Z@Z PROC		; CDMMngInfo::CDMMngInfo, COMDAT
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CDMMngInfo@@QAE@PBDJJP6GX0JJJJ@Z@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 15   : 	m_szKey = szKey;

  0002f	ff 75 08	 push	 DWORD PTR _szKey$[ebp]
  00032	8b ce		 mov	 ecx, esi
  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 16   : 	m_pThisPoint = pThisPoint;

  00041	8b 45 0c	 mov	 eax, DWORD PTR _pThisPoint$[ebp]
  00044	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 17   : 	m_dwKey = dwKey;

  00047	8b 45 10	 mov	 eax, DWORD PTR _dwKey$[ebp]
  0004a	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 18   : 	m_pCallFunc = pCallFunc;

  0004d	8b 45 14	 mov	 eax, DWORD PTR _pCallFunc$[ebp]
  00050	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 19   : }

  00053	8b c6		 mov	 eax, esi
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	5e		 pop	 esi
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CDMMngInfo@@QAE@PBDJJP6GX0JJJJ@Z@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
__ehhandler$??0CDMMngInfo@@QAE@PBDJJP6GX0JJJJ@Z@Z:
  0000e	90		 npad	 1
  0000f	90		 npad	 1
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CDMMngInfo@@QAE@PBDJJP6GX0JJJJ@Z@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CDMMngInfo@@QAE@PBDJJP6GX0JJJJ@Z@Z ENDP		; CDMMngInfo::CDMMngInfo
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp
;	COMDAT ??0CDMMngInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CDMMngInfo@@QAE@XZ PROC				; CDMMngInfo::CDMMngInfo, COMDAT
; _this$ = ecx

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 8    : 	m_pThisPoint = NULL;

  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 9    : 	m_dwKey = 0;
; 10   : 	m_pCallFunc = 0;
; 11   : }

  00017	8b c6		 mov	 eax, esi
  00019	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00020	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00027	5e		 pop	 esi
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??0CDMMngInfo@@QAE@XZ ENDP				; CDMMngInfo::CDMMngInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\inc\IAUGwanMng.h
;	COMDAT ??__ERMSG_GWANSIMREGISTER@@YAXXZ
text$di	SEGMENT
??__ERMSG_GWANSIMREGISTER@@YAXXZ PROC			; `dynamic initializer for 'RMSG_GWANSIMREGISTER'', COMDAT

; 173  : const UINT RMSG_GWANSIMREGISTER		=   ::RegisterWindowMessage("RMSG_GWANSIMREGISTER");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MNPNIDPI@RMSG_GWANSIMREGISTER@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterWindowMessageA@4
  0000b	a3 00 00 00 00	 mov	 DWORD PTR ?RMSG_GWANSIMREGISTER@@3IB, eax
  00010	c3		 ret	 0
??__ERMSG_GWANSIMREGISTER@@YAXXZ ENDP			; `dynamic initializer for 'RMSG_GWANSIMREGISTER''
text$di	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\inc\Define_Gwansim.h
;	COMDAT ??__ERMSG_INTREQUEST@@YAXXZ
text$di	SEGMENT
??__ERMSG_INTREQUEST@@YAXXZ PROC			; `dynamic initializer for 'RMSG_INTREQUEST'', COMDAT

; 10   : const UINT RMSG_INTREQUEST = ::RegisterWindowMessage(_T("RMSG_INTREQUEST") );

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JHANHJCN@RMSG_INTREQUEST@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterWindowMessageA@4
  0000b	a3 00 00 00 00	 mov	 DWORD PTR ?RMSG_INTREQUEST@@3IB, eax
  00010	c3		 ret	 0
??__ERMSG_INTREQUEST@@YAXXZ ENDP			; `dynamic initializer for 'RMSG_INTREQUEST''
text$di	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\inc\Define_Gwansim.h
;	COMDAT ??__ERMSG_CONCERNHWND@@YAXXZ
text$di	SEGMENT
??__ERMSG_CONCERNHWND@@YAXXZ PROC			; `dynamic initializer for 'RMSG_CONCERNHWND'', COMDAT

; 9    : const UINT RMSG_CONCERNHWND = ::RegisterWindowMessage(_T("RMSG_CONCERNHWND") );

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@EPGJDGDK@RMSG_CONCERNHWND@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterWindowMessageA@4
  0000b	a3 00 00 00 00	 mov	 DWORD PTR ?RMSG_CONCERNHWND@@3IB, eax
  00010	c3		 ret	 0
??__ERMSG_CONCERNHWND@@YAXXZ ENDP			; `dynamic initializer for 'RMSG_CONCERNHWND''
text$di	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Inc\IBaseDefine.h
;	COMDAT ??__ERMSG_SETPCTRDATA@@YAXXZ
text$di	SEGMENT
??__ERMSG_SETPCTRDATA@@YAXXZ PROC			; `dynamic initializer for 'RMSG_SETPCTRDATA'', COMDAT

; 172  : const UINT RMSG_SETPCTRDATA = ::RegisterWindowMessage("RMSG_SETPCTRDATA");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JPACFCL@RMSG_SETPCTRDATA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterWindowMessageA@4
  0000b	a3 00 00 00 00	 mov	 DWORD PTR ?RMSG_SETPCTRDATA@@3IB, eax
  00010	c3		 ret	 0
??__ERMSG_SETPCTRDATA@@YAXXZ ENDP			; `dynamic initializer for 'RMSG_SETPCTRDATA''
text$di	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Inc\IBaseDefine.h
;	COMDAT ??__ERMSG_GETPCTRDATA@@YAXXZ
text$di	SEGMENT
??__ERMSG_GETPCTRDATA@@YAXXZ PROC			; `dynamic initializer for 'RMSG_GETPCTRDATA'', COMDAT

; 171  : const UINT RMSG_GETPCTRDATA = ::RegisterWindowMessage("RMSG_GETPCTRDATA");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GOOPDKI@RMSG_GETPCTRDATA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterWindowMessageA@4
  0000b	a3 00 00 00 00	 mov	 DWORD PTR ?RMSG_GETPCTRDATA@@3IB, eax
  00010	c3		 ret	 0
??__ERMSG_GETPCTRDATA@@YAXXZ ENDP			; `dynamic initializer for 'RMSG_GETPCTRDATA''
text$di	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Inc\IBaseDefine.h
;	COMDAT ??__ERMSG_INTERFACE@@YAXXZ
text$di	SEGMENT
??__ERMSG_INTERFACE@@YAXXZ PROC				; `dynamic initializer for 'RMSG_INTERFACE'', COMDAT

; 170  : const UINT RMSG_INTERFACE = ::RegisterWindowMessage("RMSG_INTERFACE");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BKKCOCLK@RMSG_INTERFACE@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterWindowMessageA@4
  0000b	a3 00 00 00 00	 mov	 DWORD PTR ?RMSG_INTERFACE@@3IB, eax
  00010	c3		 ret	 0
??__ERMSG_INTERFACE@@YAXXZ ENDP				; `dynamic initializer for 'RMSG_INTERFACE''
text$di	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z PROC		; CObject::Dump, COMDAT
; _this$ = ecx

; 122  : 	{ /* no dumping in release builds */ }

  00000	c2 04 00	 ret	 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z ENDP		; CObject::Dump
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT
?AssertValid@CObject@@UBEXXZ PROC			; CObject::AssertValid, COMDAT
; _this$ = ecx

; 120  : 	{ /* no asserts in release builds */ }

  00000	c2 00 00	 ret	 0
?AssertValid@CObject@@UBEXXZ ENDP			; CObject::AssertValid
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z PROC		; CObject::Serialize, COMDAT
; _this$ = ecx

; 106  : 	{ /* CObject does not serialize anything by default */ }

  00000	c2 04 00	 ret	 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z ENDP		; CObject::Serialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT
??1CObject@@UAE@XZ PROC					; CObject::~CObject, COMDAT
; _this$ = ecx

; 104  : 	{ }

  00000	c2 00 00	 ret	 0
??1CObject@@UAE@XZ ENDP					; CObject::~CObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_DataMonitorManager.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
