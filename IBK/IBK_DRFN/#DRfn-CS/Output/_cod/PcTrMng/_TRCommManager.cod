; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30145.0 

	TITLE	D:\git\src\IBK\IBK_DRFN\#DRfn-CS\_Obj\PcTrMng\_TRCommManager.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@BKKCOCLK@RMSG_INTERFACE@		; `string'
PUBLIC	??_C@_0BB@GOOPDKI@RMSG_GETPCTRDATA@		; `string'
PUBLIC	??_C@_0BB@JPACFCL@RMSG_SETPCTRDATA@		; `string'
PUBLIC	??_C@_0BB@EPGJDGDK@RMSG_CONCERNHWND@		; `string'
PUBLIC	??_C@_0BA@JHANHJCN@RMSG_INTREQUEST@		; `string'
PUBLIC	??_C@_0BF@MNPNIDPI@RMSG_GWANSIMREGISTER@	; `string'
;	COMDAT ??_C@_0BF@MNPNIDPI@RMSG_GWANSIMREGISTER@
CONST	SEGMENT
??_C@_0BF@MNPNIDPI@RMSG_GWANSIMREGISTER@ DB 'RMSG_GWANSIMREGISTER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JHANHJCN@RMSG_INTREQUEST@
CONST	SEGMENT
??_C@_0BA@JHANHJCN@RMSG_INTREQUEST@ DB 'RMSG_INTREQUEST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EPGJDGDK@RMSG_CONCERNHWND@
CONST	SEGMENT
??_C@_0BB@EPGJDGDK@RMSG_CONCERNHWND@ DB 'RMSG_CONCERNHWND', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JPACFCL@RMSG_SETPCTRDATA@
CONST	SEGMENT
??_C@_0BB@JPACFCL@RMSG_SETPCTRDATA@ DB 'RMSG_SETPCTRDATA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GOOPDKI@RMSG_GETPCTRDATA@
CONST	SEGMENT
??_C@_0BB@GOOPDKI@RMSG_GETPCTRDATA@ DB 'RMSG_GETPCTRDATA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BKKCOCLK@RMSG_INTERFACE@
CONST	SEGMENT
??_C@_0P@BKKCOCLK@RMSG_INTERFACE@ DB 'RMSG_INTERFACE', 00H ; `string'
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_scanf_options
PUBLIC	_sscanf
PUBLIC	??1CObject@@UAE@XZ				; CObject::~CObject
PUBLIC	??3CObject@@SGXPAX@Z				; CObject::operator delete
PUBLIC	?Serialize@CObject@@UAEXAAVCArchive@@@Z		; CObject::Serialize
PUBLIC	?AssertValid@CObject@@UBEXXZ			; CObject::AssertValid
PUBLIC	?Dump@CObject@@UBEXAAVCDumpContext@@@Z		; CObject::Dump
PUBLIC	?AtlThrowImpl@ATL@@YGXJ@Z			; ATL::AtlThrowImpl
PUBLIC	?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z	; CWnd::DoDataExchange
PUBLIC	?BeginModalState@CWnd@@UAEXXZ			; CWnd::BeginModalState
PUBLIC	?EndModalState@CWnd@@UAEXXZ			; CWnd::EndModalState
PUBLIC	?Unlock@CSyncObject@@UAEHJPAJ@Z			; CSyncObject::Unlock
PUBLIC	??0CCriticalSection@@QAE@XZ			; CCriticalSection::CCriticalSection
PUBLIC	?Unlock@CCriticalSection@@UAEHXZ		; CCriticalSection::Unlock
PUBLIC	?Lock@CCriticalSection@@UAEHK@Z			; CCriticalSection::Lock
PUBLIC	??1CCriticalSection@@UAE@XZ			; CCriticalSection::~CCriticalSection
PUBLIC	??_GCCriticalSection@@UAEPAXI@Z			; CCriticalSection::`scalar deleting destructor'
PUBLIC	??_GCTRComm@@UAEPAXI@Z				; CTRComm::`scalar deleting destructor'
PUBLIC	??0CTrCommManager@@QAE@XZ			; CTrCommManager::CTrCommManager
PUBLIC	??1CTrCommManager@@QAE@XZ			; CTrCommManager::~CTrCommManager
PUBLIC	?AdviseTrComm@CTrCommManager@@UAGPAUITrComm@@XZ	; CTrCommManager::AdviseTrComm
PUBLIC	?UnAdviseTrComm@CTrCommManager@@UAGXPAUITrComm@@@Z ; CTrCommManager::UnAdviseTrComm
PUBLIC	?GetSocketHandle@CTrCommManager@@UAGPAUHWND__@@PBD@Z ; CTrCommManager::GetSocketHandle
PUBLIC	?SetSocketHandle@CTrCommManager@@UAGXPBDPAUHWND__@@@Z ; CTrCommManager::SetSocketHandle
PUBLIC	??0?$CList@PAVCTrCommImpl@@PAV1@@@QAE@H@Z	; CList<CTrCommImpl *,CTrCommImpl *>::CList<CTrCommImpl *,CTrCommImpl *>
PUBLIC	?AddTail@?$CList@PAVCTrCommImpl@@PAV1@@@QAEPAU__POSITION@@PAVCTrCommImpl@@@Z ; CList<CTrCommImpl *,CTrCommImpl *>::AddTail
PUBLIC	?RemoveAll@?$CList@PAVCTrCommImpl@@PAV1@@@QAEXXZ ; CList<CTrCommImpl *,CTrCommImpl *>::RemoveAll
PUBLIC	?RemoveAt@?$CList@PAVCTrCommImpl@@PAV1@@@QAEXPAU__POSITION@@@Z ; CList<CTrCommImpl *,CTrCommImpl *>::RemoveAt
PUBLIC	?NewNode@?$CList@PAVCTrCommImpl@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<CTrCommImpl *,CTrCommImpl *>::NewNode
PUBLIC	?FreeNode@?$CList@PAVCTrCommImpl@@PAV1@@@IAEXPAUCNode@1@@Z ; CList<CTrCommImpl *,CTrCommImpl *>::FreeNode
PUBLIC	??1?$CList@PAVCTrCommImpl@@PAV1@@@UAE@XZ	; CList<CTrCommImpl *,CTrCommImpl *>::~CList<CTrCommImpl *,CTrCommImpl *>
PUBLIC	?Serialize@?$CList@PAVCTrCommImpl@@PAV1@@@UAEXAAVCArchive@@@Z ; CList<CTrCommImpl *,CTrCommImpl *>::Serialize
PUBLIC	??_G?$CList@PAVCTrCommImpl@@PAV1@@@UAEPAXI@Z	; CList<CTrCommImpl *,CTrCommImpl *>::`scalar deleting destructor'
PUBLIC	??0CTrCommImpl@@QAE@PAUHWND__@@@Z		; CTrCommImpl::CTrCommImpl
PUBLIC	??1CTrCommImpl@@QAE@XZ				; CTrCommImpl::~CTrCommImpl
PUBLIC	?Send2Server@CTrCommImpl@@UAGHPAXHH@Z		; CTrCommImpl::Send2Server
PUBLIC	?SetTR@CTrCommImpl@@UAGXPBDH@Z			; CTrCommImpl::SetTR
PUBLIC	?ChangeCallback@CTrCommImpl@@UAGXPAUITrCommSite@@@Z ; CTrCommImpl::ChangeCallback
PUBLIC	?SetBaseData@CTrCommImpl@@UAGXPBD0@Z		; CTrCommImpl::SetBaseData
PUBLIC	?GetBaseData@CTrCommImpl@@UAGXPBDAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CTrCommImpl::GetBaseData
PUBLIC	?SetBaseDataLong@CTrCommImpl@@UAGXPBDJ@Z	; CTrCommImpl::SetBaseDataLong
PUBLIC	??$SerializeElements@PAVCTrCommImpl@@@@YGXAAVCArchive@@PAPAVCTrCommImpl@@H@Z ; SerializeElements<CTrCommImpl *>
PUBLIC	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R3CObject@@8					; CObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObject@@8					; CObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CObject@@8			; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CWnd@@8				; CWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCWnd@@@8				; CWnd `RTTI Type Descriptor'
PUBLIC	??_R3CWnd@@8					; CWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWnd@@8					; CWnd::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCmdTarget@@8			; CCmdTarget::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCCmdTarget@@@8				; CCmdTarget `RTTI Type Descriptor'
PUBLIC	??_R3CCmdTarget@@8				; CCmdTarget::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCmdTarget@@8				; CCmdTarget::`RTTI Base Class Array'
PUBLIC	??_C@_0M@CBBNGGHM@PcTrMng?4dll@			; `string'
PUBLIC	??_C@_0P@IDMAJEGN@HANAROPCTRMAIN@		; `string'
PUBLIC	??_C@_06NDLAHCHE@?$CFs?$CF08X@			; `string'
PUBLIC	??_C@_02EMFKHFLK@?$CFX@				; `string'
PUBLIC	??_7CCriticalSection@@6B@			; CCriticalSection::`vftable'
PUBLIC	??_7CTRComm@@6B@				; CTRComm::`vftable'
PUBLIC	??_7?$CList@PAVCTrCommImpl@@PAV1@@@6B@		; CList<CTrCommImpl *,CTrCommImpl *>::`vftable'
PUBLIC	??_7CTrCommManager@@6B@				; CTrCommManager::`vftable'
PUBLIC	??_7CTrCommImpl@@6B@				; CTrCommImpl::`vftable'
PUBLIC	??_C@_04KLKHHPIG@MAIN@				; `string'
PUBLIC	??_R0?AUITrComm@@@8				; ITrComm `RTTI Type Descriptor'
PUBLIC	??_R3ITrComm@@8					; ITrComm::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ITrComm@@8					; ITrComm::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ITrComm@@8			; ITrComm::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUITrComm2@@@8				; ITrComm2 `RTTI Type Descriptor'
PUBLIC	??_R3ITrComm2@@8				; ITrComm2::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ITrComm2@@8				; ITrComm2::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ITrComm2@@8			; ITrComm2::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIAUTrCommManager@@@8			; IAUTrCommManager `RTTI Type Descriptor'
PUBLIC	??_R3IAUTrCommManager@@8			; IAUTrCommManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IAUTrCommManager@@8			; IAUTrCommManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IAUTrCommManager@@8		; IAUTrCommManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CCriticalSection@@6B@			; CCriticalSection::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCriticalSection@@@8			; CCriticalSection `RTTI Type Descriptor'
PUBLIC	??_R3CCriticalSection@@8			; CCriticalSection::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCriticalSection@@8			; CCriticalSection::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCriticalSection@@8		; CCriticalSection::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CSyncObject@@8			; CSyncObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCSyncObject@@@8				; CSyncObject `RTTI Type Descriptor'
PUBLIC	??_R3CSyncObject@@8				; CSyncObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSyncObject@@8				; CSyncObject::`RTTI Base Class Array'
PUBLIC	??_R4CTRComm@@6B@				; CTRComm::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCTRComm@@@8				; CTRComm `RTTI Type Descriptor'
PUBLIC	??_R3CTRComm@@8					; CTRComm::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CTRComm@@8					; CTRComm::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CTRComm@@8			; CTRComm::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CTrCommImpl@@6B@				; CTrCommImpl::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCTrCommImpl@@@8				; CTrCommImpl `RTTI Type Descriptor'
PUBLIC	??_R3CTrCommImpl@@8				; CTrCommImpl::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CTrCommImpl@@8				; CTrCommImpl::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CTrCommImpl@@8			; CTrCommImpl::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CList@PAVCTrCommImpl@@PAV1@@@6B@		; CList<CTrCommImpl *,CTrCommImpl *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CList@PAVCTrCommImpl@@PAV1@@@@8	; CList<CTrCommImpl *,CTrCommImpl *> `RTTI Type Descriptor'
PUBLIC	??_R3?$CList@PAVCTrCommImpl@@PAV1@@@8		; CList<CTrCommImpl *,CTrCommImpl *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CList@PAVCTrCommImpl@@PAV1@@@8		; CList<CTrCommImpl *,CTrCommImpl *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CList@PAVCTrCommImpl@@PAV1@@@8	; CList<CTrCommImpl *,CTrCommImpl *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CTrCommManager@@6B@			; CTrCommManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCTrCommManager@@@8			; CTrCommManager `RTTI Type Descriptor'
PUBLIC	??_R3CTrCommManager@@8				; CTrCommManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CTrCommManager@@8				; CTrCommManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CTrCommManager@@8			; CTrCommManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	?__global_delete@@YAXPAXI@Z:PROC		; __global_delete
EXTRN	___std_terminate:PROC
EXTRN	__imp__GetEnvironmentVariableA@12:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__InitializeCriticalSectionAndSpinCount@8:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	__imp__GetModuleHandleA@4:PROC
EXTRN	__imp__RegisterWindowMessageA@4:PROC
EXTRN	__imp__EnableWindow@8:PROC
EXTRN	__imp____stdio_common_vsscanf:PROC
EXTRN	__imp__free:PROC
EXTRN	?AfxThrowMemoryException@@YGXXZ:PROC		; AfxThrowMemoryException
EXTRN	?AfxThrowInvalidArgException@@YGXXZ:PROC	; AfxThrowInvalidArgException
EXTRN	?AfxThrowArchiveException@@YGXHPBD@Z:PROC	; AfxThrowArchiveException
EXTRN	?AfxThrowOleException@@YGXJ@Z:PROC		; AfxThrowOleException
EXTRN	?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ:PROC ; CObject::GetRuntimeClass
EXTRN	__imp__VariantClear@4:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ:PROC
EXTRN	?Read@CArchive@@QAEIPAXI@Z:PROC			; CArchive::Read
EXTRN	?Write@CArchive@@QAEXPBXI@Z:PROC		; CArchive::Write
EXTRN	?ReadCount@CArchive@@QAEKXZ:PROC		; CArchive::ReadCount
EXTRN	?WriteCount@CArchive@@QAEXK@Z:PROC		; CArchive::WriteCount
EXTRN	??0CMapStringToString@@QAE@H@Z:PROC		; CMapStringToString::CMapStringToString
EXTRN	??1CMapStringToString@@UAE@XZ:PROC		; CMapStringToString::~CMapStringToString
EXTRN	?Create@CPlex@@SGPAU1@AAPAU1@II@Z:PROC		; CPlex::Create
EXTRN	?FreeDataChain@CPlex@@QAEXXZ:PROC		; CPlex::FreeDataChain
EXTRN	?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z:PROC ; CCmdTarget::OnCmdMsg
EXTRN	?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z:PROC	; CCmdTarget::IsInvokeAllowed
EXTRN	?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z:PROC ; CCmdTarget::GetDispatchIID
EXTRN	?GetTypeInfoCount@CCmdTarget@@UAEIXZ:PROC	; CCmdTarget::GetTypeInfoCount
EXTRN	?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ:PROC ; CCmdTarget::GetTypeLibCache
EXTRN	?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z:PROC ; CCmdTarget::GetTypeLib
EXTRN	?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ:PROC ; CCmdTarget::GetCommandMap
EXTRN	?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ:PROC ; CCmdTarget::GetDispatchMap
EXTRN	?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ:PROC ; CCmdTarget::GetConnectionMap
EXTRN	?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ:PROC ; CCmdTarget::GetEventSinkMap
EXTRN	?OnCreateAggregates@CCmdTarget@@UAEHXZ:PROC	; CCmdTarget::OnCreateAggregates
EXTRN	?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z:PROC ; CCmdTarget::GetInterfaceHook
EXTRN	?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z:PROC ; CCmdTarget::GetExtraConnectionPoints
EXTRN	?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z:PROC ; CCmdTarget::GetConnectionHook
EXTRN	?GetRuntimeClass@CWnd@@UBEPAUCRuntimeClass@@XZ:PROC ; CWnd::GetRuntimeClass
EXTRN	??0CWnd@@QAE@XZ:PROC				; CWnd::CWnd
EXTRN	?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z:PROC	; CWnd::FromHandle
EXTRN	?PreSubclassWindow@CWnd@@UAEXXZ:PROC		; CWnd::PreSubclassWindow
EXTRN	?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z:PROC ; CWnd::Create
EXTRN	?CreateEx@CWnd@@UAEHKPBD0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z:PROC ; CWnd::CreateEx
EXTRN	?CreateEx@CWnd@@UAEHKPBD0KABUtagRECT@@PAV1@IPAX@Z:PROC ; CWnd::CreateEx
EXTRN	?DestroyWindow@CWnd@@UAEHXZ:PROC		; CWnd::DestroyWindow
EXTRN	?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z:PROC ; CWnd::PreCreateWindow
EXTRN	?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z:PROC	; CWnd::CalcWindowRect
EXTRN	?GetMenu@CWnd@@UBEPAVCMenu@@XZ:PROC		; CWnd::GetMenu
EXTRN	?SetMenu@CWnd@@UAEHPAVCMenu@@@Z:PROC		; CWnd::SetMenu
EXTRN	?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z:PROC ; CWnd::OnToolHitTest
EXTRN	?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z:PROC ; CWnd::GetScrollBarCtrl
EXTRN	?WinHelpA@CWnd@@UAEXKI@Z:PROC			; CWnd::WinHelpA
EXTRN	?HtmlHelpA@CWnd@@UAEXKI@Z:PROC			; CWnd::HtmlHelpA
EXTRN	?WinHelpInternal@CWnd@@UAEXKI@Z:PROC		; CWnd::WinHelpInternal
EXTRN	?ContinueModal@CWnd@@UAEHXZ:PROC		; CWnd::ContinueModal
EXTRN	?EndModalLoop@CWnd@@UAEXH@Z:PROC		; CWnd::EndModalLoop
EXTRN	?OnDrawIconicThumbnailOrLivePreview@CWnd@@UAEXAAVCDC@@VCRect@@VCSize@@HAAH@Z:PROC ; CWnd::OnDrawIconicThumbnailOrLivePreview
EXTRN	?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ:PROC ; CWnd::GetInterfaceMap
EXTRN	?EnsureStdObj@CWnd@@UAEJXZ:PROC			; CWnd::EnsureStdObj
EXTRN	?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z:PROC ; CWnd::get_accParent
EXTRN	?get_accChildCount@CWnd@@UAEJPAJ@Z:PROC		; CWnd::get_accChildCount
EXTRN	?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z:PROC ; CWnd::get_accChild
EXTRN	?get_accName@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accName
EXTRN	?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accValue
EXTRN	?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accDescription
EXTRN	?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z:PROC ; CWnd::get_accRole
EXTRN	?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z:PROC ; CWnd::get_accState
EXTRN	?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accHelp
EXTRN	?get_accHelpTopic@CWnd@@UAEJPAPA_WUtagVARIANT@@PAJ@Z:PROC ; CWnd::get_accHelpTopic
EXTRN	?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accKeyboardShortcut
EXTRN	?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z:PROC	; CWnd::get_accFocus
EXTRN	?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z:PROC ; CWnd::get_accSelection
EXTRN	?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accDefaultAction
EXTRN	?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z:PROC	; CWnd::accSelect
EXTRN	?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z:PROC ; CWnd::accLocation
EXTRN	?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z:PROC ; CWnd::accNavigate
EXTRN	?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z:PROC	; CWnd::accHitTest
EXTRN	?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z:PROC ; CWnd::accDoDefaultAction
EXTRN	?put_accName@CWnd@@UAEJUtagVARIANT@@PA_W@Z:PROC	; CWnd::put_accName
EXTRN	?put_accValue@CWnd@@UAEJUtagVARIANT@@PA_W@Z:PROC ; CWnd::put_accValue
EXTRN	?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z:PROC ; CWnd::SetProxy
EXTRN	?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z:PROC	; CWnd::CreateAccessibleProxy
EXTRN	?OnCommand@CWnd@@MAEHIJ@Z:PROC			; CWnd::OnCommand
EXTRN	?OnNotify@CWnd@@MAEHIJPAJ@Z:PROC		; CWnd::OnNotify
EXTRN	?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ:PROC ; CWnd::GetSuperWndProcAddr
EXTRN	?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z:PROC ; CWnd::PreTranslateMessage
EXTRN	?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z:PROC ; CWnd::OnAmbientProperty
EXTRN	?WindowProc@CWnd@@MAEJIIJ@Z:PROC		; CWnd::WindowProc
EXTRN	?OnWndMsg@CWnd@@MAEHIIJPAJ@Z:PROC		; CWnd::OnWndMsg
EXTRN	?DefWindowProcA@CWnd@@MAEJIIJ@Z:PROC		; CWnd::DefWindowProcA
EXTRN	?PostNcDestroy@CWnd@@MAEXXZ:PROC		; CWnd::PostNcDestroy
EXTRN	?OnChildNotify@CWnd@@MAEHIIJPAJ@Z:PROC		; CWnd::OnChildNotify
EXTRN	?OnTouchInputs@CWnd@@MAEHIPAUtagTOUCHINPUT@@@Z:PROC ; CWnd::OnTouchInputs
EXTRN	?OnTouchInput@CWnd@@MAEHVCPoint@@HHPAUtagTOUCHINPUT@@@Z:PROC ; CWnd::OnTouchInput
EXTRN	?GetGestureStatus@CWnd@@MAEKVCPoint@@@Z:PROC	; CWnd::GetGestureStatus
EXTRN	?OnGestureZoom@CWnd@@MAEHVCPoint@@J@Z:PROC	; CWnd::OnGestureZoom
EXTRN	?OnGesturePan@CWnd@@MAEHVCPoint@@0@Z:PROC	; CWnd::OnGesturePan
EXTRN	?OnGestureRotate@CWnd@@MAEHVCPoint@@N@Z:PROC	; CWnd::OnGestureRotate
EXTRN	?OnGestureTwoFingerTap@CWnd@@MAEHVCPoint@@@Z:PROC ; CWnd::OnGestureTwoFingerTap
EXTRN	?OnGesturePressAndTap@CWnd@@MAEHVCPoint@@J@Z:PROC ; CWnd::OnGesturePressAndTap
EXTRN	?ResizeDynamicLayout@CWnd@@MAEXXZ:PROC		; CWnd::ResizeDynamicLayout
EXTRN	??1CWnd@@UAE@XZ:PROC				; CWnd::~CWnd
EXTRN	?CheckAutoCenter@CWnd@@UAEHXZ:PROC		; CWnd::CheckAutoCenter
EXTRN	?IsFrameWnd@CWnd@@UBEHXZ:PROC			; CWnd::IsFrameWnd
EXTRN	?OnFinalRelease@CWnd@@UAEXXZ:PROC		; CWnd::OnFinalRelease
EXTRN	?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z:PROC ; CWnd::CreateControlContainer
EXTRN	?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z:PROC ; CWnd::CreateControlSite
EXTRN	?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z:PROC ; CWnd::SetOccDialogInfo
EXTRN	?GetOccDialogInfo@CWnd@@MAEPAU_AFX_OCC_DIALOG_INFO@@XZ:PROC ; CWnd::GetOccDialogInfo
EXTRN	??0COleVariant@@QAE@JG@Z:PROC			; COleVariant::COleVariant
EXTRN	??0CSyncObject@@QAE@PBD@Z:PROC			; CSyncObject::CSyncObject
EXTRN	??1CSyncObject@@UAE@XZ:PROC			; CSyncObject::~CSyncObject
EXTRN	?GetRuntimeClass@CCriticalSection@@UBEPAUCRuntimeClass@@XZ:PROC ; CCriticalSection::GetRuntimeClass
EXTRN	??_ECCriticalSection@@UAEPAXI@Z:PROC		; CCriticalSection::`vector deleting destructor'
EXTRN	?Send2Server@CTRComm@@QAEHPAXHH@Z:PROC		; CTRComm::Send2Server
EXTRN	?SetTR@CTRComm@@QAEXPBDH@Z:PROC			; CTRComm::SetTR
EXTRN	?Create@CTRComm@@UAEHPAVCWnd@@@Z:PROC		; CTRComm::Create
EXTRN	?GetMessageMap@CTRComm@@MBEPBUAFX_MSGMAP@@XZ:PROC ; CTRComm::GetMessageMap
EXTRN	?SetBaseData@CTRComm@@QAEXPBD0@Z:PROC		; CTRComm::SetBaseData
EXTRN	?GetBaseData@CTRComm@@QAEXPBDAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z:PROC ; CTRComm::GetBaseData
EXTRN	?SetBaseDataLong@CTRComm@@QAEXPBDJ@Z:PROC	; CTRComm::SetBaseDataLong
EXTRN	??_ECTRComm@@UAEPAXI@Z:PROC			; CTRComm::`vector deleting destructor'
EXTRN	??_E?$CList@PAVCTrCommImpl@@PAV1@@@UAEPAXI@Z:PROC ; CList<CTrCommImpl *,CTrCommImpl *>::`vector deleting destructor'
EXTRN	?SetData@CMainExInfoManager@@UAGHHPBVCOleVariant@@@Z:PROC ; CMainExInfoManager::SetData
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?theApp@@3VCPcTrMngApp@@A:BYTE			; theApp
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?RMSG_INTERFACE@@3IB DD 01H DUP (?)			; RMSG_INTERFACE
?RMSG_GETPCTRDATA@@3IB DD 01H DUP (?)			; RMSG_GETPCTRDATA
?RMSG_SETPCTRDATA@@3IB DD 01H DUP (?)			; RMSG_SETPCTRDATA
?RMSG_CONCERNHWND@@3IB DD 01H DUP (?)			; RMSG_CONCERNHWND
?RMSG_INTREQUEST@@3IB DD 01H DUP (?)			; RMSG_INTREQUEST
?RMSG_GWANSIMREGISTER@@3IB DD 01H DUP (?)		; RMSG_GWANSIMREGISTER
_BSS	ENDS
CRT$XCU	SEGMENT
?RMSG_INTERFACE$initializer$@@3P6AXXZA DD FLAT:??__ERMSG_INTERFACE@@YAXXZ ; RMSG_INTERFACE$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CTrCommManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CTrCommManager@@8 DD FLAT:??_R0?AVCTrCommManager@@@8 ; CTrCommManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CTrCommManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CTrCommManager@@8
rdata$r	SEGMENT
??_R2CTrCommManager@@8 DD FLAT:??_R1A@?0A@EA@CTrCommManager@@8 ; CTrCommManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IAUTrCommManager@@8
rdata$r	ENDS
;	COMDAT ??_R3CTrCommManager@@8
rdata$r	SEGMENT
??_R3CTrCommManager@@8 DD 00H				; CTrCommManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CTrCommManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCTrCommManager@@@8
data$rs	SEGMENT
??_R0?AVCTrCommManager@@@8 DD FLAT:??_7type_info@@6B@	; CTrCommManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCTrCommManager@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CTrCommManager@@6B@
rdata$r	SEGMENT
??_R4CTrCommManager@@6B@ DD 00H				; CTrCommManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCTrCommManager@@@8
	DD	FLAT:??_R3CTrCommManager@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CList@PAVCTrCommImpl@@PAV1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CList@PAVCTrCommImpl@@PAV1@@@8 DD FLAT:??_R0?AV?$CList@PAVCTrCommImpl@@PAV1@@@@8 ; CList<CTrCommImpl *,CTrCommImpl *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CList@PAVCTrCommImpl@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CList@PAVCTrCommImpl@@PAV1@@@8
rdata$r	SEGMENT
??_R2?$CList@PAVCTrCommImpl@@PAV1@@@8 DD FLAT:??_R1A@?0A@EA@?$CList@PAVCTrCommImpl@@PAV1@@@8 ; CList<CTrCommImpl *,CTrCommImpl *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CList@PAVCTrCommImpl@@PAV1@@@8
rdata$r	SEGMENT
??_R3?$CList@PAVCTrCommImpl@@PAV1@@@8 DD 00H		; CList<CTrCommImpl *,CTrCommImpl *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CList@PAVCTrCommImpl@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CList@PAVCTrCommImpl@@PAV1@@@@8
data$rs	SEGMENT
??_R0?AV?$CList@PAVCTrCommImpl@@PAV1@@@@8 DD FLAT:??_7type_info@@6B@ ; CList<CTrCommImpl *,CTrCommImpl *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CList@PAVCTrCommImpl@@PAV1@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CList@PAVCTrCommImpl@@PAV1@@@6B@
rdata$r	SEGMENT
??_R4?$CList@PAVCTrCommImpl@@PAV1@@@6B@ DD 00H		; CList<CTrCommImpl *,CTrCommImpl *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CList@PAVCTrCommImpl@@PAV1@@@@8
	DD	FLAT:??_R3?$CList@PAVCTrCommImpl@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CTrCommImpl@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CTrCommImpl@@8 DD FLAT:??_R0?AVCTrCommImpl@@@8 ; CTrCommImpl::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CTrCommImpl@@8
rdata$r	ENDS
;	COMDAT ??_R2CTrCommImpl@@8
rdata$r	SEGMENT
??_R2CTrCommImpl@@8 DD FLAT:??_R1A@?0A@EA@CTrCommImpl@@8 ; CTrCommImpl::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ITrComm2@@8
	DD	FLAT:??_R1A@?0A@EA@ITrComm@@8
rdata$r	ENDS
;	COMDAT ??_R3CTrCommImpl@@8
rdata$r	SEGMENT
??_R3CTrCommImpl@@8 DD 00H				; CTrCommImpl::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CTrCommImpl@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCTrCommImpl@@@8
data$rs	SEGMENT
??_R0?AVCTrCommImpl@@@8 DD FLAT:??_7type_info@@6B@	; CTrCommImpl `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCTrCommImpl@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CTrCommImpl@@6B@
rdata$r	SEGMENT
??_R4CTrCommImpl@@6B@ DD 00H				; CTrCommImpl::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCTrCommImpl@@@8
	DD	FLAT:??_R3CTrCommImpl@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CTRComm@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CTRComm@@8 DD FLAT:??_R0?AVCTRComm@@@8	; CTRComm::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CTRComm@@8
rdata$r	ENDS
;	COMDAT ??_R2CTRComm@@8
rdata$r	SEGMENT
??_R2CTRComm@@8 DD FLAT:??_R1A@?0A@EA@CTRComm@@8	; CTRComm::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CWnd@@8
	DD	FLAT:??_R1A@?0A@EA@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CTRComm@@8
rdata$r	SEGMENT
??_R3CTRComm@@8 DD 00H					; CTRComm::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CTRComm@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCTRComm@@@8
data$rs	SEGMENT
??_R0?AVCTRComm@@@8 DD FLAT:??_7type_info@@6B@		; CTRComm `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCTRComm@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CTRComm@@6B@
rdata$r	SEGMENT
??_R4CTRComm@@6B@ DD 00H				; CTRComm::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCTRComm@@@8
	DD	FLAT:??_R3CTRComm@@8
rdata$r	ENDS
;	COMDAT ??_R2CSyncObject@@8
rdata$r	SEGMENT
??_R2CSyncObject@@8 DD FLAT:??_R1A@?0A@EA@CSyncObject@@8 ; CSyncObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CSyncObject@@8
rdata$r	SEGMENT
??_R3CSyncObject@@8 DD 00H				; CSyncObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CSyncObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSyncObject@@@8
data$rs	SEGMENT
??_R0?AVCSyncObject@@@8 DD FLAT:??_7type_info@@6B@	; CSyncObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSyncObject@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CSyncObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSyncObject@@8 DD FLAT:??_R0?AVCSyncObject@@@8 ; CSyncObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSyncObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCriticalSection@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCriticalSection@@8 DD FLAT:??_R0?AVCCriticalSection@@@8 ; CCriticalSection::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCriticalSection@@8
rdata$r	ENDS
;	COMDAT ??_R2CCriticalSection@@8
rdata$r	SEGMENT
??_R2CCriticalSection@@8 DD FLAT:??_R1A@?0A@EA@CCriticalSection@@8 ; CCriticalSection::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CSyncObject@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CCriticalSection@@8
rdata$r	SEGMENT
??_R3CCriticalSection@@8 DD 00H				; CCriticalSection::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CCriticalSection@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCriticalSection@@@8
data$rs	SEGMENT
??_R0?AVCCriticalSection@@@8 DD FLAT:??_7type_info@@6B@	; CCriticalSection `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCriticalSection@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CCriticalSection@@6B@
rdata$r	SEGMENT
??_R4CCriticalSection@@6B@ DD 00H			; CCriticalSection::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCriticalSection@@@8
	DD	FLAT:??_R3CCriticalSection@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IAUTrCommManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IAUTrCommManager@@8 DD FLAT:??_R0?AUIAUTrCommManager@@@8 ; IAUTrCommManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IAUTrCommManager@@8
rdata$r	ENDS
;	COMDAT ??_R2IAUTrCommManager@@8
rdata$r	SEGMENT
??_R2IAUTrCommManager@@8 DD FLAT:??_R1A@?0A@EA@IAUTrCommManager@@8 ; IAUTrCommManager::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IAUTrCommManager@@8
rdata$r	SEGMENT
??_R3IAUTrCommManager@@8 DD 00H				; IAUTrCommManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IAUTrCommManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIAUTrCommManager@@@8
data$rs	SEGMENT
??_R0?AUIAUTrCommManager@@@8 DD FLAT:??_7type_info@@6B@	; IAUTrCommManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIAUTrCommManager@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@ITrComm2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ITrComm2@@8 DD FLAT:??_R0?AUITrComm2@@@8	; ITrComm2::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ITrComm2@@8
rdata$r	ENDS
;	COMDAT ??_R2ITrComm2@@8
rdata$r	SEGMENT
??_R2ITrComm2@@8 DD FLAT:??_R1A@?0A@EA@ITrComm2@@8	; ITrComm2::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ITrComm@@8
rdata$r	ENDS
;	COMDAT ??_R3ITrComm2@@8
rdata$r	SEGMENT
??_R3ITrComm2@@8 DD 00H					; ITrComm2::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ITrComm2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUITrComm2@@@8
data$rs	SEGMENT
??_R0?AUITrComm2@@@8 DD FLAT:??_7type_info@@6B@		; ITrComm2 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUITrComm2@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@ITrComm@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ITrComm@@8 DD FLAT:??_R0?AUITrComm@@@8	; ITrComm::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ITrComm@@8
rdata$r	ENDS
;	COMDAT ??_R2ITrComm@@8
rdata$r	SEGMENT
??_R2ITrComm@@8 DD FLAT:??_R1A@?0A@EA@ITrComm@@8	; ITrComm::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ITrComm@@8
rdata$r	SEGMENT
??_R3ITrComm@@8 DD 00H					; ITrComm::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ITrComm@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUITrComm@@@8
data$rs	SEGMENT
??_R0?AUITrComm@@@8 DD FLAT:??_7type_info@@6B@		; ITrComm `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUITrComm@@', 00H
data$rs	ENDS
;	COMDAT ??_C@_04KLKHHPIG@MAIN@
CONST	SEGMENT
??_C@_04KLKHHPIG@MAIN@ DB 'MAIN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CTrCommImpl@@6B@
CONST	SEGMENT
??_7CTrCommImpl@@6B@ DD FLAT:??_R4CTrCommImpl@@6B@	; CTrCommImpl::`vftable'
	DD	FLAT:?ChangeCallback@CTrCommImpl@@UAGXPAUITrCommSite@@@Z
	DD	FLAT:?Send2Server@CTrCommImpl@@UAGHPAXHH@Z
	DD	FLAT:?SetTR@CTrCommImpl@@UAGXPBDH@Z
	DD	FLAT:?SetBaseData@CTrCommImpl@@UAGXPBD0@Z
	DD	FLAT:?GetBaseData@CTrCommImpl@@UAGXPBDAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
	DD	FLAT:?SetBaseDataLong@CTrCommImpl@@UAGXPBDJ@Z
CONST	ENDS
;	COMDAT ??_7CTrCommManager@@6B@
CONST	SEGMENT
??_7CTrCommManager@@6B@ DD FLAT:??_R4CTrCommManager@@6B@ ; CTrCommManager::`vftable'
	DD	FLAT:?AdviseTrComm@CTrCommManager@@UAGPAUITrComm@@XZ
	DD	FLAT:?UnAdviseTrComm@CTrCommManager@@UAGXPAUITrComm@@@Z
	DD	FLAT:?GetSocketHandle@CTrCommManager@@UAGPAUHWND__@@PBD@Z
	DD	FLAT:?SetSocketHandle@CTrCommManager@@UAGXPBDPAUHWND__@@@Z
CONST	ENDS
;	COMDAT ??_7?$CList@PAVCTrCommImpl@@PAV1@@@6B@
CONST	SEGMENT
??_7?$CList@PAVCTrCommImpl@@PAV1@@@6B@ DD FLAT:??_R4?$CList@PAVCTrCommImpl@@PAV1@@@6B@ ; CList<CTrCommImpl *,CTrCommImpl *>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CList@PAVCTrCommImpl@@PAV1@@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CList@PAVCTrCommImpl@@PAV1@@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_7CTRComm@@6B@
CONST	SEGMENT
??_7CTRComm@@6B@ DD FLAT:??_R4CTRComm@@6B@		; CTRComm::`vftable'
	DD	FLAT:?GetRuntimeClass@CWnd@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECTRComm@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CTRComm@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CWnd@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KABUtagRECT@@PAV1@IPAX@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?GetMenu@CWnd@@UBEPAVCMenu@@XZ
	DD	FLAT:?SetMenu@CWnd@@UAEHPAVCMenu@@@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?HtmlHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?WinHelpInternal@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?OnDrawIconicThumbnailOrLivePreview@CWnd@@UAEXAAVCDC@@VCRect@@VCSize@@HAAH@Z
	DD	FLAT:?EnsureStdObj@CWnd@@UAEJXZ
	DD	FLAT:?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z
	DD	FLAT:?get_accChildCount@CWnd@@UAEJPAJ@Z
	DD	FLAT:?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z
	DD	FLAT:?get_accName@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accHelpTopic@CWnd@@UAEJPAPA_WUtagVARIANT@@PAJ@Z
	DD	FLAT:?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z
	DD	FLAT:?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z
	DD	FLAT:?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z
	DD	FLAT:?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z
	DD	FLAT:?put_accName@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?put_accValue@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z
	DD	FLAT:?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z
	DD	FLAT:?OnCommand@CWnd@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CWnd@@MAEXXZ
	DD	FLAT:?OnChildNotify@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?OnTouchInputs@CWnd@@MAEHIPAUtagTOUCHINPUT@@@Z
	DD	FLAT:?OnTouchInput@CWnd@@MAEHVCPoint@@HHPAUtagTOUCHINPUT@@@Z
	DD	FLAT:?GetGestureStatus@CWnd@@MAEKVCPoint@@@Z
	DD	FLAT:?OnGestureZoom@CWnd@@MAEHVCPoint@@J@Z
	DD	FLAT:?OnGesturePan@CWnd@@MAEHVCPoint@@0@Z
	DD	FLAT:?OnGestureRotate@CWnd@@MAEHVCPoint@@N@Z
	DD	FLAT:?OnGestureTwoFingerTap@CWnd@@MAEHVCPoint@@@Z
	DD	FLAT:?OnGesturePressAndTap@CWnd@@MAEHVCPoint@@J@Z
	DD	FLAT:?ResizeDynamicLayout@CWnd@@MAEXXZ
	DD	FLAT:?CheckAutoCenter@CWnd@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z
	DD	FLAT:?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z
	DD	FLAT:?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?GetOccDialogInfo@CWnd@@MAEPAU_AFX_OCC_DIALOG_INFO@@XZ
	DD	FLAT:?Create@CTRComm@@UAEHPAVCWnd@@@Z
CONST	ENDS
;	COMDAT ??_7CCriticalSection@@6B@
CONST	SEGMENT
??_7CCriticalSection@@6B@ DD FLAT:??_R4CCriticalSection@@6B@ ; CCriticalSection::`vftable'
	DD	FLAT:?GetRuntimeClass@CCriticalSection@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECCriticalSection@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?Lock@CCriticalSection@@UAEHK@Z
	DD	FLAT:?Unlock@CSyncObject@@UAEHJPAJ@Z
	DD	FLAT:?Unlock@CCriticalSection@@UAEHXZ
CONST	ENDS
;	COMDAT ??_C@_02EMFKHFLK@?$CFX@
CONST	SEGMENT
??_C@_02EMFKHFLK@?$CFX@ DB '%X', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06NDLAHCHE@?$CFs?$CF08X@
CONST	SEGMENT
??_C@_06NDLAHCHE@?$CFs?$CF08X@ DB '%s%08X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IDMAJEGN@HANAROPCTRMAIN@
CONST	SEGMENT
??_C@_0P@IDMAJEGN@HANAROPCTRMAIN@ DB 'HANAROPCTRMAIN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CBBNGGHM@PcTrMng?4dll@
CONST	SEGMENT
??_C@_0M@CBBNGGHM@PcTrMng?4dll@ DB 'PcTrMng.dll', 00H	; `string'
CONST	ENDS
;	COMDAT ??_R2CCmdTarget@@8
rdata$r	SEGMENT
??_R2CCmdTarget@@8 DD FLAT:??_R1A@?0A@EA@CCmdTarget@@8	; CCmdTarget::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CCmdTarget@@8
rdata$r	SEGMENT
??_R3CCmdTarget@@8 DD 00H				; CCmdTarget::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CCmdTarget@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCmdTarget@@@8
data$rs	SEGMENT
??_R0?AVCCmdTarget@@@8 DD FLAT:??_7type_info@@6B@	; CCmdTarget `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCmdTarget@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CCmdTarget@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCmdTarget@@8 DD FLAT:??_R0?AVCCmdTarget@@@8 ; CCmdTarget::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCmdTarget@@8
rdata$r	ENDS
;	COMDAT ??_R2CWnd@@8
rdata$r	SEGMENT
??_R2CWnd@@8 DD	FLAT:??_R1A@?0A@EA@CWnd@@8		; CWnd::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CWnd@@8
rdata$r	SEGMENT
??_R3CWnd@@8 DD	00H					; CWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWnd@@@8
data$rs	SEGMENT
??_R0?AVCWnd@@@8 DD FLAT:??_7type_info@@6B@		; CWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWnd@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWnd@@8 DD FLAT:??_R0?AVCWnd@@@8		; CWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWnd@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CObject@@8
rdata$r	SEGMENT
??_R2CObject@@8 DD FLAT:??_R1A@?0A@EA@CObject@@8	; CObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObject@@8
rdata$r	SEGMENT
??_R3CObject@@8 DD 00H					; CObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
data$rs	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
data$rs	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GCTrCommImpl@@QAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_GCTrCommImpl@@QAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_GCTrCommImpl@@QAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CTrCommImpl@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CTrCommImpl@@QAE@PAUHWND__@@@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??0CTrCommImpl@@QAE@PAUHWND__@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CTrCommImpl@@QAE@PAUHWND__@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CTrCommImpl@@QAE@PAUHWND__@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CTrCommImpl@@QAE@PAUHWND__@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CTrCommImpl@@QAE@PAUHWND__@@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$??0CTrCommImpl@@QAE@PAUHWND__@@@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$??0CTrCommImpl@@QAE@PAUHWND__@@@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$??0CTrCommImpl@@QAE@PAUHWND__@@@Z$6
	DD	05H
	DD	FLAT:__unwindfunclet$??0CTrCommImpl@@QAE@PAUHWND__@@@Z$7
	DD	00H
	DD	FLAT:__unwindfunclet$??0CTrCommImpl@@QAE@PAUHWND__@@@Z$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$CList@PAVCTrCommImpl@@PAV1@@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_G?$CList@PAVCTrCommImpl@@PAV1@@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$CList@PAVCTrCommImpl@@PAV1@@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CList@PAVCTrCommImpl@@PAV1@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?UnAdviseTrComm@CTrCommManager@@UAGXPAUITrComm@@@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$?UnAdviseTrComm@CTrCommManager@@UAGXPAUITrComm@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?UnAdviseTrComm@CTrCommManager@@UAGXPAUITrComm@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CTrCommManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1CTrCommManager@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CTrCommManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GCTRComm@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_GCTRComm@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_GCTRComm@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CTRComm@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CTRComm@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0CTRComm@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CTRComm@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CTRComm@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CTRComm@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CTRComm@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CTRComm@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CTRComm@@QAE@XZ$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CCriticalSection@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCriticalSection@@QAE@XZ$0
__ehfuncinfo$??0CCriticalSection@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CCriticalSection@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
?RMSG_GETPCTRDATA$initializer$@@3P6AXXZA DD FLAT:??__ERMSG_GETPCTRDATA@@YAXXZ ; RMSG_GETPCTRDATA$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?RMSG_SETPCTRDATA$initializer$@@3P6AXXZA DD FLAT:??__ERMSG_SETPCTRDATA@@YAXXZ ; RMSG_SETPCTRDATA$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?RMSG_CONCERNHWND$initializer$@@3P6AXXZA DD FLAT:??__ERMSG_CONCERNHWND@@YAXXZ ; RMSG_CONCERNHWND$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?RMSG_INTREQUEST$initializer$@@3P6AXXZA DD FLAT:??__ERMSG_INTREQUEST@@YAXXZ ; RMSG_INTREQUEST$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?RMSG_GWANSIMREGISTER$initializer$@@3P6AXXZA DD FLAT:??__ERMSG_GWANSIMREGISTER@@YAXXZ ; RMSG_GWANSIMREGISTER$initializer$
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@PAVCTrCommImpl@@@@YGXAAVCArchive@@PAPAVCTrCommImpl@@H@Z
_TEXT	SEGMENT
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@PAVCTrCommImpl@@@@YGXAAVCArchive@@PAPAVCTrCommImpl@@H@Z PROC ; SerializeElements<CTrCommImpl *>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR _nCount$[ebp]
  0000b	57		 push	 edi
  0000c	85 f6		 test	 esi, esi
  0000e	74 08		 je	 SHORT $LN2@SerializeE
  00010	85 c9		 test	 ecx, ecx
  00012	0f 84 89 00 00
	00		 je	 $LN34@SerializeE
$LN2@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00018	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  0001b	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0001e	f7 d0		 not	 eax
  00020	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00022	74 3c		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;
; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )

  00024	85 f6		 test	 esi, esi
  00026	74 31		 je	 SHORT $LN8@SerializeE
  00028	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL5@SerializeE:

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00030	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00035	3b f3		 cmp	 esi, ebx
  00037	0f 42 de	 cmovb	 ebx, esi

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0003a	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
  00041	57		 push	 edi
  00042	51		 push	 ecx
  00043	8b ca		 mov	 ecx, edx
  00045	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;
; 87   : 			pData += nElementsToWrite;

  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  00050	03 cf		 add	 ecx, edi
  00052	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  00055	2b f3		 sub	 esi, ebx
  00057	75 d7		 jne	 SHORT $LL5@SerializeE
$LN8@SerializeE:
  00059	5f		 pop	 edi

; 105  : 		}
; 106  : 	}
; 107  : }

  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	5d		 pop	 ebp
  0005d	c2 0c 00	 ret	 12			; 0000000cH
$LN10@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  00060	85 f6		 test	 esi, esi
  00062	74 f5		 je	 SHORT $LN8@SerializeE
$LL7@SerializeE:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00064	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00069	3b f7		 cmp	 esi, edi
  0006b	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0006e	8d 1c bd 00 00
	00 00		 lea	 ebx, DWORD PTR [edi*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00075	53		 push	 ebx
  00076	51		 push	 ecx
  00077	8b ca		 mov	 ecx, edx
  00079	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0007e	3b c3		 cmp	 eax, ebx
  00080	75 16		 jne	 SHORT $LN23@SerializeE
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  00082	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00085	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;
; 104  : 			pData += nElementsToRead;

  00088	03 cb		 add	 ecx, ebx
  0008a	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  0008d	2b f7		 sub	 esi, edi
  0008f	75 d3		 jne	 SHORT $LL7@SerializeE

; 105  : 		}
; 106  : 	}
; 107  : }

  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	5d		 pop	 ebp
  00095	c2 0c 00	 ret	 12			; 0000000cH
$LN23@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 402  : 		AfxThrowArchiveException(CArchiveException::endOfFile);

  00098	6a 00		 push	 0
  0009a	6a 03		 push	 3
  0009c	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN34@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  000a1	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN32@SerializeE:
  000a6	cc		 int	 3
??$SerializeElements@PAVCTrCommImpl@@@@YGXAAVCArchive@@PAPAVCTrCommImpl@@H@Z ENDP ; SerializeElements<CTrCommImpl *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp
;	COMDAT ?SetBaseDataLong@CTrCommImpl@@UAGXPBDJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_szKey$ = 12						; size = 4
_dwValue$ = 16						; size = 4
?SetBaseDataLong@CTrCommImpl@@UAGXPBDJ@Z PROC		; CTrCommImpl::SetBaseDataLong, COMDAT

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 146  : 	m_pTrWnd->SetBaseDataLong(szKey, dwValue);

  00003	ff 75 10	 push	 DWORD PTR _dwValue$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR _szKey$[ebp]
  0000c	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0000f	e8 00 00 00 00	 call	 ?SetBaseDataLong@CTRComm@@QAEXPBDJ@Z ; CTRComm::SetBaseDataLong

; 147  : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
?SetBaseDataLong@CTrCommImpl@@UAGXPBDJ@Z ENDP		; CTrCommImpl::SetBaseDataLong
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp
;	COMDAT ?GetBaseData@CTrCommImpl@@UAGXPBDAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_szKey$ = 12						; size = 4
_rValue$ = 16						; size = 4
?GetBaseData@CTrCommImpl@@UAGXPBDAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC ; CTrCommImpl::GetBaseData, COMDAT

; 140  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 141  : 	m_pTrWnd->GetBaseData(szKey, rValue);

  00003	ff 75 10	 push	 DWORD PTR _rValue$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR _szKey$[ebp]
  0000c	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0000f	e8 00 00 00 00	 call	 ?GetBaseData@CTRComm@@QAEXPBDAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CTRComm::GetBaseData

; 142  : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
?GetBaseData@CTrCommImpl@@UAGXPBDAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CTrCommImpl::GetBaseData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp
;	COMDAT ?SetBaseData@CTrCommImpl@@UAGXPBD0@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_szKey$ = 12						; size = 4
_szValue$ = 16						; size = 4
?SetBaseData@CTrCommImpl@@UAGXPBD0@Z PROC		; CTrCommImpl::SetBaseData, COMDAT

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 136  : 	m_pTrWnd->SetBaseData(szKey, szValue);

  00003	ff 75 10	 push	 DWORD PTR _szValue$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR _szKey$[ebp]
  0000c	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0000f	e8 00 00 00 00	 call	 ?SetBaseData@CTRComm@@QAEXPBD0@Z ; CTRComm::SetBaseData

; 137  : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
?SetBaseData@CTrCommImpl@@UAGXPBD0@Z ENDP		; CTrCommImpl::SetBaseData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp
;	COMDAT ?ChangeCallback@CTrCommImpl@@UAGXPAUITrCommSite@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pSite$ = 12						; size = 4
?ChangeCallback@CTrCommImpl@@UAGXPAUITrCommSite@@@Z PROC ; CTrCommImpl::ChangeCallback, COMDAT

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 131  : 	m_pTrWnd->ChangeCallback(pSite);

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00009	8b 45 0c	 mov	 eax, DWORD PTR _pSite$[ebp]
  0000c	89 81 84 00 00
	00		 mov	 DWORD PTR [ecx+132], eax

; 132  : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?ChangeCallback@CTrCommImpl@@UAGXPAUITrCommSite@@@Z ENDP ; CTrCommImpl::ChangeCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp
;	COMDAT ?SetTR@CTrCommImpl@@UAGXPBDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_szTR$ = 12						; size = 4
_bCert$ = 16						; size = 4
?SetTR@CTrCommImpl@@UAGXPBDH@Z PROC			; CTrCommImpl::SetTR, COMDAT

; 122  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 123  : 	m_pTrWnd->SetTR(szTR, bCert);

  00003	ff 75 10	 push	 DWORD PTR _bCert$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR _szTR$[ebp]
  0000c	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0000f	e8 00 00 00 00	 call	 ?SetTR@CTRComm@@QAEXPBDH@Z ; CTRComm::SetTR

; 124  : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
?SetTR@CTrCommImpl@@UAGXPBDH@Z ENDP			; CTrCommImpl::SetTR
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxmt.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp
;	COMDAT ?Send2Server@CTrCommImpl@@UAGHPAXHH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_szData$ = 12						; size = 4
_nLen$ = 16						; size = 4
_nKey$ = 20						; size = 4
?Send2Server@CTrCommImpl@@UAGHPAXHH@Z PROC		; CTrCommImpl::Send2Server, COMDAT

; 108  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxmt.inl

; 111  : 	::EnterCriticalSection(&m_sect); 

  00005	8b 7d 08	 mov	 edi, DWORD PTR _this$[ebp]
  00008	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  0000b	50		 push	 eax
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp

; 115  : 	int nRet = m_pTrWnd->Send2Server(szData, nLen, nKey);

  00012	ff 75 14	 push	 DWORD PTR _nKey$[ebp]
  00015	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00018	ff 75 10	 push	 DWORD PTR _nLen$[ebp]
  0001b	ff 75 0c	 push	 DWORD PTR _szData$[ebp]
  0001e	e8 00 00 00 00	 call	 ?Send2Server@CTRComm@@QAEHPAXHH@Z ; CTRComm::Send2Server

; 116  : 
; 117  : 	m_CommCritical.Unlock();

  00023	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  00026	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  00029	8b f0		 mov	 esi, eax
  0002b	ff 52 1c	 call	 DWORD PTR [edx+28]

; 118  : 	return nRet;

  0002e	5f		 pop	 edi
  0002f	8b c6		 mov	 eax, esi
  00031	5e		 pop	 esi

; 119  : }

  00032	5d		 pop	 ebp
  00033	c2 10 00	 ret	 16			; 00000010H
?Send2Server@CTrCommImpl@@UAGHPAXHH@Z ENDP		; CTrCommImpl::Send2Server
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxmt.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp
;	COMDAT ??1CTrCommImpl@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CTrCommImpl@@QAE@XZ PROC				; CTrCommImpl::~CTrCommImpl, COMDAT
; _this$ = ecx

; 99   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CTrCommImpl@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 100  : 	if(m_pTrWnd)

  00025	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CTrCommImpl@@6B@
  0002e	85 c9		 test	 ecx, ecx
  00030	74 1a		 je	 SHORT $LN2@CTrCommImp

; 101  : 	{
; 102  : 		m_pTrWnd->DestroyWindow();

  00032	8b 01		 mov	 eax, DWORD PTR [ecx]
  00034	ff 50 68	 call	 DWORD PTR [eax+104]

; 103  : 		delete m_pTrWnd; m_pTrWnd=NULL;

  00037	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0003a	85 c9		 test	 ecx, ecx
  0003c	74 07		 je	 SHORT $LN4@CTrCommImp
  0003e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00040	6a 01		 push	 1
  00042	ff 50 04	 call	 DWORD PTR [eax+4]
$LN4@CTrCommImp:
  00045	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@CTrCommImp:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxmt.inl

; 106  : 	::DeleteCriticalSection(&m_sect); 

  0004c	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  0004f	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], OFFSET ??_7CCriticalSection@@6B@
  00056	50		 push	 eax
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4

; 107  : }

  0005d	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00060	e8 00 00 00 00	 call	 ??1CSyncObject@@UAE@XZ	; CSyncObject::~CSyncObject
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp

; 105  : }

  00065	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00068	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006f	59		 pop	 ecx
  00070	5e		 pop	 esi
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
  00075	cc		 int	 3
  00076	cc		 int	 3
  00077	cc		 int	 3
  00078	cc		 int	 3
  00079	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CTrCommImpl@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CTrCommImpl@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CTrCommImpl@@QAE@XZ ENDP				; CTrCommImpl::~CTrCommImpl
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\TrComm.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp
;	COMDAT ??0CTrCommImpl@@QAE@PAUHWND__@@@Z
_TEXT	SEGMENT
_this$GSCopy$ = -40					; size = 4
_hWnd$ = -36						; size = 4
_this$ = -36						; size = 4
_szClipFormat$2 = -32					; size = 4
$T3 = -32						; size = 4
_aBufWnd$4 = -28					; size = 9
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_hSocket$ = 8						; size = 4
??0CTrCommImpl@@QAE@PAUHWND__@@@Z PROC			; CTrCommImpl::CTrCommImpl, COMDAT
; _this$ = ecx

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CTrCommImpl@@QAE@PAUHWND__@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f9		 mov	 edi, ecx
  0002c	89 7d dc	 mov	 DWORD PTR _this$[ebp], edi
  0002f	89 7d d8	 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  00032	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  00035	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CTrCommImpl@@6B@
  0003b	e8 00 00 00 00	 call	 ??0CCriticalSection@@QAE@XZ ; CCriticalSection::CCriticalSection
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 116  : 	{ return ::operator new(nSize); }

  00040	68 38 01 00 00	 push	 312			; 00000138H
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp

; 89   : {

  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 116  : 	{ return ::operator new(nSize); }

  0004c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp

; 90   : 	m_pTrWnd = new CTRComm;

  00051	8b f0		 mov	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 116  : 	{ return ::operator new(nSize); }

  00053	83 c4 04	 add	 esp, 4
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp

; 90   : 	m_pTrWnd = new CTRComm;

  00056	89 75 e0	 mov	 DWORD PTR $T3[ebp], esi
  00059	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0005d	85 f6		 test	 esi, esi
  0005f	0f 84 13 01 00
	00		 je	 $LN3@CTrCommImp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\TrComm.h

; 51   : 	CTRComm()

  00065	8b ce		 mov	 ecx, esi
  00067	e8 00 00 00 00	 call	 ??0CWnd@@QAE@XZ		; CWnd::CWnd
  0006c	8d 8e 90 00 00
	00		 lea	 ecx, DWORD PTR [esi+144]
  00072	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CTRComm@@6B@
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0007e	8d 8e ac 00 00
	00		 lea	 ecx, DWORD PTR [esi+172]
  00084	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00088	e8 00 00 00 00	 call	 ??0CCriticalSection@@QAE@XZ ; CCriticalSection::CCriticalSection
  0008d	8d 8e cc 00 00
	00		 lea	 ecx, DWORD PTR [esi+204]
  00093	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00099	6a 0a		 push	 10			; 0000000aH
  0009b	8d 8e dc 00 00
	00		 lea	 ecx, DWORD PTR [esi+220]
  000a1	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  000a5	e8 00 00 00 00	 call	 ??0CMapStringToString@@QAE@H@Z ; CMapStringToString::CMapStringToString
  000aa	6a 0a		 push	 10			; 0000000aH
  000ac	8d 8e f8 00 00
	00		 lea	 ecx, DWORD PTR [esi+248]
  000b2	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  000b6	e8 00 00 00 00	 call	 ??0CMapStringToString@@QAE@H@Z ; CMapStringToString::CMapStringToString

; 52   : 	{
; 53   : 		m_nTRTimer=-1;

  000bb	c7 86 94 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+148], -1

; 54   : 		m_hSocket = NULL;

  000c5	c7 86 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+136], 0

; 55   : 		m_pCallback = NULL;

  000cf	c7 86 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+132], 0

; 56   : 		m_nTRTimeout = 90;

  000d9	c7 86 98 00 00
	00 5a 00 00 00	 mov	 DWORD PTR [esi+152], 90	; 0000005aH

; 57   : 		m_bEnc = FALSE;

  000e3	c7 86 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+156], 0

; 58   : 		m_dwTextStyle = DT_EXPANDTABS|DT_EXTERNALLEADING|DT_NOPREFIX|DT_WORDBREAK;

  000ed	c7 86 a8 00 00
	00 50 0a 00 00	 mov	 DWORD PTR [esi+168], 2640 ; 00000a50H

; 59   : 		m_nWaitResult = WRET_READY;

  000f7	c7 86 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+128], 0

; 60   : 		m_bCert = FALSE;

  00101	c7 86 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+160], 0

; 61   : 		m_nQueryCount = 0;

  0010b	c7 86 d0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+208], 0

; 62   : 		m_nTRType = RQ_FID;	//0:FID 1:TR

  00115	c7 86 d4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+212], 0

; 63   : 		m_cDestination = ' ';

  0011f	c6 86 d8 00 00
	00 20		 mov	 BYTE PTR [esi+216], 32	; 00000020H

; 64   : 		m_nUniqueID = 1;

  00126	c7 86 20 01 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+288], 1

; 65   : 		m_nSendDebugID = 0;

  00130	c7 86 14 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+276], 0

; 66   : 		m_nRceiDebugID = 0;

  0013a	c7 86 18 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+280], 0

; 67   : 		m_nMsgDebugID = 0;

  00144	c7 86 1c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+284], 0

; 68   : 
; 69   : 		m_pTRData = NULL;

  0014e	c7 86 28 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+296], 0

; 70   : 		m_nMaxTrSize = 0;

  00158	c7 86 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+292], 0

; 71   : 		m_pPtManager = NULL;

  00162	c7 86 2c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+300], 0

; 72   : 		m_pPartnerSite = NULL;

  0016c	c7 86 30 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+304], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp

; 90   : 	m_pTrWnd = new CTRComm;

  00176	eb 02		 jmp	 SHORT $LN4@CTrCommImp
$LN3@CTrCommImp:
  00178	33 f6		 xor	 esi, esi
$LN4@CTrCommImp:
  0017a	0f 57 c0	 xorps	 xmm0, xmm0
  0017d	89 77 08	 mov	 DWORD PTR [edi+8], esi

; 91   : //	SetSocket(hSocket);
; 92   : 	HWND hWnd;
; 93   : 	AfxGetHanaroMainWnd(hWnd);

  00180	8d 4d e0	 lea	 ecx, DWORD PTR _szClipFormat$2[ebp]
  00183	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _hWnd$[ebp], 0
  0018a	66 0f d6 45 e4	 movq	 QWORD PTR _aBufWnd$4[ebp], xmm0
  0018f	c6 45 ec 00	 mov	 BYTE PTR _aBufWnd$4[ebp+8], 0
  00193	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00199	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CBBNGGHM@PcTrMng?4dll@
  0019e	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  001a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4
  001a8	50		 push	 eax
  001a9	68 00 00 00 00	 push	 OFFSET ??_C@_0P@IDMAJEGN@HANAROPCTRMAIN@
  001ae	8d 45 e0	 lea	 eax, DWORD PTR _szClipFormat$2[ebp]
  001b1	68 00 00 00 00	 push	 OFFSET ??_C@_06NDLAHCHE@?$CFs?$CF08X@
  001b6	50		 push	 eax
  001b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  001bd	83 c4 10	 add	 esp, 16			; 00000010H
  001c0	8d 45 e4	 lea	 eax, DWORD PTR _aBufWnd$4[ebp]
  001c3	6a 09		 push	 9
  001c5	50		 push	 eax
  001c6	ff 75 e0	 push	 DWORD PTR _szClipFormat$2[ebp]
  001c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetEnvironmentVariableA@12
  001cf	8d 45 dc	 lea	 eax, DWORD PTR _hWnd$[ebp]
  001d2	50		 push	 eax
  001d3	8d 45 e4	 lea	 eax, DWORD PTR _aBufWnd$4[ebp]
  001d6	68 00 00 00 00	 push	 OFFSET ??_C@_02EMFKHFLK@?$CFX@
  001db	50		 push	 eax
  001dc	e8 00 00 00 00	 call	 _sscanf
  001e1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001e4	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001e8	8d 4d e0	 lea	 ecx, DWORD PTR _szClipFormat$2[ebp]
  001eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 94   : 	CWnd* pMain = CWnd::FromHandle(hWnd);

  001f1	ff 75 dc	 push	 DWORD PTR _hWnd$[ebp]
  001f4	e8 00 00 00 00	 call	 ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z ; CWnd::FromHandle

; 95   : 	m_pTrWnd->Create(pMain);

  001f9	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  001fc	50		 push	 eax
  001fd	8b 11		 mov	 edx, DWORD PTR [ecx]
  001ff	ff 92 6c 01 00
	00		 call	 DWORD PTR [edx+364]

; 96   : }

  00205	8b c7		 mov	 eax, edi
  00207	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0020a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00211	59		 pop	 ecx
  00212	5f		 pop	 edi
  00213	5e		 pop	 esi
  00214	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00217	33 cd		 xor	 ecx, ebp
  00219	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0021e	8b e5		 mov	 esp, ebp
  00220	5d		 pop	 ebp
  00221	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CTrCommImpl@@QAE@PAUHWND__@@@Z$0:
  00000	8b 4d d8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1CCriticalSection@@UAE@XZ ; CCriticalSection::~CCriticalSection
__unwindfunclet$??0CTrCommImpl@@QAE@PAUHWND__@@@Z$1:
  0000b	8b 45 e0	 mov	 eax, DWORD PTR $T3[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00014	c3		 ret	 0
__unwindfunclet$??0CTrCommImpl@@QAE@PAUHWND__@@@Z$3:
  00015	8b 4d e0	 mov	 ecx, DWORD PTR $T3[ebp]
  00018	e9 00 00 00 00	 jmp	 ??1CWnd@@UAE@XZ		; CWnd::~CWnd
__unwindfunclet$??0CTrCommImpl@@QAE@PAUHWND__@@@Z$4:
  0001d	8b 4d e0	 mov	 ecx, DWORD PTR $T3[ebp]
  00020	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  00026	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$??0CTrCommImpl@@QAE@PAUHWND__@@@Z$5:
  0002c	8b 4d e0	 mov	 ecx, DWORD PTR $T3[ebp]
  0002f	81 c1 ac 00 00
	00		 add	 ecx, 172		; 000000acH
  00035	e9 00 00 00 00	 jmp	 ??1CCriticalSection@@UAE@XZ ; CCriticalSection::~CCriticalSection
__unwindfunclet$??0CTrCommImpl@@QAE@PAUHWND__@@@Z$6:
  0003a	8b 4d e0	 mov	 ecx, DWORD PTR $T3[ebp]
  0003d	81 c1 cc 00 00
	00		 add	 ecx, 204		; 000000ccH
  00043	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$??0CTrCommImpl@@QAE@PAUHWND__@@@Z$7:
  00049	8b 4d e0	 mov	 ecx, DWORD PTR $T3[ebp]
  0004c	81 c1 dc 00 00
	00		 add	 ecx, 220		; 000000dcH
  00052	e9 00 00 00 00	 jmp	 ??1CMapStringToString@@UAE@XZ ; CMapStringToString::~CMapStringToString
__unwindfunclet$??0CTrCommImpl@@QAE@PAUHWND__@@@Z$2:
  00057	8d 4d e0	 lea	 ecx, DWORD PTR _szClipFormat$2[ebp]
  0005a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00060	cc		 int	 3
  00061	cc		 int	 3
  00062	cc		 int	 3
  00063	cc		 int	 3
  00064	cc		 int	 3
__ehhandler$??0CTrCommImpl@@QAE@PAUHWND__@@@Z:
  00065	90		 npad	 1
  00066	90		 npad	 1
  00067	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0006b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0006e	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00071	33 c8		 xor	 ecx, eax
  00073	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00078	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0007b	33 c8		 xor	 ecx, eax
  0007d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00082	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CTrCommImpl@@QAE@PAUHWND__@@@Z
  00087	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CTrCommImpl@@QAE@PAUHWND__@@@Z ENDP			; CTrCommImpl::CTrCommImpl
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_G?$CList@PAVCTrCommImpl@@PAV1@@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$CList@PAVCTrCommImpl@@PAV1@@@UAEPAXI@Z PROC	; CList<CTrCommImpl *,CTrCommImpl *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$CList@PAVCTrCommImpl@@PAV1@@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00025	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 878  : {

  00028	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@PAVCTrCommImpl@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  00035	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  0003c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00043	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0004a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 872  : 	m_pBlocks->FreeDataChain();

  00051	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00056	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00059	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00060	a8 01		 test	 al, 1
  00062	74 2c		 je	 SHORT $LN22@scalar
  00064	a8 04		 test	 al, 4
  00066	75 1d		 jne	 SHORT $LN3@scalar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 112  : 	{ ::operator delete(p); }

  00068	56		 push	 esi
  00069	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006e	83 c4 04	 add	 esp, 4
  00071	8b c6		 mov	 eax, esi
  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007d	59		 pop	 ecx
  0007e	5e		 pop	 esi
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
$LN3@scalar:
  00085	6a 1c		 push	 28			; 0000001cH
  00087	56		 push	 esi
  00088	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0008d	83 c4 08	 add	 esp, 8
$LN22@scalar:
  00090	8b c6		 mov	 eax, esi
  00092	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00095	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009c	59		 pop	 ecx
  0009d	5e		 pop	 esi
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 04 00	 ret	 4
  000a4	cc		 int	 3
  000a5	cc		 int	 3
  000a6	cc		 int	 3
  000a7	cc		 int	 3
  000a8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_G?$CList@PAVCTrCommImpl@@PAV1@@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$CList@PAVCTrCommImpl@@PAV1@@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$CList@PAVCTrCommImpl@@PAV1@@@UAEPAXI@Z ENDP	; CList<CTrCommImpl *,CTrCommImpl *>::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CList@PAVCTrCommImpl@@PAV1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_nNewCount$1$ = -16					; size = 4
_newData$1 = -12					; size = 4
_pData$1$ = -8						; size = 4
_pNode$1$ = -8						; size = 4
_nElementsLeft$1$ = -4					; size = 4
_this$1$ = -4						; size = 4
_ar$ = 8						; size = 4
?Serialize@?$CList@PAVCTrCommImpl@@PAV1@@@UAEXAAVCArchive@@@Z PROC ; CList<CTrCommImpl *,CTrCommImpl *>::Serialize, COMDAT
; _this$ = ecx

; 1169 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00009	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1169 : {

  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00011	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00014	f7 d0		 not	 eax
  00016	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1174 : 	if (ar.IsStoring())

  00018	0f 84 ae 00 00
	00		 je	 $LN7@Serialize

; 1175 : 	{
; 1176 : 		ar.WriteCount(m_nCount);

  0001e	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00021	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00026	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00029	89 45 f8	 mov	 DWORD PTR _pNode$1$[ebp], eax
  0002c	85 c0		 test	 eax, eax
  0002e	0f 84 43 01 00
	00		 je	 $LN68@Serialize
$LL4@Serialize:

; 1178 : 		{
; 1179 : 			ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1180 : 			TYPE* pData;
; 1181 : 			/*
; 1182 : 			 * in some cases the & operator might be overloaded, and we cannot use it to obtain
; 1183 : 			 * the address of a given object.  We then use the following trick to get the address
; 1184 : 			 */
; 1185 : 			pData = reinterpret_cast< TYPE* >( &reinterpret_cast< int& >( static_cast< TYPE& >( pNode->data ) ) );

  00034	8d 70 08	 lea	 esi, DWORD PTR [eax+8]

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00037	85 f6		 test	 esi, esi
  00039	0f 84 4a 01 00
	00		 je	 $LN60@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00042	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00045	f7 d0		 not	 eax
  00047	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00049	74 33		 je	 SHORT $LN21@Serialize

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0004b	b8 01 00 00 00	 mov	 eax, 1
  00050	89 45 fc	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
$LL16@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00053	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00058	3b c3		 cmp	 eax, ebx
  0005a	0f 42 d8	 cmovb	 ebx, eax

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0005d	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
  00064	57		 push	 edi
  00065	56		 push	 esi
  00066	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _nElementsLeft$1$[ebp]

; 87   : 			pData += nElementsToWrite;

  0006e	03 f7		 add	 esi, edi
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00073	2b c3		 sub	 eax, ebx
  00075	89 45 fc	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
  00078	85 c0		 test	 eax, eax
  0007a	75 d7		 jne	 SHORT $LL16@Serialize

; 88   : 		}
; 89   : 	}

  0007c	eb 35		 jmp	 SHORT $LN2@Serialize
$LN21@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  0007e	bf 01 00 00 00	 mov	 edi, 1
$LL18@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00083	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00088	3b fb		 cmp	 edi, ebx
  0008a	0f 42 df	 cmovb	 ebx, edi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0008d	8d 04 9d 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00094	50		 push	 eax
  00095	56		 push	 esi
  00096	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0009b	8d 0c 9d 00 00
	00 00		 lea	 ecx, DWORD PTR [ebx*4]
  000a2	3b c1		 cmp	 eax, ecx
  000a4	0f 85 d6 00 00
	00		 jne	 $LN59@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  000aa	03 f1		 add	 esi, ecx
  000ac	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;

  000af	2b fb		 sub	 edi, ebx
  000b1	75 d0		 jne	 SHORT $LL18@Serialize
$LN2@Serialize:

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  000b3	8b 45 f8	 mov	 eax, DWORD PTR _pNode$1$[ebp]
  000b6	8b 00		 mov	 eax, DWORD PTR [eax]
  000b8	89 45 f8	 mov	 DWORD PTR _pNode$1$[ebp], eax
  000bb	85 c0		 test	 eax, eax
  000bd	0f 85 71 ff ff
	ff		 jne	 $LL4@Serialize

; 1197 : 		}
; 1198 : 	}
; 1199 : }

  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 04 00	 ret	 4
$LN7@Serialize:

; 1186 : 			SerializeElements<TYPE>(ar, pData, 1);
; 1187 : 		}
; 1188 : 	}
; 1189 : 	else
; 1190 : 	{
; 1191 : 		DWORD_PTR nNewCount = ar.ReadCount();

  000cc	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount

; 1192 : 		while (nNewCount--)

  000d1	85 c0		 test	 eax, eax
  000d3	0f 84 9e 00 00
	00		 je	 $LN68@Serialize
  000d9	0f 1f 80 00 00
	00 00		 npad	 7
$LL5@Serialize:
  000e0	48		 dec	 eax
  000e1	89 45 f0	 mov	 DWORD PTR _nNewCount$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  000e4	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  000e7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000ea	f7 d1		 not	 ecx
  000ec	f6 c1 01	 test	 cl, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  000ef	74 3a		 je	 SHORT $LN42@Serialize

; 79   : 		pData = pElements;

  000f1	8d 4d f4	 lea	 ecx, DWORD PTR _newData$1[ebp]
  000f4	bb 01 00 00 00	 mov	 ebx, 1
  000f9	89 4d f8	 mov	 DWORD PTR _pData$1$[ebp], ecx
  000fc	0f 1f 40 00	 npad	 4
$LL37@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00100	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00105	3b df		 cmp	 ebx, edi
  00107	0f 42 fb	 cmovb	 edi, ebx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0010a	8d 34 bd 00 00
	00 00		 lea	 esi, DWORD PTR [edi*4]
  00111	56		 push	 esi
  00112	51		 push	 ecx
  00113	8b c8		 mov	 ecx, eax
  00115	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 87   : 			pData += nElementsToWrite;

  0011a	8b 4d f8	 mov	 ecx, DWORD PTR _pData$1$[ebp]
  0011d	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  00120	03 ce		 add	 ecx, esi
  00122	89 4d f8	 mov	 DWORD PTR _pData$1$[ebp], ecx
  00125	2b df		 sub	 ebx, edi
  00127	75 d7		 jne	 SHORT $LL37@Serialize

; 88   : 		}
; 89   : 	}

  00129	eb 36		 jmp	 SHORT $LN40@Serialize
$LN42@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  0012b	be 01 00 00 00	 mov	 esi, 1

; 96   : 		pData = pElements;

  00130	8d 5d f4	 lea	 ebx, DWORD PTR _newData$1[ebp]
$LL39@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00133	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00138	3b f7		 cmp	 esi, edi
  0013a	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0013d	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00144	51		 push	 ecx
  00145	53		 push	 ebx
  00146	8b c8		 mov	 ecx, eax
  00148	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0014d	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
  00154	3b c1		 cmp	 eax, ecx
  00156	75 28		 jne	 SHORT $LN59@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 104  : 			pData += nElementsToRead;

  00158	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  0015b	03 d9		 add	 ebx, ecx
  0015d	2b f7		 sub	 esi, edi
  0015f	75 d2		 jne	 SHORT $LL39@Serialize
$LN40@Serialize:

; 1193 : 		{
; 1194 : 			TYPE newData[1];
; 1195 : 			SerializeElements<TYPE>(ar, newData, 1);
; 1196 : 			AddTail(newData[0]);

  00161	ff 75 f4	 push	 DWORD PTR _newData$1[ebp]
  00164	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00167	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCTrCommImpl@@PAV1@@@QAEPAU__POSITION@@PAVCTrCommImpl@@@Z ; CList<CTrCommImpl *,CTrCommImpl *>::AddTail
  0016c	8b 45 f0	 mov	 eax, DWORD PTR _nNewCount$1$[ebp]
  0016f	85 c0		 test	 eax, eax
  00171	0f 85 69 ff ff
	ff		 jne	 $LL5@Serialize
$LN68@Serialize:
  00177	5f		 pop	 edi

; 1197 : 		}
; 1198 : 	}
; 1199 : }

  00178	5e		 pop	 esi
  00179	5b		 pop	 ebx
  0017a	8b e5		 mov	 esp, ebp
  0017c	5d		 pop	 ebp
  0017d	c2 04 00	 ret	 4
$LN59@Serialize:
  00180	6a 00		 push	 0
  00182	6a 03		 push	 3
  00184	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN60@Serialize:

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00189	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN85@Serialize:
  0018e	cc		 int	 3
?Serialize@?$CList@PAVCTrCommImpl@@PAV1@@@UAEXAAVCArchive@@@Z ENDP ; CList<CTrCommImpl *,CTrCommImpl *>::Serialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??1?$CList@PAVCTrCommImpl@@PAV1@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CList@PAVCTrCommImpl@@PAV1@@@UAE@XZ PROC		; CList<CTrCommImpl *,CTrCommImpl *>::~CList<CTrCommImpl *,CTrCommImpl *>, COMDAT
; _this$ = ecx

; 878  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CList@PAVCTrCommImpl@@PAV1@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 872  : 	m_pBlocks->FreeDataChain();

  00025	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 878  : {

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@PAVCTrCommImpl@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  0002e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00035	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0003c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00043	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 872  : 	m_pBlocks->FreeDataChain();

  0004a	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0004f	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 879  : 	RemoveAll();
; 880  : 	ASSERT(m_nCount == 0);
; 881  : }

  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	5e		 pop	 esi
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
  00066	cc		 int	 3
  00067	cc		 int	 3
  00068	cc		 int	 3
  00069	cc		 int	 3
  0006a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CList@PAVCTrCommImpl@@PAV1@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CList@PAVCTrCommImpl@@PAV1@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CList@PAVCTrCommImpl@@PAV1@@@UAE@XZ ENDP		; CList<CTrCommImpl *,CTrCommImpl *>::~CList<CTrCommImpl *,CTrCommImpl *>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?FreeNode@?$CList@PAVCTrCommImpl@@PAV1@@@IAEXPAUCNode@1@@Z
_TEXT	SEGMENT
_pNode$ = 8						; size = 4
?FreeNode@?$CList@PAVCTrCommImpl@@PAV1@@@IAEXPAUCNode@1@@Z PROC ; CList<CTrCommImpl *,CTrCommImpl *>::FreeNode, COMDAT
; _this$ = ecx

; 936  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 937  : 	pNode->data.~TYPE();
; 938  : 	pNode->pNext = m_pNodeFree;

  00003	8b 55 08	 mov	 edx, DWORD PTR _pNode$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 939  : 	m_pNodeFree = pNode;
; 940  : 	m_nCount--;

  0000e	83 46 0c ff	 add	 DWORD PTR [esi+12], -1
  00012	89 56 10	 mov	 DWORD PTR [esi+16], edx

; 941  : 	ASSERT(m_nCount >= 0);  // make sure we don't underflow
; 942  : 
; 943  : 	// if no more elements, cleanup completely
; 944  : 	if (m_nCount == 0)

  00015	75 2b		 jne	 SHORT $LN2@FreeNode

; 872  : 	m_pBlocks->FreeDataChain();

  00017	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0001a	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00021	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00028	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0002f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00036	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0003b	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
$LN2@FreeNode:
  00042	5e		 pop	 esi

; 945  : 		RemoveAll();
; 946  : }

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
?FreeNode@?$CList@PAVCTrCommImpl@@PAV1@@@IAEXPAUCNode@1@@Z ENDP ; CList<CTrCommImpl *,CTrCommImpl *>::FreeNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?NewNode@?$CList@PAVCTrCommImpl@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z
_TEXT	SEGMENT
_pPrev$ = 8						; size = 4
_pNext$ = 12						; size = 4
?NewNode@?$CList@PAVCTrCommImpl@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z PROC ; CList<CTrCommImpl *,CTrCommImpl *>::NewNode, COMDAT
; _this$ = ecx

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 902  : 	if (m_pNodeFree == NULL)

  00006	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0000a	75 34		 jne	 SHORT $LN7@NewNode

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  0000c	6a 0c		 push	 12			; 0000000cH
  0000e	ff 76 18	 push	 DWORD PTR [esi+24]
  00011	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001a	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0001d	83 c0 08	 add	 eax, 8
  00020	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  00023	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00026	83 c0 f4	 add	 eax, -12		; fffffff4H

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00029	83 c2 ff	 add	 edx, -1
  0002c	78 12		 js	 SHORT $LN7@NewNode
  0002e	66 90		 npad	 2
$LL4@NewNode:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	89 08		 mov	 DWORD PTR [eax], ecx

; 915  : 			m_pNodeFree = pNode;

  00035	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00038	83 e8 0c	 sub	 eax, 12			; 0000000cH
  0003b	83 ea 01	 sub	 edx, 1
  0003e	79 f0		 jns	 SHORT $LL4@NewNode
$LN7@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00040	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00043	85 c0		 test	 eax, eax
  00045	74 18		 je	 SHORT $LN17@NewNode

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00047	8b 08		 mov	 ecx, DWORD PTR [eax]
  00049	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 922  : 	pNode->pPrev = pPrev;

  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _pPrev$[ebp]
  0004f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 923  : 	pNode->pNext = pNext;

  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _pNext$[ebp]
  00055	89 08		 mov	 DWORD PTR [eax], ecx

; 924  : 	m_nCount++;

  00057	ff 46 0c	 inc	 DWORD PTR [esi+12]

; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;
; 930  : #pragma pop_macro("new")
; 931  : 	return pNode;

  0005a	5e		 pop	 esi

; 932  : }

  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
$LN17@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  0005f	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN15@NewNode:
  00064	cc		 int	 3
?NewNode@?$CList@PAVCTrCommImpl@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z ENDP ; CList<CTrCommImpl *,CTrCommImpl *>::NewNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAt@?$CList@PAVCTrCommImpl@@PAV1@@@QAEXPAU__POSITION@@@Z
_TEXT	SEGMENT
_position$ = 8						; size = 4
?RemoveAt@?$CList@PAVCTrCommImpl@@PAV1@@@QAEXPAU__POSITION@@@Z PROC ; CList<CTrCommImpl *,CTrCommImpl *>::RemoveAt, COMDAT
; _this$ = ecx

; 1100 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1101 : 	ASSERT_VALID(this);
; 1102 : 
; 1103 : 	CNode* pOldNode = (CNode*) position;
; 1104 : 	ASSERT(AfxIsValidAddress(pOldNode, sizeof(CNode)));
; 1105 : 
; 1106 : 	// remove pOldNode from list
; 1107 : 	if (pOldNode == m_pNodeHead)

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _position$[ebp]
  00009	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000b	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  0000e	75 05		 jne	 SHORT $LN2@RemoveAt

; 1108 : 	{
; 1109 : 		m_pNodeHead = pOldNode->pNext;

  00010	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 1110 : 	}

  00013	eb 05		 jmp	 SHORT $LN3@RemoveAt
$LN2@RemoveAt:

; 1111 : 	else
; 1112 : 	{
; 1113 : 		ASSERT(AfxIsValidAddress(pOldNode->pPrev, sizeof(CNode)));
; 1114 : 		pOldNode->pPrev->pNext = pOldNode->pNext;

  00015	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00018	89 10		 mov	 DWORD PTR [eax], edx
$LN3@RemoveAt:

; 1115 : 	}
; 1116 : 	if (pOldNode == m_pNodeTail)

  0001a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001d	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00020	75 05		 jne	 SHORT $LN4@RemoveAt

; 1117 : 	{
; 1118 : 		m_pNodeTail = pOldNode->pPrev;

  00022	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1119 : 	}

  00025	eb 05		 jmp	 SHORT $LN5@RemoveAt
$LN4@RemoveAt:

; 1120 : 	else
; 1121 : 	{
; 1122 : 		ASSERT(AfxIsValidAddress(pOldNode->pNext, sizeof(CNode)));
; 1123 : 		pOldNode->pNext->pPrev = pOldNode->pPrev;

  00027	8b 01		 mov	 eax, DWORD PTR [ecx]
  00029	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN5@RemoveAt:

; 938  : 	pNode->pNext = m_pNodeFree;

  0002c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002f	89 01		 mov	 DWORD PTR [ecx], eax

; 939  : 	m_pNodeFree = pNode;
; 940  : 	m_nCount--;

  00031	83 46 0c ff	 add	 DWORD PTR [esi+12], -1
  00035	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 941  : 	ASSERT(m_nCount >= 0);  // make sure we don't underflow
; 942  : 
; 943  : 	// if no more elements, cleanup completely
; 944  : 	if (m_nCount == 0)

  00038	75 2b		 jne	 SHORT $LN8@RemoveAt

; 872  : 	m_pBlocks->FreeDataChain();

  0003a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0003d	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00044	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0004b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00052	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00059	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0005e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
$LN8@RemoveAt:
  00065	5e		 pop	 esi

; 1124 : 	}
; 1125 : 	FreeNode(pOldNode);
; 1126 : }

  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
?RemoveAt@?$CList@PAVCTrCommImpl@@PAV1@@@QAEXPAU__POSITION@@@Z ENDP ; CList<CTrCommImpl *,CTrCommImpl *>::RemoveAt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAll@?$CList@PAVCTrCommImpl@@PAV1@@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@?$CList@PAVCTrCommImpl@@PAV1@@@QAEXXZ PROC	; CList<CTrCommImpl *,CTrCommImpl *>::RemoveAll, COMDAT
; _this$ = ecx

; 862  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 863  : 	ASSERT_VALID(this);
; 864  : 
; 865  : 	// destroy elements
; 866  : 	CNode* pNode;
; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)
; 868  : 		pNode->data.~TYPE();
; 869  : 
; 870  : 	m_nCount = 0;
; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 872  : 	m_pBlocks->FreeDataChain();

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0000d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00014	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0001b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00022	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00027	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0002e	5e		 pop	 esi

; 874  : }

  0002f	c3		 ret	 0
?RemoveAll@?$CList@PAVCTrCommImpl@@PAV1@@@QAEXXZ ENDP	; CList<CTrCommImpl *,CTrCommImpl *>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?AddTail@?$CList@PAVCTrCommImpl@@PAV1@@@QAEPAU__POSITION@@PAVCTrCommImpl@@@Z
_TEXT	SEGMENT
_newElement$ = 8					; size = 4
?AddTail@?$CList@PAVCTrCommImpl@@PAV1@@@QAEPAU__POSITION@@PAVCTrCommImpl@@@Z PROC ; CList<CTrCommImpl *,CTrCommImpl *>::AddTail, COMDAT
; _this$ = ecx

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 902  : 	if (m_pNodeFree == NULL)

  00007	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0

; 966  : 	ASSERT_VALID(this);
; 967  : 
; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  0000b	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 902  : 	if (m_pNodeFree == NULL)

  0000e	75 32		 jne	 SHORT $LN11@AddTail

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  00010	6a 0c		 push	 12			; 0000000cH
  00012	ff 76 18	 push	 DWORD PTR [esi+24]
  00015	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001e	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00021	83 c0 08	 add	 eax, 8
  00024	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00027	83 c2 ff	 add	 edx, -1
  0002a	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  0002d	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  00030	78 10		 js	 SHORT $LN11@AddTail
$LL8@AddTail:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00032	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00035	89 01		 mov	 DWORD PTR [ecx], eax

; 915  : 			m_pNodeFree = pNode;

  00037	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0003a	83 e9 0c	 sub	 ecx, 12			; 0000000cH
  0003d	83 ea 01	 sub	 edx, 1
  00040	79 f0		 jns	 SHORT $LL8@AddTail
$LN11@AddTail:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00042	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00045	85 c9		 test	 ecx, ecx
  00047	74 39		 je	 SHORT $LN22@AddTail

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00049	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004b	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 969  : 	pNewNode->data = newElement;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]

; 922  : 	pNode->pPrev = pPrev;

  00051	89 79 04	 mov	 DWORD PTR [ecx+4], edi

; 923  : 	pNode->pNext = pNext;

  00054	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 924  : 	m_nCount++;

  0005a	ff 46 0c	 inc	 DWORD PTR [esi+12]

; 969  : 	pNewNode->data = newElement;

  0005d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 970  : 	if (m_pNodeTail != NULL)

  00060	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00063	85 c0		 test	 eax, eax
  00065	74 0d		 je	 SHORT $LN2@AddTail

; 971  : 		m_pNodeTail->pNext = pNewNode;

  00067	89 08		 mov	 DWORD PTR [eax], ecx

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00069	8b c1		 mov	 eax, ecx
  0006b	5f		 pop	 edi
  0006c	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0006f	5e		 pop	 esi

; 976  : }

  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
$LN2@AddTail:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00074	5f		 pop	 edi
  00075	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00078	8b c1		 mov	 eax, ecx
  0007a	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0007d	5e		 pop	 esi

; 976  : }

  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
$LN22@AddTail:

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00082	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN20@AddTail:
  00087	cc		 int	 3
?AddTail@?$CList@PAVCTrCommImpl@@PAV1@@@QAEPAU__POSITION@@PAVCTrCommImpl@@@Z ENDP ; CList<CTrCommImpl *,CTrCommImpl *>::AddTail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??0?$CList@PAVCTrCommImpl@@PAV1@@@QAE@H@Z
_TEXT	SEGMENT
_nBlockSize$ = 8					; size = 4
??0?$CList@PAVCTrCommImpl@@PAV1@@@QAE@H@Z PROC		; CList<CTrCommImpl *,CTrCommImpl *>::CList<CTrCommImpl *,CTrCommImpl *>, COMDAT
; _this$ = ecx

; 851  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;
; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 856  : 	m_pBlocks = NULL;
; 857  : 	m_nBlockSize = nBlockSize;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nBlockSize$[ebp]
  00006	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 858  : }

  00009	8b c1		 mov	 eax, ecx
  0000b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CList@PAVCTrCommImpl@@PAV1@@@6B@
  00011	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00018	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0001f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00026	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0002d	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??0?$CList@PAVCTrCommImpl@@PAV1@@@QAE@H@Z ENDP		; CList<CTrCommImpl *,CTrCommImpl *>::CList<CTrCommImpl *,CTrCommImpl *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxole.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp
;	COMDAT ?SetSocketHandle@CTrCommManager@@UAGXPBDPAUHWND__@@@Z
_TEXT	SEGMENT
_var$1 = -16						; size = 16
_this$ = 8						; size = 4
_szType$ = 12						; size = 4
_hSocket$ = 16						; size = 4
?SetSocketHandle@CTrCommManager@@UAGXPBDPAUHWND__@@@Z PROC ; CTrCommManager::SetSocketHandle, COMDAT

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 75   : 	m_hSocket = hSocket;

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	83 ec 10	 sub	 esp, 16			; 00000010H

; 76   : 	if(strcmp(szType, "MAIN")==0)

  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_04KLKHHPIG@MAIN@
  0000e	56		 push	 esi
  0000f	8b 75 10	 mov	 esi, DWORD PTR _hSocket$[ebp]
  00012	89 70 20	 mov	 DWORD PTR [eax+32], esi
  00015	8b 45 0c	 mov	 eax, DWORD PTR _szType$[ebp]
$LL6@SetSocketH:
  00018	8a 10		 mov	 dl, BYTE PTR [eax]
  0001a	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0001c	75 1a		 jne	 SHORT $LN7@SetSocketH
  0001e	84 d2		 test	 dl, dl
  00020	74 12		 je	 SHORT $LN8@SetSocketH
  00022	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00025	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00028	75 0e		 jne	 SHORT $LN7@SetSocketH
  0002a	83 c0 02	 add	 eax, 2
  0002d	83 c1 02	 add	 ecx, 2
  00030	84 d2		 test	 dl, dl
  00032	75 e4		 jne	 SHORT $LL6@SetSocketH
$LN8@SetSocketH:
  00034	33 c0		 xor	 eax, eax
  00036	eb 05		 jmp	 SHORT $LN9@SetSocketH
$LN7@SetSocketH:
  00038	1b c0		 sbb	 eax, eax
  0003a	83 c8 01	 or	 eax, 1
$LN9@SetSocketH:
  0003d	85 c0		 test	 eax, eax
  0003f	75 25		 jne	 SHORT $LN5@SetSocketH

; 77   : 	{
; 78   : 		int nID = 0;  // 0 : socketID
; 79   : 		COleVariant var((long)hSocket);

  00041	6a 03		 push	 3
  00043	56		 push	 esi
  00044	8d 4d f0	 lea	 ecx, DWORD PTR _var$1[ebp]
  00047	e8 00 00 00 00	 call	 ??0COleVariant@@QAE@JG@Z ; COleVariant::COleVariant

; 80   : 		theApp.m_MainExinfoMng.SetData(nID, &var);

  0004c	8d 45 f0	 lea	 eax, DWORD PTR _var$1[ebp]
  0004f	50		 push	 eax
  00050	6a 00		 push	 0
  00052	68 48 02 00 00	 push	 OFFSET ?theApp@@3VCPcTrMngApp@@A+584
  00057	e8 00 00 00 00	 call	 ?SetData@CMainExInfoManager@@UAGHHPBVCOleVariant@@@Z ; CMainExInfoManager::SetData
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxole.inl

; 139  : 	{ VERIFY(::VariantClear(this) == NOERROR); }

  0005c	8d 45 f0	 lea	 eax, DWORD PTR _var$1[ebp]
  0005f	50		 push	 eax
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VariantClear@4
$LN5@SetSocketH:
  00066	5e		 pop	 esi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp

; 82   : }

  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 0c 00	 ret	 12			; 0000000cH
?SetSocketHandle@CTrCommManager@@UAGXPBDPAUHWND__@@@Z ENDP ; CTrCommManager::SetSocketHandle
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp
;	COMDAT ?GetSocketHandle@CTrCommManager@@UAGPAUHWND__@@PBD@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_szType$ = 12						; size = 4
?GetSocketHandle@CTrCommManager@@UAGPAUHWND__@@PBD@Z PROC ; CTrCommManager::GetSocketHandle, COMDAT

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   : 	if(strcmp(szType, "MAIN")==0)

  00003	8b 45 0c	 mov	 eax, DWORD PTR _szType$[ebp]
  00006	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_04KLKHHPIG@MAIN@
  0000b	0f 1f 44 00 00	 npad	 5
$LL4@GetSocketH:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00014	75 1a		 jne	 SHORT $LN5@GetSocketH
  00016	84 d2		 test	 dl, dl
  00018	74 12		 je	 SHORT $LN6@GetSocketH
  0001a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0001d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00020	75 0e		 jne	 SHORT $LN5@GetSocketH
  00022	83 c0 02	 add	 eax, 2
  00025	83 c1 02	 add	 ecx, 2
  00028	84 d2		 test	 dl, dl
  0002a	75 e4		 jne	 SHORT $LL4@GetSocketH
$LN6@GetSocketH:
  0002c	33 c0		 xor	 eax, eax
  0002e	eb 05		 jmp	 SHORT $LN7@GetSocketH
$LN5@GetSocketH:
  00030	1b c0		 sbb	 eax, eax
  00032	83 c8 01	 or	 eax, 1
$LN7@GetSocketH:
  00035	85 c0		 test	 eax, eax
  00037	75 0a		 jne	 SHORT $LN2@GetSocketH

; 61   : 	{
; 62   : 		return m_hSocket;

  00039	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b 40 20	 mov	 eax, DWORD PTR [eax+32]

; 70   : }

  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
$LN2@GetSocketH:

; 63   : //		int nID = 0;  // 0 : socketID
; 64   : //		COleVariant *pVar = theApp.m_MainExinfoMng.GetData(nID);
; 65   : //		HWND hSocket = HWND(pVar->lVal);
; 66   : //		return hSocket;
; 67   : 	}
; 68   : 
; 69   : 	return NULL;

  00043	33 c0		 xor	 eax, eax

; 70   : }

  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
?GetSocketHandle@CTrCommManager@@UAGPAUHWND__@@PBD@Z ENDP ; CTrCommManager::GetSocketHandle
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxmt.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp
;	COMDAT ?UnAdviseTrComm@CTrCommManager@@UAGXPAUITrComm@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_pTrComm$1$ = 8						; size = 4
_this$ = 8						; size = 4
_pInTr$ = 12						; size = 4
?UnAdviseTrComm@CTrCommManager@@UAGXPAUITrComm@@@Z PROC	; CTrCommManager::UnAdviseTrComm, COMDAT

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?UnAdviseTrComm@CTrCommManager@@UAGXPAUITrComm@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 42   : 	POSITION pOld=NULL;
; 43   : 	for(POSITION pos=m_TrCommList.GetHeadPosition(); pos; )

  00025	8b 7d 08	 mov	 edi, DWORD PTR _this$[ebp]
  00028	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0002b	85 c9		 test	 ecx, ecx
  0002d	0f 84 e4 00 00
	00		 je	 $LN30@UnAdviseTr
  00033	8b 55 0c	 mov	 edx, DWORD PTR _pInTr$[ebp]
$LL2@UnAdviseTr:

; 46   : 		CTrCommImpl* pTrComm = m_TrCommList.GetNext(pos);

  00036	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00039	8b d9		 mov	 ebx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  0003b	8b 09		 mov	 ecx, DWORD PTR [ecx]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp

; 46   : 		CTrCommImpl* pTrComm = m_TrCommList.GetNext(pos);

  0003d	89 75 08	 mov	 DWORD PTR _pTrComm$1$[ebp], esi

; 47   : 		if(pTrComm==pInTr)

  00040	3b f2		 cmp	 esi, edx
  00042	74 18		 je	 SHORT $LN39@UnAdviseTr

; 42   : 	POSITION pOld=NULL;
; 43   : 	for(POSITION pos=m_TrCommList.GetHeadPosition(); pos; )

  00044	85 c9		 test	 ecx, ecx
  00046	75 ee		 jne	 SHORT $LL2@UnAdviseTr

; 55   : }

  00048	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 08 00	 ret	 8
$LN39@UnAdviseTr:

; 48   : 		{
; 49   : 			delete pTrComm;

  0005c	85 f6		 test	 esi, esi
  0005e	74 5d		 je	 SHORT $LN12@UnAdviseTr

; 100  : 	if(m_pTrWnd)

  00060	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00063	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CTrCommImpl@@6B@
  00070	85 c9		 test	 ecx, ecx
  00072	74 1a		 je	 SHORT $LN15@UnAdviseTr

; 101  : 	{
; 102  : 		m_pTrWnd->DestroyWindow();

  00074	8b 01		 mov	 eax, DWORD PTR [ecx]
  00076	ff 50 68	 call	 DWORD PTR [eax+104]

; 103  : 		delete m_pTrWnd; m_pTrWnd=NULL;

  00079	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0007c	85 c9		 test	 ecx, ecx
  0007e	74 07		 je	 SHORT $LN17@UnAdviseTr
  00080	8b 01		 mov	 eax, DWORD PTR [ecx]
  00082	6a 01		 push	 1
  00084	ff 50 04	 call	 DWORD PTR [eax+4]
$LN17@UnAdviseTr:
  00087	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN15@UnAdviseTr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxmt.inl

; 106  : 	::DeleteCriticalSection(&m_sect); 

  0008e	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00091	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], OFFSET ??_7CCriticalSection@@6B@
  00098	50		 push	 eax
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4

; 107  : }

  0009f	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  000a2	e8 00 00 00 00	 call	 ??1CSyncObject@@UAE@XZ	; CSyncObject::~CSyncObject
  000a7	6a 2c		 push	 44			; 0000002cH
  000a9	ff 75 08	 push	 DWORD PTR _pTrComm$1$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp

; 105  : }

  000ac	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000b8	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ba	83 c4 08	 add	 esp, 8
$LN12@UnAdviseTr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1107 : 	if (pOldNode == m_pNodeHead)

  000bd	3b 5f 08	 cmp	 ebx, DWORD PTR [edi+8]
  000c0	75 05		 jne	 SHORT $LN24@UnAdviseTr

; 1108 : 	{
; 1109 : 		m_pNodeHead = pOldNode->pNext;

  000c2	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 1110 : 	}

  000c5	eb 05		 jmp	 SHORT $LN25@UnAdviseTr
$LN24@UnAdviseTr:

; 1111 : 	else
; 1112 : 	{
; 1113 : 		ASSERT(AfxIsValidAddress(pOldNode->pPrev, sizeof(CNode)));
; 1114 : 		pOldNode->pPrev->pNext = pOldNode->pNext;

  000c7	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000ca	89 08		 mov	 DWORD PTR [eax], ecx
$LN25@UnAdviseTr:

; 1115 : 	}
; 1116 : 	if (pOldNode == m_pNodeTail)

  000cc	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000cf	3b 5f 0c	 cmp	 ebx, DWORD PTR [edi+12]
  000d2	75 05		 jne	 SHORT $LN26@UnAdviseTr

; 1117 : 	{
; 1118 : 		m_pNodeTail = pOldNode->pPrev;

  000d4	89 4f 0c	 mov	 DWORD PTR [edi+12], ecx

; 1119 : 	}

  000d7	eb 05		 jmp	 SHORT $LN27@UnAdviseTr
$LN26@UnAdviseTr:

; 1120 : 	else
; 1121 : 	{
; 1122 : 		ASSERT(AfxIsValidAddress(pOldNode->pNext, sizeof(CNode)));
; 1123 : 		pOldNode->pNext->pPrev = pOldNode->pPrev;

  000d9	8b 03		 mov	 eax, DWORD PTR [ebx]
  000db	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN27@UnAdviseTr:

; 938  : 	pNode->pNext = m_pNodeFree;

  000de	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  000e1	89 03		 mov	 DWORD PTR [ebx], eax

; 939  : 	m_pNodeFree = pNode;
; 940  : 	m_nCount--;

  000e3	83 47 10 ff	 add	 DWORD PTR [edi+16], -1
  000e7	89 5f 14	 mov	 DWORD PTR [edi+20], ebx

; 941  : 	ASSERT(m_nCount >= 0);  // make sure we don't underflow
; 942  : 
; 943  : 	// if no more elements, cleanup completely
; 944  : 	if (m_nCount == 0)

  000ea	75 2b		 jne	 SHORT $LN30@UnAdviseTr

; 872  : 	m_pBlocks->FreeDataChain();

  000ec	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  000ef	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  000f6	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  000fd	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00104	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  0010b	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00110	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN30@UnAdviseTr:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp

; 55   : }

  00117	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0011a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00121	59		 pop	 ecx
  00122	5f		 pop	 edi
  00123	5e		 pop	 esi
  00124	5b		 pop	 ebx
  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c2 08 00	 ret	 8
  0012b	cc		 int	 3
  0012c	cc		 int	 3
  0012d	cc		 int	 3
  0012e	cc		 int	 3
  0012f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?UnAdviseTrComm@CTrCommManager@@UAGXPAUITrComm@@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?UnAdviseTrComm@CTrCommManager@@UAGXPAUITrComm@@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?UnAdviseTrComm@CTrCommManager@@UAGXPAUITrComm@@@Z ENDP	; CTrCommManager::UnAdviseTrComm
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp
;	COMDAT ?AdviseTrComm@CTrCommManager@@UAGPAUITrComm@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?AdviseTrComm@CTrCommManager@@UAGPAUITrComm@@XZ PROC	; CTrCommManager::AdviseTrComm, COMDAT

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 32   : 	CTrCommImpl* pNewTr = new CTrCommImpl(m_hSocket);

  00005	6a 2c		 push	 44			; 0000002cH
  00007	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000c	8b 7d 08	 mov	 edi, DWORD PTR _this$[ebp]
  0000f	83 c4 04	 add	 esp, 4
  00012	85 c0		 test	 eax, eax
  00014	74 1d		 je	 SHORT $LN3@AdviseTrCo
  00016	ff 77 20	 push	 DWORD PTR [edi+32]
  00019	8b c8		 mov	 ecx, eax
  0001b	e8 00 00 00 00	 call	 ??0CTrCommImpl@@QAE@PAUHWND__@@@Z ; CTrCommImpl::CTrCommImpl
  00020	8b f0		 mov	 esi, eax

; 33   : 	m_TrCommList.AddTail(pNewTr);

  00022	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCTrCommImpl@@PAV1@@@QAEPAU__POSITION@@PAVCTrCommImpl@@@Z ; CList<CTrCommImpl *,CTrCommImpl *>::AddTail

; 34   : 
; 35   : 	TRACE("CTrCommManager::AdviseTrComm Cnt[%d] [%08X]\n", m_TrCommList.GetCount(), pNewTr);
; 36   : 
; 37   : 	return pNewTr;

  0002b	5f		 pop	 edi
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi

; 38   : }

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
$LN3@AdviseTrCo:

; 32   : 	CTrCommImpl* pNewTr = new CTrCommImpl(m_hSocket);

  00033	33 f6		 xor	 esi, esi

; 33   : 	m_TrCommList.AddTail(pNewTr);

  00035	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCTrCommImpl@@PAV1@@@QAEPAU__POSITION@@PAVCTrCommImpl@@@Z ; CList<CTrCommImpl *,CTrCommImpl *>::AddTail

; 34   : 
; 35   : 	TRACE("CTrCommManager::AdviseTrComm Cnt[%d] [%08X]\n", m_TrCommList.GetCount(), pNewTr);
; 36   : 
; 37   : 	return pNewTr;

  0003e	5f		 pop	 edi
  0003f	8b c6		 mov	 eax, esi
  00041	5e		 pop	 esi

; 38   : }

  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
?AdviseTrComm@CTrCommManager@@UAGPAUITrComm@@XZ ENDP	; CTrCommManager::AdviseTrComm
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp
;	COMDAT ??1CTrCommManager@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CTrCommManager@@QAE@XZ PROC				; CTrCommManager::~CTrCommManager, COMDAT
; _this$ = ecx

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CTrCommManager@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CTrCommManager@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  0002b	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0002e	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00035	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0003c	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00043	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0004a	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0004f	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 872  : 	m_pBlocks->FreeDataChain();

  00056	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]

; 878  : {

  00059	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00060	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$CList@PAVCTrCommImpl@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  00067	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  0006e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00075	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0007c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 872  : 	m_pBlocks->FreeDataChain();

  00083	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00088	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp

; 28   : }

  0008f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00092	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00099	59		 pop	 ecx
  0009a	5e		 pop	 esi
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
  0009f	cc		 int	 3
  000a0	cc		 int	 3
  000a1	cc		 int	 3
  000a2	cc		 int	 3
  000a3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CTrCommManager@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CTrCommManager@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CTrCommManager@@QAE@XZ ENDP				; CTrCommManager::~CTrCommManager
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp
;	COMDAT ??0CTrCommManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CTrCommManager@@QAE@XZ PROC				; CTrCommManager::CTrCommManager, COMDAT
; _this$ = ecx

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CTrCommManager@@6B@

; 12   : }

  0000a	8b c1		 mov	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 851  : {

  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_7?$CList@PAVCTrCommImpl@@PAV1@@@6B@

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;

  00013	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  0001a	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00021	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00028	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 856  : 	m_pBlocks = NULL;

  0002f	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 857  : 	m_nBlockSize = nBlockSize;

  00036	c7 41 1c 0a 00
	00 00		 mov	 DWORD PTR [ecx+28], 10	; 0000000aH
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp

; 10   : {

  0003d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 11   : 	m_hSocket = NULL;

  00040	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 12   : }

  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
??0CTrCommManager@@QAE@XZ ENDP				; CTrCommManager::CTrCommManager
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\TrComm.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxmt.inl
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\TrComm.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_GCTRComm@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GCTRComm@@UAEPAXI@Z PROC				; CTRComm::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_GCTRComm@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\TrComm.h

; 76   : 		if(m_pTRData) free(m_pTRData);

  00026	8b 87 28 01 00
	00		 mov	 eax, DWORD PTR [edi+296]
  0002c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00033	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CTRComm@@6B@
  00039	85 c0		 test	 eax, eax
  0003b	74 0a		 je	 SHORT $LN8@scalar
  0003d	50		 push	 eax
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00044	83 c4 04	 add	 esp, 4
$LN8@scalar:

; 77   : 		m_pTRData = NULL;
; 78   : 
; 79   : 		DestroyWindow();

  00047	8b cf		 mov	 ecx, edi
  00049	c7 87 28 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+296], 0
  00053	e8 00 00 00 00	 call	 ?DestroyWindow@CWnd@@UAEHXZ ; CWnd::DestroyWindow

; 80   : 	}

  00058	8d 8f f8 00 00
	00		 lea	 ecx, DWORD PTR [edi+248]
  0005e	e8 00 00 00 00	 call	 ??1CMapStringToString@@UAE@XZ ; CMapStringToString::~CMapStringToString
  00063	8d 8f dc 00 00
	00		 lea	 ecx, DWORD PTR [edi+220]
  00069	e8 00 00 00 00	 call	 ??1CMapStringToString@@UAE@XZ ; CMapStringToString::~CMapStringToString
  0006e	8d 8f cc 00 00
	00		 lea	 ecx, DWORD PTR [edi+204]
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxmt.inl

; 106  : 	::DeleteCriticalSection(&m_sect); 

  0007a	8d 87 b4 00 00
	00		 lea	 eax, DWORD PTR [edi+180]
  00080	c7 87 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+172], OFFSET ??_7CCriticalSection@@6B@
  0008a	50		 push	 eax
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4

; 107  : }

  00091	8d 8f ac 00 00
	00		 lea	 ecx, DWORD PTR [edi+172]
  00097	e8 00 00 00 00	 call	 ??1CSyncObject@@UAE@XZ	; CSyncObject::~CSyncObject
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\TrComm.h

; 80   : 	}

  0009c	8d 8f 90 00 00
	00		 lea	 ecx, DWORD PTR [edi+144]
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000a8	8b cf		 mov	 ecx, edi
  000aa	e8 00 00 00 00	 call	 ??1CWnd@@UAE@XZ		; CWnd::~CWnd
  000af	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  000b2	a8 01		 test	 al, 1
  000b4	74 1d		 je	 SHORT $LN16@scalar
  000b6	a8 04		 test	 al, 4
  000b8	75 0b		 jne	 SHORT $LN3@scalar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 112  : 	{ ::operator delete(p); }

  000ba	57		 push	 edi
  000bb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c0	83 c4 04	 add	 esp, 4
  000c3	eb 0e		 jmp	 SHORT $LN16@scalar
$LN3@scalar:
  000c5	68 38 01 00 00	 push	 312			; 00000138H
  000ca	57		 push	 edi
  000cb	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  000d0	83 c4 08	 add	 esp, 8
$LN16@scalar:
  000d3	8b c7		 mov	 eax, edi
  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000df	59		 pop	 ecx
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c2 04 00	 ret	 4
  000e8	cc		 int	 3
  000e9	cc		 int	 3
  000ea	cc		 int	 3
  000eb	cc		 int	 3
  000ec	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_GCTRComm@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GCTRComm@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GCTRComm@@UAEPAXI@Z ENDP				; CTRComm::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxmt.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_GCCriticalSection@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCriticalSection@@UAEPAXI@Z PROC			; CCriticalSection::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxmt.inl

; 105  : { 

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 106  : 	::DeleteCriticalSection(&m_sect); 

  00006	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CCriticalSection@@6B@
  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4

; 107  : }

  00016	8b ce		 mov	 ecx, esi
  00018	e8 00 00 00 00	 call	 ??1CSyncObject@@UAE@XZ	; CSyncObject::~CSyncObject
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	a8 01		 test	 al, 1
  00022	74 1f		 je	 SHORT $LN12@scalar
  00024	a8 04		 test	 al, 4
  00026	75 10		 jne	 SHORT $LN3@scalar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 112  : 	{ ::operator delete(p); }

  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	83 c4 04	 add	 esp, 4
  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN3@scalar:
  00038	6a 20		 push	 32			; 00000020H
  0003a	56		 push	 esi
  0003b	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  00040	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00043	8b c6		 mov	 eax, esi
  00045	5e		 pop	 esi
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
??_GCCriticalSection@@UAEPAXI@Z ENDP			; CCriticalSection::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxmt.inl
;	COMDAT ??1CCriticalSection@@UAE@XZ
_TEXT	SEGMENT
??1CCriticalSection@@UAE@XZ PROC			; CCriticalSection::~CCriticalSection, COMDAT
; _this$ = ecx

; 105  : { 

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 106  : 	::DeleteCriticalSection(&m_sect); 

  00003	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CCriticalSection@@6B@
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4

; 107  : }

  00013	8b ce		 mov	 ecx, esi
  00015	5e		 pop	 esi
  00016	e9 00 00 00 00	 jmp	 ??1CSyncObject@@UAE@XZ	; CSyncObject::~CSyncObject
??1CCriticalSection@@UAE@XZ ENDP			; CCriticalSection::~CCriticalSection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxmt.inl
;	COMDAT ?Lock@CCriticalSection@@UAEHK@Z
_TEXT	SEGMENT
_dwTimeout$ = 8						; size = 4
?Lock@CCriticalSection@@UAEHK@Z PROC			; CCriticalSection::Lock, COMDAT
; _this$ = ecx

; 111  : 	::EnterCriticalSection(&m_sect); 

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00003	50		 push	 eax
  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 118  : 	ASSERT(dwTimeout == INFINITE); 
; 119  : 	(void)dwTimeout; 
; 120  : 	
; 121  : 	return Lock(); 

  0000a	b8 01 00 00 00	 mov	 eax, 1

; 122  : }

  0000f	c2 04 00	 ret	 4
?Lock@CCriticalSection@@UAEHK@Z ENDP			; CCriticalSection::Lock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxmt.inl
;	COMDAT ?Unlock@CCriticalSection@@UAEHXZ
_TEXT	SEGMENT
?Unlock@CCriticalSection@@UAEHXZ PROC			; CCriticalSection::Unlock, COMDAT
; _this$ = ecx

; 126  : 	::LeaveCriticalSection(&m_sect); 

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00003	50		 push	 eax
  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 127  : 	
; 128  : 	return TRUE; 

  0000a	b8 01 00 00 00	 mov	 eax, 1

; 129  : }

  0000f	c3		 ret	 0
?Unlock@CCriticalSection@@UAEHXZ ENDP			; CCriticalSection::Unlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxmt.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\shared\winerror.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxmt.inl
;	COMDAT ??0CCriticalSection@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CCriticalSection@@QAE@XZ PROC			; CCriticalSection::CCriticalSection, COMDAT
; _this$ = ecx

; 90   : { 		

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CCriticalSection@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 84   : 	}
; 85   : 	
; 86   : 	return S_OK;
; 87   : }
; 88   : 
; 89   : _AFXMT_INLINE ::CCriticalSection::CCriticalSection() : CSyncObject(NULL)

  00029	6a 00		 push	 0
  0002b	e8 00 00 00 00	 call	 ??0CSyncObject@@QAE@PBD@Z ; CSyncObject::CSyncObject

; 81   : 	if (!InitializeCriticalSectionAndSpinCount(&m_sect, 0))

  00030	6a 00		 push	 0
  00032	8d 46 08	 lea	 eax, DWORD PTR [esi+8]

; 84   : 	}
; 85   : 	
; 86   : 	return S_OK;
; 87   : }
; 88   : 
; 89   : _AFXMT_INLINE ::CCriticalSection::CCriticalSection() : CSyncObject(NULL)

  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 81   : 	if (!InitializeCriticalSectionAndSpinCount(&m_sect, 0))

  0003c	50		 push	 eax

; 90   : { 		

  0003d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CCriticalSection@@6B@

; 81   : 	if (!InitializeCriticalSectionAndSpinCount(&m_sect, 0))

  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSectionAndSpinCount@8
  00049	85 c0		 test	 eax, eax
  0004b	75 16		 jne	 SHORT $LN2@CCriticalS

; 82   : 	{
; 83   : 		return HRESULT_FROM_WIN32(GetLastError());

  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\shared\winerror.h

; 29673: FORCEINLINE _Translates_Win32_to_HRESULT_(x) HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

  00053	85 c0		 test	 eax, eax
  00055	7e 0a		 jle	 SHORT $LN14@CCriticalS
  00057	0f b7 c0	 movzx	 eax, ax
  0005a	0d 00 00 07 80	 or	 eax, -2147024896	; 80070000H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxmt.inl

; 93   : 	if (FAILED(hr))

  0005f	85 c0		 test	 eax, eax
$LN14@CCriticalS:
  00061	78 12		 js	 SHORT $LN16@CCriticalS
$LN2@CCriticalS:

; 96   : 	}		
; 97   : }

  00063	8b c6		 mov	 eax, esi
  00065	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00068	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006f	59		 pop	 ecx
  00070	5e		 pop	 esi
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
$LN16@CCriticalS:

; 94   : 	{
; 95   : 		AtlThrow(hr);

  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN13@CCriticalS:
  0007b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCriticalSection@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CSyncObject@@UAE@XZ	; CSyncObject::~CSyncObject
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0CCriticalSection@@QAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CCriticalSection@@QAE@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CCriticalSection@@QAE@XZ ENDP			; CCriticalSection::CCriticalSection
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxmt.h
;	COMDAT ?Unlock@CSyncObject@@UAEHJPAJ@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?Unlock@CSyncObject@@UAEHJPAJ@Z PROC			; CSyncObject::Unlock, COMDAT
; _this$ = ecx

; 66   : 		{ return TRUE; }

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c2 08 00	 ret	 8
?Unlock@CSyncObject@@UAEHJPAJ@Z ENDP			; CSyncObject::Unlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\inc\IAUGwanMng.h
;	COMDAT ??__ERMSG_GWANSIMREGISTER@@YAXXZ
text$di	SEGMENT
??__ERMSG_GWANSIMREGISTER@@YAXXZ PROC			; `dynamic initializer for 'RMSG_GWANSIMREGISTER'', COMDAT

; 173  : const UINT RMSG_GWANSIMREGISTER		=   ::RegisterWindowMessage("RMSG_GWANSIMREGISTER");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MNPNIDPI@RMSG_GWANSIMREGISTER@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterWindowMessageA@4
  0000b	a3 00 00 00 00	 mov	 DWORD PTR ?RMSG_GWANSIMREGISTER@@3IB, eax
  00010	c3		 ret	 0
??__ERMSG_GWANSIMREGISTER@@YAXXZ ENDP			; `dynamic initializer for 'RMSG_GWANSIMREGISTER''
text$di	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\inc\Define_Gwansim.h
;	COMDAT ??__ERMSG_INTREQUEST@@YAXXZ
text$di	SEGMENT
??__ERMSG_INTREQUEST@@YAXXZ PROC			; `dynamic initializer for 'RMSG_INTREQUEST'', COMDAT

; 10   : const UINT RMSG_INTREQUEST = ::RegisterWindowMessage(_T("RMSG_INTREQUEST") );

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JHANHJCN@RMSG_INTREQUEST@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterWindowMessageA@4
  0000b	a3 00 00 00 00	 mov	 DWORD PTR ?RMSG_INTREQUEST@@3IB, eax
  00010	c3		 ret	 0
??__ERMSG_INTREQUEST@@YAXXZ ENDP			; `dynamic initializer for 'RMSG_INTREQUEST''
text$di	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\inc\Define_Gwansim.h
;	COMDAT ??__ERMSG_CONCERNHWND@@YAXXZ
text$di	SEGMENT
??__ERMSG_CONCERNHWND@@YAXXZ PROC			; `dynamic initializer for 'RMSG_CONCERNHWND'', COMDAT

; 9    : const UINT RMSG_CONCERNHWND = ::RegisterWindowMessage(_T("RMSG_CONCERNHWND") );

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@EPGJDGDK@RMSG_CONCERNHWND@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterWindowMessageA@4
  0000b	a3 00 00 00 00	 mov	 DWORD PTR ?RMSG_CONCERNHWND@@3IB, eax
  00010	c3		 ret	 0
??__ERMSG_CONCERNHWND@@YAXXZ ENDP			; `dynamic initializer for 'RMSG_CONCERNHWND''
text$di	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Inc\IBaseDefine.h
;	COMDAT ??__ERMSG_SETPCTRDATA@@YAXXZ
text$di	SEGMENT
??__ERMSG_SETPCTRDATA@@YAXXZ PROC			; `dynamic initializer for 'RMSG_SETPCTRDATA'', COMDAT

; 172  : const UINT RMSG_SETPCTRDATA = ::RegisterWindowMessage("RMSG_SETPCTRDATA");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JPACFCL@RMSG_SETPCTRDATA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterWindowMessageA@4
  0000b	a3 00 00 00 00	 mov	 DWORD PTR ?RMSG_SETPCTRDATA@@3IB, eax
  00010	c3		 ret	 0
??__ERMSG_SETPCTRDATA@@YAXXZ ENDP			; `dynamic initializer for 'RMSG_SETPCTRDATA''
text$di	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Inc\IBaseDefine.h
;	COMDAT ??__ERMSG_GETPCTRDATA@@YAXXZ
text$di	SEGMENT
??__ERMSG_GETPCTRDATA@@YAXXZ PROC			; `dynamic initializer for 'RMSG_GETPCTRDATA'', COMDAT

; 171  : const UINT RMSG_GETPCTRDATA = ::RegisterWindowMessage("RMSG_GETPCTRDATA");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GOOPDKI@RMSG_GETPCTRDATA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterWindowMessageA@4
  0000b	a3 00 00 00 00	 mov	 DWORD PTR ?RMSG_GETPCTRDATA@@3IB, eax
  00010	c3		 ret	 0
??__ERMSG_GETPCTRDATA@@YAXXZ ENDP			; `dynamic initializer for 'RMSG_GETPCTRDATA''
text$di	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\Inc\IBaseDefine.h
;	COMDAT ??__ERMSG_INTERFACE@@YAXXZ
text$di	SEGMENT
??__ERMSG_INTERFACE@@YAXXZ PROC				; `dynamic initializer for 'RMSG_INTERFACE'', COMDAT

; 170  : const UINT RMSG_INTERFACE = ::RegisterWindowMessage("RMSG_INTERFACE");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BKKCOCLK@RMSG_INTERFACE@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterWindowMessageA@4
  0000b	a3 00 00 00 00	 mov	 DWORD PTR ?RMSG_INTERFACE@@3IB, eax
  00010	c3		 ret	 0
??__ERMSG_INTERFACE@@YAXXZ ENDP				; `dynamic initializer for 'RMSG_INTERFACE''
text$di	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
;	COMDAT ?EndModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT
?EndModalState@CWnd@@UAEXXZ PROC			; CWnd::EndModalState, COMDAT
; _this$ = ecx

; 567  : 	{ ::EnableWindow(m_hWnd, TRUE); }

  00000	6a 01		 push	 1
  00002	ff 71 20	 push	 DWORD PTR [ecx+32]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  0000b	c3		 ret	 0
?EndModalState@CWnd@@UAEXXZ ENDP			; CWnd::EndModalState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
;	COMDAT ?BeginModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT
?BeginModalState@CWnd@@UAEXXZ PROC			; CWnd::BeginModalState, COMDAT
; _this$ = ecx

; 565  : 	{ ::EnableWindow(m_hWnd, FALSE); }

  00000	6a 00		 push	 0
  00002	ff 71 20	 push	 DWORD PTR [ecx+32]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  0000b	c3		 ret	 0
?BeginModalState@CWnd@@UAEXXZ ENDP			; CWnd::BeginModalState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxwin2.inl
;	COMDAT ?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z PROC	; CWnd::DoDataExchange, COMDAT
; _this$ = ecx

; 561  : 	{ } // default does nothing

  00000	c2 04 00	 ret	 4
?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z ENDP	; CWnd::DoDataExchange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlexcept.h
;	COMDAT ?AtlThrowImpl@ATL@@YGXJ@Z
_TEXT	SEGMENT
_hr$ = 8						; size = 4
?AtlThrowImpl@ATL@@YGXJ@Z PROC				; ATL::AtlThrowImpl, COMDAT

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 66   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );
; 67   : #ifdef _AFX
; 68   : 	if( hr == E_OUTOFMEMORY )

  00003	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]
  00006	3d 0e 00 07 80	 cmp	 eax, -2147024882	; 8007000eH
  0000b	75 05		 jne	 SHORT $LN2@AtlThrowIm

; 69   : 	{
; 70   : 		AfxThrowMemoryException();

  0000d	e8 00 00 00 00	 call	 ?AfxThrowMemoryException@@YGXXZ ; AfxThrowMemoryException
$LN2@AtlThrowIm:

; 71   : 	}
; 72   : 	else
; 73   : 	{
; 74   : 		AfxThrowOleException( hr );

  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?AfxThrowOleException@@YGXJ@Z ; AfxThrowOleException
$LN5@AtlThrowIm:
  00018	cc		 int	 3
?AtlThrowImpl@ATL@@YGXJ@Z ENDP				; ATL::AtlThrowImpl
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z PROC		; CObject::Dump, COMDAT
; _this$ = ecx

; 122  : 	{ /* no dumping in release builds */ }

  00000	c2 04 00	 ret	 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z ENDP		; CObject::Dump
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT
?AssertValid@CObject@@UBEXXZ PROC			; CObject::AssertValid, COMDAT
; _this$ = ecx

; 120  : 	{ /* no asserts in release builds */ }

  00000	c2 00 00	 ret	 0
?AssertValid@CObject@@UBEXXZ ENDP			; CObject::AssertValid
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z PROC		; CObject::Serialize, COMDAT
; _this$ = ecx

; 106  : 	{ /* CObject does not serialize anything by default */ }

  00000	c2 04 00	 ret	 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z ENDP		; CObject::Serialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??3CObject@@SGXPAX@Z PROC				; CObject::operator delete, COMDAT

; 112  : 	{ ::operator delete(p); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	ff 75 08	 push	 DWORD PTR _p$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4
  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
??3CObject@@SGXPAX@Z ENDP				; CObject::operator delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT
??1CObject@@UAE@XZ PROC					; CObject::~CObject, COMDAT
; _this$ = ecx

; 104  : 	{ }

  00000	c2 00 00	 ret	 0
??1CObject@@UAE@XZ ENDP					; CObject::~CObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _sscanf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sscanf	PROC						; COMDAT

; 2247 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2153 :         return __stdio_common_vsscanf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_scanf_options
  00016	ff 70 04	 push	 DWORD PTR [eax+4]
  00019	ff 30		 push	 DWORD PTR [eax]
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsscanf
  00021	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2248 :         int _Result;
; 2249 :         va_list _ArgList;
; 2250 :         __crt_va_start(_ArgList, _Format);
; 2251 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);
; 2252 :         __crt_va_end(_ArgList);
; 2253 :         return _Result;
; 2254 :     }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
_sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_scanf_options
_TEXT	SEGMENT
___local_stdio_scanf_options PROC			; COMDAT

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

  00005	c3		 ret	 0
___local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcDrfn\DrCommon\PcTrMng\_TRCommManager.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
