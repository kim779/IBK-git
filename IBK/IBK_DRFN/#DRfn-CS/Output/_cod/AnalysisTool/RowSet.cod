; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30145.0 

	TITLE	D:\git\src\IBK\IBK_DRFN\#DRfn-CS\_Obj\AnalysisTool\RowSet.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?Make@CRowSet@@SAPAV1@XZ			; CRowSet::Make
PUBLIC	?Delete@CRowSet@@SAXPAV1@@Z			; CRowSet::Delete
PUBLIC	??1CRowSet@@UAE@XZ				; CRowSet::~CRowSet
PUBLIC	?SetAutoPrice@CRowSet@@QAEX_N@Z			; CRowSet::SetAutoPrice
PUBLIC	?ChangeAllElementsColor@CRowSet@@QAEXABK0@Z	; CRowSet::ChangeAllElementsColor
PUBLIC	?ChangeAllElementsThick@CRowSet@@QAEXHH@Z	; CRowSet::ChangeAllElementsThick
PUBLIC	?GetElementCount@CRowSet@@QBEHXZ		; CRowSet::GetElementCount
PUBLIC	?GetSavedElementsData@CRowSet@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCOrder@@@Z ; CRowSet::GetSavedElementsData
PUBLIC	?GetElementList@CRowSet@@QAEXAAV?$CDequePointerList@VCElement@@@@@Z ; CRowSet::GetElementList
PUBLIC	?GetElementList@CRowSet@@QAEXW4ElementType@CToolEnumData@@AAV?$CDequePointerList@VCElement@@@@@Z ; CRowSet::GetElementList
PUBLIC	?AddElement@CRowSet@@QAEXPAVCElement@@@Z	; CRowSet::AddElement
PUBLIC	?DeleteAll@CRowSet@@QAEXXZ			; CRowSet::DeleteAll
PUBLIC	?Delete@CRowSet@@QAE_NJH@Z			; CRowSet::Delete
PUBLIC	?Delete@CRowSet@@QAE_NW4ElementType@CToolEnumData@@AAV?$CDequePointerList@VCElement@@@@@Z ; CRowSet::Delete
PUBLIC	?Delete@CRowSet@@QAE_NPAVCElement@@_N@Z		; CRowSet::Delete
PUBLIC	?FindElement@CRowSet@@QAEPAVCElement@@PAVCExtractingDataOfModifyType@@AAW4ModifyType@CToolEnumData@@@Z ; CRowSet::FindElement
PUBLIC	?CopyElement@CRowSet@@QAEPAVCElement@@PAV2@@Z	; CRowSet::CopyElement
PUBLIC	?MoveElement@CRowSet@@QAEJPAVCElement@@@Z	; CRowSet::MoveElement
PUBLIC	?DrawElement@CRowSet@@QAEXPAVCDC@@PAVCElement@@ABVCDrawingRegions@@ABVCCoordinateCalculatorData@@@Z ; CRowSet::DrawElement
PUBLIC	?IsInSameElement@CRowSet@@QBE_NPBVCElement@@@Z	; CRowSet::IsInSameElement
PUBLIC	??1?$CDequePointerList@VCElement@@@@QAE@XZ	; CDequePointerList<CElement>::~CDequePointerList<CElement>
PUBLIC	?AddTail@?$CDequePointerList@VCElement@@@@QAEXPAVCElement@@@Z ; CDequePointerList<CElement>::AddTail
PUBLIC	?RemoveAt@?$CDequePointerList@VCElement@@@@QAEXPAVCElement@@@Z ; CDequePointerList<CElement>::RemoveAt
PUBLIC	?erase@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCElement@@@std@@@std@@@2@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCElement@@@std@@@std@@@2@0@Z ; std::deque<CElement *,std::allocator<CElement *> >::erase
PUBLIC	?_Xlen@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@ABEXXZ ; std::deque<CElement *,std::allocator<CElement *> >::_Xlen
PUBLIC	?_Growmap@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@AAEXI@Z ; std::deque<CElement *,std::allocator<CElement *> >::_Growmap
PUBLIC	?_Tidy@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@AAEXXZ ; std::deque<CElement *,std::allocator<CElement *> >::_Tidy
PUBLIC	?WillDrawElement@CRowSet@@ABE_NABVCDrawingRegions@@@Z ; CRowSet::WillDrawElement
PUBLIC	??_GCRowSet@@UAEPAXI@Z				; CRowSet::`scalar deleting destructor'
PUBLIC	??$uninitialized_copy@PAPAPAVCElement@@PAPAPAV1@@std@@YAPAPAPAVCElement@@QAPAPAV1@0PAPAPAV1@@Z ; std::uninitialized_copy<CElement * * *,CElement * * *>
PUBLIC	??$_Uninitialized_value_construct_n_unchecked1@PAPAPAVCElement@@I@std@@YAPAPAPAVCElement@@PAPAPAV1@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<CElement * * *,unsigned int>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Zero_range@PAPAPAVCElement@@@std@@YAPAPAPAVCElement@@QAPAPAV1@0@Z ; std::_Zero_range<CElement * * *>
PUBLIC	??$_Copy_memmove@PAPAPAVCElement@@PAPAPAV1@@std@@YAPAPAPAVCElement@@PAPAPAV1@00@Z ; std::_Copy_memmove<CElement * * *,CElement * * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_7CRowSet@@6B@				; CRowSet::`vftable'
PUBLIC	??_C@_07KMGGOLCB@?$DMRow?$DO?$AN?6@		; `string'
PUBLIC	??_C@_08DHKDLDJL@?$DM?2Row?$DO?$AN?6@		; `string'
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CRowSet@@6B@				; CRowSet::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCRowSet@@@8				; CRowSet `RTTI Type Descriptor'
PUBLIC	??_R3CRowSet@@8					; CRowSet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CRowSet@@8					; CRowSet::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CRowSet@@8			; CRowSet::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	___std_terminate:PROC
EXTRN	__imp___invalid_parameter_noinfo_noreturn:PROC
EXTRN	__imp_?Concatenate@?$CSimpleStringT@D$00@ATL@@KAXAAV12@PBDH1H@Z:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z:PROC
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV?$CSimpleStringT@D$00@1@@Z:PROC
EXTRN	__imp_?GetManager@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEPAUIAtlStringMgr@2@XZ:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	??_ECRowSet@@UAEPAXI@Z:PROC			; CRowSet::`vector deleting destructor'
EXTRN	?SetAutoPrice@CElementCommonEnvironment@@QAEX_N@Z:PROC ; CElementCommonEnvironment::SetAutoPrice
EXTRN	?GetSavedElementData@CElement@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCOrder@@@Z:PROC ; CElement::GetSavedElementData
EXTRN	?GetCommonEnvironment@CElement@@QAEAAVCElementCommonEnvironment@@XZ:PROC ; CElement::GetCommonEnvironment
EXTRN	?ChangePenColor@CElement@@QAEXABK@Z:PROC	; CElement::ChangePenColor
EXTRN	?ChangeTextColor@CElement@@QAEXABK@Z:PROC	; CElement::ChangeTextColor
EXTRN	?ChangePenThick@CElement@@QAEXH@Z:PROC		; CElement::ChangePenThick
EXTRN	?GetCount@CDrawingRegions@@QBEHXZ:PROC		; CDrawingRegions::GetCount
EXTRN	?Copy@CElementFactory@@SAPAVCElement@@PAV2@@Z:PROC ; CElementFactory::Copy
EXTRN	?Delete@CElementFactory@@SAXPAVCElement@@@Z:PROC ; CElementFactory::Delete
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R1A@?0A@EA@CRowSet@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CRowSet@@8 DD FLAT:??_R0?AVCRowSet@@@8	; CRowSet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CRowSet@@8
rdata$r	ENDS
;	COMDAT ??_R2CRowSet@@8
rdata$r	SEGMENT
??_R2CRowSet@@8 DD FLAT:??_R1A@?0A@EA@CRowSet@@8	; CRowSet::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CRowSet@@8
rdata$r	SEGMENT
??_R3CRowSet@@8 DD 00H					; CRowSet::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CRowSet@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCRowSet@@@8
data$rs	SEGMENT
??_R0?AVCRowSet@@@8 DD FLAT:??_7type_info@@6B@		; CRowSet `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCRowSet@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CRowSet@@6B@
rdata$r	SEGMENT
??_R4CRowSet@@6B@ DD 00H				; CRowSet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCRowSet@@@8
	DD	FLAT:??_R3CRowSet@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@ DB 'deque<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08DHKDLDJL@?$DM?2Row?$DO?$AN?6@
CONST	SEGMENT
??_C@_08DHKDLDJL@?$DM?2Row?$DO?$AN?6@ DB '<\Row>', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07KMGGOLCB@?$DMRow?$DO?$AN?6@
CONST	SEGMENT
??_C@_07KMGGOLCB@?$DMRow?$DO?$AN?6@ DB '<Row>', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CRowSet@@6B@
CONST	SEGMENT
??_7CRowSet@@6B@ DD FLAT:??_R4CRowSet@@6B@		; CRowSet::`vftable'
	DD	FLAT:??_ECRowSet@@UAEPAXI@Z
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GCRowSet@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_GCRowSet@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_GCRowSet@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Delete@CRowSet@@QAE_NW4ElementType@CToolEnumData@@AAV?$CDequePointerList@VCElement@@@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Delete@CRowSet@@QAE_NW4ElementType@CToolEnumData@@AAV?$CDequePointerList@VCElement@@@@@Z$0
__ehfuncinfo$?Delete@CRowSet@@QAE_NW4ElementType@CToolEnumData@@AAV?$CDequePointerList@VCElement@@@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Delete@CRowSet@@QAE_NW4ElementType@CToolEnumData@@AAV?$CDequePointerList@VCElement@@@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetSavedElementsData@CRowSet@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCOrder@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSavedElementsData@CRowSet@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCOrder@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetSavedElementsData@CRowSet@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCOrder@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?GetSavedElementsData@CRowSet@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCOrder@@@Z$3
__ehfuncinfo$?GetSavedElementsData@CRowSet@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCOrder@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetSavedElementsData@CRowSet@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCOrder@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CRowSet@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Make@CRowSet@@SAPAV1@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Make@CRowSet@@SAPAV1@XZ$0
__ehfuncinfo$?Make@CRowSet@@SAPAV1@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Make@CRowSet@@SAPAV1@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@PBD@Z$0
__ehfuncinfo$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAPAVCElement@@PAPAPAV1@@std@@YAPAPAPAVCElement@@PAPAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAPAVCElement@@PAPAPAV1@@std@@YAPAPAPAVCElement@@PAPAPAV1@00@Z PROC ; std::_Copy_memmove<CElement * * *,CElement * * *>, COMDAT

; 4058 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4059 :     auto _FirstPtr              = _To_address(_First);
; 4060 :     auto _LastPtr               = _To_address(_Last);
; 4061 :     auto _DestPtr               = _To_address(_Dest);
; 4062 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4063 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4064 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4067 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4069 :     } else {
; 4070 :         return _Dest + (_LastPtr - _FirstPtr);
; 4071 :     }
; 4072 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAPAVCElement@@PAPAPAV1@@std@@YAPAPAPAVCElement@@PAPAPAV1@00@Z ENDP ; std::_Copy_memmove<CElement * * *,CElement * * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Zero_range@PAPAPAVCElement@@@std@@YAPAPAPAVCElement@@QAPAPAV1@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Zero_range@PAPAPAVCElement@@@std@@YAPAPAPAVCElement@@QAPAPAV1@0@Z PROC ; std::_Zero_range<CElement * * *>, COMDAT

; 1789 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1790 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));
; 1791 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));
; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	6a 00		 push	 0
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _memset

; 1793 :     return _Last;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1794 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Zero_range@PAPAPAVCElement@@@std@@YAPAPAPAVCElement@@QAPAPAV1@0@Z ENDP ; std::_Zero_range<CElement * * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 79   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 79   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n_unchecked1@PAPAPAVCElement@@I@std@@YAPAPAPAVCElement@@PAPAPAV1@I@Z
_TEXT	SEGMENT
__UFirst$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Uninitialized_value_construct_n_unchecked1@PAPAPAVCElement@@I@std@@YAPAPAPAVCElement@@PAPAPAV1@I@Z PROC ; std::_Uninitialized_value_construct_n_unchecked1<CElement * * *,unsigned int>, COMDAT

; 1821 : _NoThrowFwdIt _Uninitialized_value_construct_n_unchecked1(_NoThrowFwdIt _UFirst, _Diff _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1822 :     // value-initialize all elements in [_UFirst, _UFirst + _Count_raw)
; 1823 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 1824 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 1825 :         return _Zero_range(_UFirst, _UFirst + _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	56		 push	 esi

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00007	8b 75 08	 mov	 esi, DWORD PTR __UFirst$[ebp]

; 1821 : _NoThrowFwdIt _Uninitialized_value_construct_n_unchecked1(_NoThrowFwdIt _UFirst, _Diff _Count) {

  0000a	57		 push	 edi

; 1822 :     // value-initialize all elements in [_UFirst, _UFirst + _Count_raw)
; 1823 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 1824 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 1825 :         return _Zero_range(_UFirst, _UFirst + _Count);

  0000b	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00012	57		 push	 edi
  00013	6a 00		 push	 0
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 _memset
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1822 :     // value-initialize all elements in [_UFirst, _UFirst + _Count_raw)
; 1823 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 1824 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 1825 :         return _Zero_range(_UFirst, _UFirst + _Count);

  0001e	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 1826 :     } else {
; 1827 :         _Uninitialized_backout<_NoThrowFwdIt> _Backout{_UFirst};
; 1828 :         for (; 0 < _Count; --_Count) {
; 1829 :             _Backout._Emplace_back();
; 1830 :         }
; 1831 : 
; 1832 :         return _Backout._Release();
; 1833 :     }
; 1834 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_value_construct_n_unchecked1@PAPAPAVCElement@@I@std@@YAPAPAPAVCElement@@PAPAPAV1@I@Z ENDP ; std::_Uninitialized_value_construct_n_unchecked1<CElement * * *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$uninitialized_copy@PAPAPAVCElement@@PAPAPAV1@@std@@YAPAPAPAVCElement@@QAPAPAV1@0PAPAPAV1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$uninitialized_copy@PAPAPAVCElement@@PAPAPAV1@@std@@YAPAPAPAVCElement@@QAPAPAV1@0PAPAPAV1@@Z PROC ; std::uninitialized_copy<CElement * * *,CElement * * *>, COMDAT

; 1687 : _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1687 : _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

  00006	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1687 : _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

  0000a	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4067 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1694 :     return _Dest;

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 1695 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$uninitialized_copy@PAPAPAVCElement@@PAPAPAV1@@std@@YAPAPAPAVCElement@@QAPAPAV1@0PAPAPAV1@@Z ENDP ; std::uninitialized_copy<CElement * * *,CElement * * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??_GCRowSet@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GCRowSet@@UAEPAXI@Z PROC				; CRowSet::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_GCRowSet@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 130  : 	while(m_ElementList.GetCount() > 0){

  0002a	83 7b 14 00	 cmp	 DWORD PTR [ebx+20], 0

; 36   : {

  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00035	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7CRowSet@@6B@

; 130  : 	while(m_ElementList.GetCount() > 0){

  0003b	7e 45		 jle	 SHORT $LN75@scalar
  0003d	0f 1f 00	 npad	 3
$LL8@scalar:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1002 :         return _Mysize() == 0;

  00040	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  00043	85 c9		 test	 ecx, ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 191  : 		if(m_deque.empty())

  00045	75 04		 jne	 SHORT $LN12@scalar

; 192  : 			return NULL;

  00047	33 ff		 xor	 edi, edi
  00049	eb 1f		 jmp	 SHORT $LN11@scalar
$LN12@scalar:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 917  :         return _Unchecked_const_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  0004b	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0004e	03 c1		 add	 eax, ecx

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00050	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  00053	49		 dec	 ecx

; 67   :         --_Myoff;

  00054	8d 50 ff	 lea	 edx, DWORD PTR [eax-1]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00057	8b c2		 mov	 eax, edx
  00059	c1 e8 02	 shr	 eax, 2
  0005c	23 c8		 and	 ecx, eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 193  : 		return m_deque.back();

  0005e	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 48   :         return _Mycont->_Map[_Block][_Off];

  00061	83 e2 03	 and	 edx, 3
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 193  : 		return m_deque.back();

  00064	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00067	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]
$LN11@scalar:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 171  : 	CElementFactory::Delete(pElement);

  0006a	57		 push	 edi
  0006b	e8 00 00 00 00	 call	 ?Delete@CElementFactory@@SAXPAVCElement@@@Z ; CElementFactory::Delete
  00070	83 c4 04	 add	 esp, 4

; 172  : 	m_ElementList.RemoveAt(pElement);

  00073	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00076	57		 push	 edi
  00077	e8 00 00 00 00	 call	 ?RemoveAt@?$CDequePointerList@VCElement@@@@QAEXPAVCElement@@@Z ; CDequePointerList<CElement>::RemoveAt

; 130  : 	while(m_ElementList.GetCount() > 0){

  0007c	83 7b 14 00	 cmp	 DWORD PTR [ebx+20], 0
  00080	7f be		 jg	 SHORT $LL8@scalar
$LN75@scalar:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1332 :         _Tidy();

  00082	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00085	e8 00 00 00 00	 call	 ?_Tidy@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@AAEXXZ ; std::deque<CElement *,std::allocator<CElement *> >::_Tidy
  0008a	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0008d	e8 00 00 00 00	 call	 ?_Tidy@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@AAEXXZ ; std::deque<CElement *,std::allocator<CElement *> >::_Tidy

; 861  :         _Tidy();

  00092	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00095	e8 00 00 00 00	 call	 ?_Tidy@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@AAEXXZ ; std::deque<CElement *,std::allocator<CElement *> >::_Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0009a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0009d	6a 08		 push	 8
  0009f	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  000a0	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000ac	83 c4 08	 add	 esp, 8
  000af	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  000b3	74 0b		 je	 SHORT $LN77@scalar
  000b5	6a 18		 push	 24			; 00000018H
  000b7	53		 push	 ebx
  000b8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000bd	83 c4 08	 add	 esp, 8
$LN77@scalar:
  000c0	8b c3		 mov	 eax, ebx
  000c2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cc	59		 pop	 ecx
  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c2 04 00	 ret	 4
  000d6	cc		 int	 3
  000d7	cc		 int	 3
  000d8	cc		 int	 3
  000d9	cc		 int	 3
  000da	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_GCRowSet@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GCRowSet@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GCRowSet@@UAEPAXI@Z ENDP				; CRowSet::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
;	COMDAT ?WillDrawElement@CRowSet@@ABE_NABVCDrawingRegions@@@Z
_TEXT	SEGMENT
_drawingRegions$ = 8					; size = 4
?WillDrawElement@CRowSet@@ABE_NABVCDrawingRegions@@@Z PROC ; CRowSet::WillDrawElement, COMDAT
; _this$ = ecx

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 288  : 	return (m_ElementList.GetCount() > 0 && drawingRegions.GetCount() > 0);

  00003	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  00007	7e 12		 jle	 SHORT $LN3@WillDrawEl
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _drawingRegions$[ebp]
  0000c	e8 00 00 00 00	 call	 ?GetCount@CDrawingRegions@@QBEHXZ ; CDrawingRegions::GetCount
  00011	85 c0		 test	 eax, eax
  00013	7e 06		 jle	 SHORT $LN3@WillDrawEl
  00015	b0 01		 mov	 al, 1

; 289  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
$LN3@WillDrawEl:

; 288  : 	return (m_ElementList.GetCount() > 0 && drawingRegions.GetCount() > 0);

  0001b	32 c0		 xor	 al, al

; 289  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?WillDrawElement@CRowSet@@ABE_NABVCDrawingRegions@@@Z ENDP ; CRowSet::WillDrawElement
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
;	COMDAT ?_Tidy@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@AAEXXZ PROC ; std::deque<CElement *,std::allocator<CElement *> >::_Tidy, COMDAT
; _this$ = ecx

; 1471 :     void _Tidy() noexcept { // free all storage

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 1002 :         return _Mysize() == 0;

  00003	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00006	85 c9		 test	 ecx, ecx

; 1472 :         _Orphan_all();
; 1473 : 
; 1474 :         _Alpty _Almap(_Getal());
; 1475 :         while (!empty()) {

  00008	74 15		 je	 SHORT $LN60@Tidy
  0000a	66 0f 1f 44 00
	00		 npad	 6
$LL2@Tidy:

; 1146 :         if (--_Mysize() == 0) {

  00010	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00013	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00016	8b c8		 mov	 ecx, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 f4		 jne	 SHORT $LL2@Tidy

; 1147 :             _Myoff() = 0;

  0001c	89 47 0c	 mov	 DWORD PTR [edi+12], eax
$LN60@Tidy:
  0001f	56		 push	 esi

; 1479 :         for (size_type _Block = _Mapsize(); 0 < _Block;) { // free storage for a block and destroy pointer

  00020	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  00023	85 f6		 test	 esi, esi
  00025	74 1a		 je	 SHORT $LN5@Tidy
$LL4@Tidy:

; 1480 :             if (_Map()[--_Block]) { // free block and destroy its pointer

  00027	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0002a	4e		 dec	 esi
  0002b	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  0002e	85 c0		 test	 eax, eax
  00030	74 0b		 je	 SHORT $LN23@Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00032	6a 10		 push	 16			; 00000010H
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003a	83 c4 08	 add	 esp, 8
$LN23@Tidy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1479 :         for (size_type _Block = _Mapsize(); 0 < _Block;) { // free storage for a block and destroy pointer

  0003d	85 f6		 test	 esi, esi
  0003f	75 e6		 jne	 SHORT $LL4@Tidy
$LN5@Tidy:

; 1481 :                 _Getal().deallocate(_Map()[_Block], _Block_size);
; 1482 :                 _Destroy_in_place(_Map()[_Block]);
; 1483 :             }
; 1484 :         }
; 1485 : 
; 1486 :         if (_Map() != _Mapptr()) {

  00041	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00044	5e		 pop	 esi
  00045	85 c0		 test	 eax, eax
  00047	74 2a		 je	 SHORT $LN41@Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00049	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0004c	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0004f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00055	72 12		 jb	 SHORT $LN51@Tidy

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00057	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0005a	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0005d	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00062	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00065	77 1c		 ja	 SHORT $LN48@Tidy

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00067	8b c2		 mov	 eax, edx
$LN51@Tidy:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00069	51		 push	 ecx
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00070	83 c4 08	 add	 esp, 8
$LN41@Tidy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1490 :         _Mapsize() = 0;

  00073	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1491 :         _Map()     = _Mapptr();

  0007a	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00081	5f		 pop	 edi

; 1492 :     }

  00082	c3		 ret	 0
$LN48@Tidy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN62@Tidy:
  00089	cc		 int	 3
?_Tidy@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@AAEXXZ ENDP ; std::deque<CElement *,std::allocator<CElement *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
;	COMDAT ?_Growmap@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Myptr$1$ = -16					; size = 4
__Myboff$1$ = -12					; size = 4
_this$1$ = -8						; size = 4
__Count$1$ = -4						; size = 4
$T1 = 8							; size = 4
__Count$ = 8						; size = 4
?_Growmap@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@AAEXI@Z PROC ; std::deque<CElement *,std::allocator<CElement *> >::_Growmap, COMDAT
; _this$ = ecx

; 1432 :     void _Growmap(size_type _Count) { // grow map by at least _Count pointers, _Mapsize() a power of 2

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 1433 :         static_assert(1 < _Minimum_map_size, "The _Xlen() test should always be performed.");
; 1434 : 
; 1435 :         _Alpty _Almap(_Getal());
; 1436 :         size_type _Newsize = 0 < _Mapsize() ? _Mapsize() : 1;

  0000a	b8 01 00 00 00	 mov	 eax, 1
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]
  00013	89 75 f8	 mov	 DWORD PTR _this$1$[ebp], esi
  00016	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00019	85 d2		 test	 edx, edx
  0001b	0f 45 c2	 cmovne	 eax, edx
  0001e	66 90		 npad	 2
$LL2@Growmap:

; 1437 :         while (_Newsize - _Mapsize() < _Count || _Newsize < _Minimum_map_size) {

  00020	8b d8		 mov	 ebx, eax
  00022	2b da		 sub	 ebx, edx
  00024	3b df		 cmp	 ebx, edi
  00026	72 05		 jb	 SHORT $LN4@Growmap
  00028	83 f8 08	 cmp	 eax, 8
  0002b	73 13		 jae	 SHORT $LN3@Growmap
$LN4@Growmap:

; 1438 :             // scale _Newsize to 2^N >= _Mapsize() + _Count
; 1439 :             if (max_size() / _Block_size - _Newsize < _Newsize) {

  0002d	b9 ff ff ff 0f	 mov	 ecx, 268435455		; 0fffffffH
  00032	2b c8		 sub	 ecx, eax
  00034	3b c8		 cmp	 ecx, eax
  00036	0f 82 49 01 00
	00		 jb	 $LN138@Growmap

; 1441 :             }
; 1442 : 
; 1443 :             _Newsize *= 2;

  0003c	03 c0		 add	 eax, eax

; 1444 :         }

  0003e	eb e0		 jmp	 SHORT $LL2@Growmap
$LN3@Growmap:

; 1445 :         _Count = _Newsize - _Mapsize();
; 1446 : 
; 1447 :         size_type _Myboff = _Myoff() / _Block_size;

  00040	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00043	c1 ef 02	 shr	 edi, 2
  00046	89 7d f4	 mov	 DWORD PTR __Myboff$1$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00049	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0004e	0f 87 38 01 00
	00		 ja	 $LN142@Growmap

; 61   :             _Throw_bad_array_new_length(); // multiply overflow
; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00054	c1 e0 02	 shl	 eax, 2

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00057	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0005c	72 27		 jb	 SHORT $LN19@Growmap

; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  0005e	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00061	3b c8		 cmp	 ecx, eax
  00063	0f 86 23 01 00
	00		 jbe	 $LN142@Growmap

; 79   :         return ::operator new(_Bytes);

  00069	51		 push	 ecx
  0006a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0006f	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00072	85 c0		 test	 eax, eax
  00074	0f 84 05 01 00
	00		 je	 $LN130@Growmap

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  0007a	8d 50 23	 lea	 edx, DWORD PTR [eax+35]
  0007d	83 e2 e0	 and	 edx, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00080	89 42 fc	 mov	 DWORD PTR [edx-4], eax

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00083	eb 13		 jmp	 SHORT $LN145@Growmap
$LN19@Growmap:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00085	85 c0		 test	 eax, eax
  00087	74 0d		 je	 SHORT $LN20@Growmap

; 79   :         return ::operator new(_Bytes);

  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0008f	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00092	8b d0		 mov	 edx, eax
  00094	eb 02		 jmp	 SHORT $LN145@Growmap
$LN20@Growmap:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00096	33 d2		 xor	 edx, edx
$LN145@Growmap:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1451 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

  00098	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0009b	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  0009e	c1 e7 02	 shl	 edi, 2
  000a1	c1 e6 02	 shl	 esi, 2
  000a4	89 7d fc	 mov	 DWORD PTR __Count$1$[ebp], edi
  000a7	89 55 08	 mov	 DWORD PTR $T1[ebp], edx
  000aa	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  000ad	03 fa		 add	 edi, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  000af	2b f1		 sub	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1451 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

  000b1	03 f0		 add	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  000b3	56		 push	 esi
  000b4	51		 push	 ecx
  000b5	57		 push	 edi
  000b6	e8 00 00 00 00	 call	 _memmove

; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  000bb	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  000be	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1451 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

  000c1	8b 75 f8	 mov	 esi, DWORD PTR _this$1$[ebp]

; 1452 :         if (_Myboff <= _Count) { // increment greater than offset of initial block

  000c4	8b 7d f4	 mov	 edi, DWORD PTR __Myboff$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  000c7	89 45 f0	 mov	 DWORD PTR __Myptr$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1451 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

  000ca	8b 56 04	 mov	 edx, DWORD PTR [esi+4]

; 1452 :         if (_Myboff <= _Count) { // increment greater than offset of initial block

  000cd	3b fb		 cmp	 edi, ebx
  000cf	77 35		 ja	 SHORT $LN6@Growmap
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  000d1	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
  000d8	51		 push	 ecx
  000d9	52		 push	 edx
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 _memmove
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  000e0	8b c3		 mov	 eax, ebx
  000e2	2b c7		 sub	 eax, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  000e4	8b 7d fc	 mov	 edi, DWORD PTR __Count$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  000e7	c1 e0 02	 shl	 eax, 2
  000ea	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  000eb	8b 45 f0	 mov	 eax, DWORD PTR __Myptr$1$[ebp]
  000ee	03 c7		 add	 eax, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  000f0	6a 00		 push	 0
  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 _memset
  000f8	57		 push	 edi
  000f9	8b 7d 08	 mov	 edi, DWORD PTR $T1[ebp]
  000fc	6a 00		 push	 0
  000fe	57		 push	 edi
  000ff	e8 00 00 00 00	 call	 _memset
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1456 :         } else { // increment not greater than offset of initial block

  00104	eb 36		 jmp	 SHORT $LN146@Growmap
$LN6@Growmap:

; 1457 :             _STD uninitialized_copy(_Map(), _Map() + _Count, _Myptr); // copy more old

  00106	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  0010d	57		 push	 edi
  0010e	52		 push	 edx
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 _memmove
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1458 :             _Myptr = _STD uninitialized_copy(_Map() + _Count, _Map() + _Myboff, _Newmap); // copy rest of old

  00115	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00118	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  0011b	2b f0		 sub	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1458 :             _Myptr = _STD uninitialized_copy(_Map() + _Count, _Map() + _Myboff, _Newmap); // copy rest of old

  0011d	03 75 fc	 add	 esi, DWORD PTR __Count$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00120	56		 push	 esi
  00121	50		 push	 eax
  00122	ff 75 08	 push	 DWORD PTR $T1[ebp]
  00125	e8 00 00 00 00	 call	 _memmove
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  0012a	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0012b	8b 7d 08	 mov	 edi, DWORD PTR $T1[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  0012e	6a 00		 push	 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  00130	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00133	50		 push	 eax
  00134	e8 00 00 00 00	 call	 _memset
  00139	8b 75 f8	 mov	 esi, DWORD PTR _this$1$[ebp]
$LN146@Growmap:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1463 :         if (_Map() != _Mapptr()) {

  0013c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0013f	83 c4 24	 add	 esp, 36			; 00000024H
  00142	85 c0		 test	 eax, eax
  00144	74 2a		 je	 SHORT $LN123@Growmap
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00146	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00149	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0014c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00152	72 12		 jb	 SHORT $LN133@Growmap

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00154	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00157	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0015a	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0015c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0015f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00162	77 1b		 ja	 SHORT $LN130@Growmap

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00164	8b c2		 mov	 eax, edx
$LN133@Growmap:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00166	51		 push	 ecx
  00167	50		 push	 eax
  00168	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0016d	83 c4 08	 add	 esp, 8
$LN123@Growmap:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1468 :         _Mapsize() += _Count;

  00170	01 5e 08	 add	 DWORD PTR [esi+8], ebx
  00173	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  00176	5f		 pop	 edi
  00177	5e		 pop	 esi
  00178	5b		 pop	 ebx

; 1469 :     }

  00179	8b e5		 mov	 esp, ebp
  0017b	5d		 pop	 ebp
  0017c	c2 04 00	 ret	 4
$LN130@Growmap:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0017f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN138@Growmap:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1440 :                 _Xlen(); // result too long

  00185	8b ce		 mov	 ecx, esi
  00187	e8 00 00 00 00	 call	 ?_Xlen@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@ABEXXZ ; std::deque<CElement *,std::allocator<CElement *> >::_Xlen
$LN142@Growmap:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 131  :         _Throw_bad_array_new_length(); // add overflow

  0018c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN144@Growmap:
  00191	cc		 int	 3
?_Growmap@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@AAEXI@Z ENDP ; std::deque<CElement *,std::allocator<CElement *> >::_Growmap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
;	COMDAT ?_Xlen@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@ABEXXZ
_TEXT	SEGMENT
?_Xlen@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@ABEXXZ PROC ; std::deque<CElement *,std::allocator<CElement *> >::_Xlen, COMDAT
; _this$ = ecx

; 1425 :         _Xlength_error("deque<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@ABEXXZ ENDP ; std::deque<CElement *,std::allocator<CElement *> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
;	COMDAT ?erase@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCElement@@@std@@@std@@@2@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCElement@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
__Off$1$ = -32						; size = 4
_this$1$ = -28						; size = 4
tv1930 = -24						; size = 4
tv1918 = -24						; size = 4
__Dest$$sroa$1005$1$ = -24				; size = 4
tv1951 = -20						; size = 4
__ULast$9$sroa$1009$1$ = -20				; size = 4
$T11 = -20						; size = 4
$T12 = -16						; size = 4
$T13 = -16						; size = 4
__Count$1$ = -12					; size = 4
__UFirst$3$sroa$1028$1$ = -8				; size = 4
$T14 = -8						; size = 4
__First$$sroa$1002$1$ = -4				; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 12
__Last_arg$ = 24					; size = 12
?erase@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCElement@@@std@@@std@@@2@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCElement@@@std@@@std@@@2@0@Z PROC ; std::deque<CElement *,std::allocator<CElement *> >::erase, COMDAT
; _this$ = ecx

; 1281 :         is_nothrow_move_assignable_v<value_type>) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d e4	 mov	 DWORD PTR _this$1$[ebp], ecx
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1098 :         if (_Parent) { // have a parent, do adoption

  0000c	85 c9		 test	 ecx, ecx
  0000e	74 04		 je	 SHORT $LN29@erase

; 1099 :             _Myproxy = _Parent->_Myproxy;

  00010	8b 19		 mov	 ebx, DWORD PTR [ecx]

; 1100 :         } else { // no future parent, just disown current parent

  00012	eb 02		 jmp	 SHORT $LN49@erase
$LN29@erase:

; 1101 :             _Myproxy = nullptr;

  00014	33 db		 xor	 ebx, ebx
$LN49@erase:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 339  :         return static_cast<difference_type>(this->_Myoff - _Right._Myoff);

  00016	8b 75 14	 mov	 esi, DWORD PTR __First_arg$[ebp+8]
  00019	8b d6		 mov	 edx, esi

; 253  :     _Deque_const_iterator(_Size_type _Off, const _Container_base12* _Pdeque) noexcept : _Myoff(_Off) {

  0001b	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 339  :         return static_cast<difference_type>(this->_Myoff - _Right._Myoff);

  0001e	2b d0		 sub	 edx, eax

; 1282 :         iterator _First = _Make_iter(_First_arg);
; 1283 :         iterator _Last  = _Make_iter(_Last_arg);
; 1284 : 
; 1285 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1286 :         _STL_VERIFY(_First <= _Last && begin() <= _First && _Last <= end(), "deque erase iterator outside range");
; 1287 :         _Adl_verify_range(_First, _Last);
; 1288 : 
; 1289 :         auto _Off   = static_cast<size_type>(_First - begin());
; 1290 :         auto _Count = static_cast<size_type>(_Last - _First);
; 1291 :         bool _Moved = 0 < _Off && _Off + _Count < _Mysize();
; 1292 : 
; 1293 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1294 :         auto _Off   = static_cast<size_type>(_First - begin());

  00020	8b 7d 20	 mov	 edi, DWORD PTR __Last_arg$[ebp+8]

; 339  :         return static_cast<difference_type>(this->_Myoff - _Right._Myoff);

  00023	89 55 e0	 mov	 DWORD PTR __Off$1$[ebp], edx

; 1282 :         iterator _First = _Make_iter(_First_arg);
; 1283 :         iterator _Last  = _Make_iter(_Last_arg);
; 1284 : 
; 1285 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1286 :         _STL_VERIFY(_First <= _Last && begin() <= _First && _Last <= end(), "deque erase iterator outside range");
; 1287 :         _Adl_verify_range(_First, _Last);
; 1288 : 
; 1289 :         auto _Off   = static_cast<size_type>(_First - begin());
; 1290 :         auto _Count = static_cast<size_type>(_Last - _First);
; 1291 :         bool _Moved = 0 < _Off && _Off + _Count < _Mysize();
; 1292 : 
; 1293 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1294 :         auto _Off   = static_cast<size_type>(_First - begin());

  00026	8b d7		 mov	 edx, edi
  00028	2b d6		 sub	 edx, esi

; 253  :     _Deque_const_iterator(_Size_type _Off, const _Container_base12* _Pdeque) noexcept : _Myoff(_Off) {

  0002a	89 45 f8	 mov	 DWORD PTR __UFirst$3$sroa$1028$1$[ebp], eax

; 339  :         return static_cast<difference_type>(this->_Myoff - _Right._Myoff);

  0002d	89 75 e8	 mov	 DWORD PTR __Dest$$sroa$1005$1$[ebp], esi

; 1282 :         iterator _First = _Make_iter(_First_arg);
; 1283 :         iterator _Last  = _Make_iter(_Last_arg);
; 1284 : 
; 1285 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1286 :         _STL_VERIFY(_First <= _Last && begin() <= _First && _Last <= end(), "deque erase iterator outside range");
; 1287 :         _Adl_verify_range(_First, _Last);
; 1288 : 
; 1289 :         auto _Off   = static_cast<size_type>(_First - begin());
; 1290 :         auto _Count = static_cast<size_type>(_Last - _First);
; 1291 :         bool _Moved = 0 < _Off && _Off + _Count < _Mysize();
; 1292 : 
; 1293 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1294 :         auto _Off   = static_cast<size_type>(_First - begin());

  00030	89 7d fc	 mov	 DWORD PTR __First$$sroa$1002$1$[ebp], edi
  00033	89 55 f4	 mov	 DWORD PTR __Count$1$[ebp], edx

; 1295 :         auto _Count = static_cast<size_type>(_Last - _First);
; 1296 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 
; 1298 :         if (_Count == 0) {

  00036	75 18		 jne	 SHORT $LN8@erase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1113 :     mutable _Iterator_base12* _Mynextiter = nullptr;

  00038	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1069 :         _Myproxy = _Right._Myproxy;

  0003b	89 18		 mov	 DWORD PTR [eax], ebx
  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1321 :     }

  00040	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 1c 00	 ret	 28			; 0000001cH
$LN8@erase:

; 897  :         return iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00050	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00053	03 45 f8	 add	 eax, DWORD PTR __UFirst$3$sroa$1028$1$[ebp]
  00056	89 45 ec	 mov	 DWORD PTR tv1951[ebp], eax

; 339  :         return static_cast<difference_type>(this->_Myoff - _Right._Myoff);

  00059	2b c7		 sub	 eax, edi

; 1299 :             return _First;
; 1300 :         }
; 1301 : 
; 1302 :         if (_Off < static_cast<size_type>(end() - _Last)) { // closer to front

  0005b	39 45 e0	 cmp	 DWORD PTR __Off$1$[ebp], eax
  0005e	0f 83 8a 00 00
	00		 jae	 $LN9@erase

; 507  :         return {this->_Myoff, this->_Getcont()};

  00064	85 db		 test	 ebx, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1107 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  00066	74 09		 je	 SHORT $LN144@erase
  00068	8b 03		 mov	 eax, DWORD PTR [ebx]
  0006a	8b d8		 mov	 ebx, eax
  0006c	89 45 ec	 mov	 DWORD PTR $T11[ebp], eax
  0006f	eb 07		 jmp	 SHORT $LN403@erase
$LN144@erase:
  00071	33 c0		 xor	 eax, eax
  00073	33 db		 xor	 ebx, ebx
  00075	89 5d ec	 mov	 DWORD PTR $T11[ebp], ebx
$LN403@erase:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4376 :     _Seek_wrapped(_Dest, _Move_backward_unchecked(_UFirst, _ULast, _UDest));

  00078	89 45 f0	 mov	 DWORD PTR $T13[ebp], eax
  0007b	39 75 f8	 cmp	 DWORD PTR __UFirst$3$sroa$1028$1$[ebp], esi

; 4362 :     while (_First != _Last) {

  0007e	74 52		 je	 SHORT $LL396@erase
  00080	8b ce		 mov	 ecx, esi
$LL169@erase:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00082	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]

; 67   :         --_Myoff;

  00085	49		 dec	 ecx

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00086	48		 dec	 eax
  00087	8b d1		 mov	 edx, ecx
  00089	c1 ea 02	 shr	 edx, 2

; 67   :         --_Myoff;

  0008c	4f		 dec	 edi

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0008d	23 d0		 and	 edx, eax

; 67   :         --_Myoff;

  0008f	89 7d fc	 mov	 DWORD PTR __First$$sroa$1002$1$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4363 :         *--_Dest = _STD move(*--_Last);

  00092	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 48   :         return _Mycont->_Map[_Block][_Off];

  00095	8b d9		 mov	 ebx, ecx
  00097	8b 75 fc	 mov	 esi, DWORD PTR __First$$sroa$1002$1$[ebp]
  0009a	83 e3 03	 and	 ebx, 3
  0009d	89 5d e8	 mov	 DWORD PTR tv1918[ebp], ebx
  000a0	83 e6 03	 and	 esi, 3

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  000a3	c1 ef 02	 shr	 edi, 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4363 :         *--_Dest = _STD move(*--_Last);

  000a6	8b 1c 90	 mov	 ebx, DWORD PTR [eax+edx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  000a9	8b 55 f0	 mov	 edx, DWORD PTR $T13[ebp]
  000ac	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4363 :         *--_Dest = _STD move(*--_Last);

  000af	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  000b2	48		 dec	 eax
  000b3	23 f8		 and	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4363 :         *--_Dest = _STD move(*--_Last);

  000b5	8b 45 e8	 mov	 eax, DWORD PTR tv1918[ebp]
  000b8	8b 14 ba	 mov	 edx, DWORD PTR [edx+edi*4]
  000bb	8b 04 83	 mov	 eax, DWORD PTR [ebx+eax*4]
  000be	8b 7d fc	 mov	 edi, DWORD PTR __First$$sroa$1002$1$[ebp]
  000c1	8b 5d ec	 mov	 ebx, DWORD PTR $T11[ebp]
  000c4	89 04 b2	 mov	 DWORD PTR [edx+esi*4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 106  :         return _Myoff == _Right._Myoff;

  000c7	39 4d f8	 cmp	 DWORD PTR __UFirst$3$sroa$1028$1$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4362 :     while (_First != _Last) {

  000ca	75 b6		 jne	 SHORT $LL169@erase
  000cc	8b 4d e4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000cf	8b 55 f4	 mov	 edx, DWORD PTR __Count$1$[ebp]
$LL396@erase:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1095 :         if (--_Mysize() == 0) {

  000d2	83 41 10 ff	 add	 DWORD PTR [ecx+16], -1
  000d6	75 09		 jne	 SHORT $LN205@erase

; 1096 :             _Myoff() = 0;

  000d8	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 1097 :         } else {

  000df	eb 03		 jmp	 SHORT $LN2@erase
$LN205@erase:

; 1098 :             ++_Myoff();

  000e1	ff 41 0c	 inc	 DWORD PTR [ecx+12]
$LN2@erase:

; 1303 :             _STD move_backward(begin(), _First, _Last); // copy over hole
; 1304 :             for (; 0 < _Count; --_Count) {

  000e4	83 ea 01	 sub	 edx, 1
  000e7	75 e9		 jne	 SHORT $LL396@erase

; 1305 :                 pop_front(); // pop copied elements
; 1306 :             }
; 1307 :         } else { // closer to back

  000e9	e9 94 00 00 00	 jmp	 $LN6@erase
$LN9@erase:

; 507  :         return {this->_Myoff, this->_Getcont()};

  000ee	85 db		 test	 ebx, ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1107 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  000f0	74 0f		 je	 SHORT $LN250@erase
  000f2	8b 33		 mov	 esi, DWORD PTR [ebx]
  000f4	8b de		 mov	 ebx, esi
  000f6	8b 45 ec	 mov	 eax, DWORD PTR tv1951[ebp]
  000f9	89 75 f8	 mov	 DWORD PTR $T14[ebp], esi
  000fc	89 45 ec	 mov	 DWORD PTR __ULast$9$sroa$1009$1$[ebp], eax
  000ff	eb 0f		 jmp	 SHORT $LN404@erase
$LN250@erase:
  00101	8b 5d ec	 mov	 ebx, DWORD PTR tv1951[ebp]
  00104	33 f6		 xor	 esi, esi
  00106	89 5d ec	 mov	 DWORD PTR __ULast$9$sroa$1009$1$[ebp], ebx
  00109	8b c3		 mov	 eax, ebx
  0010b	33 db		 xor	 ebx, ebx
  0010d	89 5d f8	 mov	 DWORD PTR $T14[ebp], ebx
$LN404@erase:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4334 :     _Seek_wrapped(_Dest, _Move_unchecked(_UFirst, _ULast, _UDest));

  00110	89 75 f0	 mov	 DWORD PTR $T12[ebp], esi
  00113	3b f8		 cmp	 edi, eax

; 4320 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  00115	74 59		 je	 SHORT $LL398@erase
  00117	8b 4d e8	 mov	 ecx, DWORD PTR __Dest$$sroa$1005$1$[ebp]
  0011a	66 0f 1f 44 00
	00		 npad	 6
$LL298@erase:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00120	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00123	8b d7		 mov	 edx, edi
  00125	48		 dec	 eax
  00126	c1 ea 02	 shr	 edx, 2
  00129	23 d0		 and	 edx, eax

; 47   :         _Size_type _Off   = _Myoff % _Block_size;

  0012b	83 e7 03	 and	 edi, 3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4321 :         *_Dest = _STD move(*_First);

  0012e	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 47   :         _Size_type _Off   = _Myoff % _Block_size;

  00131	89 7d e8	 mov	 DWORD PTR tv1930[ebp], edi

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00134	8b f9		 mov	 edi, ecx
  00136	c1 ef 02	 shr	 edi, 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4321 :         *_Dest = _STD move(*_First);

  00139	8b 1c 90	 mov	 ebx, DWORD PTR [eax+edx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0013c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4321 :         *_Dest = _STD move(*_First);

  0013f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00142	48		 dec	 eax
  00143	23 f8		 and	 edi, eax

; 47   :         _Size_type _Off   = _Myoff % _Block_size;

  00145	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4321 :         *_Dest = _STD move(*_First);

  00147	8b 45 e8	 mov	 eax, DWORD PTR tv1930[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 47   :         _Size_type _Off   = _Myoff % _Block_size;

  0014a	83 e6 03	 and	 esi, 3

; 56   :         ++_Myoff;

  0014d	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4321 :         *_Dest = _STD move(*_First);

  0014e	8b 14 ba	 mov	 edx, DWORD PTR [edx+edi*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 56   :         ++_Myoff;

  00151	8b 7d fc	 mov	 edi, DWORD PTR __First$$sroa$1002$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4321 :         *_Dest = _STD move(*_First);

  00154	8b 04 83	 mov	 eax, DWORD PTR [ebx+eax*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 56   :         ++_Myoff;

  00157	47		 inc	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4320 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  00158	8b 5d f8	 mov	 ebx, DWORD PTR $T14[ebp]

; 4321 :         *_Dest = _STD move(*_First);

  0015b	89 04 b2	 mov	 DWORD PTR [edx+esi*4], eax
  0015e	8b 75 f0	 mov	 esi, DWORD PTR $T12[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 56   :         ++_Myoff;

  00161	89 7d fc	 mov	 DWORD PTR __First$$sroa$1002$1$[ebp], edi

; 106  :         return _Myoff == _Right._Myoff;

  00164	3b 7d ec	 cmp	 edi, DWORD PTR __ULast$9$sroa$1009$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4320 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  00167	75 b7		 jne	 SHORT $LL298@erase
  00169	8b 4d e4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0016c	8b 55 f4	 mov	 edx, DWORD PTR __Count$1$[ebp]
  0016f	90		 npad	 1
$LL398@erase:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1146 :         if (--_Mysize() == 0) {

  00170	83 41 10 ff	 add	 DWORD PTR [ecx+16], -1
  00174	75 07		 jne	 SHORT $LN5@erase

; 1147 :             _Myoff() = 0;

  00176	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$LN5@erase:

; 1308 :             _STD move(_Last, end(), _First); // copy over hole
; 1309 :             for (; 0 < _Count; --_Count) {

  0017d	83 ea 01	 sub	 edx, 1
  00180	75 ee		 jne	 SHORT $LL398@erase
$LN6@erase:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1099 :             _Myproxy = _Parent->_Myproxy;

  00182	8b 11		 mov	 edx, DWORD PTR [ecx]

; 1113 :     mutable _Iterator_base12* _Mynextiter = nullptr;

  00184	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 319  :         _Myoff += _Off;

  00187	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0018a	03 4d e0	 add	 ecx, DWORD PTR __Off$1$[ebp]

; 1321 :     }

  0018d	5f		 pop	 edi
  0018e	5e		 pop	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1069 :         _Myproxy = _Right._Myproxy;

  0018f	89 10		 mov	 DWORD PTR [eax], edx
  00191	89 48 08	 mov	 DWORD PTR [eax+8], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1321 :     }

  00194	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0019b	5b		 pop	 ebx
  0019c	8b e5		 mov	 esp, ebp
  0019e	5d		 pop	 ebp
  0019f	c2 1c 00	 ret	 28			; 0000001cH
?erase@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCElement@@@std@@@std@@@2@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCElement@@@std@@@std@@@2@0@Z ENDP ; std::deque<CElement *,std::allocator<CElement *> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
;	COMDAT ?RemoveAt@?$CDequePointerList@VCElement@@@@QAEXPAVCElement@@@Z
_TEXT	SEGMENT
$T8 = -24						; size = 12
_this$1$ = -12						; size = 4
tv800 = -8						; size = 4
tv801 = -4						; size = 4
_pItem$ = 8						; size = 4
?RemoveAt@?$CDequePointerList@VCElement@@@@QAEXPAVCElement@@@Z PROC ; CDequePointerList<CElement>::RemoveAt, COMDAT
; _this$ = ecx

; 248  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	89 5d f4	 mov	 DWORD PTR _this$1$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 897  :         return iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  0000e	8b 73 10	 mov	 esi, DWORD PTR [ebx+16]
  00011	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00014	03 f0		 add	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1099 :             _Myproxy = _Parent->_Myproxy;

  00016	8b 3b		 mov	 edi, DWORD PTR [ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 507  :         return {this->_Myoff, this->_Getcont()};

  00018	85 ff		 test	 edi, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1107 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  0001a	74 04		 je	 SHORT $LN52@RemoveAt
  0001c	8b 17		 mov	 edx, DWORD PTR [edi]
  0001e	eb 02		 jmp	 SHORT $LN53@RemoveAt
$LN52@RemoveAt:
  00020	33 d2		 xor	 edx, edx
$LN53@RemoveAt:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 5185 :     for (; _First != _Last; ++_First) {

  00022	3b c6		 cmp	 eax, esi
  00024	74 69		 je	 SHORT $LN111@RemoveAt
  00026	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00029	49		 dec	 ecx
  0002a	89 4d fc	 mov	 DWORD PTR tv801[ebp], ecx
  0002d	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00030	89 4d f8	 mov	 DWORD PTR tv800[ebp], ecx
$LL69@RemoveAt:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 48   :         return _Mycont->_Map[_Block][_Off];

  00033	8b 5d f8	 mov	 ebx, DWORD PTR tv800[ebp]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00036	8b c8		 mov	 ecx, eax
  00038	c1 e9 02	 shr	 ecx, 2

; 47   :         _Size_type _Off   = _Myoff % _Block_size;

  0003b	8b d0		 mov	 edx, eax

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0003d	23 4d fc	 and	 ecx, DWORD PTR tv801[ebp]

; 47   :         _Size_type _Off   = _Myoff % _Block_size;

  00040	83 e2 03	 and	 edx, 3

; 48   :         return _Mycont->_Map[_Block][_Off];

  00043	8b 0c 8b	 mov	 ecx, DWORD PTR [ebx+ecx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 5186 :         if (*_First == _Val) {

  00046	8b 5d 08	 mov	 ebx, DWORD PTR _pItem$[ebp]
  00049	39 1c 91	 cmp	 DWORD PTR [ecx+edx*4], ebx
  0004c	8b 5d f4	 mov	 ebx, DWORD PTR _this$1$[ebp]
  0004f	74 0e		 je	 SHORT $LN139@RemoveAt
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 56   :         ++_Myoff;

  00051	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 5185 :     for (; _First != _Last; ++_First) {

  00052	3b c6		 cmp	 eax, esi
  00054	75 dd		 jne	 SHORT $LL69@RemoveAt
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 255  : 	};

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
$LN139@RemoveAt:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1277 :         return erase(_Where, _Next_iter(_Where));

  0005f	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 281  :         ++_Myoff;

  00062	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]

; 1277 :         return erase(_Where, _Next_iter(_Where));

  00065	8b d4		 mov	 edx, esp
  00067	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0006a	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  0006d	8b cc		 mov	 ecx, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1113 :     mutable _Iterator_base12* _Mynextiter = nullptr;

  0006f	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 1069 :         _Myproxy = _Right._Myproxy;

  00076	89 3a		 mov	 DWORD PTR [edx], edi
  00078	89 41 08	 mov	 DWORD PTR [ecx+8], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1277 :         return erase(_Where, _Next_iter(_Where));

  0007b	8d 45 e8	 lea	 eax, DWORD PTR $T8[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1113 :     mutable _Iterator_base12* _Mynextiter = nullptr;

  0007e	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 1069 :         _Myproxy = _Right._Myproxy;

  00085	89 39		 mov	 DWORD PTR [ecx], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1277 :         return erase(_Where, _Next_iter(_Where));

  00087	8b cb		 mov	 ecx, ebx
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ?erase@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCElement@@@std@@@std@@@2@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@PAVCElement@@@std@@@std@@@2@0@Z ; std::deque<CElement *,std::allocator<CElement *> >::erase
$LN111@RemoveAt:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 255  : 	};

  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
?RemoveAt@?$CDequePointerList@VCElement@@@@QAEXPAVCElement@@@Z ENDP ; CDequePointerList<CElement>::RemoveAt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
;	COMDAT ?AddTail@?$CDequePointerList@VCElement@@@@QAEXPAVCElement@@@Z
_TEXT	SEGMENT
_pItem$ = 8						; size = 4
?AddTail@?$CDequePointerList@VCElement@@@@QAEXPAVCElement@@@Z PROC ; CDequePointerList<CElement>::AddTail, COMDAT
; _this$ = ecx

; 227  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1106 :         if ((_Myoff() + _Mysize()) % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  00008	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000b	8b f9		 mov	 edi, ecx
  0000d	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00010	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  00013	a8 03		 test	 al, 3
  00015	75 1a		 jne	 SHORT $LN6@AddTail
  00017	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0001a	c1 e8 02	 shr	 eax, 2
  0001d	39 46 08	 cmp	 DWORD PTR [esi+8], eax
  00020	77 0f		 ja	 SHORT $LN6@AddTail

; 1107 :             _Growmap(1);

  00022	6a 01		 push	 1
  00024	8b ce		 mov	 ecx, esi
  00026	e8 00 00 00 00	 call	 ?_Growmap@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@AAEXI@Z ; std::deque<CElement *,std::allocator<CElement *> >::_Growmap
  0002b	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0002e	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
$LN6@AddTail:

; 1108 :         }
; 1109 :         _Myoff() &= _Mapsize() * _Block_size - 1;

  00031	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00034	8d 04 8d ff ff
	ff ff		 lea	 eax, DWORD PTR [ecx*4-1]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0003b	49		 dec	 ecx

; 1109 :         _Myoff() &= _Mapsize() * _Block_size - 1;

  0003c	23 c2		 and	 eax, edx
  0003e	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 1110 :         size_type _Newoff = _Myoff() + _Mysize();

  00041	03 f8		 add	 edi, eax

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00043	8b c7		 mov	 eax, edi
  00045	c1 e8 02	 shr	 eax, 2
  00048	23 c8		 and	 ecx, eax

; 1112 :         if (_Map()[_Block] == nullptr) {

  0004a	8d 1c 8d 00 00
	00 00		 lea	 ebx, DWORD PTR [ecx*4]
  00051	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00054	83 3c 19 00	 cmp	 DWORD PTR [ecx+ebx], 0
  00058	75 13		 jne	 SHORT $LN7@AddTail
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  0005a	6a 10		 push	 16			; 00000010H
  0005c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1113 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  00061	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00064	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1113 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  00067	89 04 0b	 mov	 DWORD PTR [ebx+ecx], eax
  0006a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
$LN7@AddTail:

; 1114 :         }
; 1115 : 
; 1116 :         _Alty_traits::construct(

  0006d	8b 0c 0b	 mov	 ecx, DWORD PTR [ebx+ecx]
  00070	83 e7 03	 and	 edi, 3
  00073	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  00076	89 04 b9	 mov	 DWORD PTR [ecx+edi*4], eax

; 1117 :             _Getal(), _Unfancy(_Map()[_Block] + _Newoff % _Block_size), _STD forward<_Tys>(_Vals)...);
; 1118 : 
; 1119 :         ++_Mysize();

  00079	ff 46 10	 inc	 DWORD PTR [esi+16]
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 230  : 	};

  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
?AddTail@?$CDequePointerList@VCElement@@@@QAEXPAVCElement@@@Z ENDP ; CDequePointerList<CElement>::AddTail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
;	COMDAT ??1?$CDequePointerList@VCElement@@@@QAE@XZ
_TEXT	SEGMENT
??1?$CDequePointerList@VCElement@@@@QAE@XZ PROC		; CDequePointerList<CElement>::~CDequePointerList<CElement>, COMDAT
; _this$ = ecx

; 171  : 	~CDequePointerList() { m_deque.clear(); };

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1332 :         _Tidy();

  00003	e8 00 00 00 00	 call	 ?_Tidy@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@AAEXXZ ; std::deque<CElement *,std::allocator<CElement *> >::_Tidy

; 861  :         _Tidy();

  00008	8b ce		 mov	 ecx, esi
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@AAEXXZ ; std::deque<CElement *,std::allocator<CElement *> >::_Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00011	6a 08		 push	 8
  00013	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0001a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001f	83 c4 08	 add	 esp, 8
  00022	5e		 pop	 esi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 171  : 	~CDequePointerList() { m_deque.clear(); };

  00023	c3		 ret	 0
??1?$CDequePointerList@VCElement@@@@QAE@XZ ENDP		; CDequePointerList<CElement>::~CDequePointerList<CElement>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
;	COMDAT ?IsInSameElement@CRowSet@@QBE_NPBVCElement@@@Z
_TEXT	SEGMENT
_pElement$ = 8						; size = 4
?IsInSameElement@CRowSet@@QBE_NPBVCElement@@@Z PROC	; CRowSet::IsInSameElement, COMDAT
; _this$ = ecx

; 276  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 277  : 	for(int nIndex = 0; nIndex < m_ElementList.GetCount(); nIndex++){

  00006	33 c0		 xor	 eax, eax
  00008	53		 push	 ebx
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	8b 5f 14	 mov	 ebx, DWORD PTR [edi+20]
  00010	85 db		 test	 ebx, ebx
  00012	7e 2f		 jle	 SHORT $LN3@IsInSameEl
$LL4@IsInSameEl:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1002 :         return _Mysize() == 0;

  00014	85 db		 test	 ebx, ebx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 205  : 		if(m_deque.empty())

  00016	75 04		 jne	 SHORT $LN8@IsInSameEl

; 206  : 			return NULL;

  00018	33 c9		 xor	 ecx, ecx
  0001a	eb 1d		 jmp	 SHORT $LN7@IsInSameEl
$LN8@IsInSameEl:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 43   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  0001c	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]

; 78   :         _Myoff += _Off;

  0001f	8d 34 01	 lea	 esi, DWORD PTR [ecx+eax]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00022	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00025	49		 dec	 ecx

; 78   :         _Myoff += _Off;

  00026	8b d6		 mov	 edx, esi
  00028	c1 ea 02	 shr	 edx, 2

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0002b	23 d1		 and	 edx, ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 208  : 		return m_deque[nIndex];

  0002d	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 48   :         return _Mycont->_Map[_Block][_Off];

  00030	83 e6 03	 and	 esi, 3
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 208  : 		return m_deque[nIndex];

  00033	8b 0c 91	 mov	 ecx, DWORD PTR [ecx+edx*4]
  00036	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
$LN7@IsInSameEl:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 278  : 		if(pElement == m_ElementList.GetAt(nIndex))

  00039	39 4d 08	 cmp	 DWORD PTR _pElement$[ebp], ecx
  0003c	74 10		 je	 SHORT $LN27@IsInSameEl

; 277  : 	for(int nIndex = 0; nIndex < m_ElementList.GetCount(); nIndex++){

  0003e	40		 inc	 eax
  0003f	3b c3		 cmp	 eax, ebx
  00041	7c d1		 jl	 SHORT $LL4@IsInSameEl
$LN3@IsInSameEl:
  00043	5f		 pop	 edi

; 279  : 			return true;
; 280  : 	}
; 281  : 	return false;
; 282  : }

  00044	5e		 pop	 esi
  00045	32 c0		 xor	 al, al
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
$LN27@IsInSameEl:
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	b0 01		 mov	 al, 1
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
?IsInSameElement@CRowSet@@QBE_NPBVCElement@@@Z ENDP	; CRowSet::IsInSameElement
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
;	COMDAT ?DrawElement@CRowSet@@QAEXPAVCDC@@PAVCElement@@ABVCDrawingRegions@@ABVCCoordinateCalculatorData@@@Z
_TEXT	SEGMENT
_pDC$ = 8						; size = 4
_pSelectedElement$ = 12					; size = 4
_drawingRegions$ = 16					; size = 4
_calData$ = 20						; size = 4
?DrawElement@CRowSet@@QAEXPAVCDC@@PAVCElement@@ABVCDrawingRegions@@ABVCCoordinateCalculatorData@@@Z PROC ; CRowSet::DrawElement, COMDAT
; _this$ = ecx

; 218  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx

; 288  : 	return (m_ElementList.GetCount() > 0 && drawingRegions.GetCount() > 0);

  00009	83 7f 14 00	 cmp	 DWORD PTR [edi+20], 0
  0000d	7e 69		 jle	 SHORT $LN3@DrawElemen
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR _drawingRegions$[ebp]
  00012	e8 00 00 00 00	 call	 ?GetCount@CDrawingRegions@@QBEHXZ ; CDrawingRegions::GetCount
  00017	85 c0		 test	 eax, eax
  00019	7e 5d		 jle	 SHORT $LN3@DrawElemen

; 219  : 	if(!WillDrawElement(drawingRegions))
; 220  : 		return;
; 221  : 
; 222  : 	for(int nIndex = 0; nIndex < m_ElementList.GetCount(); nIndex++)

  0001b	53		 push	 ebx
  0001c	33 db		 xor	 ebx, ebx
  0001e	39 5f 14	 cmp	 DWORD PTR [edi+20], ebx
  00021	7e 54		 jle	 SHORT $LN43@DrawElemen
  00023	56		 push	 esi
$LL4@DrawElemen:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1002 :         return _Mysize() == 0;

  00024	83 7f 14 00	 cmp	 DWORD PTR [edi+20], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 198  : 		if(m_deque.empty())

  00028	75 04		 jne	 SHORT $LN13@DrawElemen

; 199  : 			return NULL;

  0002a	33 f6		 xor	 esi, esi
  0002c	eb 1d		 jmp	 SHORT $LN12@DrawElemen
$LN13@DrawElemen:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 43   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  0002e	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 201  : 		return m_deque[nIndex];

  00031	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 78   :         _Myoff += _Off;

  00034	8d 14 18	 lea	 edx, DWORD PTR [eax+ebx]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00037	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 78   :         _Myoff += _Off;

  0003a	8b ca		 mov	 ecx, edx

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0003c	48		 dec	 eax

; 78   :         _Myoff += _Off;

  0003d	c1 e9 02	 shr	 ecx, 2

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00040	23 c8		 and	 ecx, eax

; 48   :         return _Mycont->_Map[_Block][_Off];

  00042	83 e2 03	 and	 edx, 3
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 201  : 		return m_deque[nIndex];

  00045	8b 34 8e	 mov	 esi, DWORD PTR [esi+ecx*4]
  00048	8b 34 96	 mov	 esi, DWORD PTR [esi+edx*4]
$LN12@DrawElemen:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 226  : 		pElement->Draw(pDC,drawingRegions,calData);

  0004b	ff 75 14	 push	 DWORD PTR _calData$[ebp]
  0004e	8b 06		 mov	 eax, DWORD PTR [esi]
  00050	8b ce		 mov	 ecx, esi
  00052	ff 75 10	 push	 DWORD PTR _drawingRegions$[ebp]
  00055	ff 75 08	 push	 DWORD PTR _pDC$[ebp]
  00058	ff 50 28	 call	 DWORD PTR [eax+40]

; 227  : 		if(pElement == pSelectedElement)

  0005b	3b 75 0c	 cmp	 esi, DWORD PTR _pSelectedElement$[ebp]
  0005e	75 10		 jne	 SHORT $LN2@DrawElemen

; 228  : 			pElement->DrawShadowAndGrip(pDC, drawingRegions, calData);

  00060	ff 75 14	 push	 DWORD PTR _calData$[ebp]
  00063	8b 06		 mov	 eax, DWORD PTR [esi]
  00065	8b ce		 mov	 ecx, esi
  00067	ff 75 10	 push	 DWORD PTR _drawingRegions$[ebp]
  0006a	ff 75 08	 push	 DWORD PTR _pDC$[ebp]
  0006d	ff 50 2c	 call	 DWORD PTR [eax+44]
$LN2@DrawElemen:

; 219  : 	if(!WillDrawElement(drawingRegions))
; 220  : 		return;
; 221  : 
; 222  : 	for(int nIndex = 0; nIndex < m_ElementList.GetCount(); nIndex++)

  00070	43		 inc	 ebx
  00071	3b 5f 14	 cmp	 ebx, DWORD PTR [edi+20]
  00074	7c ae		 jl	 SHORT $LL4@DrawElemen
  00076	5e		 pop	 esi
$LN43@DrawElemen:
  00077	5b		 pop	 ebx
$LN3@DrawElemen:
  00078	5f		 pop	 edi

; 229  : 	}
; 230  : }

  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 10 00	 ret	 16			; 00000010H
?DrawElement@CRowSet@@QAEXPAVCDC@@PAVCElement@@ABVCDrawingRegions@@ABVCCoordinateCalculatorData@@@Z ENDP ; CRowSet::DrawElement
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
;	COMDAT ?MoveElement@CRowSet@@QAEJPAVCElement@@@Z
_TEXT	SEGMENT
_lAddress$1$ = -4					; size = 4
_pSelectedElement$ = 8					; size = 4
?MoveElement@CRowSet@@QAEJPAVCElement@@@Z PROC		; CRowSet::MoveElement, COMDAT
; _this$ = ecx

; 255  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 256  : 	long lAddress = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _lAddress$1$[ebp], 0
  00010	56		 push	 esi

; 257  : 	for(int nIndex = 0; nIndex < m_ElementList.GetCount(); nIndex++)

  00011	33 c0		 xor	 eax, eax
  00013	57		 push	 edi
  00014	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  00017	8b 7d 08	 mov	 edi, DWORD PTR _pSelectedElement$[ebp]
  0001a	85 d2		 test	 edx, edx
  0001c	7e 40		 jle	 SHORT $LN38@MoveElemen
  0001e	66 90		 npad	 2
$LL4@MoveElemen:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1002 :         return _Mysize() == 0;

  00020	83 7b 14 00	 cmp	 DWORD PTR [ebx+20], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 198  : 		if(m_deque.empty())

  00024	75 04		 jne	 SHORT $LN9@MoveElemen

; 199  : 			return NULL;

  00026	33 c9		 xor	 ecx, ecx
  00028	eb 20		 jmp	 SHORT $LN8@MoveElemen
$LN9@MoveElemen:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 43   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  0002a	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]

; 78   :         _Myoff += _Off;

  0002d	8d 34 01	 lea	 esi, DWORD PTR [ecx+eax]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00030	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  00033	49		 dec	 ecx

; 78   :         _Myoff += _Off;

  00034	8b d6		 mov	 edx, esi
  00036	c1 ea 02	 shr	 edx, 2

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00039	23 d1		 and	 edx, ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 201  : 		return m_deque[nIndex];

  0003b	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 48   :         return _Mycont->_Map[_Block][_Off];

  0003e	83 e6 03	 and	 esi, 3
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 201  : 		return m_deque[nIndex];

  00041	8b 0c 91	 mov	 ecx, DWORD PTR [ecx+edx*4]
  00044	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  00047	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
$LN8@MoveElemen:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 261  : 		if(pElement == pSelectedElement)

  0004a	3b cf		 cmp	 ecx, edi
  0004c	74 07		 je	 SHORT $LN34@MoveElemen

; 257  : 	for(int nIndex = 0; nIndex < m_ElementList.GetCount(); nIndex++)

  0004e	40		 inc	 eax
  0004f	3b c2		 cmp	 eax, edx
  00051	7c cd		 jl	 SHORT $LL4@MoveElemen

; 261  : 		if(pElement == pSelectedElement)

  00053	eb 09		 jmp	 SHORT $LN38@MoveElemen
$LN34@MoveElemen:

; 262  : 		{
; 263  : 			lAddress = (long)pSelectedElement;

  00055	8b c7		 mov	 eax, edi
  00057	89 45 fc	 mov	 DWORD PTR _lAddress$1$[ebp], eax

; 264  : 			break;
; 265  : 		}
; 266  : 	}
; 267  : 
; 268  : 	if(lAddress == 0)

  0005a	85 ff		 test	 edi, edi
  0005c	75 0c		 jne	 SHORT $LN6@MoveElemen
$LN38@MoveElemen:

; 269  : 		m_ElementList.AddTail(pSelectedElement);

  0005e	57		 push	 edi
  0005f	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00062	e8 00 00 00 00	 call	 ?AddTail@?$CDequePointerList@VCElement@@@@QAEXPAVCElement@@@Z ; CDequePointerList<CElement>::AddTail

; 270  : 
; 271  : 	return lAddress;

  00067	8b 45 fc	 mov	 eax, DWORD PTR _lAddress$1$[ebp]
$LN6@MoveElemen:

; 272  : }

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
?MoveElement@CRowSet@@QAEJPAVCElement@@@Z ENDP		; CRowSet::MoveElement
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
;	COMDAT ?CopyElement@CRowSet@@QAEPAVCElement@@PAV2@@Z
_TEXT	SEGMENT
__Tmp$1$ = -4						; size = 4
_pSelectedElement$ = 8					; size = 4
?CopyElement@CRowSet@@QAEPAVCElement@@PAV2@@Z PROC	; CRowSet::CopyElement, COMDAT
; _this$ = ecx

; 233  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 234  : 	CElement *lAddress = NULL;
; 235  : 	for(int nIndex = 0; nIndex < m_ElementList.GetCount(); nIndex++)

  00006	33 c0		 xor	 eax, eax
  00008	53		 push	 ebx
  00009	8b d9		 mov	 ebx, ecx
  0000b	57		 push	 edi
  0000c	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
  0000f	85 ff		 test	 edi, edi
  00011	7e 6a		 jle	 SHORT $LN39@CopyElemen
  00013	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00016	89 4d fc	 mov	 DWORD PTR __Tmp$1$[ebp], ecx
  00019	56		 push	 esi
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL4@CopyElemen:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1002 :         return _Mysize() == 0;

  00020	85 ff		 test	 edi, edi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 198  : 		if(m_deque.empty())

  00022	75 04		 jne	 SHORT $LN9@CopyElemen

; 199  : 			return NULL;

  00024	33 c9		 xor	 ecx, ecx
  00026	eb 1d		 jmp	 SHORT $LN8@CopyElemen
$LN9@CopyElemen:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 43   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  00028	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]

; 78   :         _Myoff += _Off;

  0002b	8d 34 01	 lea	 esi, DWORD PTR [ecx+eax]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0002e	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  00031	49		 dec	 ecx

; 78   :         _Myoff += _Off;

  00032	8b d6		 mov	 edx, esi
  00034	c1 ea 02	 shr	 edx, 2

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00037	23 d1		 and	 edx, ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 201  : 		return m_deque[nIndex];

  00039	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 48   :         return _Mycont->_Map[_Block][_Off];

  0003c	83 e6 03	 and	 esi, 3
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 201  : 		return m_deque[nIndex];

  0003f	8b 0c 91	 mov	 ecx, DWORD PTR [ecx+edx*4]
  00042	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
$LN8@CopyElemen:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 239  : 		if(pElement == pSelectedElement)

  00045	3b 4d 08	 cmp	 ecx, DWORD PTR _pSelectedElement$[ebp]
  00048	74 10		 je	 SHORT $LN34@CopyElemen

; 234  : 	CElement *lAddress = NULL;
; 235  : 	for(int nIndex = 0; nIndex < m_ElementList.GetCount(); nIndex++)

  0004a	40		 inc	 eax
  0004b	3b c7		 cmp	 eax, edi
  0004d	7c d1		 jl	 SHORT $LL4@CopyElemen
$LN38@CopyElemen:
  0004f	5e		 pop	 esi
  00050	5f		 pop	 edi

; 246  : 			}			
; 247  : 			break;
; 248  : 		}
; 249  : 	}
; 250  : 
; 251  : 	return lAddress;

  00051	33 c0		 xor	 eax, eax

; 252  : }

  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
$LN34@CopyElemen:

; 240  : 		{
; 241  : 			CElement *pNewElement = CElementFactory::Copy(pElement);

  0005a	51		 push	 ecx
  0005b	e8 00 00 00 00	 call	 ?Copy@CElementFactory@@SAPAVCElement@@PAV2@@Z ; CElementFactory::Copy
  00060	8b f0		 mov	 esi, eax
  00062	83 c4 04	 add	 esp, 4

; 242  : 			if(pNewElement != NULL)

  00065	85 f6		 test	 esi, esi
  00067	74 e6		 je	 SHORT $LN38@CopyElemen

; 243  : 			{
; 244  : 				lAddress = pNewElement;
; 245  : 				m_ElementList.AddTail(pNewElement);

  00069	8b 4d fc	 mov	 ecx, DWORD PTR __Tmp$1$[ebp]
  0006c	56		 push	 esi
  0006d	e8 00 00 00 00	 call	 ?AddTail@?$CDequePointerList@VCElement@@@@QAEXPAVCElement@@@Z ; CDequePointerList<CElement>::AddTail

; 246  : 			}			
; 247  : 			break;
; 248  : 		}
; 249  : 	}
; 250  : 
; 251  : 	return lAddress;

  00072	8b c6		 mov	 eax, esi
  00074	5e		 pop	 esi
  00075	5f		 pop	 edi

; 252  : }

  00076	5b		 pop	 ebx
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
$LN39@CopyElemen:
  0007d	5f		 pop	 edi

; 246  : 			}			
; 247  : 			break;
; 248  : 		}
; 249  : 	}
; 250  : 
; 251  : 	return lAddress;

  0007e	33 c0		 xor	 eax, eax

; 252  : }

  00080	5b		 pop	 ebx
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
?CopyElement@CRowSet@@QAEPAVCElement@@PAV2@@Z ENDP	; CRowSet::CopyElement
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
;	COMDAT ?FindElement@CRowSet@@QAEPAVCElement@@PAVCExtractingDataOfModifyType@@AAW4ModifyType@CToolEnumData@@@Z
_TEXT	SEGMENT
_pExtractingData$ = 8					; size = 4
_modifyType$ = 12					; size = 4
?FindElement@CRowSet@@QAEPAVCElement@@PAVCExtractingDataOfModifyType@@AAW4ModifyType@CToolEnumData@@@Z PROC ; CRowSet::FindElement, COMDAT
; _this$ = ecx

; 203  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 204  : 	for(int nIndex = 0; nIndex < m_ElementList.GetCount(); nIndex++){

  0000b	33 f6		 xor	 esi, esi
  0000d	39 77 14	 cmp	 DWORD PTR [edi+20], esi
  00010	7e 40		 jle	 SHORT $LN3@FindElemen
$LL4@FindElemen:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1002 :         return _Mysize() == 0;

  00012	83 7f 14 00	 cmp	 DWORD PTR [edi+20], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 198  : 		if(m_deque.empty())

  00016	75 04		 jne	 SHORT $LN8@FindElemen

; 199  : 			return NULL;

  00018	33 db		 xor	 ebx, ebx
  0001a	eb 1d		 jmp	 SHORT $LN7@FindElemen
$LN8@FindElemen:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 43   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  0001c	8b 47 10	 mov	 eax, DWORD PTR [edi+16]

; 78   :         _Myoff += _Off;

  0001f	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00022	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 78   :         _Myoff += _Off;

  00025	8b ca		 mov	 ecx, edx

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00027	48		 dec	 eax

; 78   :         _Myoff += _Off;

  00028	c1 e9 02	 shr	 ecx, 2

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0002b	23 c8		 and	 ecx, eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 201  : 		return m_deque[nIndex];

  0002d	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 48   :         return _Mycont->_Map[_Block][_Off];

  00030	83 e2 03	 and	 edx, 3
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 201  : 		return m_deque[nIndex];

  00033	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00036	8b 1c 90	 mov	 ebx, DWORD PTR [eax+edx*4]
$LN7@FindElemen:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 207  : 		modifyType = pElement->GetModifyType(pExtractingData);

  00039	8b 03		 mov	 eax, DWORD PTR [ebx]
  0003b	8b cb		 mov	 ecx, ebx
  0003d	ff 75 08	 push	 DWORD PTR _pExtractingData$[ebp]
  00040	ff 50 14	 call	 DWORD PTR [eax+20]
  00043	8b 4d 0c	 mov	 ecx, DWORD PTR _modifyType$[ebp]
  00046	89 01		 mov	 DWORD PTR [ecx], eax

; 208  : 		if(modifyType != CToolEnumData::MODIFY_NONE)

  00048	85 c0		 test	 eax, eax
  0004a	75 11		 jne	 SHORT $LN33@FindElemen

; 204  : 	for(int nIndex = 0; nIndex < m_ElementList.GetCount(); nIndex++){

  0004c	46		 inc	 esi
  0004d	3b 77 14	 cmp	 esi, DWORD PTR [edi+20]
  00050	7c c0		 jl	 SHORT $LL4@FindElemen
$LN3@FindElemen:
  00052	5f		 pop	 edi

; 209  : 			return pElement;
; 210  : 	}
; 211  : 	return NULL;
; 212  : }

  00053	5e		 pop	 esi
  00054	33 c0		 xor	 eax, eax
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 08 00	 ret	 8
$LN33@FindElemen:
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	8b c3		 mov	 eax, ebx
  00061	5b		 pop	 ebx
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 08 00	 ret	 8
?FindElement@CRowSet@@QAEPAVCElement@@PAVCExtractingDataOfModifyType@@AAW4ModifyType@CToolEnumData@@@Z ENDP ; CRowSet::FindElement
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
;	COMDAT ?Delete@CRowSet@@QAE_NPAVCElement@@_N@Z
_TEXT	SEGMENT
_pElement$ = 8						; size = 4
_bCheckSameElement$ = 12				; size = 1
?Delete@CRowSet@@QAE_NPAVCElement@@_N@Z PROC		; CRowSet::Delete, COMDAT
; _this$ = ecx

; 166  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 167  : 	assert(pElement != NULL);
; 168  : 	if(bCheckSameElement && !IsInSameElement(pElement))

  00003	80 7d 0c 00	 cmp	 BYTE PTR _bCheckSameElement$[ebp], 0
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _pElement$[ebp]
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	74 10		 je	 SHORT $LN2@Delete
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ?IsInSameElement@CRowSet@@QBE_NPBVCElement@@@Z ; CRowSet::IsInSameElement
  00016	84 c0		 test	 al, al
  00018	75 06		 jne	 SHORT $LN2@Delete

; 174  : }

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
$LN2@Delete:

; 169  : 		return false;
; 170  : 
; 171  : 	CElementFactory::Delete(pElement);

  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?Delete@CElementFactory@@SAXPAVCElement@@@Z ; CElementFactory::Delete
  00026	83 c4 04	 add	 esp, 4

; 172  : 	m_ElementList.RemoveAt(pElement);

  00029	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 ?RemoveAt@?$CDequePointerList@VCElement@@@@QAEXPAVCElement@@@Z ; CDequePointerList<CElement>::RemoveAt
  00032	5f		 pop	 edi

; 173  : 	return true;

  00033	b0 01		 mov	 al, 1

; 174  : }

  00035	5e		 pop	 esi
  00036	5d		 pop	 ebp
  00037	c2 08 00	 ret	 8
?Delete@CRowSet@@QAE_NPAVCElement@@_N@Z ENDP		; CRowSet::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
;	COMDAT ?Delete@CRowSet@@QAE_NW4ElementType@CToolEnumData@@AAV?$CDequePointerList@VCElement@@@@@Z
_TEXT	SEGMENT
_elementList$ = -48					; size = 20
_this$1$ = -28						; size = 4
__Tmp$2 = -24						; size = 8
__Tmp$3 = -24						; size = 8
tv1768 = -20						; size = 4
__Newoff$1$ = -20					; size = 4
$T4 = -13						; size = 1
__$EHRec$ = -12						; size = 12
_eElementTYPE$ = 8					; size = 4
tv1767 = 12						; size = 4
$T5 = 12						; size = 4
_deletedElementList$ = 12				; size = 4
?Delete@CRowSet@@QAE_NW4ElementType@CToolEnumData@@AAV?$CDequePointerList@VCElement@@@@@Z PROC ; CRowSet::Delete, COMDAT
; _this$ = ecx

; 141  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Delete@CRowSet@@QAE_NW4ElementType@CToolEnumData@@AAV?$CDequePointerList@VCElement@@@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	89 75 e4	 mov	 DWORD PTR _this$1$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  0002d	6a 08		 push	 8

; 1033 :     _Container_proxy* _Myproxy = nullptr;

  0002f	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _elementList$[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 555  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

  00036	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _elementList$[ebp+4], 0
  0003d	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _elementList$[ebp+8], 0
  00044	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _elementList$[ebp+12], 0
  0004b	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _elementList$[ebp+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00052	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 1021 :         _New_proxy->_Mycont = this;

  00057	8d 4d d0	 lea	 ecx, DWORD PTR _elementList$[ebp]

; 79   :         return ::operator new(_Bytes);

  0005a	83 c4 04	 add	 esp, 4

; 1003 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

  0005d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1020 :         _Myproxy            = _New_proxy;

  00064	89 45 d0	 mov	 DWORD PTR _elementList$[ebp], eax

; 1021 :         _New_proxy->_Mycont = this;

  00067	89 08		 mov	 DWORD PTR [eax], ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 107  : 	for(int nIndex = 0; nIndex < m_ElementList.GetCount(); nIndex++){

  00069	33 db		 xor	 ebx, ebx

; 142  : 	CDequePointerList<CElement> elementList;

  0006b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 107  : 	for(int nIndex = 0; nIndex < m_ElementList.GetCount(); nIndex++){

  00072	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  00075	0f 8e d1 00 00
	00		 jle	 $LN367@Delete
  0007b	0f 1f 44 00 00	 npad	 5
$LL60@Delete:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1002 :         return _Mysize() == 0;

  00080	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 198  : 		if(m_deque.empty())

  00084	75 04		 jne	 SHORT $LN64@Delete

; 199  : 			return NULL;

  00086	33 ff		 xor	 edi, edi
  00088	eb 20		 jmp	 SHORT $LN63@Delete
$LN64@Delete:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 43   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  0008a	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 202  :         _Deque_unchecked_iterator _Tmp = *this;

  0008d	89 45 ec	 mov	 DWORD PTR __Tmp$3[ebp+4], eax

; 78   :         _Myoff += _Off;

  00090	8d 14 18	 lea	 edx, DWORD PTR [eax+ebx]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00093	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 78   :         _Myoff += _Off;

  00096	8b ca		 mov	 ecx, edx

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00098	48		 dec	 eax

; 78   :         _Myoff += _Off;

  00099	c1 e9 02	 shr	 ecx, 2

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0009c	23 c8		 and	 ecx, eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 201  : 		return m_deque[nIndex];

  0009e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 48   :         return _Mycont->_Map[_Block][_Off];

  000a1	83 e2 03	 and	 edx, 3
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 201  : 		return m_deque[nIndex];

  000a4	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  000a7	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]
$LN63@Delete:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 110  : 		if(pElement->GetElementType() == eElementTYPE)

  000aa	8b 07		 mov	 eax, DWORD PTR [edi]
  000ac	8b cf		 mov	 ecx, edi
  000ae	ff 50 04	 call	 DWORD PTR [eax+4]
  000b1	3b 45 08	 cmp	 eax, DWORD PTR _eElementTYPE$[ebp]
  000b4	0f 85 83 00 00
	00		 jne	 $LN366@Delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1106 :         if ((_Myoff() + _Mysize()) % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  000ba	8b 55 dc	 mov	 edx, DWORD PTR _elementList$[ebp+12]
  000bd	8b 75 e0	 mov	 esi, DWORD PTR _elementList$[ebp+16]
  000c0	8b 4d d8	 mov	 ecx, DWORD PTR _elementList$[ebp+8]
  000c3	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  000c6	a8 03		 test	 al, 3
  000c8	75 1d		 jne	 SHORT $LN93@Delete
  000ca	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000cd	c1 e8 02	 shr	 eax, 2
  000d0	3b c8		 cmp	 ecx, eax
  000d2	77 13		 ja	 SHORT $LN93@Delete

; 1107 :             _Growmap(1);

  000d4	6a 01		 push	 1
  000d6	8d 4d d0	 lea	 ecx, DWORD PTR _elementList$[ebp]
  000d9	e8 00 00 00 00	 call	 ?_Growmap@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@AAEXI@Z ; std::deque<CElement *,std::allocator<CElement *> >::_Growmap
  000de	8b 75 e0	 mov	 esi, DWORD PTR _elementList$[ebp+16]
  000e1	8b 55 dc	 mov	 edx, DWORD PTR _elementList$[ebp+12]
  000e4	8b 4d d8	 mov	 ecx, DWORD PTR _elementList$[ebp+8]
$LN93@Delete:

; 1108 :         }
; 1109 :         _Myoff() &= _Mapsize() * _Block_size - 1;

  000e7	8d 04 8d ff ff
	ff ff		 lea	 eax, DWORD PTR [ecx*4-1]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  000ee	49		 dec	 ecx

; 1109 :         _Myoff() &= _Mapsize() * _Block_size - 1;

  000ef	23 d0		 and	 edx, eax

; 1110 :         size_type _Newoff = _Myoff() + _Mysize();

  000f1	03 f2		 add	 esi, edx
  000f3	89 55 dc	 mov	 DWORD PTR _elementList$[ebp+12], edx

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  000f6	8b c6		 mov	 eax, esi
  000f8	c1 e8 02	 shr	 eax, 2
  000fb	23 c8		 and	 ecx, eax

; 1112 :         if (_Map()[_Block] == nullptr) {

  000fd	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00104	8b 4d d4	 mov	 ecx, DWORD PTR _elementList$[ebp+4]
  00107	89 45 ec	 mov	 DWORD PTR tv1768[ebp], eax
  0010a	83 3c 01 00	 cmp	 DWORD PTR [ecx+eax], 0
  0010e	75 18		 jne	 SHORT $LN94@Delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00110	6a 10		 push	 16			; 00000010H
  00112	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1113 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  00117	8b 4d d4	 mov	 ecx, DWORD PTR _elementList$[ebp+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  0011a	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1113 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  0011d	8b 55 ec	 mov	 edx, DWORD PTR tv1768[ebp]
  00120	89 04 11	 mov	 DWORD PTR [ecx+edx], eax
  00123	8b c2		 mov	 eax, edx
  00125	8b 4d d4	 mov	 ecx, DWORD PTR _elementList$[ebp+4]
$LN94@Delete:

; 1116 :         _Alty_traits::construct(

  00128	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  0012b	83 e6 03	 and	 esi, 3
  0012e	89 3c b0	 mov	 DWORD PTR [eax+esi*4], edi

; 1119 :         ++_Mysize();

  00131	8b 45 e0	 mov	 eax, DWORD PTR _elementList$[ebp+16]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 110  : 		if(pElement->GetElementType() == eElementTYPE)

  00134	8b 75 e4	 mov	 esi, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1119 :         ++_Mysize();

  00137	40		 inc	 eax
  00138	89 45 e0	 mov	 DWORD PTR _elementList$[ebp+16], eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 110  : 		if(pElement->GetElementType() == eElementTYPE)

  0013b	eb 03		 jmp	 SHORT $LN58@Delete
$LN366@Delete:
  0013d	8b 45 e0	 mov	 eax, DWORD PTR _elementList$[ebp+16]
$LN58@Delete:

; 107  : 	for(int nIndex = 0; nIndex < m_ElementList.GetCount(); nIndex++){

  00140	43		 inc	 ebx
  00141	3b 5e 14	 cmp	 ebx, DWORD PTR [esi+20]
  00144	0f 8c 36 ff ff
	ff		 jl	 $LL60@Delete
  0014a	eb 03		 jmp	 SHORT $LN59@Delete
$LN367@Delete:
  0014c	8b 45 e0	 mov	 eax, DWORD PTR _elementList$[ebp+16]
$LN59@Delete:

; 143  : 	GetElementList(eElementTYPE, elementList);
; 144  : 	if(elementList.GetCount() <= 0)

  0014f	c6 45 f3 00	 mov	 BYTE PTR $T4[ebp], 0
  00153	85 c0		 test	 eax, eax
  00155	0f 8e f9 00 00
	00		 jle	 $LN372@Delete

; 145  : 		return false;
; 146  : 
; 147  : 	bool bIsDeleted = false;
; 148  : 	for(int nIndex = 0; nIndex < elementList.GetCount(); nIndex++)

  0015b	33 db		 xor	 ebx, ebx
  0015d	85 c0		 test	 eax, eax
  0015f	0f 8e ef 00 00
	00		 jle	 $LN372@Delete
  00165	8b 75 0c	 mov	 esi, DWORD PTR _deletedElementList$[ebp]
$LL4@Delete:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1002 :         return _Mysize() == 0;

  00168	85 c0		 test	 eax, eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 198  : 		if(m_deque.empty())

  0016a	75 04		 jne	 SHORT $LN131@Delete

; 199  : 			return NULL;

  0016c	33 ff		 xor	 edi, edi
  0016e	eb 23		 jmp	 SHORT $LN130@Delete
$LN131@Delete:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 43   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  00170	8b 45 dc	 mov	 eax, DWORD PTR _elementList$[ebp+12]
  00173	8d 7d d0	 lea	 edi, DWORD PTR _elementList$[ebp]

; 202  :         _Deque_unchecked_iterator _Tmp = *this;

  00176	89 45 ec	 mov	 DWORD PTR __Tmp$2[ebp+4], eax

; 78   :         _Myoff += _Off;

  00179	8d 14 18	 lea	 edx, DWORD PTR [eax+ebx]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0017c	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 78   :         _Myoff += _Off;

  0017f	8b ca		 mov	 ecx, edx

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00181	48		 dec	 eax

; 78   :         _Myoff += _Off;

  00182	c1 e9 02	 shr	 ecx, 2

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00185	23 c8		 and	 ecx, eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 201  : 		return m_deque[nIndex];

  00187	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 48   :         return _Mycont->_Map[_Block][_Off];

  0018a	83 e2 03	 and	 edx, 3
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 201  : 		return m_deque[nIndex];

  0018d	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00190	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]
$LN130@Delete:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 152  : 		if(pElement->GetElementType() != eElementTYPE)

  00193	8b 07		 mov	 eax, DWORD PTR [edi]
  00195	8b cf		 mov	 ecx, edi
  00197	ff 50 04	 call	 DWORD PTR [eax+4]
  0019a	3b 45 08	 cmp	 eax, DWORD PTR _eElementTYPE$[ebp]
  0019d	0f 85 a3 00 00
	00		 jne	 $LN2@Delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1106 :         if ((_Myoff() + _Mysize()) % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  001a3	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  001a6	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  001a9	89 4d 0c	 mov	 DWORD PTR $T5[ebp], ecx
  001ac	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  001af	a8 03		 test	 al, 3
  001b1	75 20		 jne	 SHORT $LN160@Delete
  001b3	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  001b6	89 4d 0c	 mov	 DWORD PTR $T5[ebp], ecx
  001b9	c1 e8 02	 shr	 eax, 2
  001bc	39 46 08	 cmp	 DWORD PTR [esi+8], eax
  001bf	77 12		 ja	 SHORT $LN160@Delete

; 1107 :             _Growmap(1);

  001c1	6a 01		 push	 1
  001c3	8b ce		 mov	 ecx, esi
  001c5	e8 00 00 00 00	 call	 ?_Growmap@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@AAEXI@Z ; std::deque<CElement *,std::allocator<CElement *> >::_Growmap
  001ca	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  001cd	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  001d0	89 45 0c	 mov	 DWORD PTR $T5[ebp], eax
$LN160@Delete:

; 1108 :         }
; 1109 :         _Myoff() &= _Mapsize() * _Block_size - 1;

  001d3	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001d6	8d 04 8d ff ff
	ff ff		 lea	 eax, DWORD PTR [ecx*4-1]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  001dd	49		 dec	 ecx

; 1109 :         _Myoff() &= _Mapsize() * _Block_size - 1;

  001de	23 c2		 and	 eax, edx

; 1110 :         size_type _Newoff = _Myoff() + _Mysize();

  001e0	8b 55 0c	 mov	 edx, DWORD PTR $T5[ebp]
  001e3	03 d0		 add	 edx, eax
  001e5	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  001e8	8b c2		 mov	 eax, edx

; 1110 :         size_type _Newoff = _Myoff() + _Mysize();

  001ea	89 55 ec	 mov	 DWORD PTR __Newoff$1$[ebp], edx

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  001ed	c1 e8 02	 shr	 eax, 2
  001f0	23 c8		 and	 ecx, eax

; 1112 :         if (_Map()[_Block] == nullptr) {

  001f2	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  001f9	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  001fc	89 45 0c	 mov	 DWORD PTR tv1767[ebp], eax
  001ff	83 3c 01 00	 cmp	 DWORD PTR [ecx+eax], 0
  00203	75 1c		 jne	 SHORT $LN161@Delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00205	6a 10		 push	 16			; 00000010H
  00207	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1113 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  0020c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  0020f	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1113 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  00212	8b 55 0c	 mov	 edx, DWORD PTR tv1767[ebp]
  00215	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax
  00218	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0021b	8b 55 ec	 mov	 edx, DWORD PTR __Newoff$1$[ebp]
  0021e	8b 45 0c	 mov	 eax, DWORD PTR tv1767[ebp]
$LN161@Delete:

; 1116 :         _Alty_traits::construct(

  00221	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00224	83 e2 03	 and	 edx, 3
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 171  : 	CElementFactory::Delete(pElement);

  00227	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1116 :         _Alty_traits::construct(

  00228	89 3c 90	 mov	 DWORD PTR [eax+edx*4], edi

; 1119 :         ++_Mysize();

  0022b	ff 46 10	 inc	 DWORD PTR [esi+16]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 171  : 	CElementFactory::Delete(pElement);

  0022e	e8 00 00 00 00	 call	 ?Delete@CElementFactory@@SAXPAVCElement@@@Z ; CElementFactory::Delete

; 172  : 	m_ElementList.RemoveAt(pElement);

  00233	8b 4d e4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00236	83 c4 04	 add	 esp, 4
  00239	57		 push	 edi
  0023a	8d 49 04	 lea	 ecx, DWORD PTR [ecx+4]
  0023d	e8 00 00 00 00	 call	 ?RemoveAt@?$CDequePointerList@VCElement@@@@QAEXPAVCElement@@@Z ; CDequePointerList<CElement>::RemoveAt

; 153  : 			continue;
; 154  : 
; 155  : 		deletedElementList.AddTail(pElement);
; 156  : 		Delete(pElement, false);
; 157  : 		bIsDeleted = true;

  00242	c6 45 f3 01	 mov	 BYTE PTR $T4[ebp], 1
$LN2@Delete:

; 145  : 		return false;
; 146  : 
; 147  : 	bool bIsDeleted = false;
; 148  : 	for(int nIndex = 0; nIndex < elementList.GetCount(); nIndex++)

  00246	8b 45 e0	 mov	 eax, DWORD PTR _elementList$[ebp+16]
  00249	43		 inc	 ebx
  0024a	3b d8		 cmp	 ebx, eax
  0024c	0f 8c 16 ff ff
	ff		 jl	 $LL4@Delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1002 :         return _Mysize() == 0;

  00252	85 c0		 test	 eax, eax
$LN372@Delete:

; 1475 :         while (!empty()) {

  00254	8b 4d dc	 mov	 ecx, DWORD PTR _elementList$[ebp+12]
  00257	74 1c		 je	 SHORT $LN206@Delete
  00259	0f 1f 80 00 00
	00 00		 npad	 7
$LL205@Delete:

; 1146 :         if (--_Mysize() == 0) {

  00260	83 e8 01	 sub	 eax, 1
  00263	ba 00 00 00 00	 mov	 edx, 0
  00268	0f 44 ca	 cmove	 ecx, edx

; 1002 :         return _Mysize() == 0;

  0026b	85 c0		 test	 eax, eax

; 1475 :         while (!empty()) {

  0026d	75 f1		 jne	 SHORT $LL205@Delete

; 1146 :         if (--_Mysize() == 0) {

  0026f	89 45 e0	 mov	 DWORD PTR _elementList$[ebp+16], eax
  00272	89 4d dc	 mov	 DWORD PTR _elementList$[ebp+12], ecx
$LN206@Delete:

; 1479 :         for (size_type _Block = _Mapsize(); 0 < _Block;) { // free storage for a block and destroy pointer

  00275	8b 75 d8	 mov	 esi, DWORD PTR _elementList$[ebp+8]
  00278	8b 55 d4	 mov	 edx, DWORD PTR _elementList$[ebp+4]
  0027b	85 f6		 test	 esi, esi
  0027d	74 25		 je	 SHORT $LN208@Delete
  0027f	90		 npad	 1
$LL207@Delete:

; 1480 :             if (_Map()[--_Block]) { // free block and destroy its pointer

  00280	8b 44 b2 fc	 mov	 eax, DWORD PTR [edx+esi*4-4]
  00284	4e		 dec	 esi
  00285	85 c0		 test	 eax, eax
  00287	74 0e		 je	 SHORT $LN226@Delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00289	6a 10		 push	 16			; 00000010H
  0028b	50		 push	 eax
  0028c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00291	8b 55 d4	 mov	 edx, DWORD PTR _elementList$[ebp+4]
  00294	83 c4 08	 add	 esp, 8
$LN226@Delete:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1479 :         for (size_type _Block = _Mapsize(); 0 < _Block;) { // free storage for a block and destroy pointer

  00297	85 f6		 test	 esi, esi
  00299	75 e5		 jne	 SHORT $LL207@Delete
  0029b	8b 45 e0	 mov	 eax, DWORD PTR _elementList$[ebp+16]
  0029e	8b 4d dc	 mov	 ecx, DWORD PTR _elementList$[ebp+12]
  002a1	8b 75 d8	 mov	 esi, DWORD PTR _elementList$[ebp+8]
$LN208@Delete:

; 1481 :                 _Getal().deallocate(_Map()[_Block], _Block_size);
; 1482 :                 _Destroy_in_place(_Map()[_Block]);
; 1483 :             }
; 1484 :         }
; 1485 : 
; 1486 :         if (_Map() != _Mapptr()) {

  002a4	85 d2		 test	 edx, edx
  002a6	74 33		 je	 SHORT $LN244@Delete
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002a8	c1 e6 02	 shl	 esi, 2
  002ab	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  002ad	81 fe 00 10 00
	00		 cmp	 esi, 4096		; 00001000H
  002b3	72 16		 jb	 SHORT $LN254@Delete

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  002b5	8b 52 fc	 mov	 edx, DWORD PTR [edx-4]
  002b8	83 c6 23	 add	 esi, 35			; 00000023H
  002bb	2b c2		 sub	 eax, edx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002bd	83 c0 fc	 add	 eax, -4			; fffffffcH
  002c0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002c3	76 06		 jbe	 SHORT $LN254@Delete
  002c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN254@Delete:

; 255  :         ::operator delete(_Ptr, _Bytes);

  002cb	56		 push	 esi
  002cc	52		 push	 edx
  002cd	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002d2	8b 45 e0	 mov	 eax, DWORD PTR _elementList$[ebp+16]
  002d5	83 c4 08	 add	 esp, 8
  002d8	8b 4d dc	 mov	 ecx, DWORD PTR _elementList$[ebp+12]
$LN244@Delete:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1002 :         return _Mysize() == 0;

  002db	85 c0		 test	 eax, eax

; 1475 :         while (!empty()) {

  002dd	74 16		 je	 SHORT $LN263@Delete
  002df	90		 npad	 1
$LL262@Delete:

; 1146 :         if (--_Mysize() == 0) {

  002e0	83 e8 01	 sub	 eax, 1
  002e3	ba 00 00 00 00	 mov	 edx, 0
  002e8	0f 44 ca	 cmove	 ecx, edx

; 1002 :         return _Mysize() == 0;

  002eb	85 c0		 test	 eax, eax

; 1475 :         while (!empty()) {

  002ed	75 f1		 jne	 SHORT $LL262@Delete

; 1146 :         if (--_Mysize() == 0) {

  002ef	89 45 e0	 mov	 DWORD PTR _elementList$[ebp+16], eax
  002f2	89 4d dc	 mov	 DWORD PTR _elementList$[ebp+12], ecx
$LN263@Delete:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  002f5	8b 4d d0	 mov	 ecx, DWORD PTR _elementList$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  002f8	6a 08		 push	 8
  002fa	51		 push	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1490 :         _Mapsize() = 0;

  002fb	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _elementList$[ebp+8], 0

; 1491 :         _Map()     = _Mapptr();

  00302	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _elementList$[ebp+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  00309	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _elementList$[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00310	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 160  : 	return bIsDeleted;

  00315	8a 45 f3	 mov	 al, BYTE PTR $T4[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00318	83 c4 08	 add	 esp, 8
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 161  : }

  0031b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0031e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00325	59		 pop	 ecx
  00326	5f		 pop	 edi
  00327	5e		 pop	 esi
  00328	5b		 pop	 ebx
  00329	8b e5		 mov	 esp, ebp
  0032b	5d		 pop	 ebp
  0032c	c2 08 00	 ret	 8
$LN371@Delete:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Delete@CRowSet@@QAE_NW4ElementType@CToolEnumData@@AAV?$CDequePointerList@VCElement@@@@@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _elementList$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CDequePointerList@VCElement@@@@QAE@XZ ; CDequePointerList<CElement>::~CDequePointerList<CElement>
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?Delete@CRowSet@@QAE_NW4ElementType@CToolEnumData@@AAV?$CDequePointerList@VCElement@@@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Delete@CRowSet@@QAE_NW4ElementType@CToolEnumData@@AAV?$CDequePointerList@VCElement@@@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Delete@CRowSet@@QAE_NW4ElementType@CToolEnumData@@AAV?$CDequePointerList@VCElement@@@@@Z ENDP ; CRowSet::Delete
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
;	COMDAT ?Delete@CRowSet@@QAE_NJH@Z
_TEXT	SEGMENT
__Tmp$1$ = -8						; size = 4
_bFind$2$ = -1						; size = 1
_lElementAddres$ = 8					; size = 4
_bListOnly$ = 12					; size = 4
?Delete@CRowSet@@QAE_NJH@Z PROC				; CRowSet::Delete, COMDAT
; _this$ = ecx

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 178  : 	assert(lElementAddres != 0);	
; 179  : 
; 180  : 	bool bFind = false;
; 181  : 	long lTempAdress = 0;
; 182  : 	CElement *pElement = NULL;
; 183  : 	for(int i=0;i<GetElementCount();i++)

  00009	33 c0		 xor	 eax, eax
  0000b	57		 push	 edi
  0000c	32 c9		 xor	 cl, cl
  0000e	88 4d ff	 mov	 BYTE PTR _bFind$2$[ebp], cl
  00011	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
  00014	85 ff		 test	 edi, edi
  00016	7e 5e		 jle	 SHORT $LN3@Delete
  00018	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0001b	89 4d f8	 mov	 DWORD PTR __Tmp$1$[ebp], ecx
  0001e	56		 push	 esi
  0001f	90		 npad	 1
$LL4@Delete:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1002 :         return _Mysize() == 0;

  00020	85 ff		 test	 edi, edi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 198  : 		if(m_deque.empty())

  00022	75 04		 jne	 SHORT $LN9@Delete

; 199  : 			return NULL;

  00024	33 f6		 xor	 esi, esi
  00026	eb 1d		 jmp	 SHORT $LN8@Delete
$LN9@Delete:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 43   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  00028	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]

; 78   :         _Myoff += _Off;

  0002b	8d 34 01	 lea	 esi, DWORD PTR [ecx+eax]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0002e	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]

; 78   :         _Myoff += _Off;

  00031	8b d6		 mov	 edx, esi

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00033	49		 dec	 ecx

; 78   :         _Myoff += _Off;

  00034	c1 ea 02	 shr	 edx, 2

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00037	23 d1		 and	 edx, ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 201  : 		return m_deque[nIndex];

  00039	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 48   :         return _Mycont->_Map[_Block][_Off];

  0003c	83 e6 03	 and	 esi, 3
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 201  : 		return m_deque[nIndex];

  0003f	8b 0c 91	 mov	 ecx, DWORD PTR [ecx+edx*4]
  00042	8b 34 b1	 mov	 esi, DWORD PTR [ecx+esi*4]
$LN8@Delete:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 187  : 		if(lTempAdress == lElementAddres)

  00045	3b 75 08	 cmp	 esi, DWORD PTR _lElementAddres$[ebp]
  00048	74 11		 je	 SHORT $LN34@Delete

; 178  : 	assert(lElementAddres != 0);	
; 179  : 
; 180  : 	bool bFind = false;
; 181  : 	long lTempAdress = 0;
; 182  : 	CElement *pElement = NULL;
; 183  : 	for(int i=0;i<GetElementCount();i++)

  0004a	40		 inc	 eax
  0004b	3b c7		 cmp	 eax, edi
  0004d	7c d1		 jl	 SHORT $LL4@Delete

; 194  : 			break;
; 195  : 		}
; 196  : 	}	
; 197  : 	return bFind;

  0004f	8a 45 ff	 mov	 al, BYTE PTR _bFind$2$[ebp]
  00052	5e		 pop	 esi
  00053	5f		 pop	 edi

; 198  : }

  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 08 00	 ret	 8
$LN34@Delete:

; 188  : 		{
; 189  : 			if(bListOnly == FALSE)

  0005b	83 7d 0c 00	 cmp	 DWORD PTR _bListOnly$[ebp], 0
  0005f	75 09		 jne	 SHORT $LN6@Delete

; 190  : 				CElementFactory::Delete(pElement);

  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 ?Delete@CElementFactory@@SAXPAVCElement@@@Z ; CElementFactory::Delete
  00067	83 c4 04	 add	 esp, 4
$LN6@Delete:

; 191  : 			
; 192  : 			m_ElementList.RemoveAt(pElement);

  0006a	8b 4d f8	 mov	 ecx, DWORD PTR __Tmp$1$[ebp]
  0006d	56		 push	 esi
  0006e	e8 00 00 00 00	 call	 ?RemoveAt@?$CDequePointerList@VCElement@@@@QAEXPAVCElement@@@Z ; CDequePointerList<CElement>::RemoveAt

; 193  : 			bFind = true;

  00073	b0 01		 mov	 al, 1
  00075	5e		 pop	 esi
$LN3@Delete:

; 198  : }

  00076	5f		 pop	 edi
  00077	5b		 pop	 ebx
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 08 00	 ret	 8
?Delete@CRowSet@@QAE_NJH@Z ENDP				; CRowSet::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
;	COMDAT ?DeleteAll@CRowSet@@QAEXXZ
_TEXT	SEGMENT
?DeleteAll@CRowSet@@QAEXXZ PROC				; CRowSet::DeleteAll, COMDAT
; _this$ = ecx

; 129  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	57		 push	 edi

; 130  : 	while(m_ElementList.GetCount() > 0){

  0000a	83 7b 14 00	 cmp	 DWORD PTR [ebx+20], 0
  0000e	7e 44		 jle	 SHORT $LN33@DeleteAll
  00010	56		 push	 esi
$LL2@DeleteAll:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1002 :         return _Mysize() == 0;

  00011	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  00014	85 c9		 test	 ecx, ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 191  : 		if(m_deque.empty())

  00016	75 04		 jne	 SHORT $LN6@DeleteAll

; 192  : 			return NULL;

  00018	33 f6		 xor	 esi, esi
  0001a	eb 1f		 jmp	 SHORT $LN5@DeleteAll
$LN6@DeleteAll:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 917  :         return _Unchecked_const_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  0001c	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 193  : 		return m_deque.back();

  0001f	8b 73 08	 mov	 esi, DWORD PTR [ebx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 917  :         return _Unchecked_const_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00022	03 c1		 add	 eax, ecx

; 67   :         --_Myoff;

  00024	8d 50 ff	 lea	 edx, DWORD PTR [eax-1]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00027	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  0002a	8b ca		 mov	 ecx, edx
  0002c	48		 dec	 eax
  0002d	c1 e9 02	 shr	 ecx, 2
  00030	23 c8		 and	 ecx, eax

; 48   :         return _Mycont->_Map[_Block][_Off];

  00032	83 e2 03	 and	 edx, 3
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 193  : 		return m_deque.back();

  00035	8b 34 8e	 mov	 esi, DWORD PTR [esi+ecx*4]
  00038	8b 34 96	 mov	 esi, DWORD PTR [esi+edx*4]
$LN5@DeleteAll:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 171  : 	CElementFactory::Delete(pElement);

  0003b	56		 push	 esi
  0003c	e8 00 00 00 00	 call	 ?Delete@CElementFactory@@SAXPAVCElement@@@Z ; CElementFactory::Delete
  00041	83 c4 04	 add	 esp, 4

; 172  : 	m_ElementList.RemoveAt(pElement);

  00044	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00047	56		 push	 esi
  00048	e8 00 00 00 00	 call	 ?RemoveAt@?$CDequePointerList@VCElement@@@@QAEXPAVCElement@@@Z ; CDequePointerList<CElement>::RemoveAt

; 130  : 	while(m_ElementList.GetCount() > 0){

  0004d	83 7b 14 00	 cmp	 DWORD PTR [ebx+20], 0
  00051	7f be		 jg	 SHORT $LL2@DeleteAll
  00053	5e		 pop	 esi
$LN33@DeleteAll:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1332 :         _Tidy();

  00054	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00057	e8 00 00 00 00	 call	 ?_Tidy@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@AAEXXZ ; std::deque<CElement *,std::allocator<CElement *> >::_Tidy
  0005c	5f		 pop	 edi
  0005d	5b		 pop	 ebx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 135  : }

  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
?DeleteAll@CRowSet@@QAEXXZ ENDP				; CRowSet::DeleteAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
;	COMDAT ?AddElement@CRowSet@@QAEXPAVCElement@@@Z
_TEXT	SEGMENT
_pElement$ = 8						; size = 4
?AddElement@CRowSet@@QAEXPAVCElement@@@Z PROC		; CRowSet::AddElement, COMDAT
; _this$ = ecx

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 119  : 	assert(pElement != NULL);
; 120  : 	if(IsInSameElement(pElement))

  00004	ff 75 08	 push	 DWORD PTR _pElement$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?IsInSameElement@CRowSet@@QBE_NPBVCElement@@@Z ; CRowSet::IsInSameElement
  0000e	84 c0		 test	 al, al
  00010	75 0b		 jne	 SHORT $LN1@AddElement

; 121  : 		return;
; 122  : 
; 123  : 	m_ElementList.AddTail(pElement);

  00012	ff 75 08	 push	 DWORD PTR _pElement$[ebp]
  00015	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00018	e8 00 00 00 00	 call	 ?AddTail@?$CDequePointerList@VCElement@@@@QAEXPAVCElement@@@Z ; CDequePointerList<CElement>::AddTail
$LN1@AddElement:
  0001d	5e		 pop	 esi

; 124  : }

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?AddElement@CRowSet@@QAEXPAVCElement@@@Z ENDP		; CRowSet::AddElement
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
;	COMDAT ?GetElementList@CRowSet@@QAEXW4ElementType@CToolEnumData@@AAV?$CDequePointerList@VCElement@@@@@Z
_TEXT	SEGMENT
__Tmp$1 = -12						; size = 8
__Newoff$1$ = -8					; size = 4
_nIndex$1$ = -4						; size = 4
_eElementTYPE$ = 8					; size = 4
tv663 = 12						; size = 4
$T2 = 12						; size = 4
_elementList$ = 12					; size = 4
?GetElementList@CRowSet@@QAEXW4ElementType@CToolEnumData@@AAV?$CDequePointerList@VCElement@@@@@Z PROC ; CRowSet::GetElementList, COMDAT
; _this$ = ecx

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 107  : 	for(int nIndex = 0; nIndex < m_ElementList.GetCount(); nIndex++){

  00009	33 c9		 xor	 ecx, ecx
  0000b	89 4d fc	 mov	 DWORD PTR _nIndex$1$[ebp], ecx
  0000e	39 4b 14	 cmp	 DWORD PTR [ebx+20], ecx
  00011	0f 8e df 00 00
	00		 jle	 $LN3@GetElement

; 108  : 		CElement* pElement = m_ElementList.GetAt(nIndex);

  00017	56		 push	 esi
  00018	8b 75 0c	 mov	 esi, DWORD PTR _elementList$[ebp]
  0001b	57		 push	 edi
  0001c	0f 1f 40 00	 npad	 4
$LL4@GetElement:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1002 :         return _Mysize() == 0;

  00020	83 7b 14 00	 cmp	 DWORD PTR [ebx+20], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 198  : 		if(m_deque.empty())

  00024	75 04		 jne	 SHORT $LN8@GetElement

; 199  : 			return NULL;

  00026	33 ff		 xor	 edi, edi
  00028	eb 20		 jmp	 SHORT $LN7@GetElement
$LN8@GetElement:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 43   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  0002a	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]

; 202  :         _Deque_unchecked_iterator _Tmp = *this;

  0002d	89 45 f8	 mov	 DWORD PTR __Tmp$1[ebp+4], eax

; 78   :         _Myoff += _Off;

  00030	8d 14 08	 lea	 edx, DWORD PTR [eax+ecx]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00033	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]

; 78   :         _Myoff += _Off;

  00036	8b c2		 mov	 eax, edx

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00038	49		 dec	 ecx

; 78   :         _Myoff += _Off;

  00039	c1 e8 02	 shr	 eax, 2

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0003c	23 c8		 and	 ecx, eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 201  : 		return m_deque[nIndex];

  0003e	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 48   :         return _Mycont->_Map[_Block][_Off];

  00041	83 e2 03	 and	 edx, 3
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 201  : 		return m_deque[nIndex];

  00044	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00047	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]
$LN7@GetElement:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 110  : 		if(pElement->GetElementType() == eElementTYPE)

  0004a	8b 07		 mov	 eax, DWORD PTR [edi]
  0004c	8b cf		 mov	 ecx, edi
  0004e	ff 50 04	 call	 DWORD PTR [eax+4]
  00051	3b 45 08	 cmp	 eax, DWORD PTR _eElementTYPE$[ebp]
  00054	0f 85 8a 00 00
	00		 jne	 $LN2@GetElement
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1106 :         if ((_Myoff() + _Mysize()) % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  0005a	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0005d	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00060	89 4d 0c	 mov	 DWORD PTR $T2[ebp], ecx
  00063	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  00066	a8 03		 test	 al, 3
  00068	75 20		 jne	 SHORT $LN37@GetElement
  0006a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0006d	89 4d 0c	 mov	 DWORD PTR $T2[ebp], ecx
  00070	c1 e8 02	 shr	 eax, 2
  00073	39 46 08	 cmp	 DWORD PTR [esi+8], eax
  00076	77 12		 ja	 SHORT $LN37@GetElement

; 1107 :             _Growmap(1);

  00078	6a 01		 push	 1
  0007a	8b ce		 mov	 ecx, esi
  0007c	e8 00 00 00 00	 call	 ?_Growmap@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@AAEXI@Z ; std::deque<CElement *,std::allocator<CElement *> >::_Growmap
  00081	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00084	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00087	89 45 0c	 mov	 DWORD PTR $T2[ebp], eax
$LN37@GetElement:

; 1108 :         }
; 1109 :         _Myoff() &= _Mapsize() * _Block_size - 1;

  0008a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0008d	8d 04 8d ff ff
	ff ff		 lea	 eax, DWORD PTR [ecx*4-1]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00094	49		 dec	 ecx

; 1109 :         _Myoff() &= _Mapsize() * _Block_size - 1;

  00095	23 c2		 and	 eax, edx

; 1110 :         size_type _Newoff = _Myoff() + _Mysize();

  00097	8b 55 0c	 mov	 edx, DWORD PTR $T2[ebp]
  0009a	03 d0		 add	 edx, eax
  0009c	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0009f	8b c2		 mov	 eax, edx

; 1110 :         size_type _Newoff = _Myoff() + _Mysize();

  000a1	89 55 f8	 mov	 DWORD PTR __Newoff$1$[ebp], edx

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  000a4	c1 e8 02	 shr	 eax, 2
  000a7	23 c8		 and	 ecx, eax

; 1112 :         if (_Map()[_Block] == nullptr) {

  000a9	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  000b0	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000b3	89 45 0c	 mov	 DWORD PTR tv663[ebp], eax
  000b6	83 3c 01 00	 cmp	 DWORD PTR [ecx+eax], 0
  000ba	75 1c		 jne	 SHORT $LN38@GetElement
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  000bc	6a 10		 push	 16			; 00000010H
  000be	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1113 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  000c3	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  000c6	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1113 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  000c9	8b 55 0c	 mov	 edx, DWORD PTR tv663[ebp]
  000cc	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax
  000cf	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000d2	8b 55 f8	 mov	 edx, DWORD PTR __Newoff$1$[ebp]
  000d5	8b 45 0c	 mov	 eax, DWORD PTR tv663[ebp]
$LN38@GetElement:

; 1114 :         }
; 1115 : 
; 1116 :         _Alty_traits::construct(

  000d8	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  000db	83 e2 03	 and	 edx, 3
  000de	89 3c 90	 mov	 DWORD PTR [eax+edx*4], edi

; 1117 :             _Getal(), _Unfancy(_Map()[_Block] + _Newoff % _Block_size), _STD forward<_Tys>(_Vals)...);
; 1118 : 
; 1119 :         ++_Mysize();

  000e1	ff 46 10	 inc	 DWORD PTR [esi+16]
$LN2@GetElement:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 107  : 	for(int nIndex = 0; nIndex < m_ElementList.GetCount(); nIndex++){

  000e4	8b 4d fc	 mov	 ecx, DWORD PTR _nIndex$1$[ebp]
  000e7	41		 inc	 ecx
  000e8	89 4d fc	 mov	 DWORD PTR _nIndex$1$[ebp], ecx
  000eb	3b 4b 14	 cmp	 ecx, DWORD PTR [ebx+20]
  000ee	0f 8c 2c ff ff
	ff		 jl	 $LL4@GetElement
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
$LN3@GetElement:
  000f6	5b		 pop	 ebx

; 111  : 			elementList.AddTail(pElement);
; 112  : 	}
; 113  : }

  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 08 00	 ret	 8
?GetElementList@CRowSet@@QAEXW4ElementType@CToolEnumData@@AAV?$CDequePointerList@VCElement@@@@@Z ENDP ; CRowSet::GetElementList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
;	COMDAT ?GetElementList@CRowSet@@QAEXAAV?$CDequePointerList@VCElement@@@@@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
_nIndex$1$ = -4						; size = 4
_pElement$1$ = 8					; size = 4
_elementList$ = 8					; size = 4
?GetElementList@CRowSet@@QAEXAAV?$CDequePointerList@VCElement@@@@@Z PROC ; CRowSet::GetElementList, COMDAT
; _this$ = ecx

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 98   : 	for(int nIndex = 0; nIndex < m_ElementList.GetCount(); nIndex++){

  00006	33 d2		 xor	 edx, edx
  00008	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000b	89 55 fc	 mov	 DWORD PTR _nIndex$1$[ebp], edx
  0000e	39 51 14	 cmp	 DWORD PTR [ecx+20], edx
  00011	0f 8e c6 00 00
	00		 jle	 $LN3@GetElement
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 229  : 		m_deque.push_back(pItem);

  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	8b 75 08	 mov	 esi, DWORD PTR _elementList$[ebp]
  0001c	57		 push	 edi
  0001d	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 99   : 		CElement* pElement = m_ElementList.GetAt(nIndex);

  00020	8b fb		 mov	 edi, ebx
$LL4@GetElement:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1002 :         return _Mysize() == 0;

  00022	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 198  : 		if(m_deque.empty())

  00026	75 09		 jne	 SHORT $LN7@GetElement

; 199  : 			return NULL;

  00028	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _pElement$1$[ebp], 0
  0002f	eb 22		 jmp	 SHORT $LN6@GetElement
$LN7@GetElement:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 43   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  00031	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 78   :         _Myoff += _Off;

  00034	03 d0		 add	 edx, eax

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00036	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]

; 78   :         _Myoff += _Off;

  00039	8b c2		 mov	 eax, edx
  0003b	c1 e8 02	 shr	 eax, 2

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0003e	49		 dec	 ecx
  0003f	23 c8		 and	 ecx, eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 201  : 		return m_deque[nIndex];

  00041	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 48   :         return _Mycont->_Map[_Block][_Off];

  00044	83 e2 03	 and	 edx, 3
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 201  : 		return m_deque[nIndex];

  00047	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0004a	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  0004d	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  00050	89 45 08	 mov	 DWORD PTR _pElement$1$[ebp], eax
$LN6@GetElement:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1106 :         if ((_Myoff() + _Mysize()) % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  00053	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00056	8d 04 1a	 lea	 eax, DWORD PTR [edx+ebx]
  00059	a8 03		 test	 al, 3
  0005b	75 1a		 jne	 SHORT $LN36@GetElement
  0005d	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00060	c1 e8 02	 shr	 eax, 2
  00063	39 46 08	 cmp	 DWORD PTR [esi+8], eax
  00066	77 0f		 ja	 SHORT $LN36@GetElement

; 1107 :             _Growmap(1);

  00068	6a 01		 push	 1
  0006a	8b ce		 mov	 ecx, esi
  0006c	e8 00 00 00 00	 call	 ?_Growmap@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@AAEXI@Z ; std::deque<CElement *,std::allocator<CElement *> >::_Growmap
  00071	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00074	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
$LN36@GetElement:

; 1108 :         }
; 1109 :         _Myoff() &= _Mapsize() * _Block_size - 1;

  00077	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0007a	8d 04 8d ff ff
	ff ff		 lea	 eax, DWORD PTR [ecx*4-1]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00081	49		 dec	 ecx

; 1109 :         _Myoff() &= _Mapsize() * _Block_size - 1;

  00082	23 c2		 and	 eax, edx

; 1110 :         size_type _Newoff = _Myoff() + _Mysize();

  00084	03 f8		 add	 edi, eax
  00086	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00089	8b c7		 mov	 eax, edi
  0008b	c1 e8 02	 shr	 eax, 2
  0008e	23 c8		 and	 ecx, eax

; 1112 :         if (_Map()[_Block] == nullptr) {

  00090	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00093	83 3c 88 00	 cmp	 DWORD PTR [eax+ecx*4], 0
  00097	8d 1c 8d 00 00
	00 00		 lea	 ebx, DWORD PTR [ecx*4]
  0009e	75 13		 jne	 SHORT $LN79@GetElement
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  000a0	6a 10		 push	 16			; 00000010H
  000a2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1113 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  000a7	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  000aa	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1113 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  000ad	89 04 0b	 mov	 DWORD PTR [ebx+ecx], eax
  000b0	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
$LN79@GetElement:

; 1116 :         _Alty_traits::construct(

  000b3	8b 04 03	 mov	 eax, DWORD PTR [ebx+eax]
  000b6	83 e7 03	 and	 edi, 3
  000b9	8b 4d 08	 mov	 ecx, DWORD PTR _pElement$1$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 98   : 	for(int nIndex = 0; nIndex < m_ElementList.GetCount(); nIndex++){

  000bc	8b 55 fc	 mov	 edx, DWORD PTR _nIndex$1$[ebp]
  000bf	42		 inc	 edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1116 :         _Alty_traits::construct(

  000c0	89 0c b8	 mov	 DWORD PTR [eax+edi*4], ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 98   : 	for(int nIndex = 0; nIndex < m_ElementList.GetCount(); nIndex++){

  000c3	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1119 :         ++_Mysize();

  000c6	ff 46 10	 inc	 DWORD PTR [esi+16]
  000c9	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 98   : 	for(int nIndex = 0; nIndex < m_ElementList.GetCount(); nIndex++){

  000cc	8b fb		 mov	 edi, ebx
  000ce	89 55 fc	 mov	 DWORD PTR _nIndex$1$[ebp], edx
  000d1	3b 51 14	 cmp	 edx, DWORD PTR [ecx+20]
  000d4	0f 8c 48 ff ff
	ff		 jl	 $LL4@GetElement
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5b		 pop	 ebx
$LN3@GetElement:

; 100  : 		assert(pElement != NULL);
; 101  : 		elementList.AddTail(pElement);
; 102  : 	}
; 103  : }

  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c2 04 00	 ret	 4
?GetElementList@CRowSet@@QAEXAAV?$CDequePointerList@VCElement@@@@@Z ENDP ; CRowSet::GetElementList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
;	COMDAT ?GetSavedElementsData@CRowSet@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCOrder@@@Z
_TEXT	SEGMENT
$T2 = -20						; size = 4
_savedElementsData$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
$T3 = 12						; size = 4
_order$ = 12						; size = 4
?GetSavedElementsData@CRowSet@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCOrder@@@Z PROC ; CRowSet::GetSavedElementsData, COMDAT
; _this$ = ecx

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetSavedElementsData@CRowSet@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCOrder@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx

; 85   : 	CString savedElementsData("<Row>\r\n");

  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_07KMGGOLCB@?$DMRow?$DO?$AN?6@
  0002f	8d 4d f0	 lea	 ecx, DWORD PTR _savedElementsData$[ebp]
  00032	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z

; 86   : 	for(int nIndex = 0; nIndex < m_ElementList.GetCount(); nIndex++){

  0003f	33 ff		 xor	 edi, edi
  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00048	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  0004b	7e 55		 jle	 SHORT $LN3@GetSavedEl

; 87   : 		CElement* pElement = m_ElementList.GetAt(nIndex);

  0004d	8b 5d 0c	 mov	 ebx, DWORD PTR _order$[ebp]
$LL4@GetSavedEl:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 205  : 		if(m_deque.empty())

  00050	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00054	75 04		 jne	 SHORT $LN11@GetSavedEl

; 206  : 			return NULL;

  00056	33 c9		 xor	 ecx, ecx
  00058	eb 1d		 jmp	 SHORT $LN10@GetSavedEl
$LN11@GetSavedEl:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 909  :         return _Unchecked_const_iterator(_Myoff(), _STD addressof(_Get_data()));

  0005a	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0005d	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00060	49		 dec	 ecx

; 78   :         _Myoff += _Off;

  00061	8d 14 38	 lea	 edx, DWORD PTR [eax+edi]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00064	8b c2		 mov	 eax, edx
  00066	c1 e8 02	 shr	 eax, 2
  00069	23 c8		 and	 ecx, eax

; 48   :         return _Mycont->_Map[_Block][_Off];

  0006b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0006e	83 e2 03	 and	 edx, 3

; 48   :         return _Mycont->_Map[_Block][_Off];

  00071	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 208  : 		return m_deque[nIndex];

  00074	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
$LN10@GetSavedEl:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 89   : 		savedElementsData += pElement->GetSavedElementData(order);

  00077	53		 push	 ebx
  00078	8d 45 0c	 lea	 eax, DWORD PTR $T3[ebp]
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?GetSavedElementData@CElement@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCOrder@@@Z ; CElement::GetSavedElementData
  00081	50		 push	 eax
  00082	8d 4d f0	 lea	 ecx, DWORD PTR _savedElementsData$[ebp]
  00085	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV?$CSimpleStringT@D$00@1@@Z
  0008f	8d 4d 0c	 lea	 ecx, DWORD PTR $T3[ebp]
  00092	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0009c	47		 inc	 edi
  0009d	3b 7e 14	 cmp	 edi, DWORD PTR [esi+20]
  000a0	7c ae		 jl	 SHORT $LL4@GetSavedEl
$LN3@GetSavedEl:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h

; 2401 : 		CStringT strResult( str1.GetManager() );

  000a2	8d 4d f0	 lea	 ecx, DWORD PTR _savedElementsData$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 92   : 	return savedElementsData + "<\\Row>\r\n";

  000a5	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h

; 2401 : 		CStringT strResult( str1.GetManager() );

  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetManager@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEPAUIAtlStringMgr@2@XZ
  000af	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  000b2	8b ce		 mov	 ecx, esi
  000b4	50		 push	 eax
  000b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z

; 2402 : 
; 2403 : 		CThisSimpleString::Concatenate( strResult, str1, str1.GetLength(), psz2, CThisSimpleString::StringLength( psz2 ) );

  000bb	8b 4d f0	 mov	 ecx, DWORD PTR _savedElementsData$[ebp]
  000be	6a 08		 push	 8
  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_08DHKDLDJL@?$DM?2Row?$DO?$AN?6@

; 2404 : 
; 2405 : 		return( strResult );

  000c5	c7 45 ec 02 00
	00 00		 mov	 DWORD PTR $T2[ebp], 2
  000cc	ff 71 f4	 push	 DWORD PTR [ecx-12]
  000cf	51		 push	 ecx
  000d0	56		 push	 esi
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Concatenate@?$CSimpleStringT@D$00@ATL@@KAXAAV12@PBDH1H@Z
  000d7	83 c4 14	 add	 esp, 20			; 00000014H
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 92   : 	return savedElementsData + "<\\Row>\r\n";

  000da	8d 4d f0	 lea	 ecx, DWORD PTR _savedElementsData$[ebp]
  000dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000e3	8b c6		 mov	 eax, esi

; 93   : }

  000e5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ef	59		 pop	 ecx
  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetSavedElementsData@CRowSet@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCOrder@@@Z$0:
  00000	8d 4d f0	 lea	 ecx, DWORD PTR _savedElementsData$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?GetSavedElementsData@CRowSet@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCOrder@@@Z$1:
  00009	8d 4d 0c	 lea	 ecx, DWORD PTR $T3[ebp]
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?GetSavedElementsData@CRowSet@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCOrder@@@Z$3:
  00012	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00015	83 e0 02	 and	 eax, 2
  00018	0f 84 0d 00 00
	00		 je	 $LN32@GetSavedEl
  0001e	83 65 ec fd	 and	 DWORD PTR $T2[ebp], -3	; fffffffdH
  00022	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00025	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN32@GetSavedEl:
  0002b	c3		 ret	 0
  0002c	cc		 int	 3
  0002d	cc		 int	 3
  0002e	cc		 int	 3
  0002f	cc		 int	 3
  00030	cc		 int	 3
__ehhandler$?GetSavedElementsData@CRowSet@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCOrder@@@Z:
  00031	90		 npad	 1
  00032	90		 npad	 1
  00033	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00037	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003a	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetSavedElementsData@CRowSet@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCOrder@@@Z
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetSavedElementsData@CRowSet@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABVCOrder@@@Z ENDP ; CRowSet::GetSavedElementsData
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
;	COMDAT ?GetElementCount@CRowSet@@QBEHXZ
_TEXT	SEGMENT
?GetElementCount@CRowSet@@QBEHXZ PROC			; CRowSet::GetElementCount, COMDAT
; _this$ = ecx

; 79   : 	return m_ElementList.GetCount();

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 80   : }

  00003	c3		 ret	 0
?GetElementCount@CRowSet@@QBEHXZ ENDP			; CRowSet::GetElementCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
;	COMDAT ?ChangeAllElementsThick@CRowSet@@QAEXHH@Z
_TEXT	SEGMENT
_nElementType$ = 8					; size = 4
_nNewWidth$ = 12					; size = 4
?ChangeAllElementsThick@CRowSet@@QAEXHH@Z PROC		; CRowSet::ChangeAllElementsThick, COMDAT
; _this$ = ecx

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	57		 push	 edi

; 66   : 	for(int nIndex = 0; nIndex < m_ElementList.GetCount(); nIndex++)

  0000a	33 ff		 xor	 edi, edi
  0000c	39 7b 14	 cmp	 DWORD PTR [ebx+20], edi
  0000f	7e 45		 jle	 SHORT $LN3@ChangeAllE
  00011	56		 push	 esi
$LL4@ChangeAllE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1002 :         return _Mysize() == 0;

  00012	83 7b 14 00	 cmp	 DWORD PTR [ebx+20], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 198  : 		if(m_deque.empty())

  00016	75 04		 jne	 SHORT $LN8@ChangeAllE

; 199  : 			return NULL;

  00018	33 f6		 xor	 esi, esi
  0001a	eb 1d		 jmp	 SHORT $LN7@ChangeAllE
$LN8@ChangeAllE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 43   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  0001c	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 201  : 		return m_deque[nIndex];

  0001f	8b 73 08	 mov	 esi, DWORD PTR [ebx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 78   :         _Myoff += _Off;

  00022	8d 14 38	 lea	 edx, DWORD PTR [eax+edi]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00025	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]

; 78   :         _Myoff += _Off;

  00028	8b ca		 mov	 ecx, edx

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0002a	48		 dec	 eax

; 78   :         _Myoff += _Off;

  0002b	c1 e9 02	 shr	 ecx, 2

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0002e	23 c8		 and	 ecx, eax

; 48   :         return _Mycont->_Map[_Block][_Off];

  00030	83 e2 03	 and	 edx, 3
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 201  : 		return m_deque[nIndex];

  00033	8b 34 8e	 mov	 esi, DWORD PTR [esi+ecx*4]
  00036	8b 34 96	 mov	 esi, DWORD PTR [esi+edx*4]
$LN7@ChangeAllE:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 70   : 		if(pElement->GetElementType()==nElementType)

  00039	8b 06		 mov	 eax, DWORD PTR [esi]
  0003b	8b ce		 mov	 ecx, esi
  0003d	ff 50 04	 call	 DWORD PTR [eax+4]
  00040	3b 45 08	 cmp	 eax, DWORD PTR _nElementType$[ebp]
  00043	75 0a		 jne	 SHORT $LN2@ChangeAllE

; 71   : 			pElement->ChangePenThick(nNewWidth);

  00045	ff 75 0c	 push	 DWORD PTR _nNewWidth$[ebp]
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?ChangePenThick@CElement@@QAEXH@Z ; CElement::ChangePenThick
$LN2@ChangeAllE:

; 66   : 	for(int nIndex = 0; nIndex < m_ElementList.GetCount(); nIndex++)

  0004f	47		 inc	 edi
  00050	3b 7b 14	 cmp	 edi, DWORD PTR [ebx+20]
  00053	7c bd		 jl	 SHORT $LL4@ChangeAllE
  00055	5e		 pop	 esi
$LN3@ChangeAllE:
  00056	5f		 pop	 edi

; 72   : 	}
; 73   : }

  00057	5b		 pop	 ebx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
?ChangeAllElementsThick@CRowSet@@QAEXHH@Z ENDP		; CRowSet::ChangeAllElementsThick
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
;	COMDAT ?ChangeAllElementsColor@CRowSet@@QAEXABK0@Z
_TEXT	SEGMENT
_penColor$ = 8						; size = 4
_textColor$ = 12					; size = 4
?ChangeAllElementsColor@CRowSet@@QAEXABK0@Z PROC	; CRowSet::ChangeAllElementsColor, COMDAT
; _this$ = ecx

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	57		 push	 edi

; 54   : 	for(int nIndex = 0; nIndex < m_ElementList.GetCount(); nIndex++)

  0000a	33 ff		 xor	 edi, edi
  0000c	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  0000f	7e 43		 jle	 SHORT $LN3@ChangeAllE
  00011	53		 push	 ebx
$LL4@ChangeAllE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1002 :         return _Mysize() == 0;

  00012	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 198  : 		if(m_deque.empty())

  00016	75 04		 jne	 SHORT $LN7@ChangeAllE

; 199  : 			return NULL;

  00018	33 db		 xor	 ebx, ebx
  0001a	eb 1d		 jmp	 SHORT $LN6@ChangeAllE
$LN7@ChangeAllE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 43   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  0001c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 78   :         _Myoff += _Off;

  0001f	8d 14 38	 lea	 edx, DWORD PTR [eax+edi]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00022	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 78   :         _Myoff += _Off;

  00025	8b ca		 mov	 ecx, edx

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00027	48		 dec	 eax

; 78   :         _Myoff += _Off;

  00028	c1 e9 02	 shr	 ecx, 2

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0002b	23 c8		 and	 ecx, eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 201  : 		return m_deque[nIndex];

  0002d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 48   :         return _Mycont->_Map[_Block][_Off];

  00030	83 e2 03	 and	 edx, 3
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 201  : 		return m_deque[nIndex];

  00033	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00036	8b 1c 90	 mov	 ebx, DWORD PTR [eax+edx*4]
$LN6@ChangeAllE:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 58   : 		pElement->ChangePenColor(penColor);

  00039	ff 75 08	 push	 DWORD PTR _penColor$[ebp]
  0003c	8b cb		 mov	 ecx, ebx
  0003e	e8 00 00 00 00	 call	 ?ChangePenColor@CElement@@QAEXABK@Z ; CElement::ChangePenColor

; 59   : 		pElement->ChangeTextColor(textColor);

  00043	ff 75 0c	 push	 DWORD PTR _textColor$[ebp]
  00046	8b cb		 mov	 ecx, ebx
  00048	e8 00 00 00 00	 call	 ?ChangeTextColor@CElement@@QAEXABK@Z ; CElement::ChangeTextColor
  0004d	47		 inc	 edi
  0004e	3b 7e 14	 cmp	 edi, DWORD PTR [esi+20]
  00051	7c bf		 jl	 SHORT $LL4@ChangeAllE
  00053	5b		 pop	 ebx
$LN3@ChangeAllE:
  00054	5f		 pop	 edi

; 60   : 	}
; 61   : }

  00055	5e		 pop	 esi
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 08 00	 ret	 8
?ChangeAllElementsColor@CRowSet@@QAEXABK0@Z ENDP	; CRowSet::ChangeAllElementsColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
;	COMDAT ?SetAutoPrice@CRowSet@@QAEX_N@Z
_TEXT	SEGMENT
_bIsAutoPrice$ = 8					; size = 1
?SetAutoPrice@CRowSet@@QAEX_N@Z PROC			; CRowSet::SetAutoPrice, COMDAT
; _this$ = ecx

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	57		 push	 edi

; 43   : 	for(int nIndex = 0; nIndex < m_ElementList.GetCount(); nIndex++){

  0000a	33 ff		 xor	 edi, edi
  0000c	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  0000f	7e 3f		 jle	 SHORT $LN3@SetAutoPri

; 44   : 		CElement* pElement = m_ElementList.GetAt(nIndex);

  00011	53		 push	 ebx
  00012	8b 5d 08	 mov	 ebx, DWORD PTR _bIsAutoPrice$[ebp]
$LL4@SetAutoPri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1002 :         return _Mysize() == 0;

  00015	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 198  : 		if(m_deque.empty())

  00019	75 04		 jne	 SHORT $LN7@SetAutoPri

; 199  : 			return NULL;

  0001b	33 c9		 xor	 ecx, ecx
  0001d	eb 1d		 jmp	 SHORT $LN6@SetAutoPri
$LN7@SetAutoPri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 43   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  0001f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 78   :         _Myoff += _Off;

  00022	8d 14 38	 lea	 edx, DWORD PTR [eax+edi]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00025	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 78   :         _Myoff += _Off;

  00028	8b ca		 mov	 ecx, edx

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0002a	48		 dec	 eax

; 78   :         _Myoff += _Off;

  0002b	c1 e9 02	 shr	 ecx, 2

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0002e	23 c8		 and	 ecx, eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 201  : 		return m_deque[nIndex];

  00030	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 48   :         return _Mycont->_Map[_Block][_Off];

  00033	83 e2 03	 and	 edx, 3
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 201  : 		return m_deque[nIndex];

  00036	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00039	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
$LN6@SetAutoPri:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 46   : 		pElement->GetCommonEnvironment().SetAutoPrice(bIsAutoPrice);

  0003c	53		 push	 ebx
  0003d	e8 00 00 00 00	 call	 ?GetCommonEnvironment@CElement@@QAEAAVCElementCommonEnvironment@@XZ ; CElement::GetCommonEnvironment
  00042	8b c8		 mov	 ecx, eax
  00044	e8 00 00 00 00	 call	 ?SetAutoPrice@CElementCommonEnvironment@@QAEX_N@Z ; CElementCommonEnvironment::SetAutoPrice
  00049	47		 inc	 edi
  0004a	3b 7e 14	 cmp	 edi, DWORD PTR [esi+20]
  0004d	7c c6		 jl	 SHORT $LL4@SetAutoPri
  0004f	5b		 pop	 ebx
$LN3@SetAutoPri:
  00050	5f		 pop	 edi

; 47   : 	}
; 48   : }

  00051	5e		 pop	 esi
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?SetAutoPrice@CRowSet@@QAEX_N@Z ENDP			; CRowSet::SetAutoPrice
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
;	COMDAT ??1CRowSet@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CRowSet@@UAE@XZ PROC					; CRowSet::~CRowSet, COMDAT
; _this$ = ecx

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CRowSet@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx

; 130  : 	while(m_ElementList.GetCount() > 0){

  0002a	83 7b 14 00	 cmp	 DWORD PTR [ebx+20], 0

; 36   : {

  0002e	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7CRowSet@@6B@

; 130  : 	while(m_ElementList.GetCount() > 0){

  00034	7e 42		 jle	 SHORT $LN70@CRowSet
$LL4@CRowSet:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1002 :         return _Mysize() == 0;

  00036	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  00039	85 c9		 test	 ecx, ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 191  : 		if(m_deque.empty())

  0003b	75 04		 jne	 SHORT $LN8@CRowSet

; 192  : 			return NULL;

  0003d	33 ff		 xor	 edi, edi
  0003f	eb 1f		 jmp	 SHORT $LN7@CRowSet
$LN8@CRowSet:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 917  :         return _Unchecked_const_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00041	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00044	03 c1		 add	 eax, ecx

; 67   :         --_Myoff;

  00046	8d 50 ff	 lea	 edx, DWORD PTR [eax-1]

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00049	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  0004c	8b ca		 mov	 ecx, edx
  0004e	48		 dec	 eax
  0004f	c1 e9 02	 shr	 ecx, 2
  00052	23 c8		 and	 ecx, eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 193  : 		return m_deque.back();

  00054	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 48   :         return _Mycont->_Map[_Block][_Off];

  00057	83 e2 03	 and	 edx, 3
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\Include_Chart\DequeList.h

; 193  : 		return m_deque.back();

  0005a	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  0005d	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]
$LN7@CRowSet:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 171  : 	CElementFactory::Delete(pElement);

  00060	57		 push	 edi
  00061	e8 00 00 00 00	 call	 ?Delete@CElementFactory@@SAXPAVCElement@@@Z ; CElementFactory::Delete
  00066	83 c4 04	 add	 esp, 4

; 172  : 	m_ElementList.RemoveAt(pElement);

  00069	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0006c	57		 push	 edi
  0006d	e8 00 00 00 00	 call	 ?RemoveAt@?$CDequePointerList@VCElement@@@@QAEXPAVCElement@@@Z ; CDequePointerList<CElement>::RemoveAt

; 130  : 	while(m_ElementList.GetCount() > 0){

  00072	83 7b 14 00	 cmp	 DWORD PTR [ebx+20], 0
  00076	7f be		 jg	 SHORT $LL4@CRowSet
$LN70@CRowSet:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 1332 :         _Tidy();

  00078	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0007b	e8 00 00 00 00	 call	 ?_Tidy@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@AAEXXZ ; std::deque<CElement *,std::allocator<CElement *> >::_Tidy
  00080	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00083	e8 00 00 00 00	 call	 ?_Tidy@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@AAEXXZ ; std::deque<CElement *,std::allocator<CElement *> >::_Tidy

; 861  :         _Tidy();

  00088	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0008b	e8 00 00 00 00	 call	 ?_Tidy@?$deque@PAVCElement@@V?$allocator@PAVCElement@@@std@@@std@@AAEXXZ ; std::deque<CElement *,std::allocator<CElement *> >::_Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00090	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00093	6a 08		 push	 8
  00095	50		 push	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  00096	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0009d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000a2	83 c4 08	 add	 esp, 8
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 38   : }

  000a5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000af	59		 pop	 ecx
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
  000b7	cc		 int	 3
  000b8	cc		 int	 3
  000b9	cc		 int	 3
  000ba	cc		 int	 3
  000bb	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CRowSet@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CRowSet@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CRowSet@@UAE@XZ ENDP					; CRowSet::~CRowSet
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
;	COMDAT ?Delete@CRowSet@@SAXPAV1@@Z
_TEXT	SEGMENT
_pRowSet$ = 8						; size = 4
?Delete@CRowSet@@SAXPAV1@@Z PROC			; CRowSet::Delete, COMDAT

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 30   : 	delete pRowSet;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pRowSet$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN3@Delete
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	6a 01		 push	 1
  0000e	ff 10		 call	 DWORD PTR [eax]
$LN3@Delete:

; 31   : }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@CRowSet@@SAXPAV1@@Z ENDP			; CRowSet::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
;	COMDAT ?Make@CRowSet@@SAPAV1@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Make@CRowSet@@SAPAV1@XZ PROC				; CRowSet::Make, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Make@CRowSet@@SAPAV1@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 25   : 	return new CRowSet;

  00027	6a 18		 push	 24			; 00000018H
  00029	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002e	8b f8		 mov	 edi, eax
  00030	83 c4 04	 add	 esp, 4
  00033	89 7d f0	 mov	 DWORD PTR $T2[ebp], edi
  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003d	85 ff		 test	 edi, edi
  0003f	74 56		 je	 SHORT $LN3@Make
  00041	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
  00044	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CRowSet@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  0004a	6a 08		 push	 8
  0004c	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 1033 :     _Container_proxy* _Myproxy = nullptr;

  0004f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\deque

; 555  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

  00055	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0005c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00063	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0006a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00071	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00076	83 c4 04	 add	 esp, 4

; 1003 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

  00079	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1020 :         _Myproxy            = _New_proxy;

  00080	89 06		 mov	 DWORD PTR [esi], eax

; 1021 :         _New_proxy->_Mycont = this;

  00082	89 30		 mov	 DWORD PTR [eax], esi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp

; 25   : 	return new CRowSet;

  00084	8b c7		 mov	 eax, edi

; 26   : }

  00086	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
$LN3@Make:

; 25   : 	return new CRowSet;

  00097	33 c0		 xor	 eax, eax

; 26   : }

  00099	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a3	59		 pop	 ecx
  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Make@CRowSet@@SAPAV1@XZ$0:
  00000	6a 18		 push	 24			; 00000018H
  00002	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?Make@CRowSet@@SAPAV1@XZ:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Make@CRowSet@@SAPAV1@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Make@CRowSet@@SAPAV1@XZ ENDP				; CRowSet::Make
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 315  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 316  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartAddIn\ChartAnalysisToolAddIn\AnalysisTool\RowSet.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
