; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30148.0 

	TITLE	D:\git\src\IBK\IBK_DRFN\#DRfn-CS\_Obj\KTBChart\DataExtracter.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1CObject@@UAE@XZ				; CObject::~CObject
PUBLIC	?Serialize@CObject@@UAEXAAVCArchive@@@Z		; CObject::Serialize
PUBLIC	?AssertValid@CObject@@UBEXXZ			; CObject::AssertValid
PUBLIC	?Dump@CObject@@UBEXAAVCDumpContext@@@Z		; CObject::Dump
PUBLIC	??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@0@Z ; ATL::operator+
PUBLIC	??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@PBD@Z ; ATL::operator+
PUBLIC	?GetTitle@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCMainBlock@@@Z ; CDataExtracter::GetTitle
PUBLIC	?GetSubGraphViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCSubGraphViewData@@@Z ; CDataExtracter::GetSubGraphViewData
PUBLIC	?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z ; CDataExtracter::GetRowViewData
PUBLIC	?MakeDateString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@0@Z ; CDataExtracter::MakeDateString
PUBLIC	?MakeString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@NAAH@Z ; CDataExtracter::MakeString
PUBLIC	?GetRealDataIndex@CDataExtracter@@AAEXHHHHAAH0@Z ; CDataExtracter::GetRealDataIndex
PUBLIC	?GetPacket@CDataExtracter@@AAEPAV?$CList@NN@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAVCPacketList@@@Z ; CDataExtracter::GetPacket
PUBLIC	?FindPosition@CDataExtracter@@ABEPAU__POSITION@@HABV?$CList@NN@@@Z ; CDataExtracter::FindPosition
PUBLIC	?GetHighestPrice@CDataExtracter@@AAENHHPAVCPacketList@@@Z ; CDataExtracter::GetHighestPrice
PUBLIC	?GetLowestPrice@CDataExtracter@@AAENHHPAVCPacketList@@@Z ; CDataExtracter::GetLowestPrice
PUBLIC	?GetHighestLowestVolume@CDataExtracter@@AAEXHHPAVCPacketList@@AAN1@Z ; CDataExtracter::GetHighestLowestVolume
PUBLIC	?GetMA@CDataExtracter@@AAENHHPAV?$CList@NN@@@Z	; CDataExtracter::GetMA
PUBLIC	??1CSubGraphViewData@@QAE@XZ			; CSubGraphViewData::~CSubGraphViewData
PUBLIC	?AddTail@?$CList@VCSubGraphViewData@@AAV1@@@QAEPAU__POSITION@@AAVCSubGraphViewData@@@Z ; CList<CSubGraphViewData,CSubGraphViewData &>::AddTail
PUBLIC	?RemoveAll@?$CList@VCSubGraphViewData@@AAV1@@@QAEXXZ ; CList<CSubGraphViewData,CSubGraphViewData &>::RemoveAll
PUBLIC	?NewNode@?$CList@VCSubGraphViewData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<CSubGraphViewData,CSubGraphViewData &>::NewNode
PUBLIC	??1?$CList@VCSubGraphViewData@@AAV1@@@UAE@XZ	; CList<CSubGraphViewData,CSubGraphViewData &>::~CList<CSubGraphViewData,CSubGraphViewData &>
PUBLIC	?Serialize@?$CList@VCSubGraphViewData@@AAV1@@@UAEXAAVCArchive@@@Z ; CList<CSubGraphViewData,CSubGraphViewData &>::Serialize
PUBLIC	??_G?$CList@VCSubGraphViewData@@AAV1@@@UAEPAXI@Z ; CList<CSubGraphViewData,CSubGraphViewData &>::`scalar deleting destructor'
PUBLIC	??1CRowViewData@@QAE@XZ				; CRowViewData::~CRowViewData
PUBLIC	?AddTail@?$CList@VCRowViewData@@AAV1@@@QAEPAU__POSITION@@AAVCRowViewData@@@Z ; CList<CRowViewData,CRowViewData &>::AddTail
PUBLIC	?RemoveAll@?$CList@VCRowViewData@@AAV1@@@QAEXXZ	; CList<CRowViewData,CRowViewData &>::RemoveAll
PUBLIC	?NewNode@?$CList@VCRowViewData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<CRowViewData,CRowViewData &>::NewNode
PUBLIC	??1?$CList@VCRowViewData@@AAV1@@@UAE@XZ		; CList<CRowViewData,CRowViewData &>::~CList<CRowViewData,CRowViewData &>
PUBLIC	?Serialize@?$CList@VCRowViewData@@AAV1@@@UAEXAAVCArchive@@@Z ; CList<CRowViewData,CRowViewData &>::Serialize
PUBLIC	??_G?$CList@VCRowViewData@@AAV1@@@UAEPAXI@Z	; CList<CRowViewData,CRowViewData &>::`scalar deleting destructor'
PUBLIC	??1CColumnViewData@@QAE@XZ			; CColumnViewData::~CColumnViewData
PUBLIC	??0?$CList@VCColumnViewData@@AAV1@@@QAE@H@Z	; CList<CColumnViewData,CColumnViewData &>::CList<CColumnViewData,CColumnViewData &>
PUBLIC	?AddTail@?$CList@VCColumnViewData@@AAV1@@@QAEPAU__POSITION@@AAVCColumnViewData@@@Z ; CList<CColumnViewData,CColumnViewData &>::AddTail
PUBLIC	?RemoveAll@?$CList@VCColumnViewData@@AAV1@@@QAEXXZ ; CList<CColumnViewData,CColumnViewData &>::RemoveAll
PUBLIC	?NewNode@?$CList@VCColumnViewData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<CColumnViewData,CColumnViewData &>::NewNode
PUBLIC	??1?$CList@VCColumnViewData@@AAV1@@@UAE@XZ	; CList<CColumnViewData,CColumnViewData &>::~CList<CColumnViewData,CColumnViewData &>
PUBLIC	?Serialize@?$CList@VCColumnViewData@@AAV1@@@UAEXAAVCArchive@@@Z ; CList<CColumnViewData,CColumnViewData &>::Serialize
PUBLIC	??_G?$CList@VCColumnViewData@@AAV1@@@UAEPAXI@Z	; CList<CColumnViewData,CColumnViewData &>::`scalar deleting destructor'
PUBLIC	??1CViewData@@QAE@XZ				; CViewData::~CViewData
PUBLIC	??$SerializeElements@VCSubGraphViewData@@@@YGXAAVCArchive@@PAVCSubGraphViewData@@H@Z ; SerializeElements<CSubGraphViewData>
PUBLIC	??$SerializeElements@VCRowViewData@@@@YGXAAVCArchive@@PAVCRowViewData@@H@Z ; SerializeElements<CRowViewData>
PUBLIC	??$SerializeElements@VCColumnViewData@@@@YGXAAVCArchive@@PAVCColumnViewData@@H@Z ; SerializeElements<CColumnViewData>
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R3CObject@@8					; CObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObject@@8					; CObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CObject@@8			; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$CList@VCSubGraphViewData@@AAV1@@@6B@	; CList<CSubGraphViewData,CSubGraphViewData &>::`vftable'
PUBLIC	??_7?$CList@VCRowViewData@@AAV1@@@6B@		; CList<CRowViewData,CRowViewData &>::`vftable'
PUBLIC	??_7?$CList@VCColumnViewData@@AAV1@@@6B@	; CList<CColumnViewData,CColumnViewData &>::`vftable'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_01JLIPDDHJ@?3@				; `string'
PUBLIC	??_C@_01IHBHIGKO@?0@				; `string'
PUBLIC	??_R4?$CList@VCSubGraphViewData@@AAV1@@@6B@	; CList<CSubGraphViewData,CSubGraphViewData &>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CList@VCSubGraphViewData@@AAV1@@@@8	; CList<CSubGraphViewData,CSubGraphViewData &> `RTTI Type Descriptor'
PUBLIC	??_R3?$CList@VCSubGraphViewData@@AAV1@@@8	; CList<CSubGraphViewData,CSubGraphViewData &>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CList@VCSubGraphViewData@@AAV1@@@8	; CList<CSubGraphViewData,CSubGraphViewData &>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CList@VCSubGraphViewData@@AAV1@@@8 ; CList<CSubGraphViewData,CSubGraphViewData &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CList@VCRowViewData@@AAV1@@@6B@		; CList<CRowViewData,CRowViewData &>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CList@VCRowViewData@@AAV1@@@@8	; CList<CRowViewData,CRowViewData &> `RTTI Type Descriptor'
PUBLIC	??_R3?$CList@VCRowViewData@@AAV1@@@8		; CList<CRowViewData,CRowViewData &>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CList@VCRowViewData@@AAV1@@@8		; CList<CRowViewData,CRowViewData &>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CList@VCRowViewData@@AAV1@@@8	; CList<CRowViewData,CRowViewData &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CList@VCColumnViewData@@AAV1@@@6B@	; CList<CColumnViewData,CColumnViewData &>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CList@VCColumnViewData@@AAV1@@@@8	; CList<CColumnViewData,CColumnViewData &> `RTTI Type Descriptor'
PUBLIC	??_R3?$CList@VCColumnViewData@@AAV1@@@8		; CList<CColumnViewData,CColumnViewData &>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CList@VCColumnViewData@@AAV1@@@8		; CList<CColumnViewData,CColumnViewData &>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CList@VCColumnViewData@@AAV1@@@8 ; CList<CColumnViewData,CColumnViewData &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@bff0000000000000
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	?__global_delete@@YAXPAXI@Z:PROC		; __global_delete
EXTRN	___std_terminate:PROC
EXTRN	?AfxThrowInvalidArgException@@YGXXZ:PROC	; AfxThrowInvalidArgException
EXTRN	?AfxThrowArchiveException@@YGXHPBD@Z:PROC	; AfxThrowArchiveException
EXTRN	?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ:PROC ; CObject::GetRuntimeClass
EXTRN	__imp_?Concatenate@?$CSimpleStringT@D$00@ATL@@KAXAAV12@PBDH1H@Z:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z:PROC
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z:PROC
EXTRN	__imp_?GetManager@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEPAUIAtlStringMgr@2@XZ:PROC
EXTRN	__imp_?Compare@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z:PROC
EXTRN	__imp_?CompareNoCase@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z:PROC
EXTRN	__imp_?Right@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z:PROC
EXTRN	?Read@CArchive@@QAEIPAXI@Z:PROC			; CArchive::Read
EXTRN	?Write@CArchive@@QAEXPBXI@Z:PROC		; CArchive::Write
EXTRN	?ReadCount@CArchive@@QAEKXZ:PROC		; CArchive::ReadCount
EXTRN	?WriteCount@CArchive@@QAEXK@Z:PROC		; CArchive::WriteCount
EXTRN	?Create@CPlex@@SGPAU1@AAPAU1@II@Z:PROC		; CPlex::Create
EXTRN	?FreeDataChain@CPlex@@QAEXXZ:PROC		; CPlex::FreeDataChain
EXTRN	__imp_?GetnumericDataList@CPacket@@QAEPAV?$CList@NN@@XZ:PROC
EXTRN	__imp_?GetBaseData@CPacketList@@QAEPAVCPacket@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@_N@Z:PROC
EXTRN	?DoubleToString@CDataConversion@@SA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABNH@Z:PROC ; CDataConversion::DoubleToString
EXTRN	?GetStringData@CDataConversion@@SA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@AAV23@ABV23@_N@Z:PROC ; CDataConversion::GetStringData
EXTRN	?GetStringDataCount@CDataConversion@@SAHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z:PROC ; CDataConversion::GetStringDataCount
EXTRN	?GetStringThousandFormat@CDataConversion@@SA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@@Z:PROC ; CDataConversion::GetStringThousandFormat
EXTRN	??4CSubGraphViewData@@QAEAAV0@ABV0@@Z:PROC	; CSubGraphViewData::operator=
EXTRN	??0CSubGraphViewData@@QAE@XZ:PROC		; CSubGraphViewData::CSubGraphViewData
EXTRN	?GetTitle@CSubGraphViewData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ:PROC ; CSubGraphViewData::GetTitle
EXTRN	?GetPacketNames@CSubGraphViewData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ:PROC ; CSubGraphViewData::GetPacketNames
EXTRN	?GetSubGraphViewDataList@CSubGraphViewDataList@@QAEAAV?$CList@VCSubGraphViewData@@AAV1@@@XZ:PROC ; CSubGraphViewDataList::GetSubGraphViewDataList
EXTRN	??_E?$CList@VCSubGraphViewData@@AAV1@@@UAEPAXI@Z:PROC ; CList<CSubGraphViewData,CSubGraphViewData &>::`vector deleting destructor'
EXTRN	??4CRowViewData@@QAEAAV0@ABV0@@Z:PROC		; CRowViewData::operator=
EXTRN	??0CRowViewData@@QAE@XZ:PROC			; CRowViewData::CRowViewData
EXTRN	??0CRowViewData@@QAE@ABV0@@Z:PROC		; CRowViewData::CRowViewData
EXTRN	?GetSubGraphViewDataList@CRowViewData@@QAEAAVCSubGraphViewDataList@@XZ:PROC ; CRowViewData::GetSubGraphViewDataList
EXTRN	??4CColumnViewData@@QAEAAV0@ABV0@@Z:PROC	; CColumnViewData::operator=
EXTRN	??0CColumnViewData@@QAE@XZ:PROC			; CColumnViewData::CColumnViewData
EXTRN	??0CColumnViewData@@QAE@ABV0@@Z:PROC		; CColumnViewData::CColumnViewData
EXTRN	?GetRowViewDataList@CColumnViewData@@QAEAAV?$CList@VCRowViewData@@AAV1@@@XZ:PROC ; CColumnViewData::GetRowViewDataList
EXTRN	??_E?$CList@VCRowViewData@@AAV1@@@UAEPAXI@Z:PROC ; CList<CRowViewData,CRowViewData &>::`vector deleting destructor'
EXTRN	?GetAt@CViewData@@QAEAAVCColumnViewData@@H@Z:PROC ; CViewData::GetAt
EXTRN	?GetColumnViewDataCount@CViewData@@QBEHXZ:PROC	; CViewData::GetColumnViewDataCount
EXTRN	??_E?$CList@VCColumnViewData@@AAV1@@@UAEPAXI@Z:PROC ; CList<CColumnViewData,CColumnViewData &>::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?g_iMetaTable@@3VIMetaTable@@A:BYTE		; g_iMetaTable
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CList@VCColumnViewData@@AAV1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CList@VCColumnViewData@@AAV1@@@8 DD FLAT:??_R0?AV?$CList@VCColumnViewData@@AAV1@@@@8 ; CList<CColumnViewData,CColumnViewData &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CList@VCColumnViewData@@AAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CList@VCColumnViewData@@AAV1@@@8
rdata$r	SEGMENT
??_R2?$CList@VCColumnViewData@@AAV1@@@8 DD FLAT:??_R1A@?0A@EA@?$CList@VCColumnViewData@@AAV1@@@8 ; CList<CColumnViewData,CColumnViewData &>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CList@VCColumnViewData@@AAV1@@@8
rdata$r	SEGMENT
??_R3?$CList@VCColumnViewData@@AAV1@@@8 DD 00H		; CList<CColumnViewData,CColumnViewData &>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CList@VCColumnViewData@@AAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CList@VCColumnViewData@@AAV1@@@@8
data$rs	SEGMENT
??_R0?AV?$CList@VCColumnViewData@@AAV1@@@@8 DD FLAT:??_7type_info@@6B@ ; CList<CColumnViewData,CColumnViewData &> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CList@VCColumnViewData@@AAV1@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CList@VCColumnViewData@@AAV1@@@6B@
rdata$r	SEGMENT
??_R4?$CList@VCColumnViewData@@AAV1@@@6B@ DD 00H	; CList<CColumnViewData,CColumnViewData &>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CList@VCColumnViewData@@AAV1@@@@8
	DD	FLAT:??_R3?$CList@VCColumnViewData@@AAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CList@VCRowViewData@@AAV1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CList@VCRowViewData@@AAV1@@@8 DD FLAT:??_R0?AV?$CList@VCRowViewData@@AAV1@@@@8 ; CList<CRowViewData,CRowViewData &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CList@VCRowViewData@@AAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CList@VCRowViewData@@AAV1@@@8
rdata$r	SEGMENT
??_R2?$CList@VCRowViewData@@AAV1@@@8 DD FLAT:??_R1A@?0A@EA@?$CList@VCRowViewData@@AAV1@@@8 ; CList<CRowViewData,CRowViewData &>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CList@VCRowViewData@@AAV1@@@8
rdata$r	SEGMENT
??_R3?$CList@VCRowViewData@@AAV1@@@8 DD 00H		; CList<CRowViewData,CRowViewData &>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CList@VCRowViewData@@AAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CList@VCRowViewData@@AAV1@@@@8
data$rs	SEGMENT
??_R0?AV?$CList@VCRowViewData@@AAV1@@@@8 DD FLAT:??_7type_info@@6B@ ; CList<CRowViewData,CRowViewData &> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CList@VCRowViewData@@AAV1@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CList@VCRowViewData@@AAV1@@@6B@
rdata$r	SEGMENT
??_R4?$CList@VCRowViewData@@AAV1@@@6B@ DD 00H		; CList<CRowViewData,CRowViewData &>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CList@VCRowViewData@@AAV1@@@@8
	DD	FLAT:??_R3?$CList@VCRowViewData@@AAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CList@VCSubGraphViewData@@AAV1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CList@VCSubGraphViewData@@AAV1@@@8 DD FLAT:??_R0?AV?$CList@VCSubGraphViewData@@AAV1@@@@8 ; CList<CSubGraphViewData,CSubGraphViewData &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CList@VCSubGraphViewData@@AAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CList@VCSubGraphViewData@@AAV1@@@8
rdata$r	SEGMENT
??_R2?$CList@VCSubGraphViewData@@AAV1@@@8 DD FLAT:??_R1A@?0A@EA@?$CList@VCSubGraphViewData@@AAV1@@@8 ; CList<CSubGraphViewData,CSubGraphViewData &>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CList@VCSubGraphViewData@@AAV1@@@8
rdata$r	SEGMENT
??_R3?$CList@VCSubGraphViewData@@AAV1@@@8 DD 00H	; CList<CSubGraphViewData,CSubGraphViewData &>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CList@VCSubGraphViewData@@AAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CList@VCSubGraphViewData@@AAV1@@@@8
data$rs	SEGMENT
??_R0?AV?$CList@VCSubGraphViewData@@AAV1@@@@8 DD FLAT:??_7type_info@@6B@ ; CList<CSubGraphViewData,CSubGraphViewData &> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CList@VCSubGraphViewData@@AAV1@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CList@VCSubGraphViewData@@AAV1@@@6B@
rdata$r	SEGMENT
??_R4?$CList@VCSubGraphViewData@@AAV1@@@6B@ DD 00H	; CList<CSubGraphViewData,CSubGraphViewData &>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CList@VCSubGraphViewData@@AAV1@@@@8
	DD	FLAT:??_R3?$CList@VCSubGraphViewData@@AAV1@@@8
rdata$r	ENDS
;	COMDAT ??_C@_01IHBHIGKO@?0@
CONST	SEGMENT
??_C@_01IHBHIGKO@?0@ DB ',', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JLIPDDHJ@?3@
CONST	SEGMENT
??_C@_01JLIPDDHJ@?3@ DB ':', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
?pPacketName@@3PAW4E_METACODE@IMetaTable@@A DD 02H	; pPacketName
	DD	03H
	DD	04H
	DD	05H
	DD	05H
	DD	0137H
	DD	0138H
	DD	0139H
	DD	013aH
	DD	013bH
	DD	013cH
	DD	07H
	DD	0141H
	DD	0142H
	DD	0143H
	DD	0144H
	DD	00H
_DATA	ENDS
;	COMDAT ??_7?$CList@VCColumnViewData@@AAV1@@@6B@
CONST	SEGMENT
??_7?$CList@VCColumnViewData@@AAV1@@@6B@ DD FLAT:??_R4?$CList@VCColumnViewData@@AAV1@@@6B@ ; CList<CColumnViewData,CColumnViewData &>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CList@VCColumnViewData@@AAV1@@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CList@VCColumnViewData@@AAV1@@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_7?$CList@VCRowViewData@@AAV1@@@6B@
CONST	SEGMENT
??_7?$CList@VCRowViewData@@AAV1@@@6B@ DD FLAT:??_R4?$CList@VCRowViewData@@AAV1@@@6B@ ; CList<CRowViewData,CRowViewData &>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CList@VCRowViewData@@AAV1@@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CList@VCRowViewData@@AAV1@@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_7?$CList@VCSubGraphViewData@@AAV1@@@6B@
CONST	SEGMENT
??_7?$CList@VCSubGraphViewData@@AAV1@@@6B@ DD FLAT:??_R4?$CList@VCSubGraphViewData@@AAV1@@@6B@ ; CList<CSubGraphViewData,CSubGraphViewData &>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CList@VCSubGraphViewData@@AAV1@@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CList@VCSubGraphViewData@@AAV1@@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CObject@@8
rdata$r	SEGMENT
??_R2CObject@@8 DD FLAT:??_R1A@?0A@EA@CObject@@8	; CObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObject@@8
rdata$r	SEGMENT
??_R3CObject@@8 DD 00H					; CObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
data$rs	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
data$rs	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Serialize@?$CList@VCColumnViewData@@AAV1@@@UAEXAAVCArchive@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Serialize@?$CList@VCColumnViewData@@AAV1@@@UAEXAAVCArchive@@@Z$0
__ehfuncinfo$?Serialize@?$CList@VCColumnViewData@@AAV1@@@UAEXAAVCArchive@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Serialize@?$CList@VCColumnViewData@@AAV1@@@UAEXAAVCArchive@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CList@VCColumnViewData@@AAV1@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Serialize@?$CList@VCRowViewData@@AAV1@@@UAEXAAVCArchive@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Serialize@?$CList@VCRowViewData@@AAV1@@@UAEXAAVCArchive@@@Z$0
__ehfuncinfo$?Serialize@?$CList@VCRowViewData@@AAV1@@@UAEXAAVCArchive@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Serialize@?$CList@VCRowViewData@@AAV1@@@UAEXAAVCArchive@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CList@VCRowViewData@@AAV1@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Serialize@?$CList@VCSubGraphViewData@@AAV1@@@UAEXAAVCArchive@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Serialize@?$CList@VCSubGraphViewData@@AAV1@@@UAEXAAVCArchive@@@Z$0
__ehfuncinfo$?Serialize@?$CList@VCSubGraphViewData@@AAV1@@@UAEXAAVCArchive@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Serialize@?$CList@VCSubGraphViewData@@AAV1@@@UAEXAAVCArchive@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CList@VCSubGraphViewData@@AAV1@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CSubGraphViewData@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CSubGraphViewData@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CSubGraphViewData@@QAE@ABV0@@Z$1
__ehfuncinfo$??0CSubGraphViewData@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CSubGraphViewData@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetHighestLowestVolume@CDataExtracter@@AAEXHHPAVCPacketList@@AAN1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetHighestLowestVolume@CDataExtracter@@AAEXHHPAVCPacketList@@AAN1@Z$0
__ehfuncinfo$?GetHighestLowestVolume@CDataExtracter@@AAEXHHPAVCPacketList@@AAN1@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetHighestLowestVolume@CDataExtracter@@AAEXHHPAVCPacketList@@AAN1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetLowestPrice@CDataExtracter@@AAENHHPAVCPacketList@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetLowestPrice@CDataExtracter@@AAENHHPAVCPacketList@@@Z$0
__ehfuncinfo$?GetLowestPrice@CDataExtracter@@AAENHHPAVCPacketList@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetLowestPrice@CDataExtracter@@AAENHHPAVCPacketList@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetHighestPrice@CDataExtracter@@AAENHHPAVCPacketList@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetHighestPrice@CDataExtracter@@AAENHHPAVCPacketList@@@Z$0
__ehfuncinfo$?GetHighestPrice@CDataExtracter@@AAENHHPAVCPacketList@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetHighestPrice@CDataExtracter@@AAENHHPAVCPacketList@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?MakeString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@NAAH@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?MakeString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@NAAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?MakeString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@NAAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MakeString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@NAAH@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?MakeString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@NAAH@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?MakeString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@NAAH@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?MakeString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@NAAH@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?MakeString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@NAAH@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?MakeString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@NAAH@Z$7
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?MakeDateString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MakeDateString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?MakeDateString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?MakeDateString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@0@Z$5
__ehfuncinfo$?MakeDateString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@0@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?MakeDateString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z$0
	DD	02H
	DD	FLAT:__unwindfunclet$?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z$6
	DD	03H
	DD	FLAT:__unwindfunclet$?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z$7
	DD	04H
	DD	FLAT:__unwindfunclet$?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z$8
	DD	04H
	DD	FLAT:__unwindfunclet$?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z$9
	DD	04H
	DD	FLAT:__unwindfunclet$?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z$10
	DD	07H
	DD	FLAT:__unwindfunclet$?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z$11
	DD	04H
	DD	FLAT:__unwindfunclet$?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z$11
	DD	02H
	DD	FLAT:__unwindfunclet$?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetSubGraphViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCSubGraphViewData@@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?GetSubGraphViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCSubGraphViewData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetSubGraphViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCSubGraphViewData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSubGraphViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCSubGraphViewData@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetSubGraphViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCSubGraphViewData@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetSubGraphViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCSubGraphViewData@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?GetSubGraphViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCSubGraphViewData@@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?GetSubGraphViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCSubGraphViewData@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?GetSubGraphViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCSubGraphViewData@@@Z$5
	DD	01H
	DD	FLAT:__unwindfunclet$?GetSubGraphViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCSubGraphViewData@@@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetTitle@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCMainBlock@@@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?GetTitle@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCMainBlock@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetTitle@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCMainBlock@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetTitle@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCMainBlock@@@Z$0
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:__unwindfunclet$?GetTitle@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCMainBlock@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?GetTitle@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCMainBlock@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?GetTitle@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCMainBlock@@@Z$4
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	06H
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@PBD@Z$0
__ehfuncinfo$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@0@Z$0
__ehfuncinfo$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@VCColumnViewData@@@@YGXAAVCArchive@@PAVCColumnViewData@@H@Z
_TEXT	SEGMENT
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@VCColumnViewData@@@@YGXAAVCArchive@@PAVCColumnViewData@@H@Z PROC ; SerializeElements<CColumnViewData>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR _nCount$[ebp]
  0000b	57		 push	 edi
  0000c	85 f6		 test	 esi, esi
  0000e	74 08		 je	 SHORT $LN2@SerializeE
  00010	85 c9		 test	 ecx, ecx
  00012	0f 84 9a 00 00
	00		 je	 $LN34@SerializeE
$LN2@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00018	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  0001b	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0001e	f7 d0		 not	 eax
  00020	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00022	74 41		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;
; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )

  00024	85 f6		 test	 esi, esi
  00026	74 36		 je	 SHORT $LN8@SerializeE
  00028	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL5@SerializeE:

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00030	bb 24 49 92 04	 mov	 ebx, 76695844		; 04924924H
  00035	3b f3		 cmp	 esi, ebx
  00037	0f 42 de	 cmovb	 ebx, esi

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0003a	8d 3c dd 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*8]
  00041	2b fb		 sub	 edi, ebx
  00043	c1 e7 02	 shl	 edi, 2
  00046	57		 push	 edi
  00047	51		 push	 ecx
  00048	8b ca		 mov	 ecx, edx
  0004a	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;
; 87   : 			pData += nElementsToWrite;

  0004f	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00052	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  00055	03 cf		 add	 ecx, edi
  00057	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  0005a	2b f3		 sub	 esi, ebx
  0005c	75 d2		 jne	 SHORT $LL5@SerializeE
$LN8@SerializeE:
  0005e	5f		 pop	 edi

; 105  : 		}
; 106  : 	}
; 107  : }

  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	5d		 pop	 ebp
  00062	c2 0c 00	 ret	 12			; 0000000cH
$LN10@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  00065	85 f6		 test	 esi, esi
  00067	74 f5		 je	 SHORT $LN8@SerializeE
  00069	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@SerializeE:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00070	bb 24 49 92 04	 mov	 ebx, 76695844		; 04924924H
  00075	3b f3		 cmp	 esi, ebx
  00077	0f 42 de	 cmovb	 ebx, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0007a	8d 3c dd 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*8]
  00081	2b fb		 sub	 edi, ebx
  00083	c1 e7 02	 shl	 edi, 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00086	57		 push	 edi
  00087	51		 push	 ecx
  00088	8b ca		 mov	 ecx, edx
  0008a	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0008f	3b c7		 cmp	 eax, edi
  00091	75 16		 jne	 SHORT $LN23@SerializeE
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  00093	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00096	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;
; 104  : 			pData += nElementsToRead;

  00099	03 cf		 add	 ecx, edi
  0009b	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  0009e	2b f3		 sub	 esi, ebx
  000a0	75 ce		 jne	 SHORT $LL7@SerializeE

; 105  : 		}
; 106  : 	}
; 107  : }

  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	5b		 pop	 ebx
  000a5	5d		 pop	 ebp
  000a6	c2 0c 00	 ret	 12			; 0000000cH
$LN23@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 402  : 		AfxThrowArchiveException(CArchiveException::endOfFile);

  000a9	6a 00		 push	 0
  000ab	6a 03		 push	 3
  000ad	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN34@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  000b2	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN32@SerializeE:
  000b7	cc		 int	 3
??$SerializeElements@VCColumnViewData@@@@YGXAAVCArchive@@PAVCColumnViewData@@H@Z ENDP ; SerializeElements<CColumnViewData>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@VCRowViewData@@@@YGXAAVCArchive@@PAVCRowViewData@@H@Z
_TEXT	SEGMENT
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@VCRowViewData@@@@YGXAAVCArchive@@PAVCRowViewData@@H@Z PROC ; SerializeElements<CRowViewData>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR _nCount$[ebp]
  0000b	57		 push	 edi
  0000c	85 f6		 test	 esi, esi
  0000e	74 04		 je	 SHORT $LN2@SerializeE
  00010	85 c9		 test	 ecx, ecx
  00012	74 7d		 je	 SHORT $LN34@SerializeE
$LN2@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00014	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  00017	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0001a	f7 d0		 not	 eax
  0001c	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  0001e	74 32		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;
; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )

  00020	85 f6		 test	 esi, esi
  00022	74 27		 je	 SHORT $LN8@SerializeE
$LL5@SerializeE:

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00024	bb ff ff ff 01	 mov	 ebx, 33554431		; 01ffffffH
  00029	3b f3		 cmp	 esi, ebx
  0002b	0f 42 de	 cmovb	 ebx, esi

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0002e	8b fb		 mov	 edi, ebx
  00030	c1 e7 06	 shl	 edi, 6
  00033	57		 push	 edi
  00034	51		 push	 ecx
  00035	8b ca		 mov	 ecx, edx
  00037	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;
; 87   : 			pData += nElementsToWrite;

  0003c	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  0003f	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  00042	03 cf		 add	 ecx, edi
  00044	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  00047	2b f3		 sub	 esi, ebx
  00049	75 d9		 jne	 SHORT $LL5@SerializeE
$LN8@SerializeE:
  0004b	5f		 pop	 edi

; 105  : 		}
; 106  : 	}
; 107  : }

  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	5d		 pop	 ebp
  0004f	c2 0c 00	 ret	 12			; 0000000cH
$LN10@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  00052	85 f6		 test	 esi, esi
  00054	74 f5		 je	 SHORT $LN8@SerializeE
$LL7@SerializeE:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00056	bb ff ff ff 01	 mov	 ebx, 33554431		; 01ffffffH
  0005b	3b f3		 cmp	 esi, ebx
  0005d	0f 42 de	 cmovb	 ebx, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  00060	8b fb		 mov	 edi, ebx
  00062	c1 e7 06	 shl	 edi, 6
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00065	57		 push	 edi
  00066	51		 push	 ecx
  00067	8b ca		 mov	 ecx, edx
  00069	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0006e	3b c7		 cmp	 eax, edi
  00070	75 16		 jne	 SHORT $LN23@SerializeE
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  00072	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00075	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;
; 104  : 			pData += nElementsToRead;

  00078	03 cf		 add	 ecx, edi
  0007a	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  0007d	2b f3		 sub	 esi, ebx
  0007f	75 d5		 jne	 SHORT $LL7@SerializeE

; 105  : 		}
; 106  : 	}
; 107  : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	5d		 pop	 ebp
  00085	c2 0c 00	 ret	 12			; 0000000cH
$LN23@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 402  : 		AfxThrowArchiveException(CArchiveException::endOfFile);

  00088	6a 00		 push	 0
  0008a	6a 03		 push	 3
  0008c	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN34@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00091	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN32@SerializeE:
  00096	cc		 int	 3
??$SerializeElements@VCRowViewData@@@@YGXAAVCArchive@@PAVCRowViewData@@H@Z ENDP ; SerializeElements<CRowViewData>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@VCSubGraphViewData@@@@YGXAAVCArchive@@PAVCSubGraphViewData@@H@Z
_TEXT	SEGMENT
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@VCSubGraphViewData@@@@YGXAAVCArchive@@PAVCSubGraphViewData@@H@Z PROC ; SerializeElements<CSubGraphViewData>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR _nCount$[ebp]
  0000b	57		 push	 edi
  0000c	85 f6		 test	 esi, esi
  0000e	74 08		 je	 SHORT $LN2@SerializeE
  00010	85 c9		 test	 ecx, ecx
  00012	0f 84 87 00 00
	00		 je	 $LN34@SerializeE
$LN2@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00018	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  0001b	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0001e	f7 d0		 not	 eax
  00020	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00022	74 3b		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;
; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )

  00024	85 f6		 test	 esi, esi
  00026	74 30		 je	 SHORT $LN8@SerializeE
  00028	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL5@SerializeE:

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00030	bb 66 66 66 06	 mov	 ebx, 107374182		; 06666666H
  00035	3b f3		 cmp	 esi, ebx
  00037	0f 42 de	 cmovb	 ebx, esi

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0003a	8d 3c 9b	 lea	 edi, DWORD PTR [ebx+ebx*4]
  0003d	c1 e7 02	 shl	 edi, 2
  00040	57		 push	 edi
  00041	51		 push	 ecx
  00042	8b ca		 mov	 ecx, edx
  00044	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;
; 87   : 			pData += nElementsToWrite;

  00049	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  0004c	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  0004f	03 cf		 add	 ecx, edi
  00051	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  00054	2b f3		 sub	 esi, ebx
  00056	75 d8		 jne	 SHORT $LL5@SerializeE
$LN8@SerializeE:
  00058	5f		 pop	 edi

; 105  : 		}
; 106  : 	}
; 107  : }

  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	5d		 pop	 ebp
  0005c	c2 0c 00	 ret	 12			; 0000000cH
$LN10@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  0005f	85 f6		 test	 esi, esi
  00061	74 f5		 je	 SHORT $LN8@SerializeE
$LL7@SerializeE:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00063	bf 66 66 66 06	 mov	 edi, 107374182		; 06666666H
  00068	3b f7		 cmp	 esi, edi
  0006a	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0006d	8d 1c bf	 lea	 ebx, DWORD PTR [edi+edi*4]
  00070	c1 e3 02	 shl	 ebx, 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00073	53		 push	 ebx
  00074	51		 push	 ecx
  00075	8b ca		 mov	 ecx, edx
  00077	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0007c	3b c3		 cmp	 eax, ebx
  0007e	75 16		 jne	 SHORT $LN23@SerializeE
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  00080	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00083	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;
; 104  : 			pData += nElementsToRead;

  00086	03 cb		 add	 ecx, ebx
  00088	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  0008b	2b f7		 sub	 esi, edi
  0008d	75 d4		 jne	 SHORT $LL7@SerializeE

; 105  : 		}
; 106  : 	}
; 107  : }

  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	5d		 pop	 ebp
  00093	c2 0c 00	 ret	 12			; 0000000cH
$LN23@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 402  : 		AfxThrowArchiveException(CArchiveException::endOfFile);

  00096	6a 00		 push	 0
  00098	6a 03		 push	 3
  0009a	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN34@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  0009f	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN32@SerializeE:
  000a4	cc		 int	 3
??$SerializeElements@VCSubGraphViewData@@@@YGXAAVCArchive@@PAVCSubGraphViewData@@H@Z ENDP ; SerializeElements<CSubGraphViewData>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1CViewData@@QAE@XZ
_TEXT	SEGMENT
??1CViewData@@QAE@XZ PROC				; CViewData::~CViewData, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$CList@VCColumnViewData@@AAV1@@@UAE@XZ ; CList<CColumnViewData,CColumnViewData &>::~CList<CColumnViewData,CColumnViewData &>
??1CViewData@@QAE@XZ ENDP				; CViewData::~CViewData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_G?$CList@VCColumnViewData@@AAV1@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CList@VCColumnViewData@@AAV1@@@UAEPAXI@Z PROC	; CList<CColumnViewData,CColumnViewData &>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CList@VCColumnViewData@@AAV1@@@UAE@XZ ; CList<CColumnViewData,CColumnViewData &>::~CList<CColumnViewData,CColumnViewData &>
  0000b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0000e	a8 01		 test	 al, 1
  00010	74 1f		 je	 SHORT $LN9@scalar
  00012	a8 04		 test	 al, 4
  00014	75 10		 jne	 SHORT $LN3@scalar

; 112  : 	{ ::operator delete(p); }

  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	83 c4 04	 add	 esp, 4
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN3@scalar:
  00026	6a 1c		 push	 28			; 0000001cH
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0002e	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??_G?$CList@VCColumnViewData@@AAV1@@@UAEPAXI@Z ENDP	; CList<CColumnViewData,CColumnViewData &>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CList@VCColumnViewData@@AAV1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_newData$2 = -52					; size = 28
_nNewCount$1$ = -24					; size = 4
_pData$1$ = -20						; size = 4
_pData$1$ = -20						; size = 4
_pNode$1$ = -20						; size = 4
_nElementsToRead$1$ = -16				; size = 4
_nElementsLeft$1$ = -16					; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ar$ = 8						; size = 4
?Serialize@?$CList@VCColumnViewData@@AAV1@@@UAEXAAVCArchive@@@Z PROC ; CList<CColumnViewData,CColumnViewData &>::Serialize, COMDAT
; _this$ = ecx

; 1169 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Serialize@?$CList@VCColumnViewData@@AAV1@@@UAEXAAVCArchive@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d f0	 mov	 DWORD PTR _this$1$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00030	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00033	f7 d0		 not	 eax
  00035	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1174 : 	if (ar.IsStoring())

  00037	0f 84 c9 00 00
	00		 je	 $LN7@Serialize

; 1175 : 	{
; 1176 : 		ar.WriteCount(m_nCount);

  0003d	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00040	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00045	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00048	89 45 ec	 mov	 DWORD PTR _pNode$1$[ebp], eax
  0004b	85 c0		 test	 eax, eax
  0004d	0f 84 03 02 00
	00		 je	 $LN87@Serialize
$LL4@Serialize:

; 1178 : 		{
; 1179 : 			ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1180 : 			TYPE* pData;
; 1181 : 			/*
; 1182 : 			 * in some cases the & operator might be overloaded, and we cannot use it to obtain
; 1183 : 			 * the address of a given object.  We then use the following trick to get the address
; 1184 : 			 */
; 1185 : 			pData = reinterpret_cast< TYPE* >( &reinterpret_cast< int& >( static_cast< TYPE& >( pNode->data ) ) );

  00053	8d 70 08	 lea	 esi, DWORD PTR [eax+8]

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00056	85 f6		 test	 esi, esi
  00058	0f 84 15 02 00
	00		 je	 $LN77@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00061	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00064	f7 d0		 not	 eax
  00066	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00068	74 38		 je	 SHORT $LN22@Serialize

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0006a	b8 01 00 00 00	 mov	 eax, 1
  0006f	89 45 f0	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
$LL17@Serialize:

; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00072	bb 24 49 92 04	 mov	 ebx, 76695844		; 04924924H
  00077	3b c3		 cmp	 eax, ebx
  00079	0f 42 d8	 cmovb	 ebx, eax

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0007c	8d 3c dd 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*8]
  00083	2b fb		 sub	 edi, ebx
  00085	c1 e7 02	 shl	 edi, 2
  00088	57		 push	 edi
  00089	56		 push	 esi
  0008a	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  0008f	8b 45 f0	 mov	 eax, DWORD PTR _nElementsLeft$1$[ebp]

; 87   : 			pData += nElementsToWrite;

  00092	03 f7		 add	 esi, edi
  00094	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00097	2b c3		 sub	 eax, ebx
  00099	89 45 f0	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
  0009c	85 c0		 test	 eax, eax
  0009e	75 d2		 jne	 SHORT $LL17@Serialize

; 88   : 		}
; 89   : 	}

  000a0	eb 40		 jmp	 SHORT $LN2@Serialize
$LN22@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  000a2	bb 01 00 00 00	 mov	 ebx, 1
  000a7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL19@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  000b0	b8 24 49 92 04	 mov	 eax, 76695844		; 04924924H
  000b5	3b d8		 cmp	 ebx, eax
  000b7	0f 42 c3	 cmovb	 eax, ebx
  000ba	89 45 f0	 mov	 DWORD PTR _nElementsToRead$1$[ebp], eax

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  000bd	8d 3c c5 00 00
	00 00		 lea	 edi, DWORD PTR [eax*8]
  000c4	2b f8		 sub	 edi, eax
  000c6	c1 e7 02	 shl	 edi, 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  000c9	57		 push	 edi
  000ca	56		 push	 esi
  000cb	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  000d0	3b c7		 cmp	 eax, edi
  000d2	0f 85 92 01 00
	00		 jne	 $LN76@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 104  : 			pData += nElementsToRead;

  000d8	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000db	03 f7		 add	 esi, edi
  000dd	2b 5d f0	 sub	 ebx, DWORD PTR _nElementsToRead$1$[ebp]
  000e0	75 ce		 jne	 SHORT $LL19@Serialize
$LN2@Serialize:

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  000e2	8b 45 ec	 mov	 eax, DWORD PTR _pNode$1$[ebp]
  000e5	8b 00		 mov	 eax, DWORD PTR [eax]
  000e7	89 45 ec	 mov	 DWORD PTR _pNode$1$[ebp], eax
  000ea	85 c0		 test	 eax, eax
  000ec	0f 85 61 ff ff
	ff		 jne	 $LL4@Serialize

; 1198 : 	}
; 1199 : }

  000f2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fc	59		 pop	 ecx
  000fd	5f		 pop	 edi
  000fe	5e		 pop	 esi
  000ff	5b		 pop	 ebx
  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c2 04 00	 ret	 4
$LN7@Serialize:

; 1186 : 			SerializeElements<TYPE>(ar, pData, 1);
; 1187 : 		}
; 1188 : 	}
; 1189 : 	else
; 1190 : 	{
; 1191 : 		DWORD_PTR nNewCount = ar.ReadCount();

  00106	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount

; 1192 : 		while (nNewCount--)

  0010b	85 c0		 test	 eax, eax
  0010d	0f 84 43 01 00
	00		 je	 $LN87@Serialize
$LL5@Serialize:

; 1194 : 			TYPE newData[1];

  00113	68 00 00 00 00	 push	 OFFSET ??1CColumnViewData@@QAE@XZ
  00118	68 00 00 00 00	 push	 OFFSET ??0CColumnViewData@@QAE@XZ ; CColumnViewData::CColumnViewData
  0011d	48		 dec	 eax
  0011e	6a 01		 push	 1
  00120	89 45 e8	 mov	 DWORD PTR _nNewCount$1$[ebp], eax
  00123	8d 45 cc	 lea	 eax, DWORD PTR _newData$2[ebp]
  00126	6a 1c		 push	 28			; 0000001cH
  00128	50		 push	 eax
  00129	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0012e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1194 : 			TYPE newData[1];

  00131	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00138	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0013b	f7 d0		 not	 eax
  0013d	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  0013f	8d 45 cc	 lea	 eax, DWORD PTR _newData$2[ebp]
  00142	89 45 ec	 mov	 DWORD PTR _pData$1$[ebp], eax
  00145	74 37		 je	 SHORT $LN43@Serialize

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  00147	bb 01 00 00 00	 mov	 ebx, 1
  0014c	0f 1f 40 00	 npad	 4
$LL38@Serialize:

; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00150	bf 24 49 92 04	 mov	 edi, 76695844		; 04924924H
  00155	3b df		 cmp	 ebx, edi
  00157	0f 42 fb	 cmovb	 edi, ebx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0015a	8d 34 fd 00 00
	00 00		 lea	 esi, DWORD PTR [edi*8]
  00161	2b f7		 sub	 esi, edi
  00163	c1 e6 02	 shl	 esi, 2
  00166	56		 push	 esi
  00167	50		 push	 eax
  00168	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 87   : 			pData += nElementsToWrite;

  0016d	8b 45 ec	 mov	 eax, DWORD PTR _pData$1$[ebp]
  00170	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00173	03 c6		 add	 eax, esi
  00175	89 45 ec	 mov	 DWORD PTR _pData$1$[ebp], eax
  00178	2b df		 sub	 ebx, edi
  0017a	75 d4		 jne	 SHORT $LL38@Serialize

; 88   : 		}
; 89   : 	}

  0017c	eb 39		 jmp	 SHORT $LN41@Serialize
$LN43@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  0017e	bf 01 00 00 00	 mov	 edi, 1
$LL40@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00183	bb 24 49 92 04	 mov	 ebx, 76695844		; 04924924H
  00188	3b fb		 cmp	 edi, ebx
  0018a	0f 42 df	 cmovb	 ebx, edi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0018d	8d 34 dd 00 00
	00 00		 lea	 esi, DWORD PTR [ebx*8]
  00194	2b f3		 sub	 esi, ebx
  00196	c1 e6 02	 shl	 esi, 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00199	56		 push	 esi
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  001a0	3b c6		 cmp	 eax, esi
  001a2	0f 85 c2 00 00
	00		 jne	 $LN76@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  001a8	8b 45 ec	 mov	 eax, DWORD PTR _pData$1$[ebp]
  001ab	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]

; 104  : 			pData += nElementsToRead;

  001ae	03 c6		 add	 eax, esi
  001b0	89 45 ec	 mov	 DWORD PTR _pData$1$[ebp], eax
  001b3	2b fb		 sub	 edi, ebx
  001b5	75 cc		 jne	 SHORT $LL40@Serialize
$LN41@Serialize:

; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  001b7	8b 5d f0	 mov	 ebx, DWORD PTR _this$1$[ebp]

; 902  : 	if (m_pNodeFree == NULL)

  001ba	83 7b 10 00	 cmp	 DWORD PTR [ebx+16], 0

; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  001be	8b 73 08	 mov	 esi, DWORD PTR [ebx+8]

; 902  : 	if (m_pNodeFree == NULL)

  001c1	75 32		 jne	 SHORT $LN64@Serialize

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  001c3	6a 24		 push	 36			; 00000024H
  001c5	ff 73 18	 push	 DWORD PTR [ebx+24]
  001c8	8d 43 14	 lea	 eax, DWORD PTR [ebx+20]
  001cb	50		 push	 eax
  001cc	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  001d1	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  001d4	8d 0c d5 f9 ff
	ff ff		 lea	 ecx, DWORD PTR [edx*8-7]
  001db	03 ca		 add	 ecx, edx

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  001dd	83 c2 ff	 add	 edx, -1
  001e0	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  001e3	78 10		 js	 SHORT $LN64@Serialize
$LL61@Serialize:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  001e5	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  001e8	89 01		 mov	 DWORD PTR [ecx], eax

; 915  : 			m_pNodeFree = pNode;

  001ea	89 4b 10	 mov	 DWORD PTR [ebx+16], ecx
  001ed	83 e9 24	 sub	 ecx, 36			; 00000024H
  001f0	83 ea 01	 sub	 edx, 1
  001f3	79 f0		 jns	 SHORT $LL61@Serialize
$LN64@Serialize:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  001f5	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]
  001f8	85 ff		 test	 edi, edi
  001fa	74 77		 je	 SHORT $LN77@Serialize

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  001fc	8b 07		 mov	 eax, DWORD PTR [edi]

; 922  : 	pNode->pPrev = pPrev;
; 923  : 	pNode->pNext = pNext;
; 924  : 	m_nCount++;
; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;

  001fe	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  00201	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  00204	89 77 04	 mov	 DWORD PTR [edi+4], esi
  00207	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  0020d	ff 43 0c	 inc	 DWORD PTR [ebx+12]
  00210	e8 00 00 00 00	 call	 ??0CColumnViewData@@QAE@XZ ; CColumnViewData::CColumnViewData

; 969  : 	pNewNode->data = newElement;

  00215	8d 45 cc	 lea	 eax, DWORD PTR _newData$2[ebp]
  00218	50		 push	 eax
  00219	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0021c	e8 00 00 00 00	 call	 ??4CColumnViewData@@QAEAAV0@ABV0@@Z ; CColumnViewData::operator=

; 970  : 	if (m_pNodeTail != NULL)

  00221	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00224	85 c0		 test	 eax, eax
  00226	74 04		 je	 SHORT $LN55@Serialize

; 971  : 		m_pNodeTail->pNext = pNewNode;

  00228	89 38		 mov	 DWORD PTR [eax], edi
  0022a	eb 03		 jmp	 SHORT $LN56@Serialize
$LN55@Serialize:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;

  0022c	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
$LN56@Serialize:

; 1195 : 			SerializeElements<TYPE>(ar, newData, 1);
; 1196 : 			AddTail(newData[0]);
; 1197 : 		}

  0022f	68 00 00 00 00	 push	 OFFSET ??1CColumnViewData@@QAE@XZ
  00234	6a 01		 push	 1
  00236	6a 1c		 push	 28			; 0000001cH
  00238	8d 45 cc	 lea	 eax, DWORD PTR _newData$2[ebp]

; 974  : 	m_pNodeTail = pNewNode;

  0023b	89 7b 08	 mov	 DWORD PTR [ebx+8], edi

; 1195 : 			SerializeElements<TYPE>(ar, newData, 1);
; 1196 : 			AddTail(newData[0]);
; 1197 : 		}

  0023e	50		 push	 eax
  0023f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00246	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0024b	8b 45 e8	 mov	 eax, DWORD PTR _nNewCount$1$[ebp]
  0024e	85 c0		 test	 eax, eax
  00250	0f 85 bd fe ff
	ff		 jne	 $LL5@Serialize
$LN87@Serialize:

; 1198 : 	}
; 1199 : }

  00256	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00259	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00260	59		 pop	 ecx
  00261	5f		 pop	 edi
  00262	5e		 pop	 esi
  00263	5b		 pop	 ebx
  00264	8b e5		 mov	 esp, ebp
  00266	5d		 pop	 ebp
  00267	c2 04 00	 ret	 4
$LN76@Serialize:
  0026a	6a 00		 push	 0
  0026c	6a 03		 push	 3
  0026e	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN77@Serialize:
  00273	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN107@Serialize:
  00278	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Serialize@?$CList@VCColumnViewData@@AAV1@@@UAEXAAVCArchive@@@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ??1CColumnViewData@@QAE@XZ
  00005	6a 01		 push	 1
  00007	6a 1c		 push	 28			; 0000001cH
  00009	8d 45 cc	 lea	 eax, DWORD PTR _newData$2[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00012	c3		 ret	 0
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$?Serialize@?$CList@VCColumnViewData@@AAV1@@@UAEXAAVCArchive@@@Z:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Serialize@?$CList@VCColumnViewData@@AAV1@@@UAEXAAVCArchive@@@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Serialize@?$CList@VCColumnViewData@@AAV1@@@UAEXAAVCArchive@@@Z ENDP ; CList<CColumnViewData,CColumnViewData &>::Serialize
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??1?$CList@VCColumnViewData@@AAV1@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CList@VCColumnViewData@@AAV1@@@UAE@XZ PROC		; CList<CColumnViewData,CColumnViewData &>::~CList<CColumnViewData,CColumnViewData &>, COMDAT
; _this$ = ecx

; 878  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CList@VCColumnViewData@@AAV1@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx

; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00026	8b 77 04	 mov	 esi, DWORD PTR [edi+4]

; 878  : {

  00029	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CList@VCColumnViewData@@AAV1@@@6B@

; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  0002f	85 f6		 test	 esi, esi
  00031	74 0e		 je	 SHORT $LN5@CList
$LL6@CList:

; 868  : 		pNode->data.~TYPE();

  00033	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00036	e8 00 00 00 00	 call	 ??1?$CList@VCRowViewData@@AAV1@@@UAE@XZ ; CList<CRowViewData,CRowViewData &>::~CList<CRowViewData,CRowViewData &>

; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  0003b	8b 36		 mov	 esi, DWORD PTR [esi]
  0003d	85 f6		 test	 esi, esi
  0003f	75 f2		 jne	 SHORT $LL6@CList
$LN5@CList:

; 869  : 
; 870  : 	m_nCount = 0;
; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 872  : 	m_pBlocks->FreeDataChain();

  00041	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00044	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  0004b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00052	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00059	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00060	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00065	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 879  : 	RemoveAll();
; 880  : 	ASSERT(m_nCount == 0);
; 881  : }

  0006c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00076	59		 pop	 ecx
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
  0007d	cc		 int	 3
  0007e	cc		 int	 3
  0007f	cc		 int	 3
  00080	cc		 int	 3
  00081	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CList@VCColumnViewData@@AAV1@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CList@VCColumnViewData@@AAV1@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CList@VCColumnViewData@@AAV1@@@UAE@XZ ENDP		; CList<CColumnViewData,CColumnViewData &>::~CList<CColumnViewData,CColumnViewData &>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?NewNode@?$CList@VCColumnViewData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z
_TEXT	SEGMENT
_pPrev$ = 8						; size = 4
_pNext$ = 12						; size = 4
?NewNode@?$CList@VCColumnViewData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z PROC ; CList<CColumnViewData,CColumnViewData &>::NewNode, COMDAT
; _this$ = ecx

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 902  : 	if (m_pNodeFree == NULL)

  00007	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0000b	75 33		 jne	 SHORT $LN7@NewNode

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  0000d	6a 24		 push	 36			; 00000024H
  0000f	ff 76 18	 push	 DWORD PTR [esi+24]
  00012	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001b	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0001e	83 c0 08	 add	 eax, 8
  00021	8d 0c d2	 lea	 ecx, DWORD PTR [edx+edx*8]
  00024	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00027	83 c0 dc	 add	 eax, -36		; ffffffdcH

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  0002a	83 c2 ff	 add	 edx, -1
  0002d	78 11		 js	 SHORT $LN7@NewNode
  0002f	90		 npad	 1
$LL4@NewNode:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	89 08		 mov	 DWORD PTR [eax], ecx

; 915  : 			m_pNodeFree = pNode;

  00035	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00038	83 e8 24	 sub	 eax, 36			; 00000024H
  0003b	83 ea 01	 sub	 edx, 1
  0003e	79 f0		 jns	 SHORT $LL4@NewNode
$LN7@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00040	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  00043	85 ff		 test	 edi, edi
  00045	74 23		 je	 SHORT $LN17@NewNode

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00047	8b 07		 mov	 eax, DWORD PTR [edi]

; 922  : 	pNode->pPrev = pPrev;

  00049	8b 4d 08	 mov	 ecx, DWORD PTR _pPrev$[ebp]
  0004c	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0004f	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 923  : 	pNode->pNext = pNext;

  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _pNext$[ebp]
  00055	89 0f		 mov	 DWORD PTR [edi], ecx

; 924  : 	m_nCount++;
; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;

  00057	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0005a	ff 46 0c	 inc	 DWORD PTR [esi+12]
  0005d	e8 00 00 00 00	 call	 ??0CColumnViewData@@QAE@XZ ; CColumnViewData::CColumnViewData

; 930  : #pragma pop_macro("new")
; 931  : 	return pNode;

  00062	8b c7		 mov	 eax, edi
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi

; 932  : }

  00066	5d		 pop	 ebp
  00067	c2 08 00	 ret	 8
$LN17@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  0006a	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN15@NewNode:
  0006f	cc		 int	 3
?NewNode@?$CList@VCColumnViewData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z ENDP ; CList<CColumnViewData,CColumnViewData &>::NewNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAll@?$CList@VCColumnViewData@@AAV1@@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@?$CList@VCColumnViewData@@AAV1@@@QAEXXZ PROC	; CList<CColumnViewData,CColumnViewData &>::RemoveAll, COMDAT
; _this$ = ecx

; 862  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 863  : 	ASSERT_VALID(this);
; 864  : 
; 865  : 	// destroy elements
; 866  : 	CNode* pNode;
; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00004	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00007	85 f6		 test	 esi, esi
  00009	74 13		 je	 SHORT $LN3@RemoveAll
  0000b	0f 1f 44 00 00	 npad	 5
$LL4@RemoveAll:

; 868  : 		pNode->data.~TYPE();

  00010	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00013	e8 00 00 00 00	 call	 ??1?$CList@VCRowViewData@@AAV1@@@UAE@XZ ; CList<CRowViewData,CRowViewData &>::~CList<CRowViewData,CRowViewData &>
  00018	8b 36		 mov	 esi, DWORD PTR [esi]
  0001a	85 f6		 test	 esi, esi
  0001c	75 f2		 jne	 SHORT $LL4@RemoveAll
$LN3@RemoveAll:

; 869  : 
; 870  : 	m_nCount = 0;
; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 872  : 	m_pBlocks->FreeDataChain();

  0001e	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00021	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00028	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  0002f	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00036	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0003d	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00042	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi

; 874  : }

  0004b	c3		 ret	 0
?RemoveAll@?$CList@VCColumnViewData@@AAV1@@@QAEXXZ ENDP	; CList<CColumnViewData,CColumnViewData &>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?AddTail@?$CList@VCColumnViewData@@AAV1@@@QAEPAU__POSITION@@AAVCColumnViewData@@@Z
_TEXT	SEGMENT
_newElement$ = 8					; size = 4
?AddTail@?$CList@VCColumnViewData@@AAV1@@@QAEPAU__POSITION@@AAVCColumnViewData@@@Z PROC ; CList<CColumnViewData,CColumnViewData &>::AddTail, COMDAT
; _this$ = ecx

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 902  : 	if (m_pNodeFree == NULL)

  00008	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0

; 966  : 	ASSERT_VALID(this);
; 967  : 
; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  0000c	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 902  : 	if (m_pNodeFree == NULL)

  0000f	75 32		 jne	 SHORT $LN11@AddTail

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  00011	6a 24		 push	 36			; 00000024H
  00013	ff 76 18	 push	 DWORD PTR [esi+24]
  00016	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001f	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00022	83 c0 08	 add	 eax, 8
  00025	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00028	83 c2 ff	 add	 edx, -1
  0002b	8d 0c c9	 lea	 ecx, DWORD PTR [ecx+ecx*8]
  0002e	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  00031	78 10		 js	 SHORT $LN11@AddTail
$LL8@AddTail:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00033	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00036	89 01		 mov	 DWORD PTR [ecx], eax

; 915  : 			m_pNodeFree = pNode;

  00038	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0003b	83 e9 24	 sub	 ecx, 36			; 00000024H
  0003e	83 ea 01	 sub	 edx, 1
  00041	79 f0		 jns	 SHORT $LL8@AddTail
$LN11@AddTail:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00043	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00046	85 db		 test	 ebx, ebx
  00048	74 48		 je	 SHORT $LN22@AddTail

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  0004a	8b 03		 mov	 eax, DWORD PTR [ebx]

; 922  : 	pNode->pPrev = pPrev;
; 923  : 	pNode->pNext = pNext;
; 924  : 	m_nCount++;
; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;

  0004c	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0004f	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00052	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
  00055	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  0005b	ff 46 0c	 inc	 DWORD PTR [esi+12]
  0005e	e8 00 00 00 00	 call	 ??0CColumnViewData@@QAE@XZ ; CColumnViewData::CColumnViewData

; 969  : 	pNewNode->data = newElement;

  00063	ff 75 08	 push	 DWORD PTR _newElement$[ebp]
  00066	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  00069	e8 00 00 00 00	 call	 ??4CColumnViewData@@QAEAAV0@ABV0@@Z ; CColumnViewData::operator=

; 970  : 	if (m_pNodeTail != NULL)

  0006e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00071	85 c0		 test	 eax, eax
  00073	74 0e		 je	 SHORT $LN2@AddTail

; 971  : 		m_pNodeTail->pNext = pNewNode;

  00075	89 18		 mov	 DWORD PTR [eax], ebx

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00077	8b c3		 mov	 eax, ebx
  00079	5f		 pop	 edi
  0007a	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx

; 976  : }

  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
$LN2@AddTail:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00083	5f		 pop	 edi
  00084	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  00087	8b c3		 mov	 eax, ebx
  00089	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx

; 976  : }

  0008e	5d		 pop	 ebp
  0008f	c2 04 00	 ret	 4
$LN22@AddTail:

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00092	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN20@AddTail:
  00097	cc		 int	 3
?AddTail@?$CList@VCColumnViewData@@AAV1@@@QAEPAU__POSITION@@AAVCColumnViewData@@@Z ENDP ; CList<CColumnViewData,CColumnViewData &>::AddTail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??0?$CList@VCColumnViewData@@AAV1@@@QAE@H@Z
_TEXT	SEGMENT
_nBlockSize$ = 8					; size = 4
??0?$CList@VCColumnViewData@@AAV1@@@QAE@H@Z PROC	; CList<CColumnViewData,CColumnViewData &>::CList<CColumnViewData,CColumnViewData &>, COMDAT
; _this$ = ecx

; 851  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;
; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 856  : 	m_pBlocks = NULL;
; 857  : 	m_nBlockSize = nBlockSize;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nBlockSize$[ebp]
  00006	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 858  : }

  00009	8b c1		 mov	 eax, ecx
  0000b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CList@VCColumnViewData@@AAV1@@@6B@
  00011	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00018	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0001f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00026	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0002d	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??0?$CList@VCColumnViewData@@AAV1@@@QAE@H@Z ENDP	; CList<CColumnViewData,CColumnViewData &>::CList<CColumnViewData,CColumnViewData &>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1CColumnViewData@@QAE@XZ
_TEXT	SEGMENT
??1CColumnViewData@@QAE@XZ PROC				; CColumnViewData::~CColumnViewData, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$CList@VCRowViewData@@AAV1@@@UAE@XZ ; CList<CRowViewData,CRowViewData &>::~CList<CRowViewData,CRowViewData &>
??1CColumnViewData@@QAE@XZ ENDP				; CColumnViewData::~CColumnViewData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_G?$CList@VCRowViewData@@AAV1@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CList@VCRowViewData@@AAV1@@@UAEPAXI@Z PROC	; CList<CRowViewData,CRowViewData &>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CList@VCRowViewData@@AAV1@@@UAE@XZ ; CList<CRowViewData,CRowViewData &>::~CList<CRowViewData,CRowViewData &>
  0000b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0000e	a8 01		 test	 al, 1
  00010	74 1f		 je	 SHORT $LN9@scalar
  00012	a8 04		 test	 al, 4
  00014	75 10		 jne	 SHORT $LN3@scalar

; 112  : 	{ ::operator delete(p); }

  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	83 c4 04	 add	 esp, 4
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN3@scalar:
  00026	6a 1c		 push	 28			; 0000001cH
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0002e	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??_G?$CList@VCRowViewData@@AAV1@@@UAEPAXI@Z ENDP	; CList<CRowViewData,CRowViewData &>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CList@VCRowViewData@@AAV1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_nNewCount$1$ = -100					; size = 4
_nElementsToRead$1$ = -96				; size = 4
_nElementsToRead$1$ = -92				; size = 4
_nElementsLeft$1$ = -92					; size = 4
_this$GSCopy$1$ = -92					; size = 4
_ar$GSCopy$1$ = -88					; size = 4
_pData$1$ = -84						; size = 4
_pData$1$ = -84						; size = 4
_pNode$1$ = -84						; size = 4
_newData$2 = -80					; size = 64
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_ar$ = 8						; size = 4
?Serialize@?$CList@VCRowViewData@@AAV1@@@UAEXAAVCArchive@@@Z PROC ; CList<CRowViewData,CRowViewData &>::Serialize, COMDAT
; _this$ = ecx

; 1169 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Serialize@?$CList@VCRowViewData@@AAV1@@@UAEXAAVCArchive@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d a4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00033	89 4d a8	 mov	 DWORD PTR _ar$GSCopy$1$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00036	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00039	f7 d0		 not	 eax
  0003b	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1174 : 	if (ar.IsStoring())

  0003d	0f 84 ad 00 00
	00		 je	 $LN7@Serialize

; 1175 : 	{
; 1176 : 		ar.WriteCount(m_nCount);

  00043	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00046	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  0004b	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0004e	89 45 ac	 mov	 DWORD PTR _pNode$1$[ebp], eax
  00051	85 c0		 test	 eax, eax
  00053	0f 84 ec 01 00
	00		 je	 $LN87@Serialize
  00059	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@Serialize:

; 1178 : 		{
; 1179 : 			ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1180 : 			TYPE* pData;
; 1181 : 			/*
; 1182 : 			 * in some cases the & operator might be overloaded, and we cannot use it to obtain
; 1183 : 			 * the address of a given object.  We then use the following trick to get the address
; 1184 : 			 */
; 1185 : 			pData = reinterpret_cast< TYPE* >( &reinterpret_cast< int& >( static_cast< TYPE& >( pNode->data ) ) );

  00060	8d 70 08	 lea	 esi, DWORD PTR [eax+8]

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00063	85 f6		 test	 esi, esi
  00065	0f 84 01 02 00
	00		 je	 $LN77@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0006b	8b 4d a8	 mov	 ecx, DWORD PTR _ar$GSCopy$1$[ebp]
  0006e	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00071	f7 d0		 not	 eax
  00073	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00075	74 32		 je	 SHORT $LN22@Serialize

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  00077	b8 01 00 00 00	 mov	 eax, 1
  0007c	89 45 a4	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
  0007f	90		 npad	 1
$LL17@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00080	bb ff ff ff 01	 mov	 ebx, 33554431		; 01ffffffH
  00085	3b c3		 cmp	 eax, ebx
  00087	0f 42 d8	 cmovb	 ebx, eax

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0008a	8b fb		 mov	 edi, ebx
  0008c	c1 e7 06	 shl	 edi, 6
  0008f	57		 push	 edi
  00090	56		 push	 esi
  00091	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  00096	8b 45 a4	 mov	 eax, DWORD PTR _nElementsLeft$1$[ebp]

; 87   : 			pData += nElementsToWrite;

  00099	03 f7		 add	 esi, edi
  0009b	8b 4d a8	 mov	 ecx, DWORD PTR _ar$GSCopy$1$[ebp]
  0009e	2b c3		 sub	 eax, ebx
  000a0	89 45 a4	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
  000a3	85 c0		 test	 eax, eax
  000a5	75 d9		 jne	 SHORT $LL17@Serialize

; 88   : 		}
; 89   : 	}

  000a7	eb 32		 jmp	 SHORT $LN2@Serialize
$LN22@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  000a9	bf 01 00 00 00	 mov	 edi, 1
  000ae	66 90		 npad	 2
$LL19@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  000b0	b8 ff ff ff 01	 mov	 eax, 33554431		; 01ffffffH
  000b5	3b f8		 cmp	 edi, eax
  000b7	0f 42 c7	 cmovb	 eax, edi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  000ba	8b d8		 mov	 ebx, eax
  000bc	89 45 a4	 mov	 DWORD PTR _nElementsToRead$1$[ebp], eax
  000bf	c1 e3 06	 shl	 ebx, 6
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  000c2	53		 push	 ebx
  000c3	56		 push	 esi
  000c4	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  000c9	3b c3		 cmp	 eax, ebx
  000cb	0f 85 92 01 00
	00		 jne	 $LN76@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 104  : 			pData += nElementsToRead;

  000d1	8b 4d a8	 mov	 ecx, DWORD PTR _ar$GSCopy$1$[ebp]
  000d4	03 f3		 add	 esi, ebx
  000d6	2b 7d a4	 sub	 edi, DWORD PTR _nElementsToRead$1$[ebp]
  000d9	75 d5		 jne	 SHORT $LL19@Serialize
$LN2@Serialize:

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  000db	8b 45 ac	 mov	 eax, DWORD PTR _pNode$1$[ebp]
  000de	8b 00		 mov	 eax, DWORD PTR [eax]
  000e0	89 45 ac	 mov	 DWORD PTR _pNode$1$[ebp], eax
  000e3	85 c0		 test	 eax, eax
  000e5	0f 85 75 ff ff
	ff		 jne	 $LL4@Serialize
  000eb	e9 55 01 00 00	 jmp	 $LN87@Serialize
$LN7@Serialize:

; 1186 : 			SerializeElements<TYPE>(ar, pData, 1);
; 1187 : 		}
; 1188 : 	}
; 1189 : 	else
; 1190 : 	{
; 1191 : 		DWORD_PTR nNewCount = ar.ReadCount();

  000f0	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount

; 1192 : 		while (nNewCount--)

  000f5	85 c0		 test	 eax, eax
  000f7	0f 84 48 01 00
	00		 je	 $LN87@Serialize
  000fd	0f 1f 00	 npad	 3
$LL5@Serialize:

; 1194 : 			TYPE newData[1];

  00100	68 00 00 00 00	 push	 OFFSET ??1CRowViewData@@QAE@XZ
  00105	68 00 00 00 00	 push	 OFFSET ??0CRowViewData@@QAE@XZ ; CRowViewData::CRowViewData
  0010a	48		 dec	 eax
  0010b	6a 01		 push	 1
  0010d	89 45 9c	 mov	 DWORD PTR _nNewCount$1$[ebp], eax
  00110	8d 45 b0	 lea	 eax, DWORD PTR _newData$2[ebp]
  00113	6a 40		 push	 64			; 00000040H
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0011b	8b 4d a8	 mov	 ecx, DWORD PTR _ar$GSCopy$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1194 : 			TYPE newData[1];

  0011e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00125	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00128	f7 d0		 not	 eax
  0012a	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  0012c	74 3c		 je	 SHORT $LN43@Serialize

; 79   : 		pData = pElements;

  0012e	8d 45 b0	 lea	 eax, DWORD PTR _newData$2[ebp]
  00131	bb 01 00 00 00	 mov	 ebx, 1
  00136	89 45 ac	 mov	 DWORD PTR _pData$1$[ebp], eax
  00139	0f 1f 80 00 00
	00 00		 npad	 7
$LL38@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00140	bf ff ff ff 01	 mov	 edi, 33554431		; 01ffffffH
  00145	3b df		 cmp	 ebx, edi
  00147	0f 42 fb	 cmovb	 edi, ebx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0014a	8b f7		 mov	 esi, edi
  0014c	c1 e6 06	 shl	 esi, 6
  0014f	56		 push	 esi
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 87   : 			pData += nElementsToWrite;

  00156	8b 45 ac	 mov	 eax, DWORD PTR _pData$1$[ebp]
  00159	8b 4d a8	 mov	 ecx, DWORD PTR _ar$GSCopy$1$[ebp]
  0015c	03 c6		 add	 eax, esi
  0015e	89 45 ac	 mov	 DWORD PTR _pData$1$[ebp], eax
  00161	2b df		 sub	 ebx, edi
  00163	75 db		 jne	 SHORT $LL38@Serialize

; 88   : 		}
; 89   : 	}

  00165	8b 5d a4	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  00168	eb 3c		 jmp	 SHORT $LN41@Serialize
$LN43@Serialize:

; 96   : 		pData = pElements;

  0016a	8d 55 b0	 lea	 edx, DWORD PTR _newData$2[ebp]
  0016d	be 01 00 00 00	 mov	 esi, 1
  00172	89 55 ac	 mov	 DWORD PTR _pData$1$[ebp], edx
$LL40@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00175	b8 ff ff ff 01	 mov	 eax, 33554431		; 01ffffffH
  0017a	3b f0		 cmp	 esi, eax
  0017c	0f 42 c6	 cmovb	 eax, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0017f	8b f8		 mov	 edi, eax
  00181	89 45 a0	 mov	 DWORD PTR _nElementsToRead$1$[ebp], eax
  00184	c1 e7 06	 shl	 edi, 6
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00187	57		 push	 edi
  00188	52		 push	 edx
  00189	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0018e	3b c7		 cmp	 eax, edi
  00190	0f 85 cd 00 00
	00		 jne	 $LN76@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  00196	8b 55 ac	 mov	 edx, DWORD PTR _pData$1$[ebp]
  00199	8b 4d a8	 mov	 ecx, DWORD PTR _ar$GSCopy$1$[ebp]

; 104  : 			pData += nElementsToRead;

  0019c	03 d7		 add	 edx, edi
  0019e	89 55 ac	 mov	 DWORD PTR _pData$1$[ebp], edx
  001a1	2b 75 a0	 sub	 esi, DWORD PTR _nElementsToRead$1$[ebp]
  001a4	75 cf		 jne	 SHORT $LL40@Serialize
$LN41@Serialize:

; 902  : 	if (m_pNodeFree == NULL)

  001a6	83 7b 10 00	 cmp	 DWORD PTR [ebx+16], 0

; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  001aa	8b 73 08	 mov	 esi, DWORD PTR [ebx+8]

; 902  : 	if (m_pNodeFree == NULL)

  001ad	75 31		 jne	 SHORT $LN64@Serialize

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  001af	6a 48		 push	 72			; 00000048H
  001b1	ff 73 18	 push	 DWORD PTR [ebx+24]
  001b4	8d 43 14	 lea	 eax, DWORD PTR [ebx+20]
  001b7	50		 push	 eax
  001b8	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  001bd	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  001c0	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]
  001c3	8d 0c ca	 lea	 ecx, DWORD PTR [edx+ecx*8]

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  001c6	83 c2 ff	 add	 edx, -1
  001c9	8d 0c c8	 lea	 ecx, DWORD PTR [eax+ecx*8]
  001cc	78 12		 js	 SHORT $LN64@Serialize
  001ce	66 90		 npad	 2
$LL61@Serialize:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  001d0	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  001d3	89 01		 mov	 DWORD PTR [ecx], eax

; 915  : 			m_pNodeFree = pNode;

  001d5	89 4b 10	 mov	 DWORD PTR [ebx+16], ecx
  001d8	83 e9 48	 sub	 ecx, 72			; 00000048H
  001db	83 ea 01	 sub	 edx, 1
  001de	79 f0		 jns	 SHORT $LL61@Serialize
$LN64@Serialize:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  001e0	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]
  001e3	85 ff		 test	 edi, edi
  001e5	0f 84 81 00 00
	00		 je	 $LN77@Serialize

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  001eb	8b 07		 mov	 eax, DWORD PTR [edi]

; 922  : 	pNode->pPrev = pPrev;
; 923  : 	pNode->pNext = pNext;
; 924  : 	m_nCount++;
; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;

  001ed	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  001f0	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  001f3	89 77 04	 mov	 DWORD PTR [edi+4], esi
  001f6	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  001fc	ff 43 0c	 inc	 DWORD PTR [ebx+12]
  001ff	e8 00 00 00 00	 call	 ??0CRowViewData@@QAE@XZ	; CRowViewData::CRowViewData

; 969  : 	pNewNode->data = newElement;

  00204	8d 45 b0	 lea	 eax, DWORD PTR _newData$2[ebp]
  00207	50		 push	 eax
  00208	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0020b	e8 00 00 00 00	 call	 ??4CRowViewData@@QAEAAV0@ABV0@@Z ; CRowViewData::operator=

; 970  : 	if (m_pNodeTail != NULL)

  00210	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00213	85 c0		 test	 eax, eax
  00215	74 04		 je	 SHORT $LN55@Serialize

; 971  : 		m_pNodeTail->pNext = pNewNode;

  00217	89 38		 mov	 DWORD PTR [eax], edi
  00219	eb 03		 jmp	 SHORT $LN56@Serialize
$LN55@Serialize:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;

  0021b	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
$LN56@Serialize:

; 1195 : 			SerializeElements<TYPE>(ar, newData, 1);
; 1196 : 			AddTail(newData[0]);
; 1197 : 		}

  0021e	68 00 00 00 00	 push	 OFFSET ??1CRowViewData@@QAE@XZ
  00223	6a 01		 push	 1
  00225	6a 40		 push	 64			; 00000040H
  00227	8d 45 b0	 lea	 eax, DWORD PTR _newData$2[ebp]

; 974  : 	m_pNodeTail = pNewNode;

  0022a	89 7b 08	 mov	 DWORD PTR [ebx+8], edi

; 1195 : 			SerializeElements<TYPE>(ar, newData, 1);
; 1196 : 			AddTail(newData[0]);
; 1197 : 		}

  0022d	50		 push	 eax
  0022e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00235	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0023a	8b 45 9c	 mov	 eax, DWORD PTR _nNewCount$1$[ebp]
  0023d	85 c0		 test	 eax, eax
  0023f	0f 85 bb fe ff
	ff		 jne	 $LL5@Serialize
$LN87@Serialize:

; 1198 : 	}
; 1199 : }

  00245	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00248	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0024f	59		 pop	 ecx
  00250	5f		 pop	 edi
  00251	5e		 pop	 esi
  00252	5b		 pop	 ebx
  00253	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00256	33 cd		 xor	 ecx, ebp
  00258	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0025d	8b e5		 mov	 esp, ebp
  0025f	5d		 pop	 ebp
  00260	c2 04 00	 ret	 4
$LN76@Serialize:
  00263	6a 00		 push	 0
  00265	6a 03		 push	 3
  00267	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN77@Serialize:
  0026c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN107@Serialize:
  00271	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Serialize@?$CList@VCRowViewData@@AAV1@@@UAEXAAVCArchive@@@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ??1CRowViewData@@QAE@XZ
  00005	6a 01		 push	 1
  00007	6a 40		 push	 64			; 00000040H
  00009	8d 45 b0	 lea	 eax, DWORD PTR _newData$2[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00012	c3		 ret	 0
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$?Serialize@?$CList@VCRowViewData@@AAV1@@@UAEXAAVCArchive@@@Z:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Serialize@?$CList@VCRowViewData@@AAV1@@@UAEXAAVCArchive@@@Z
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Serialize@?$CList@VCRowViewData@@AAV1@@@UAEXAAVCArchive@@@Z ENDP ; CList<CRowViewData,CRowViewData &>::Serialize
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??1?$CList@VCRowViewData@@AAV1@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CList@VCRowViewData@@AAV1@@@UAE@XZ PROC		; CList<CRowViewData,CRowViewData &>::~CList<CRowViewData,CRowViewData &>, COMDAT
; _this$ = ecx

; 878  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CList@VCRowViewData@@AAV1@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx

; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00026	8b 77 04	 mov	 esi, DWORD PTR [edi+4]

; 878  : {

  00029	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CList@VCRowViewData@@AAV1@@@6B@

; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  0002f	85 f6		 test	 esi, esi
  00031	74 17		 je	 SHORT $LN5@CList
$LL6@CList:

; 868  : 		pNode->data.~TYPE();

  00033	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  00036	e8 00 00 00 00	 call	 ??1?$CList@VCSubGraphViewData@@AAV1@@@UAE@XZ ; CList<CSubGraphViewData,CSubGraphViewData &>::~CList<CSubGraphViewData,CSubGraphViewData &>
  0003b	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00044	8b 36		 mov	 esi, DWORD PTR [esi]
  00046	85 f6		 test	 esi, esi
  00048	75 e9		 jne	 SHORT $LL6@CList
$LN5@CList:

; 869  : 
; 870  : 	m_nCount = 0;
; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 872  : 	m_pBlocks->FreeDataChain();

  0004a	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  0004d	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00054	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  0005b	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00062	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00069	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0006e	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 879  : 	RemoveAll();
; 880  : 	ASSERT(m_nCount == 0);
; 881  : }

  00075	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00078	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007f	59		 pop	 ecx
  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
  00086	cc		 int	 3
  00087	cc		 int	 3
  00088	cc		 int	 3
  00089	cc		 int	 3
  0008a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CList@VCRowViewData@@AAV1@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CList@VCRowViewData@@AAV1@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CList@VCRowViewData@@AAV1@@@UAE@XZ ENDP		; CList<CRowViewData,CRowViewData &>::~CList<CRowViewData,CRowViewData &>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?NewNode@?$CList@VCRowViewData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z
_TEXT	SEGMENT
_pPrev$ = 8						; size = 4
_pNext$ = 12						; size = 4
?NewNode@?$CList@VCRowViewData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z PROC ; CList<CRowViewData,CRowViewData &>::NewNode, COMDAT
; _this$ = ecx

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 902  : 	if (m_pNodeFree == NULL)

  00007	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0000b	75 33		 jne	 SHORT $LN7@NewNode

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  0000d	6a 48		 push	 72			; 00000048H
  0000f	ff 76 18	 push	 DWORD PTR [esi+24]
  00012	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001b	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0001e	83 c0 08	 add	 eax, 8
  00021	8d 0c d2	 lea	 ecx, DWORD PTR [edx+edx*8]
  00024	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  00027	83 c0 b8	 add	 eax, -72		; ffffffb8H

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  0002a	83 c2 ff	 add	 edx, -1
  0002d	78 11		 js	 SHORT $LN7@NewNode
  0002f	90		 npad	 1
$LL4@NewNode:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	89 08		 mov	 DWORD PTR [eax], ecx

; 915  : 			m_pNodeFree = pNode;

  00035	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00038	83 e8 48	 sub	 eax, 72			; 00000048H
  0003b	83 ea 01	 sub	 edx, 1
  0003e	79 f0		 jns	 SHORT $LL4@NewNode
$LN7@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00040	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  00043	85 ff		 test	 edi, edi
  00045	74 23		 je	 SHORT $LN17@NewNode

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00047	8b 07		 mov	 eax, DWORD PTR [edi]

; 922  : 	pNode->pPrev = pPrev;

  00049	8b 4d 08	 mov	 ecx, DWORD PTR _pPrev$[ebp]
  0004c	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0004f	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 923  : 	pNode->pNext = pNext;

  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _pNext$[ebp]
  00055	89 0f		 mov	 DWORD PTR [edi], ecx

; 924  : 	m_nCount++;
; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;

  00057	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0005a	ff 46 0c	 inc	 DWORD PTR [esi+12]
  0005d	e8 00 00 00 00	 call	 ??0CRowViewData@@QAE@XZ	; CRowViewData::CRowViewData

; 930  : #pragma pop_macro("new")
; 931  : 	return pNode;

  00062	8b c7		 mov	 eax, edi
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi

; 932  : }

  00066	5d		 pop	 ebp
  00067	c2 08 00	 ret	 8
$LN17@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  0006a	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN15@NewNode:
  0006f	cc		 int	 3
?NewNode@?$CList@VCRowViewData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z ENDP ; CList<CRowViewData,CRowViewData &>::NewNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAll@?$CList@VCRowViewData@@AAV1@@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@?$CList@VCRowViewData@@AAV1@@@QAEXXZ PROC	; CList<CRowViewData,CRowViewData &>::RemoveAll, COMDAT
; _this$ = ecx

; 862  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 863  : 	ASSERT_VALID(this);
; 864  : 
; 865  : 	// destroy elements
; 866  : 	CNode* pNode;
; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00004	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00007	85 f6		 test	 esi, esi
  00009	74 1c		 je	 SHORT $LN3@RemoveAll
  0000b	0f 1f 44 00 00	 npad	 5
$LL4@RemoveAll:

; 868  : 		pNode->data.~TYPE();

  00010	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  00013	e8 00 00 00 00	 call	 ??1?$CList@VCSubGraphViewData@@AAV1@@@UAE@XZ ; CList<CSubGraphViewData,CSubGraphViewData &>::~CList<CSubGraphViewData,CSubGraphViewData &>
  00018	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00021	8b 36		 mov	 esi, DWORD PTR [esi]
  00023	85 f6		 test	 esi, esi
  00025	75 e9		 jne	 SHORT $LL4@RemoveAll
$LN3@RemoveAll:

; 869  : 
; 870  : 	m_nCount = 0;
; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 872  : 	m_pBlocks->FreeDataChain();

  00027	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  0002a	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00031	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00038	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  0003f	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00046	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0004b	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi

; 874  : }

  00054	c3		 ret	 0
?RemoveAll@?$CList@VCRowViewData@@AAV1@@@QAEXXZ ENDP	; CList<CRowViewData,CRowViewData &>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?AddTail@?$CList@VCRowViewData@@AAV1@@@QAEPAU__POSITION@@AAVCRowViewData@@@Z
_TEXT	SEGMENT
_newElement$ = 8					; size = 4
?AddTail@?$CList@VCRowViewData@@AAV1@@@QAEPAU__POSITION@@AAVCRowViewData@@@Z PROC ; CList<CRowViewData,CRowViewData &>::AddTail, COMDAT
; _this$ = ecx

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 902  : 	if (m_pNodeFree == NULL)

  00008	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0

; 966  : 	ASSERT_VALID(this);
; 967  : 
; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  0000c	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 902  : 	if (m_pNodeFree == NULL)

  0000f	75 32		 jne	 SHORT $LN11@AddTail

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  00011	6a 48		 push	 72			; 00000048H
  00013	ff 76 18	 push	 DWORD PTR [esi+24]
  00016	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001f	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00022	83 c0 08	 add	 eax, 8
  00025	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00028	83 c2 ff	 add	 edx, -1
  0002b	8d 0c c9	 lea	 ecx, DWORD PTR [ecx+ecx*8]
  0002e	8d 0c c8	 lea	 ecx, DWORD PTR [eax+ecx*8]
  00031	78 10		 js	 SHORT $LN11@AddTail
$LL8@AddTail:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00033	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00036	89 01		 mov	 DWORD PTR [ecx], eax

; 915  : 			m_pNodeFree = pNode;

  00038	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0003b	83 e9 48	 sub	 ecx, 72			; 00000048H
  0003e	83 ea 01	 sub	 edx, 1
  00041	79 f0		 jns	 SHORT $LL8@AddTail
$LN11@AddTail:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00043	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00046	85 db		 test	 ebx, ebx
  00048	74 48		 je	 SHORT $LN22@AddTail

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  0004a	8b 03		 mov	 eax, DWORD PTR [ebx]

; 922  : 	pNode->pPrev = pPrev;
; 923  : 	pNode->pNext = pNext;
; 924  : 	m_nCount++;
; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;

  0004c	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0004f	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00052	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
  00055	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  0005b	ff 46 0c	 inc	 DWORD PTR [esi+12]
  0005e	e8 00 00 00 00	 call	 ??0CRowViewData@@QAE@XZ	; CRowViewData::CRowViewData

; 969  : 	pNewNode->data = newElement;

  00063	ff 75 08	 push	 DWORD PTR _newElement$[ebp]
  00066	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  00069	e8 00 00 00 00	 call	 ??4CRowViewData@@QAEAAV0@ABV0@@Z ; CRowViewData::operator=

; 970  : 	if (m_pNodeTail != NULL)

  0006e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00071	85 c0		 test	 eax, eax
  00073	74 0e		 je	 SHORT $LN2@AddTail

; 971  : 		m_pNodeTail->pNext = pNewNode;

  00075	89 18		 mov	 DWORD PTR [eax], ebx

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00077	8b c3		 mov	 eax, ebx
  00079	5f		 pop	 edi
  0007a	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx

; 976  : }

  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
$LN2@AddTail:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00083	5f		 pop	 edi
  00084	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  00087	8b c3		 mov	 eax, ebx
  00089	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx

; 976  : }

  0008e	5d		 pop	 ebp
  0008f	c2 04 00	 ret	 4
$LN22@AddTail:

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00092	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN20@AddTail:
  00097	cc		 int	 3
?AddTail@?$CList@VCRowViewData@@AAV1@@@QAEPAU__POSITION@@AAVCRowViewData@@@Z ENDP ; CList<CRowViewData,CRowViewData &>::AddTail
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1CRowViewData@@QAE@XZ
_TEXT	SEGMENT
??1CRowViewData@@QAE@XZ PROC				; CRowViewData::~CRowViewData, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00006	e8 00 00 00 00	 call	 ??1?$CList@VCSubGraphViewData@@AAV1@@@UAE@XZ ; CList<CSubGraphViewData,CSubGraphViewData &>::~CList<CSubGraphViewData,CSubGraphViewData &>
  0000b	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  0000e	5e		 pop	 esi
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
??1CRowViewData@@QAE@XZ ENDP				; CRowViewData::~CRowViewData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_G?$CList@VCSubGraphViewData@@AAV1@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CList@VCSubGraphViewData@@AAV1@@@UAEPAXI@Z PROC	; CList<CSubGraphViewData,CSubGraphViewData &>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CList@VCSubGraphViewData@@AAV1@@@UAE@XZ ; CList<CSubGraphViewData,CSubGraphViewData &>::~CList<CSubGraphViewData,CSubGraphViewData &>
  0000b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0000e	a8 01		 test	 al, 1
  00010	74 1f		 je	 SHORT $LN9@scalar
  00012	a8 04		 test	 al, 4
  00014	75 10		 jne	 SHORT $LN3@scalar

; 112  : 	{ ::operator delete(p); }

  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	83 c4 04	 add	 esp, 4
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN3@scalar:
  00026	6a 1c		 push	 28			; 0000001cH
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0002e	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??_G?$CList@VCSubGraphViewData@@AAV1@@@UAEPAXI@Z ENDP	; CList<CSubGraphViewData,CSubGraphViewData &>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CList@VCSubGraphViewData@@AAV1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_newData$2 = -44					; size = 20
_nNewCount$1$ = -24					; size = 4
_pData$1$ = -20						; size = 4
_pData$1$ = -20						; size = 4
_pNode$1$ = -20						; size = 4
_nCount$1$ = -16					; size = 4
_nElementsLeft$1$ = -16					; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ar$ = 8						; size = 4
?Serialize@?$CList@VCSubGraphViewData@@AAV1@@@UAEXAAVCArchive@@@Z PROC ; CList<CSubGraphViewData,CSubGraphViewData &>::Serialize, COMDAT
; _this$ = ecx

; 1169 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Serialize@?$CList@VCSubGraphViewData@@AAV1@@@UAEXAAVCArchive@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d f0	 mov	 DWORD PTR _this$1$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00030	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00033	f7 d0		 not	 eax
  00035	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1174 : 	if (ar.IsStoring())

  00037	0f 84 b6 00 00
	00		 je	 $LN7@Serialize

; 1175 : 	{
; 1176 : 		ar.WriteCount(m_nCount);

  0003d	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00040	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00045	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00048	89 45 ec	 mov	 DWORD PTR _pNode$1$[ebp], eax
  0004b	85 c0		 test	 eax, eax
  0004d	0f 84 ee 01 00
	00		 je	 $LN87@Serialize
$LL4@Serialize:

; 1178 : 		{
; 1179 : 			ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1180 : 			TYPE* pData;
; 1181 : 			/*
; 1182 : 			 * in some cases the & operator might be overloaded, and we cannot use it to obtain
; 1183 : 			 * the address of a given object.  We then use the following trick to get the address
; 1184 : 			 */
; 1185 : 			pData = reinterpret_cast< TYPE* >( &reinterpret_cast< int& >( static_cast< TYPE& >( pNode->data ) ) );

  00053	8d 70 08	 lea	 esi, DWORD PTR [eax+8]

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00056	85 f6		 test	 esi, esi
  00058	0f 84 00 02 00
	00		 je	 $LN77@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00061	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00064	f7 d0		 not	 eax
  00066	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00068	74 32		 je	 SHORT $LN22@Serialize

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0006a	b8 01 00 00 00	 mov	 eax, 1
  0006f	89 45 f0	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
$LL17@Serialize:

; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00072	bb 66 66 66 06	 mov	 ebx, 107374182		; 06666666H
  00077	3b c3		 cmp	 eax, ebx
  00079	0f 42 d8	 cmovb	 ebx, eax

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0007c	8d 3c 9b	 lea	 edi, DWORD PTR [ebx+ebx*4]
  0007f	c1 e7 02	 shl	 edi, 2
  00082	57		 push	 edi
  00083	56		 push	 esi
  00084	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  00089	8b 45 f0	 mov	 eax, DWORD PTR _nElementsLeft$1$[ebp]

; 87   : 			pData += nElementsToWrite;

  0008c	03 f7		 add	 esi, edi
  0008e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00091	2b c3		 sub	 eax, ebx
  00093	89 45 f0	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
  00096	85 c0		 test	 eax, eax
  00098	75 d8		 jne	 SHORT $LL17@Serialize

; 88   : 		}
; 89   : 	}

  0009a	eb 33		 jmp	 SHORT $LN2@Serialize
$LN22@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  0009c	bf 01 00 00 00	 mov	 edi, 1
$LL19@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  000a1	bb 66 66 66 06	 mov	 ebx, 107374182		; 06666666H
  000a6	3b fb		 cmp	 edi, ebx
  000a8	0f 42 df	 cmovb	 ebx, edi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  000ab	8d 04 9b	 lea	 eax, DWORD PTR [ebx+ebx*4]
  000ae	c1 e0 02	 shl	 eax, 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  000b1	50		 push	 eax
  000b2	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  000b3	89 45 f0	 mov	 DWORD PTR _nCount$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  000b6	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  000bb	8b 4d f0	 mov	 ecx, DWORD PTR _nCount$1$[ebp]
  000be	3b c1		 cmp	 eax, ecx
  000c0	0f 85 8f 01 00
	00		 jne	 $LN76@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  000c6	03 f1		 add	 esi, ecx
  000c8	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;

  000cb	2b fb		 sub	 edi, ebx
  000cd	75 d2		 jne	 SHORT $LL19@Serialize
$LN2@Serialize:

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  000cf	8b 45 ec	 mov	 eax, DWORD PTR _pNode$1$[ebp]
  000d2	8b 00		 mov	 eax, DWORD PTR [eax]
  000d4	89 45 ec	 mov	 DWORD PTR _pNode$1$[ebp], eax
  000d7	85 c0		 test	 eax, eax
  000d9	0f 85 74 ff ff
	ff		 jne	 $LL4@Serialize

; 1198 : 	}
; 1199 : }

  000df	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e9	59		 pop	 ecx
  000ea	5f		 pop	 edi
  000eb	5e		 pop	 esi
  000ec	5b		 pop	 ebx
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 04 00	 ret	 4
$LN7@Serialize:

; 1186 : 			SerializeElements<TYPE>(ar, pData, 1);
; 1187 : 		}
; 1188 : 	}
; 1189 : 	else
; 1190 : 	{
; 1191 : 		DWORD_PTR nNewCount = ar.ReadCount();

  000f3	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount

; 1192 : 		while (nNewCount--)

  000f8	85 c0		 test	 eax, eax
  000fa	0f 84 41 01 00
	00		 je	 $LN87@Serialize
$LL5@Serialize:

; 1194 : 			TYPE newData[1];

  00100	68 00 00 00 00	 push	 OFFSET ??1CSubGraphViewData@@QAE@XZ
  00105	68 00 00 00 00	 push	 OFFSET ??0CSubGraphViewData@@QAE@XZ ; CSubGraphViewData::CSubGraphViewData
  0010a	48		 dec	 eax
  0010b	6a 01		 push	 1
  0010d	89 45 e8	 mov	 DWORD PTR _nNewCount$1$[ebp], eax
  00110	8d 45 d4	 lea	 eax, DWORD PTR _newData$2[ebp]
  00113	6a 14		 push	 20			; 00000014H
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0011b	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1194 : 			TYPE newData[1];

  0011e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00125	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00128	f7 d0		 not	 eax
  0012a	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  0012c	8d 45 d4	 lea	 eax, DWORD PTR _newData$2[ebp]
  0012f	89 45 ec	 mov	 DWORD PTR _pData$1$[ebp], eax
  00132	74 34		 je	 SHORT $LN43@Serialize

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  00134	bb 01 00 00 00	 mov	 ebx, 1
  00139	0f 1f 80 00 00
	00 00		 npad	 7
$LL38@Serialize:

; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00140	bf 66 66 66 06	 mov	 edi, 107374182		; 06666666H
  00145	3b df		 cmp	 ebx, edi
  00147	0f 42 fb	 cmovb	 edi, ebx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0014a	8d 34 bf	 lea	 esi, DWORD PTR [edi+edi*4]
  0014d	c1 e6 02	 shl	 esi, 2
  00150	56		 push	 esi
  00151	50		 push	 eax
  00152	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 87   : 			pData += nElementsToWrite;

  00157	8b 45 ec	 mov	 eax, DWORD PTR _pData$1$[ebp]
  0015a	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  0015d	03 c6		 add	 eax, esi
  0015f	89 45 ec	 mov	 DWORD PTR _pData$1$[ebp], eax
  00162	2b df		 sub	 ebx, edi
  00164	75 da		 jne	 SHORT $LL38@Serialize

; 88   : 		}
; 89   : 	}

  00166	eb 36		 jmp	 SHORT $LN41@Serialize
$LN43@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  00168	be 01 00 00 00	 mov	 esi, 1
  0016d	0f 1f 00	 npad	 3
$LL40@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00170	bf 66 66 66 06	 mov	 edi, 107374182		; 06666666H
  00175	3b f7		 cmp	 esi, edi
  00177	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0017a	8d 1c bf	 lea	 ebx, DWORD PTR [edi+edi*4]
  0017d	c1 e3 02	 shl	 ebx, 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00180	53		 push	 ebx
  00181	50		 push	 eax
  00182	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  00187	3b c3		 cmp	 eax, ebx
  00189	0f 85 c6 00 00
	00		 jne	 $LN76@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  0018f	8b 45 ec	 mov	 eax, DWORD PTR _pData$1$[ebp]
  00192	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]

; 104  : 			pData += nElementsToRead;

  00195	03 c3		 add	 eax, ebx
  00197	89 45 ec	 mov	 DWORD PTR _pData$1$[ebp], eax
  0019a	2b f7		 sub	 esi, edi
  0019c	75 d2		 jne	 SHORT $LL40@Serialize
$LN41@Serialize:

; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  0019e	8b 5d f0	 mov	 ebx, DWORD PTR _this$1$[ebp]

; 902  : 	if (m_pNodeFree == NULL)

  001a1	83 7b 10 00	 cmp	 DWORD PTR [ebx+16], 0

; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  001a5	8b 73 08	 mov	 esi, DWORD PTR [ebx+8]

; 902  : 	if (m_pNodeFree == NULL)

  001a8	75 36		 jne	 SHORT $LN64@Serialize

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  001aa	6a 1c		 push	 28			; 0000001cH
  001ac	ff 73 18	 push	 DWORD PTR [ebx+24]
  001af	8d 43 14	 lea	 eax, DWORD PTR [ebx+20]
  001b2	50		 push	 eax
  001b3	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  001b8	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  001bb	8d 0c d5 00 00
	00 00		 lea	 ecx, DWORD PTR [edx*8]
  001c2	2b ca		 sub	 ecx, edx
  001c4	83 c1 fb	 add	 ecx, -5			; fffffffbH

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  001c7	83 c2 ff	 add	 edx, -1
  001ca	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  001cd	78 11		 js	 SHORT $LN64@Serialize
  001cf	90		 npad	 1
$LL61@Serialize:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  001d0	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  001d3	89 01		 mov	 DWORD PTR [ecx], eax

; 915  : 			m_pNodeFree = pNode;

  001d5	89 4b 10	 mov	 DWORD PTR [ebx+16], ecx
  001d8	83 e9 1c	 sub	 ecx, 28			; 0000001cH
  001db	83 ea 01	 sub	 edx, 1
  001de	79 f0		 jns	 SHORT $LL61@Serialize
$LN64@Serialize:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  001e0	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]
  001e3	85 ff		 test	 edi, edi
  001e5	74 77		 je	 SHORT $LN77@Serialize

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  001e7	8b 07		 mov	 eax, DWORD PTR [edi]

; 922  : 	pNode->pPrev = pPrev;
; 923  : 	pNode->pNext = pNext;
; 924  : 	m_nCount++;
; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;

  001e9	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  001ec	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  001ef	89 77 04	 mov	 DWORD PTR [edi+4], esi
  001f2	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  001f8	ff 43 0c	 inc	 DWORD PTR [ebx+12]
  001fb	e8 00 00 00 00	 call	 ??0CSubGraphViewData@@QAE@XZ ; CSubGraphViewData::CSubGraphViewData

; 969  : 	pNewNode->data = newElement;

  00200	8d 45 d4	 lea	 eax, DWORD PTR _newData$2[ebp]
  00203	50		 push	 eax
  00204	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  00207	e8 00 00 00 00	 call	 ??4CSubGraphViewData@@QAEAAV0@ABV0@@Z ; CSubGraphViewData::operator=

; 970  : 	if (m_pNodeTail != NULL)

  0020c	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0020f	85 c0		 test	 eax, eax
  00211	74 04		 je	 SHORT $LN55@Serialize

; 971  : 		m_pNodeTail->pNext = pNewNode;

  00213	89 38		 mov	 DWORD PTR [eax], edi
  00215	eb 03		 jmp	 SHORT $LN56@Serialize
$LN55@Serialize:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;

  00217	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
$LN56@Serialize:

; 1195 : 			SerializeElements<TYPE>(ar, newData, 1);
; 1196 : 			AddTail(newData[0]);
; 1197 : 		}

  0021a	68 00 00 00 00	 push	 OFFSET ??1CSubGraphViewData@@QAE@XZ
  0021f	6a 01		 push	 1
  00221	6a 14		 push	 20			; 00000014H
  00223	8d 45 d4	 lea	 eax, DWORD PTR _newData$2[ebp]

; 974  : 	m_pNodeTail = pNewNode;

  00226	89 7b 08	 mov	 DWORD PTR [ebx+8], edi

; 1195 : 			SerializeElements<TYPE>(ar, newData, 1);
; 1196 : 			AddTail(newData[0]);
; 1197 : 		}

  00229	50		 push	 eax
  0022a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00231	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00236	8b 45 e8	 mov	 eax, DWORD PTR _nNewCount$1$[ebp]
  00239	85 c0		 test	 eax, eax
  0023b	0f 85 bf fe ff
	ff		 jne	 $LL5@Serialize
$LN87@Serialize:

; 1198 : 	}
; 1199 : }

  00241	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00244	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0024b	59		 pop	 ecx
  0024c	5f		 pop	 edi
  0024d	5e		 pop	 esi
  0024e	5b		 pop	 ebx
  0024f	8b e5		 mov	 esp, ebp
  00251	5d		 pop	 ebp
  00252	c2 04 00	 ret	 4
$LN76@Serialize:
  00255	6a 00		 push	 0
  00257	6a 03		 push	 3
  00259	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN77@Serialize:
  0025e	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN107@Serialize:
  00263	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Serialize@?$CList@VCSubGraphViewData@@AAV1@@@UAEXAAVCArchive@@@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ??1CSubGraphViewData@@QAE@XZ
  00005	6a 01		 push	 1
  00007	6a 14		 push	 20			; 00000014H
  00009	8d 45 d4	 lea	 eax, DWORD PTR _newData$2[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00012	c3		 ret	 0
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$?Serialize@?$CList@VCSubGraphViewData@@AAV1@@@UAEXAAVCArchive@@@Z:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Serialize@?$CList@VCSubGraphViewData@@AAV1@@@UAEXAAVCArchive@@@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Serialize@?$CList@VCSubGraphViewData@@AAV1@@@UAEXAAVCArchive@@@Z ENDP ; CList<CSubGraphViewData,CSubGraphViewData &>::Serialize
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??1?$CList@VCSubGraphViewData@@AAV1@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CList@VCSubGraphViewData@@AAV1@@@UAE@XZ PROC	; CList<CSubGraphViewData,CSubGraphViewData &>::~CList<CSubGraphViewData,CSubGraphViewData &>, COMDAT
; _this$ = ecx

; 878  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CList@VCSubGraphViewData@@AAV1@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx

; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00026	8b 77 04	 mov	 esi, DWORD PTR [edi+4]

; 878  : {

  00029	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CList@VCSubGraphViewData@@AAV1@@@6B@

; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  0002f	85 f6		 test	 esi, esi
  00031	74 21		 je	 SHORT $LN5@CList
$LL6@CList:

; 868  : 		pNode->data.~TYPE();

  00033	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0003c	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00045	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  0004e	8b 36		 mov	 esi, DWORD PTR [esi]
  00050	85 f6		 test	 esi, esi
  00052	75 df		 jne	 SHORT $LL6@CList
$LN5@CList:

; 869  : 
; 870  : 	m_nCount = 0;
; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 872  : 	m_pBlocks->FreeDataChain();

  00054	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00057	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  0005e	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00065	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  0006c	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00073	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00078	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 879  : 	RemoveAll();
; 880  : 	ASSERT(m_nCount == 0);
; 881  : }

  0007f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00082	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00089	59		 pop	 ecx
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
  00090	cc		 int	 3
  00091	cc		 int	 3
  00092	cc		 int	 3
  00093	cc		 int	 3
  00094	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CList@VCSubGraphViewData@@AAV1@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CList@VCSubGraphViewData@@AAV1@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CList@VCSubGraphViewData@@AAV1@@@UAE@XZ ENDP	; CList<CSubGraphViewData,CSubGraphViewData &>::~CList<CSubGraphViewData,CSubGraphViewData &>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?NewNode@?$CList@VCSubGraphViewData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z
_TEXT	SEGMENT
_pPrev$ = 8						; size = 4
_pNext$ = 12						; size = 4
?NewNode@?$CList@VCSubGraphViewData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z PROC ; CList<CSubGraphViewData,CSubGraphViewData &>::NewNode, COMDAT
; _this$ = ecx

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 902  : 	if (m_pNodeFree == NULL)

  00007	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0000b	75 38		 jne	 SHORT $LN7@NewNode

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  0000d	6a 1c		 push	 28			; 0000001cH
  0000f	ff 76 18	 push	 DWORD PTR [esi+24]
  00012	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001b	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0001e	83 c0 08	 add	 eax, 8
  00021	8d 0c d5 00 00
	00 00		 lea	 ecx, DWORD PTR [edx*8]
  00028	2b ca		 sub	 ecx, edx
  0002a	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  0002d	83 c0 e4	 add	 eax, -28		; ffffffe4H

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00030	83 c2 ff	 add	 edx, -1
  00033	78 10		 js	 SHORT $LN7@NewNode
$LL4@NewNode:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00035	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00038	89 08		 mov	 DWORD PTR [eax], ecx

; 915  : 			m_pNodeFree = pNode;

  0003a	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0003d	83 e8 1c	 sub	 eax, 28			; 0000001cH
  00040	83 ea 01	 sub	 edx, 1
  00043	79 f0		 jns	 SHORT $LL4@NewNode
$LN7@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00045	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  00048	85 ff		 test	 edi, edi
  0004a	74 23		 je	 SHORT $LN17@NewNode

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  0004c	8b 07		 mov	 eax, DWORD PTR [edi]

; 922  : 	pNode->pPrev = pPrev;

  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _pPrev$[ebp]
  00051	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00054	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 923  : 	pNode->pNext = pNext;

  00057	8b 4d 0c	 mov	 ecx, DWORD PTR _pNext$[ebp]
  0005a	89 0f		 mov	 DWORD PTR [edi], ecx

; 924  : 	m_nCount++;
; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;

  0005c	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0005f	ff 46 0c	 inc	 DWORD PTR [esi+12]
  00062	e8 00 00 00 00	 call	 ??0CSubGraphViewData@@QAE@XZ ; CSubGraphViewData::CSubGraphViewData

; 930  : #pragma pop_macro("new")
; 931  : 	return pNode;

  00067	8b c7		 mov	 eax, edi
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi

; 932  : }

  0006b	5d		 pop	 ebp
  0006c	c2 08 00	 ret	 8
$LN17@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  0006f	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN15@NewNode:
  00074	cc		 int	 3
?NewNode@?$CList@VCSubGraphViewData@@AAV1@@@IAEPAUCNode@1@PAU21@0@Z ENDP ; CList<CSubGraphViewData,CSubGraphViewData &>::NewNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAll@?$CList@VCSubGraphViewData@@AAV1@@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@?$CList@VCSubGraphViewData@@AAV1@@@QAEXXZ PROC ; CList<CSubGraphViewData,CSubGraphViewData &>::RemoveAll, COMDAT
; _this$ = ecx

; 862  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 863  : 	ASSERT_VALID(this);
; 864  : 
; 865  : 	// destroy elements
; 866  : 	CNode* pNode;
; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00004	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00007	85 f6		 test	 esi, esi
  00009	74 26		 je	 SHORT $LN3@RemoveAll
  0000b	0f 1f 44 00 00	 npad	 5
$LL4@RemoveAll:

; 868  : 		pNode->data.~TYPE();

  00010	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00019	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00022	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0002b	8b 36		 mov	 esi, DWORD PTR [esi]
  0002d	85 f6		 test	 esi, esi
  0002f	75 df		 jne	 SHORT $LL4@RemoveAll
$LN3@RemoveAll:

; 869  : 
; 870  : 	m_nCount = 0;
; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 872  : 	m_pBlocks->FreeDataChain();

  00031	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00034	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  0003b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00042	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00049	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00050	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00055	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi

; 874  : }

  0005e	c3		 ret	 0
?RemoveAll@?$CList@VCSubGraphViewData@@AAV1@@@QAEXXZ ENDP ; CList<CSubGraphViewData,CSubGraphViewData &>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?AddTail@?$CList@VCSubGraphViewData@@AAV1@@@QAEPAU__POSITION@@AAVCSubGraphViewData@@@Z
_TEXT	SEGMENT
_newElement$ = 8					; size = 4
?AddTail@?$CList@VCSubGraphViewData@@AAV1@@@QAEPAU__POSITION@@AAVCSubGraphViewData@@@Z PROC ; CList<CSubGraphViewData,CSubGraphViewData &>::AddTail, COMDAT
; _this$ = ecx

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 902  : 	if (m_pNodeFree == NULL)

  00008	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0

; 966  : 	ASSERT_VALID(this);
; 967  : 
; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  0000c	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 902  : 	if (m_pNodeFree == NULL)

  0000f	75 3f		 jne	 SHORT $LN11@AddTail

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  00011	6a 1c		 push	 28			; 0000001cH
  00013	ff 76 18	 push	 DWORD PTR [esi+24]
  00016	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001f	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00022	83 c0 08	 add	 eax, 8
  00025	8d 0c d5 00 00
	00 00		 lea	 ecx, DWORD PTR [edx*8]
  0002c	2b ca		 sub	 ecx, edx
  0002e	83 c1 f9	 add	 ecx, -7			; fffffff9H

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00031	83 c2 ff	 add	 edx, -1
  00034	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  00037	78 17		 js	 SHORT $LN11@AddTail
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL8@AddTail:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00040	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00043	89 01		 mov	 DWORD PTR [ecx], eax

; 915  : 			m_pNodeFree = pNode;

  00045	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00048	83 e9 1c	 sub	 ecx, 28			; 0000001cH
  0004b	83 ea 01	 sub	 edx, 1
  0004e	79 f0		 jns	 SHORT $LL8@AddTail
$LN11@AddTail:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00050	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00053	85 db		 test	 ebx, ebx
  00055	74 48		 je	 SHORT $LN22@AddTail

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00057	8b 03		 mov	 eax, DWORD PTR [ebx]

; 922  : 	pNode->pPrev = pPrev;
; 923  : 	pNode->pNext = pNext;
; 924  : 	m_nCount++;
; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;

  00059	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0005c	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0005f	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
  00062	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  00068	ff 46 0c	 inc	 DWORD PTR [esi+12]
  0006b	e8 00 00 00 00	 call	 ??0CSubGraphViewData@@QAE@XZ ; CSubGraphViewData::CSubGraphViewData

; 969  : 	pNewNode->data = newElement;

  00070	ff 75 08	 push	 DWORD PTR _newElement$[ebp]
  00073	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  00076	e8 00 00 00 00	 call	 ??4CSubGraphViewData@@QAEAAV0@ABV0@@Z ; CSubGraphViewData::operator=

; 970  : 	if (m_pNodeTail != NULL)

  0007b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0007e	85 c0		 test	 eax, eax
  00080	74 0e		 je	 SHORT $LN2@AddTail

; 971  : 		m_pNodeTail->pNext = pNewNode;

  00082	89 18		 mov	 DWORD PTR [eax], ebx

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00084	8b c3		 mov	 eax, ebx
  00086	5f		 pop	 edi
  00087	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx

; 976  : }

  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
$LN2@AddTail:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00090	5f		 pop	 edi
  00091	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  00094	8b c3		 mov	 eax, ebx
  00096	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx

; 976  : }

  0009b	5d		 pop	 ebp
  0009c	c2 04 00	 ret	 4
$LN22@AddTail:

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  0009f	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN20@AddTail:
  000a4	cc		 int	 3
?AddTail@?$CList@VCSubGraphViewData@@AAV1@@@QAEPAU__POSITION@@AAVCSubGraphViewData@@@Z ENDP ; CList<CSubGraphViewData,CSubGraphViewData &>::AddTail
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1CSubGraphViewData@@QAE@XZ
_TEXT	SEGMENT
??1CSubGraphViewData@@QAE@XZ PROC			; CSubGraphViewData::~CSubGraphViewData, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0000c	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00015	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00018	5e		 pop	 esi
  00019	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
??1CSubGraphViewData@@QAE@XZ ENDP			; CSubGraphViewData::~CSubGraphViewData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
;	COMDAT ?GetMA@CDataExtracter@@AAENHHPAV?$CList@NN@@@Z
_TEXT	SEGMENT
tv235 = -8						; size = 8
_nStartIndex$ = 8					; size = 4
_nEndIndex$ = 12					; size = 4
_ndataCount$1$ = 16					; size = 4
_pDataList$ = 16					; size = 4
?GetMA@CDataExtracter@@AAENHHPAV?$CList@NN@@@Z PROC	; CDataExtracter::GetMA, COMDAT
; _this$ = ecx

; 220  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	57		 push	 edi

; 221  : 	if(pDataList == NULL || pDataList->GetCount() <= 0)

  00007	8b 7d 10	 mov	 edi, DWORD PTR _pDataList$[ebp]
  0000a	85 ff		 test	 edi, edi
  0000c	0f 84 ac 00 00
	00		 je	 $LN6@GetMA
  00012	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00015	85 c0		 test	 eax, eax
  00017	0f 8e a1 00 00
	00		 jle	 $LN6@GetMA

; 223  : 
; 224  : 	int ndataCount = nEndIndex - nStartIndex + 1;

  0001d	8b 55 0c	 mov	 edx, DWORD PTR _nEndIndex$[ebp]

; 225  : 
; 226  : 	double ntotalvalue = -1;

  00020	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bff0000000000000
  00028	56		 push	 esi
  00029	8b 75 08	 mov	 esi, DWORD PTR _nStartIndex$[ebp]
  0002c	2b d6		 sub	 edx, esi
  0002e	42		 inc	 edx
  0002f	89 55 10	 mov	 DWORD PTR _ndataCount$1$[ebp], edx

; 227  : 	for(int i = nStartIndex ;  i <= nEndIndex ; i++){

  00032	3b 75 0c	 cmp	 esi, DWORD PTR _nEndIndex$[ebp]
  00035	7f 6b		 jg	 SHORT $LN40@GetMA
  00037	53		 push	 ebx
  00038	8d 58 ff	 lea	 ebx, DWORD PTR [eax-1]
  0003b	0f 1f 44 00 00	 npad	 5
$LL4@GetMA:

; 102  : 	if(nIndex < 0 || nIndex > nTailIndex)

  00040	85 f6		 test	 esi, esi
  00042	78 5a		 js	 SHORT $LN42@GetMA
  00044	3b f3		 cmp	 esi, ebx
  00046	7f 56		 jg	 SHORT $LN42@GetMA

; 103  : 		return NULL;
; 104  : 
; 105  : 	if(nIndex > nTailIndex/2){

  00048	8b c3		 mov	 eax, ebx
  0004a	99		 cdq
  0004b	2b c2		 sub	 eax, edx
  0004d	d1 f8		 sar	 eax, 1
  0004f	3b f0		 cmp	 esi, eax
  00051	7e 1d		 jle	 SHORT $LN16@GetMA

; 106  : 		int nCount = nTailIndex;
; 107  : 		POSITION pos = pSourceList.GetTailPosition();

  00053	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00056	8b d3		 mov	 edx, ebx

; 108  : 		while(pos != NULL){

  00058	85 c9		 test	 ecx, ecx
  0005a	74 42		 je	 SHORT $LN42@GetMA
  0005c	0f 1f 40 00	 npad	 4
$LL10@GetMA:

; 109  : 			if(nCount-- == nIndex)

  00060	8b c2		 mov	 eax, edx
  00062	4a		 dec	 edx
  00063	3b c6		 cmp	 eax, esi
  00065	74 28		 je	 SHORT $LN29@GetMA
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 831  : 		rPosition = (POSITION) pNode->pPrev;

  00067	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp

; 108  : 		while(pos != NULL){

  0006a	85 c9		 test	 ecx, ecx
  0006c	75 f2		 jne	 SHORT $LL10@GetMA
  0006e	eb 2e		 jmp	 SHORT $LN42@GetMA
$LN16@GetMA:

; 110  : 				return pos;
; 111  : 			pSourceList.GetPrev(pos);
; 112  : 		}
; 113  : 	}
; 114  : 	else{
; 115  : 		int nCount = 0;
; 116  : 		POSITION pos = pSourceList.GetHeadPosition();

  00070	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00073	33 d2		 xor	 edx, edx

; 117  : 		while(pos != NULL){

  00075	85 c9		 test	 ecx, ecx
  00077	74 25		 je	 SHORT $LN42@GetMA
  00079	0f 1f 80 00 00
	00 00		 npad	 7
$LL12@GetMA:

; 118  : 			if(nCount++ == nIndex)

  00080	8b c2		 mov	 eax, edx
  00082	42		 inc	 edx
  00083	3b c6		 cmp	 eax, esi
  00085	74 08		 je	 SHORT $LN29@GetMA
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 819  : 		rPosition = (POSITION) pNode->pNext;

  00087	8b 09		 mov	 ecx, DWORD PTR [ecx]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp

; 117  : 		while(pos != NULL){

  00089	85 c9		 test	 ecx, ecx
  0008b	75 f3		 jne	 SHORT $LL12@GetMA
  0008d	eb 0f		 jmp	 SHORT $LN42@GetMA
$LN29@GetMA:

; 228  : 		POSITION pos = FindPosition(i, *pDataList);
; 229  : 		if(pos == NULL)

  0008f	85 c9		 test	 ecx, ecx
  00091	74 0b		 je	 SHORT $LN42@GetMA

; 230  : 			break;
; 231  : 		ntotalvalue += pDataList->GetAt(pos);

  00093	f2 0f 58 49 08	 addsd	 xmm1, QWORD PTR [ecx+8]
  00098	46		 inc	 esi
  00099	3b 75 0c	 cmp	 esi, DWORD PTR _nEndIndex$[ebp]
  0009c	7e a2		 jle	 SHORT $LL4@GetMA
$LN42@GetMA:
  0009e	8b 55 10	 mov	 edx, DWORD PTR _ndataCount$1$[ebp]
  000a1	5b		 pop	 ebx
$LN40@GetMA:
  000a2	66 0f 6e c2	 movd	 xmm0, edx

; 232  : 	}
; 233  : 
; 234  : 	return ntotalvalue / ndataCount;

  000a6	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  000aa	5e		 pop	 esi
  000ab	5f		 pop	 edi
  000ac	f2 0f 5e c8	 divsd	 xmm1, xmm0
  000b0	f2 0f 11 4d f8	 movsd	 QWORD PTR tv235[ebp], xmm1
  000b5	dd 45 f8	 fld	 QWORD PTR tv235[ebp]

; 235  : }

  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c2 0c 00	 ret	 12			; 0000000cH
$LN6@GetMA:

; 222  : 		return -1;

  000be	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@bff0000000000000
  000c4	5f		 pop	 edi

; 235  : }

  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c2 0c 00	 ret	 12			; 0000000cH
?GetMA@CDataExtracter@@AAENHHPAV?$CList@NN@@@Z ENDP	; CDataExtracter::GetMA
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
;	COMDAT ?GetHighestLowestVolume@CDataExtracter@@AAEXHHPAVCPacketList@@AAN1@Z
_TEXT	SEGMENT
_nHighest$1$ = -36					; size = 8
_nLowest$1$ = -28					; size = 8
_this$1$ = -20						; size = 4
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nStartIndex$ = 8					; size = 4
_nEndIndex$ = 12					; size = 4
_pPacketList$ = 16					; size = 4
_nHighestVolume$ = 20					; size = 4
_nLowestVolume$ = 24					; size = 4
?GetHighestLowestVolume@CDataExtracter@@AAEXHHPAVCPacketList@@AAN1@Z PROC ; CDataExtracter::GetHighestLowestVolume, COMDAT
; _this$ = ecx

; 184  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetHighestLowestVolume@CDataExtracter@@AAEXHHPAVCPacketList@@AAN1@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d ec	 mov	 DWORD PTR _this$1$[ebp], ebx

; 185  : 	CList<double, double>* pDataList = GetPacket( _MTEXTN( pPacketName[10]), pPacketList);

  0002d	8b 15 54 00 00
	00		 mov	 edx, DWORD PTR ?g_iMetaTable@@3VIMetaTable@@A+84
  00033	8d 4d f0	 lea	 ecx, DWORD PTR $T2[ebp]
  00036	a1 28 00 00 00	 mov	 eax, DWORD PTR ?pPacketName@@3PAW4E_METACODE@IMetaTable@@A+40
  0003b	ff 34 82	 push	 DWORD PTR [edx+eax*4]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z

; 239  : 	CPacket* pData = pPacketList->GetBaseData(strSubGraphName);

  00044	6a 01		 push	 1
  00046	51		 push	 ecx
  00047	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]

; 185  : 	CList<double, double>* pDataList = GetPacket( _MTEXTN( pPacketName[10]), pPacketList);

  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 239  : 	CPacket* pData = pPacketList->GetBaseData(strSubGraphName);

  00051	8b cc		 mov	 ecx, esp
  00053	50		 push	 eax
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  0005a	8b 4d 10	 mov	 ecx, DWORD PTR _pPacketList$[ebp]
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetBaseData@CPacketList@@QAEPAVCPacket@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@_N@Z

; 240  : 
; 241  : 	if(pData == NULL)

  00063	85 c0		 test	 eax, eax
  00065	75 33		 jne	 SHORT $LN14@GetHighest

; 242  : 		return NULL;

  00067	8d 4d f0	 lea	 ecx, DWORD PTR $T2[ebp]
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN6@GetHighest:

; 187  : 		nHighestVolume = -1;

  00070	8b 45 14	 mov	 eax, DWORD PTR _nHighestVolume$[ebp]
  00073	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff0000000000000
  0007b	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0
$LN25@GetHighest:

; 214  : }

  0007f	8b 45 18	 mov	 eax, DWORD PTR _nLowestVolume$[ebp]
  00082	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0
$LN1@GetHighest:
  00086	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 14 00	 ret	 20			; 00000014H
$LN14@GetHighest:

; 244  : 	return pData->GetnumericDataList();

  0009a	8b c8		 mov	 ecx, eax
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetnumericDataList@CPacket@@QAEPAV?$CList@NN@@XZ

; 185  : 	CList<double, double>* pDataList = GetPacket( _MTEXTN( pPacketName[10]), pPacketList);

  000a2	8d 4d f0	 lea	 ecx, DWORD PTR $T2[ebp]

; 244  : 	return pData->GetnumericDataList();

  000a5	8b f0		 mov	 esi, eax

; 185  : 	CList<double, double>* pDataList = GetPacket( _MTEXTN( pPacketName[10]), pPacketList);

  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 186  : 	if(pDataList == NULL || pDataList->GetCount() <= 0) {

  000ad	85 f6		 test	 esi, esi
  000af	74 bf		 je	 SHORT $LN6@GetHighest
  000b1	83 7e 0c 00	 cmp	 DWORD PTR [esi+12], 0
  000b5	7e b9		 jle	 SHORT $LN6@GetHighest

; 188  : 		nLowestVolume = -1;
; 189  : 		return;
; 190  : 	}
; 191  : 
; 192  : 	//sy 2002.10.4
; 193  : 	POSITION pos = FindPosition(nStartIndex, *pDataList);

  000b7	8b 7d 08	 mov	 edi, DWORD PTR _nStartIndex$[ebp]
  000ba	8b cb		 mov	 ecx, ebx
  000bc	56		 push	 esi
  000bd	57		 push	 edi
  000be	e8 00 00 00 00	 call	 ?FindPosition@CDataExtracter@@ABEPAU__POSITION@@HABV?$CList@NN@@@Z ; CDataExtracter::FindPosition

; 194  : 	if(pos == NULL)

  000c3	85 c0		 test	 eax, eax
  000c5	74 bf		 je	 SHORT $LN1@GetHighest

; 195  : 		return;
; 196  : 
; 197  : 	double nLowest = pDataList->GetAt(pos);
; 198  : 	double nHighest = pDataList->GetAt(pos);
; 199  : 
; 200  : 	for(int i = nStartIndex ;  i <= nEndIndex ; i++) {

  000c7	8b df		 mov	 ebx, edi
  000c9	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  000ce	0f 28 c8	 movaps	 xmm1, xmm0
  000d1	f2 0f 11 45 e4	 movsd	 QWORD PTR _nLowest$1$[ebp], xmm0
  000d6	f2 0f 11 4d dc	 movsd	 QWORD PTR _nHighest$1$[ebp], xmm1
  000db	3b 7d 0c	 cmp	 edi, DWORD PTR _nEndIndex$[ebp]
  000de	7f 46		 jg	 SHORT $LN22@GetHighest
$LL4@GetHighest:

; 201  : 		POSITION pos = FindPosition(nStartIndex, *pDataList);

  000e0	8b 4d ec	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000e3	56		 push	 esi
  000e4	57		 push	 edi
  000e5	e8 00 00 00 00	 call	 ?FindPosition@CDataExtracter@@ABEPAU__POSITION@@HABV?$CList@NN@@@Z ; CDataExtracter::FindPosition

; 202  : 		if(pos == NULL)

  000ea	85 c0		 test	 eax, eax
  000ec	74 2e		 je	 SHORT $LN23@GetHighest

; 203  : 			break;
; 204  : 
; 205  : 		double data = pDataList->GetAt(pos);

  000ee	f2 0f 10 48 08	 movsd	 xmm1, QWORD PTR [eax+8]
  000f3	43		 inc	 ebx

; 206  : 		if(data < nLowest)

  000f4	0f 28 c1	 movaps	 xmm0, xmm1
  000f7	f2 0f 5d 45 e4	 minsd	 xmm0, QWORD PTR _nLowest$1$[ebp]

; 207  : 			nLowest = data;
; 208  : 		if(data > nHighest)

  000fc	f2 0f 5f 4d dc	 maxsd	 xmm1, QWORD PTR _nHighest$1$[ebp]
  00101	f2 0f 11 45 e4	 movsd	 QWORD PTR _nLowest$1$[ebp], xmm0

; 209  : 			nHighest = data;

  00106	f2 0f 11 4d dc	 movsd	 QWORD PTR _nHighest$1$[ebp], xmm1
  0010b	3b 5d 0c	 cmp	 ebx, DWORD PTR _nEndIndex$[ebp]
  0010e	7e d0		 jle	 SHORT $LL4@GetHighest

; 210  : 	}
; 211  : 
; 212  : 	nHighestVolume = nHighest;

  00110	8b 45 14	 mov	 eax, DWORD PTR _nHighestVolume$[ebp]
  00113	f2 0f 11 08	 movsd	 QWORD PTR [eax], xmm1

; 213  : 	nLowestVolume = nLowest;

  00117	e9 63 ff ff ff	 jmp	 $LN25@GetHighest
$LN23@GetHighest:

; 202  : 		if(pos == NULL)

  0011c	f2 0f 10 45 e4	 movsd	 xmm0, QWORD PTR _nLowest$1$[ebp]
  00121	f2 0f 10 4d dc	 movsd	 xmm1, QWORD PTR _nHighest$1$[ebp]
$LN22@GetHighest:

; 210  : 	}
; 211  : 
; 212  : 	nHighestVolume = nHighest;

  00126	8b 45 14	 mov	 eax, DWORD PTR _nHighestVolume$[ebp]
  00129	f2 0f 11 08	 movsd	 QWORD PTR [eax], xmm1

; 213  : 	nLowestVolume = nLowest;

  0012d	e9 4d ff ff ff	 jmp	 $LN25@GetHighest
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetHighestLowestVolume@CDataExtracter@@AAEXHHPAVCPacketList@@AAN1@Z$0:
  00000	8d 4d f0	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
__ehhandler$?GetHighestLowestVolume@CDataExtracter@@AAEXHHPAVCPacketList@@AAN1@Z:
  0000e	90		 npad	 1
  0000f	90		 npad	 1
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetHighestLowestVolume@CDataExtracter@@AAEXHHPAVCPacketList@@AAN1@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetHighestLowestVolume@CDataExtracter@@AAEXHHPAVCPacketList@@AAN1@Z ENDP ; CDataExtracter::GetHighestLowestVolume
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
;	COMDAT ?GetLowestPrice@CDataExtracter@@AAENHHPAVCPacketList@@@Z
_TEXT	SEGMENT
_nLowest$ = -36						; size = 8
_nLowest$1$ = -28					; size = 8
_this$1$ = -20						; size = 4
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nStartIndex$ = 8					; size = 4
_nEndIndex$ = 12					; size = 4
_pPacketList$ = 16					; size = 4
?GetLowestPrice@CDataExtracter@@AAENHHPAVCPacketList@@@Z PROC ; CDataExtracter::GetLowestPrice, COMDAT
; _this$ = ecx

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetLowestPrice@CDataExtracter@@AAENHHPAVCPacketList@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d ec	 mov	 DWORD PTR _this$1$[ebp], ebx

; 157  : 	CList<double, double>* pDataList = GetPacket( _MTEXTN( pPacketName[2]), pPacketList);

  0002d	8b 15 54 00 00
	00		 mov	 edx, DWORD PTR ?g_iMetaTable@@3VIMetaTable@@A+84
  00033	8d 4d f0	 lea	 ecx, DWORD PTR $T2[ebp]
  00036	a1 08 00 00 00	 mov	 eax, DWORD PTR ?pPacketName@@3PAW4E_METACODE@IMetaTable@@A+8
  0003b	ff 34 82	 push	 DWORD PTR [edx+eax*4]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z

; 239  : 	CPacket* pData = pPacketList->GetBaseData(strSubGraphName);

  00044	6a 01		 push	 1
  00046	51		 push	 ecx
  00047	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]

; 157  : 	CList<double, double>* pDataList = GetPacket( _MTEXTN( pPacketName[2]), pPacketList);

  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 239  : 	CPacket* pData = pPacketList->GetBaseData(strSubGraphName);

  00051	8b cc		 mov	 ecx, esp
  00053	50		 push	 eax
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  0005a	8b 4d 10	 mov	 ecx, DWORD PTR _pPacketList$[ebp]
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetBaseData@CPacketList@@QAEPAVCPacket@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@_N@Z

; 240  : 
; 241  : 	if(pData == NULL)

  00063	85 c0		 test	 eax, eax
  00065	75 23		 jne	 SHORT $LN13@GetLowestP

; 242  : 		return NULL;

  00067	8d 4d f0	 lea	 ecx, DWORD PTR $T2[ebp]
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN6@GetLowestP:

; 159  : 		return -1;

  00070	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@bff0000000000000

; 176  : }

  00076	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00079	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00080	59		 pop	 ecx
  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 0c 00	 ret	 12			; 0000000cH
$LN13@GetLowestP:

; 244  : 	return pData->GetnumericDataList();

  0008a	8b c8		 mov	 ecx, eax
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetnumericDataList@CPacket@@QAEPAV?$CList@NN@@XZ

; 157  : 	CList<double, double>* pDataList = GetPacket( _MTEXTN( pPacketName[2]), pPacketList);

  00092	8d 4d f0	 lea	 ecx, DWORD PTR $T2[ebp]

; 244  : 	return pData->GetnumericDataList();

  00095	8b f8		 mov	 edi, eax

; 157  : 	CList<double, double>* pDataList = GetPacket( _MTEXTN( pPacketName[2]), pPacketList);

  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 158  : 	if(pDataList == NULL || pDataList->GetCount() <= 0) 

  0009d	85 ff		 test	 edi, edi
  0009f	74 cf		 je	 SHORT $LN6@GetLowestP
  000a1	83 7f 0c 00	 cmp	 DWORD PTR [edi+12], 0
  000a5	7e c9		 jle	 SHORT $LN6@GetLowestP

; 160  : 
; 161  : 	//sy 2002.10.4
; 162  : 	POSITION pos = FindPosition(nStartIndex, *pDataList);

  000a7	8b 75 08	 mov	 esi, DWORD PTR _nStartIndex$[ebp]
  000aa	8b cb		 mov	 ecx, ebx
  000ac	57		 push	 edi
  000ad	56		 push	 esi
  000ae	e8 00 00 00 00	 call	 ?FindPosition@CDataExtracter@@ABEPAU__POSITION@@HABV?$CList@NN@@@Z ; CDataExtracter::FindPosition

; 163  : 	if(pos == NULL)

  000b3	85 c0		 test	 eax, eax
  000b5	74 b9		 je	 SHORT $LN6@GetLowestP

; 164  : 		return -1;
; 165  : 
; 166  : 	double nLowest = pDataList->GetAt(pos);

  000b7	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]

; 167  : 	for(int i = nStartIndex ;  i <= nEndIndex ; i++) {

  000bc	8b 5d 0c	 mov	 ebx, DWORD PTR _nEndIndex$[ebp]
  000bf	f2 0f 11 45 e4	 movsd	 QWORD PTR _nLowest$1$[ebp], xmm0
  000c4	f2 0f 11 45 dc	 movsd	 QWORD PTR _nLowest$[ebp], xmm0
  000c9	3b f3		 cmp	 esi, ebx
  000cb	7f 2a		 jg	 SHORT $LN21@GetLowestP
  000cd	0f 1f 00	 npad	 3
$LL4@GetLowestP:

; 168  : 		pos = FindPosition(i, *pDataList);

  000d0	8b 4d ec	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000d3	57		 push	 edi
  000d4	56		 push	 esi
  000d5	e8 00 00 00 00	 call	 ?FindPosition@CDataExtracter@@ABEPAU__POSITION@@HABV?$CList@NN@@@Z ; CDataExtracter::FindPosition

; 169  : 		if(pos == NULL)

  000da	85 c0		 test	 eax, eax
  000dc	74 19		 je	 SHORT $LN21@GetLowestP

; 170  : 			break;
; 171  : 		double data = pDataList->GetAt(pos);
; 172  : 		if(data < nLowest)

  000de	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  000e3	46		 inc	 esi
  000e4	f2 0f 5d 45 e4	 minsd	 xmm0, QWORD PTR _nLowest$1$[ebp]

; 173  : 			nLowest = data;

  000e9	f2 0f 11 45 e4	 movsd	 QWORD PTR _nLowest$1$[ebp], xmm0
  000ee	f2 0f 11 45 dc	 movsd	 QWORD PTR _nLowest$[ebp], xmm0
  000f3	3b f3		 cmp	 esi, ebx
  000f5	7e d9		 jle	 SHORT $LL4@GetLowestP
$LN21@GetLowestP:

; 174  : 	}
; 175  : 	return nLowest;

  000f7	dd 45 dc	 fld	 QWORD PTR _nLowest$[ebp]

; 176  : }

  000fa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00104	59		 pop	 ecx
  00105	5f		 pop	 edi
  00106	5e		 pop	 esi
  00107	5b		 pop	 ebx
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetLowestPrice@CDataExtracter@@AAENHHPAVCPacketList@@@Z$0:
  00000	8d 4d f0	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
__ehhandler$?GetLowestPrice@CDataExtracter@@AAENHHPAVCPacketList@@@Z:
  0000e	90		 npad	 1
  0000f	90		 npad	 1
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetLowestPrice@CDataExtracter@@AAENHHPAVCPacketList@@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetLowestPrice@CDataExtracter@@AAENHHPAVCPacketList@@@Z ENDP ; CDataExtracter::GetLowestPrice
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
;	COMDAT ?GetHighestPrice@CDataExtracter@@AAENHHPAVCPacketList@@@Z
_TEXT	SEGMENT
_nHighest$ = -36					; size = 8
_nHighest$1$ = -28					; size = 8
_this$1$ = -20						; size = 4
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nStartIndex$ = 8					; size = 4
_nEndIndex$ = 12					; size = 4
_pPacketList$ = 16					; size = 4
?GetHighestPrice@CDataExtracter@@AAENHHPAVCPacketList@@@Z PROC ; CDataExtracter::GetHighestPrice, COMDAT
; _this$ = ecx

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetHighestPrice@CDataExtracter@@AAENHHPAVCPacketList@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d ec	 mov	 DWORD PTR _this$1$[ebp], ebx

; 131  : 	CList<double, double>* pDataList = GetPacket( _MTEXTN( pPacketName[1]), pPacketList);

  0002d	8b 15 54 00 00
	00		 mov	 edx, DWORD PTR ?g_iMetaTable@@3VIMetaTable@@A+84
  00033	8d 4d f0	 lea	 ecx, DWORD PTR $T2[ebp]
  00036	a1 04 00 00 00	 mov	 eax, DWORD PTR ?pPacketName@@3PAW4E_METACODE@IMetaTable@@A+4
  0003b	ff 34 82	 push	 DWORD PTR [edx+eax*4]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z

; 239  : 	CPacket* pData = pPacketList->GetBaseData(strSubGraphName);

  00044	6a 01		 push	 1
  00046	51		 push	 ecx
  00047	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]

; 131  : 	CList<double, double>* pDataList = GetPacket( _MTEXTN( pPacketName[1]), pPacketList);

  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 239  : 	CPacket* pData = pPacketList->GetBaseData(strSubGraphName);

  00051	8b cc		 mov	 ecx, esp
  00053	50		 push	 eax
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  0005a	8b 4d 10	 mov	 ecx, DWORD PTR _pPacketList$[ebp]
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetBaseData@CPacketList@@QAEPAVCPacket@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@_N@Z

; 240  : 
; 241  : 	if(pData == NULL)

  00063	85 c0		 test	 eax, eax
  00065	75 23		 jne	 SHORT $LN13@GetHighest

; 242  : 		return NULL;

  00067	8d 4d f0	 lea	 ecx, DWORD PTR $T2[ebp]
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN6@GetHighest:

; 133  : 		return -1;

  00070	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@bff0000000000000

; 150  : }

  00076	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00079	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00080	59		 pop	 ecx
  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 0c 00	 ret	 12			; 0000000cH
$LN13@GetHighest:

; 244  : 	return pData->GetnumericDataList();

  0008a	8b c8		 mov	 ecx, eax
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetnumericDataList@CPacket@@QAEPAV?$CList@NN@@XZ

; 131  : 	CList<double, double>* pDataList = GetPacket( _MTEXTN( pPacketName[1]), pPacketList);

  00092	8d 4d f0	 lea	 ecx, DWORD PTR $T2[ebp]

; 244  : 	return pData->GetnumericDataList();

  00095	8b f8		 mov	 edi, eax

; 131  : 	CList<double, double>* pDataList = GetPacket( _MTEXTN( pPacketName[1]), pPacketList);

  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 132  : 	if(pDataList == NULL || pDataList->GetCount() <= 0) 

  0009d	85 ff		 test	 edi, edi
  0009f	74 cf		 je	 SHORT $LN6@GetHighest
  000a1	83 7f 0c 00	 cmp	 DWORD PTR [edi+12], 0
  000a5	7e c9		 jle	 SHORT $LN6@GetHighest

; 134  : 
; 135  : 	//sy 2002.10.4
; 136  : 	POSITION pos = FindPosition(nStartIndex, *pDataList);

  000a7	8b 75 08	 mov	 esi, DWORD PTR _nStartIndex$[ebp]
  000aa	8b cb		 mov	 ecx, ebx
  000ac	57		 push	 edi
  000ad	56		 push	 esi
  000ae	e8 00 00 00 00	 call	 ?FindPosition@CDataExtracter@@ABEPAU__POSITION@@HABV?$CList@NN@@@Z ; CDataExtracter::FindPosition

; 137  : 	if(pos == NULL)

  000b3	85 c0		 test	 eax, eax
  000b5	74 b9		 je	 SHORT $LN6@GetHighest

; 138  : 		return -1;
; 139  : 
; 140  : 	double nHighest = pDataList->GetAt(pos);

  000b7	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]

; 141  : 	for(int i = nStartIndex ;  i <= nEndIndex ; i++) {

  000bc	8b 5d 0c	 mov	 ebx, DWORD PTR _nEndIndex$[ebp]
  000bf	f2 0f 11 45 e4	 movsd	 QWORD PTR _nHighest$1$[ebp], xmm0
  000c4	f2 0f 11 45 dc	 movsd	 QWORD PTR _nHighest$[ebp], xmm0
  000c9	3b f3		 cmp	 esi, ebx
  000cb	7f 2a		 jg	 SHORT $LN21@GetHighest
  000cd	0f 1f 00	 npad	 3
$LL4@GetHighest:

; 142  : 		pos = FindPosition(i, *pDataList);

  000d0	8b 4d ec	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000d3	57		 push	 edi
  000d4	56		 push	 esi
  000d5	e8 00 00 00 00	 call	 ?FindPosition@CDataExtracter@@ABEPAU__POSITION@@HABV?$CList@NN@@@Z ; CDataExtracter::FindPosition

; 143  : 		if(pos == NULL)

  000da	85 c0		 test	 eax, eax
  000dc	74 19		 je	 SHORT $LN21@GetHighest

; 144  : 			break;
; 145  : 		double data = pDataList->GetAt(pos);
; 146  : 		if(data > nHighest)

  000de	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  000e3	46		 inc	 esi
  000e4	f2 0f 5f 45 e4	 maxsd	 xmm0, QWORD PTR _nHighest$1$[ebp]

; 147  : 			nHighest = data;

  000e9	f2 0f 11 45 e4	 movsd	 QWORD PTR _nHighest$1$[ebp], xmm0
  000ee	f2 0f 11 45 dc	 movsd	 QWORD PTR _nHighest$[ebp], xmm0
  000f3	3b f3		 cmp	 esi, ebx
  000f5	7e d9		 jle	 SHORT $LL4@GetHighest
$LN21@GetHighest:

; 148  : 	}
; 149  : 	return nHighest;

  000f7	dd 45 dc	 fld	 QWORD PTR _nHighest$[ebp]

; 150  : }

  000fa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00104	59		 pop	 ecx
  00105	5f		 pop	 edi
  00106	5e		 pop	 esi
  00107	5b		 pop	 ebx
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetHighestPrice@CDataExtracter@@AAENHHPAVCPacketList@@@Z$0:
  00000	8d 4d f0	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
__ehhandler$?GetHighestPrice@CDataExtracter@@AAENHHPAVCPacketList@@@Z:
  0000e	90		 npad	 1
  0000f	90		 npad	 1
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetHighestPrice@CDataExtracter@@AAENHHPAVCPacketList@@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetHighestPrice@CDataExtracter@@AAENHHPAVCPacketList@@@Z ENDP ; CDataExtracter::GetHighestPrice
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
;	COMDAT ?FindPosition@CDataExtracter@@ABEPAU__POSITION@@HABV?$CList@NN@@@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
_pSourceList$ = 12					; size = 4
?FindPosition@CDataExtracter@@ABEPAU__POSITION@@HABV?$CList@NN@@@Z PROC ; CDataExtracter::FindPosition, COMDAT
; _this$ = ecx

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 102  : 	if(nIndex < 0 || nIndex > nTailIndex)

  00005	8b 7d 08	 mov	 edi, DWORD PTR _nIndex$[ebp]
  00008	85 ff		 test	 edi, edi
  0000a	78 58		 js	 SHORT $LN7@FindPositi

; 101  : 	int nTailIndex = pSourceList.GetCount() -1;

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pSourceList$[ebp]
  0000f	8b 71 0c	 mov	 esi, DWORD PTR [ecx+12]
  00012	4e		 dec	 esi

; 102  : 	if(nIndex < 0 || nIndex > nTailIndex)

  00013	3b fe		 cmp	 edi, esi
  00015	7f 4d		 jg	 SHORT $LN7@FindPositi

; 104  : 
; 105  : 	if(nIndex > nTailIndex/2){

  00017	8b c6		 mov	 eax, esi
  00019	99		 cdq
  0001a	2b c2		 sub	 eax, edx
  0001c	d1 f8		 sar	 eax, 1
  0001e	3b f8		 cmp	 edi, eax
  00020	7e 2c		 jle	 SHORT $LN8@FindPositi

; 106  : 		int nCount = nTailIndex;
; 107  : 		POSITION pos = pSourceList.GetTailPosition();

  00022	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 108  : 		while(pos != NULL){

  00025	85 c9		 test	 ecx, ecx
  00027	74 3b		 je	 SHORT $LN7@FindPositi
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@FindPositi:

; 109  : 			if(nCount-- == nIndex)

  00030	8b c6		 mov	 eax, esi
  00032	4e		 dec	 esi
  00033	3b c7		 cmp	 eax, edi
  00035	74 0f		 je	 SHORT $LN19@FindPositi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 831  : 		rPosition = (POSITION) pNode->pPrev;

  00037	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp

; 108  : 		while(pos != NULL){

  0003a	85 c9		 test	 ecx, ecx
  0003c	75 f2		 jne	 SHORT $LL2@FindPositi

; 103  : 		return NULL;

  0003e	5f		 pop	 edi
  0003f	33 c0		 xor	 eax, eax

; 119  : 				return pos;
; 120  : 			pSourceList.GetNext(pos);
; 121  : 		}
; 122  : 	}
; 123  : 
; 124  : 	return NULL;
; 125  : }

  00041	5e		 pop	 esi
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
$LN19@FindPositi:
  00046	5f		 pop	 edi
  00047	8b c1		 mov	 eax, ecx
  00049	5e		 pop	 esi
  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
$LN8@FindPositi:

; 110  : 				return pos;
; 111  : 			pSourceList.GetPrev(pos);
; 112  : 		}
; 113  : 	}
; 114  : 	else{
; 115  : 		int nCount = 0;
; 116  : 		POSITION pos = pSourceList.GetHeadPosition();

  0004e	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00051	33 d2		 xor	 edx, edx

; 117  : 		while(pos != NULL){

  00053	85 c9		 test	 ecx, ecx
  00055	74 0d		 je	 SHORT $LN7@FindPositi
$LL4@FindPositi:

; 118  : 			if(nCount++ == nIndex)

  00057	8b c2		 mov	 eax, edx
  00059	42		 inc	 edx
  0005a	3b c7		 cmp	 eax, edi
  0005c	74 e8		 je	 SHORT $LN19@FindPositi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 819  : 		rPosition = (POSITION) pNode->pNext;

  0005e	8b 09		 mov	 ecx, DWORD PTR [ecx]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp

; 117  : 		while(pos != NULL){

  00060	85 c9		 test	 ecx, ecx
  00062	75 f3		 jne	 SHORT $LL4@FindPositi
$LN7@FindPositi:
  00064	5f		 pop	 edi

; 103  : 		return NULL;

  00065	33 c0		 xor	 eax, eax

; 119  : 				return pos;
; 120  : 			pSourceList.GetNext(pos);
; 121  : 		}
; 122  : 	}
; 123  : 
; 124  : 	return NULL;
; 125  : }

  00067	5e		 pop	 esi
  00068	5d		 pop	 ebp
  00069	c2 08 00	 ret	 8
?FindPosition@CDataExtracter@@ABEPAU__POSITION@@HABV?$CList@NN@@@Z ENDP ; CDataExtracter::FindPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
;	COMDAT ?GetPacket@CDataExtracter@@AAEPAV?$CList@NN@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAVCPacketList@@@Z
_TEXT	SEGMENT
_strSubGraphName$ = 8					; size = 4
_pPacketList$ = 12					; size = 4
?GetPacket@CDataExtracter@@AAEPAV?$CList@NN@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAVCPacketList@@@Z PROC ; CDataExtracter::GetPacket, COMDAT
; _this$ = ecx

; 238  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 239  : 	CPacket* pData = pPacketList->GetBaseData(strSubGraphName);

  00004	6a 01		 push	 1
  00006	51		 push	 ecx
  00007	8b cc		 mov	 ecx, esp
  00009	ff 75 08	 push	 DWORD PTR _strSubGraphName$[ebp]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00012	8b 4d 0c	 mov	 ecx, DWORD PTR _pPacketList$[ebp]
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetBaseData@CPacketList@@QAEPAVCPacket@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@_N@Z

; 240  : 
; 241  : 	if(pData == NULL)

  0001b	85 c0		 test	 eax, eax
  0001d	75 06		 jne	 SHORT $LN2@GetPacket

; 245  : }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
$LN2@GetPacket:

; 242  : 		return NULL;
; 243  : 
; 244  : 	return pData->GetnumericDataList();

  00025	8b c8		 mov	 ecx, eax
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetnumericDataList@CPacket@@QAEPAV?$CList@NN@@XZ

; 245  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?GetPacket@CDataExtracter@@AAEPAV?$CList@NN@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAVCPacketList@@@Z ENDP ; CDataExtracter::GetPacket
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
;	COMDAT ?GetRealDataIndex@CDataExtracter@@AAEXHHHHAAH0@Z
_TEXT	SEGMENT
_nStartIndex$ = 8					; size = 4
_nEndIndex$ = 12					; size = 4
_nDataStart$ = 16					; size = 4
_nDataEnd$ = 20						; size = 4
_nRealStartIndex$ = 24					; size = 4
_nRealEndIndex$ = 28					; size = 4
?GetRealDataIndex@CDataExtracter@@AAEXHHHHAAH0@Z PROC	; CDataExtracter::GetRealDataIndex, COMDAT
; _this$ = ecx

; 272  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 273  : 	if (nStartIndex >= 0) {

  00003	8b 55 08	 mov	 edx, DWORD PTR _nStartIndex$[ebp]
  00006	56		 push	 esi
  00007	8b 75 1c	 mov	 esi, DWORD PTR _nRealEndIndex$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 18	 mov	 edi, DWORD PTR _nRealStartIndex$[ebp]
  0000e	85 d2		 test	 edx, edx
  00010	78 12		 js	 SHORT $LN2@GetRealDat

; 274  : 		nRealStartIndex = nDataStart + nStartIndex - 1;

  00012	8b 4d 10	 mov	 ecx, DWORD PTR _nDataStart$[ebp]
  00015	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00018	03 c2		 add	 eax, edx
  0001a	89 07		 mov	 DWORD PTR [edi], eax

; 275  : 		nRealEndIndex = nDataStart + nEndIndex - 1;

  0001c	8b 45 0c	 mov	 eax, DWORD PTR _nEndIndex$[ebp]
  0001f	48		 dec	 eax
  00020	03 c1		 add	 eax, ecx
  00022	89 06		 mov	 DWORD PTR [esi], eax
$LN2@GetRealDat:

; 276  : 	}
; 277  : 
; 278  : 	if (nStartIndex > nDataEnd) {

  00024	3b 55 14	 cmp	 edx, DWORD PTR _nDataEnd$[ebp]
  00027	7e 0c		 jle	 SHORT $LN3@GetRealDat

; 279  : 		nRealStartIndex =  -1;

  00029	c7 07 ff ff ff
	ff		 mov	 DWORD PTR [edi], -1

; 280  : 		nRealEndIndex = -1;

  0002f	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1
$LN3@GetRealDat:

; 281  : 	}
; 282  : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5d		 pop	 ebp
  00038	c2 18 00	 ret	 24			; 00000018H
?GetRealDataIndex@CDataExtracter@@AAEXHHHHAAH0@Z ENDP	; CDataExtracter::GetRealDataIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
;	COMDAT ?MakeString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@NAAH@Z
_TEXT	SEGMENT
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_data$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
$T4 = 12						; size = 4
_strTitle$ = 12						; size = 4
_dValue$ = 16						; size = 8
$T5 = 24						; size = 4
_nMaxLength$ = 24					; size = 4
?MakeString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@NAAH@Z PROC ; CDataExtracter::MakeString, COMDAT
; _this$ = ecx

; 290  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?MakeString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@NAAH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 291  : 	if(dValue == -1)

  0002e	f2 0f 10 45 10	 movsd	 xmm0, QWORD PTR _dValue$[ebp]
  00033	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@bff0000000000000
  0003b	9f		 lahf
  0003c	f6 c4 44	 test	 ah, 68			; 00000044H
  0003f	7a 24		 jp	 SHORT $LN2@MakeString

; 292  : 		return "";

  00041	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  0004f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 300  : }

  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c2 14 00	 ret	 20			; 00000014H
$LN2@MakeString:

; 293  : 
; 294  : 	CString data = CDataConversion::GetStringThousandFormat(CDataConversion::DoubleToString(dValue, 2));

  00065	6a 02		 push	 2
  00067	8d 45 10	 lea	 eax, DWORD PTR _dValue$[ebp]
  0006a	50		 push	 eax
  0006b	8d 45 ec	 lea	 eax, DWORD PTR $T3[ebp]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ?DoubleToString@CDataConversion@@SA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABNH@Z ; CDataConversion::DoubleToString
  00074	50		 push	 eax
  00075	8d 45 f0	 lea	 eax, DWORD PTR _data$[ebp]
  00078	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ?GetStringThousandFormat@CDataConversion@@SA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@@Z ; CDataConversion::GetStringThousandFormat
  00085	83 c4 14	 add	 esp, 20			; 00000014H
  00088	8d 4d ec	 lea	 ecx, DWORD PTR $T3[ebp]
  0008b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 519  : 		return( GetData()->nDataLength );

  00095	8b 45 f0	 mov	 eax, DWORD PTR _data$[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp

; 296  : 	if(nLength > nMaxLength)

  00098	8b 4d 18	 mov	 ecx, DWORD PTR _nMaxLength$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 519  : 		return( GetData()->nDataLength );

  0009b	8b 40 f4	 mov	 eax, DWORD PTR [eax-12]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp

; 296  : 	if(nLength > nMaxLength)

  0009e	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000a0	7e 02		 jle	 SHORT $LN3@MakeString

; 297  : 		nMaxLength = nLength;

  000a2	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@MakeString:

; 299  : 	return strTitle + ":" + data + "\n"; 

  000a4	68 00 00 00 00	 push	 OFFSET ??_C@_01JLIPDDHJ@?3@
  000a9	ff 75 0c	 push	 DWORD PTR _strTitle$[ebp]
  000ac	8d 45 0c	 lea	 eax, DWORD PTR $T4[ebp]
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 ??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@PBD@Z ; ATL::operator+
  000b5	8d 4d f0	 lea	 ecx, DWORD PTR _data$[ebp]
  000b8	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000bc	51		 push	 ecx
  000bd	50		 push	 eax
  000be	8d 45 18	 lea	 eax, DWORD PTR $T5[ebp]
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@0@Z ; ATL::operator+
  000c7	83 c4 18	 add	 esp, 24			; 00000018H
  000ca	8b f0		 mov	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h

; 2401 : 		CStringT strResult( str1.GetManager() );

  000cc	8b ce		 mov	 ecx, esi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp

; 299  : 	return strTitle + ":" + data + "\n"; 

  000ce	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h

; 2401 : 		CStringT strResult( str1.GetManager() );

  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetManager@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEPAUIAtlStringMgr@2@XZ
  000d8	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  000db	8b cf		 mov	 ecx, edi
  000dd	50		 push	 eax
  000de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 519  : 		return( GetData()->nDataLength );

  000e4	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h

; 2403 : 		CThisSimpleString::Concatenate( strResult, str1, str1.GetLength(), psz2, CThisSimpleString::StringLength( psz2 ) );

  000e6	6a 01		 push	 1
  000e8	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@

; 2404 : 
; 2405 : 		return( strResult );

  000ed	c7 45 e8 08 00
	00 00		 mov	 DWORD PTR $T2[ebp], 8
  000f4	ff 70 f4	 push	 DWORD PTR [eax-12]
  000f7	50		 push	 eax
  000f8	57		 push	 edi
  000f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Concatenate@?$CSimpleStringT@D$00@ATL@@KAXAAV12@PBDH1H@Z
  000ff	83 c4 14	 add	 esp, 20			; 00000014H
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp

; 299  : 	return strTitle + ":" + data + "\n"; 

  00102	8d 4d 18	 lea	 ecx, DWORD PTR $T5[ebp]
  00105	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0010b	8d 4d 0c	 lea	 ecx, DWORD PTR $T4[ebp]
  0010e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00114	8d 4d f0	 lea	 ecx, DWORD PTR _data$[ebp]
  00117	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0011d	8b c7		 mov	 eax, edi

; 300  : }

  0011f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00122	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00129	59		 pop	 ecx
  0012a	5f		 pop	 edi
  0012b	5e		 pop	 esi
  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 14 00	 ret	 20			; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?MakeString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@NAAH@Z$1:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?MakeString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@NAAH@Z$2:
  00009	8d 4d f0	 lea	 ecx, DWORD PTR _data$[ebp]
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?MakeString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@NAAH@Z$3:
  00012	8d 4d 0c	 lea	 ecx, DWORD PTR $T4[ebp]
  00015	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?MakeString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@NAAH@Z$4:
  0001b	8d 4d 18	 lea	 ecx, DWORD PTR $T5[ebp]
  0001e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?MakeString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@NAAH@Z$7:
  00024	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00027	83 e0 08	 and	 eax, 8
  0002a	0f 84 0d 00 00
	00		 je	 $LN47@MakeString
  00030	83 65 e8 f7	 and	 DWORD PTR $T2[ebp], -9	; fffffff7H
  00034	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00037	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN47@MakeString:
  0003d	c3		 ret	 0
  0003e	cc		 int	 3
  0003f	cc		 int	 3
  00040	cc		 int	 3
  00041	cc		 int	 3
  00042	cc		 int	 3
__ehhandler$?MakeString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@NAAH@Z:
  00043	90		 npad	 1
  00044	90		 npad	 1
  00045	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00049	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0004c	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0004f	33 c8		 xor	 ecx, eax
  00051	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00056	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?MakeString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@NAAH@Z
  0005b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?MakeString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@NAAH@Z ENDP ; CDataExtracter::MakeString
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
;	COMDAT ?MakeDateString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@0@Z
_TEXT	SEGMENT
$T2 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
$T4 = 12						; size = 4
_strTitle$ = 12						; size = 4
_strValue$ = 16						; size = 4
?MakeDateString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@0@Z PROC ; CDataExtracter::MakeDateString, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?MakeDateString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 304  : 	return strTitle + ":" + strValue + "\n"; 

  00027	68 00 00 00 00	 push	 OFFSET ??_C@_01JLIPDDHJ@?3@
  0002c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0
  00033	8d 45 ec	 lea	 eax, DWORD PTR $T2[ebp]
  00036	ff 75 0c	 push	 DWORD PTR _strTitle$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@PBD@Z ; ATL::operator+
  0003f	ff 75 10	 push	 DWORD PTR _strValue$[ebp]
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00049	50		 push	 eax
  0004a	8d 45 0c	 lea	 eax, DWORD PTR $T4[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@0@Z ; ATL::operator+
  00053	83 c4 18	 add	 esp, 24			; 00000018H
  00056	8b f0		 mov	 esi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h

; 2401 : 		CStringT strResult( str1.GetManager() );

  00058	8b ce		 mov	 ecx, esi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp

; 304  : 	return strTitle + ":" + strValue + "\n"; 

  0005a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h

; 2401 : 		CStringT strResult( str1.GetManager() );

  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetManager@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEPAUIAtlStringMgr@2@XZ
  00064	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00067	8b cf		 mov	 ecx, edi
  00069	50		 push	 eax
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 519  : 		return( GetData()->nDataLength );

  00070	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h

; 2403 : 		CThisSimpleString::Concatenate( strResult, str1, str1.GetLength(), psz2, CThisSimpleString::StringLength( psz2 ) );

  00072	6a 01		 push	 1
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@

; 2404 : 
; 2405 : 		return( strResult );

  00079	c7 45 f0 08 00
	00 00		 mov	 DWORD PTR $T3[ebp], 8
  00080	ff 71 f4	 push	 DWORD PTR [ecx-12]
  00083	51		 push	 ecx
  00084	57		 push	 edi
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Concatenate@?$CSimpleStringT@D$00@ATL@@KAXAAV12@PBDH1H@Z
  0008b	83 c4 14	 add	 esp, 20			; 00000014H
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp

; 304  : 	return strTitle + ":" + strValue + "\n"; 

  0008e	8d 4d 0c	 lea	 ecx, DWORD PTR $T4[ebp]
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00097	8d 4d ec	 lea	 ecx, DWORD PTR $T2[ebp]
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000a0	8b c7		 mov	 eax, edi

; 305  : }

  000a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ac	59		 pop	 ecx
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?MakeDateString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@0@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?MakeDateString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@0@Z$1:
  00009	8d 4d 0c	 lea	 ecx, DWORD PTR $T4[ebp]
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?MakeDateString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@0@Z$5:
  00012	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00015	83 e0 08	 and	 eax, 8
  00018	0f 84 0d 00 00
	00		 je	 $LN39@MakeDateSt
  0001e	83 65 f0 f7	 and	 DWORD PTR $T3[ebp], -9	; fffffff7H
  00022	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00025	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN39@MakeDateSt:
  0002b	c3		 ret	 0
  0002c	cc		 int	 3
  0002d	cc		 int	 3
  0002e	cc		 int	 3
  0002f	cc		 int	 3
  00030	cc		 int	 3
__ehhandler$?MakeDateString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@0@Z:
  00031	90		 npad	 1
  00032	90		 npad	 1
  00033	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00037	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003a	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?MakeDateString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@0@Z
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?MakeDateString@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@0@Z ENDP ; CDataExtracter::MakeDateString
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
;	COMDAT ?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z
_TEXT	SEGMENT
_subgraphdata$2 = -56					; size = 20
_subPos$1$ = -36					; size = 4
$T3 = -32						; size = 4
$T4 = -28						; size = 4
$T5 = -24						; size = 4
_strData$6 = -20					; size = 4
_packetname$7 = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_strTitle$8 = 12					; size = 4
_strSubGraphName$ = 12					; size = 4
_packetNames$9 = 16					; size = 4
_rowdata$ = 16						; size = 4
?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z PROC ; CDataExtracter::GetRowViewData, COMDAT
; _this$ = ecx

; 333  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 334  : 	CSubGraphViewDataList& subgraphlist = rowdata->GetSubGraphViewDataList();

  00028	8b 4d 10	 mov	 ecx, DWORD PTR _rowdata$[ebp]
  0002b	e8 00 00 00 00	 call	 ?GetSubGraphViewDataList@CRowViewData@@QAEAAVCSubGraphViewDataList@@XZ ; CRowViewData::GetSubGraphViewDataList

; 335  : 	CList<CSubGraphViewData, CSubGraphViewData&>& subgraphdatalist = subgraphlist.GetSubGraphViewDataList();

  00030	8b c8		 mov	 ecx, eax
  00032	e8 00 00 00 00	 call	 ?GetSubGraphViewDataList@CSubGraphViewDataList@@QAEAAV?$CList@VCSubGraphViewData@@AAV1@@@XZ ; CSubGraphViewDataList::GetSubGraphViewDataList

; 336  : 	POSITION subPos = subgraphdatalist.GetHeadPosition();

  00037	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 337  : 	while(subPos) {

  0003a	85 c0		 test	 eax, eax
  0003c	0f 84 aa 01 00
	00		 je	 $LN3@GetRowView
  00042	8b 5d 0c	 mov	 ebx, DWORD PTR _strSubGraphName$[ebp]
$LL2@GetRowView:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 811  : 	{ CNode* pNode = (CNode*) rPosition;

  00045	8d 30		 lea	 esi, DWORD PTR [eax]

; 812  : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 813  : 		rPosition = (POSITION) pNode->pNext;

  00047	8b 00		 mov	 eax, DWORD PTR [eax]
  00049	89 45 dc	 mov	 DWORD PTR _subPos$1$[ebp], eax
  0004c	8d 4d d0	 lea	 ecx, DWORD PTR _subgraphdata$2[ebp+8]
  0004f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00052	89 45 c8	 mov	 DWORD PTR _subgraphdata$2[ebp], eax
  00055	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00058	89 45 cc	 mov	 DWORD PTR _subgraphdata$2[ebp+4], eax
  0005b	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  0005e	50		 push	 eax
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00065	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00068	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006f	50		 push	 eax
  00070	8d 4d d4	 lea	 ecx, DWORD PTR _subgraphdata$2[ebp+12]
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00079	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  0007c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00080	50		 push	 eax
  00081	8d 4d d8	 lea	 ecx, DWORD PTR _subgraphdata$2[ebp+16]
  00084	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp

; 349  : 	CString strData = "";

  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0008f	8d 4d ec	 lea	 ecx, DWORD PTR _strData$6[ebp]

; 338  : 		CSubGraphViewData subgraphdata = subgraphdatalist.GetNext(subPos);

  00092	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 349  : 	CString strData = "";

  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z

; 350  : 	CString packetNames = subgraphdata->GetPacketNames();

  0009f	8d 45 10	 lea	 eax, DWORD PTR _packetNames$9[ebp]
  000a2	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000a6	50		 push	 eax
  000a7	8d 4d c8	 lea	 ecx, DWORD PTR _subgraphdata$2[ebp]
  000aa	e8 00 00 00 00	 call	 ?GetPacketNames@CSubGraphViewData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; CSubGraphViewData::GetPacketNames

; 351  : 	if (packetNames.Right(1) != ",")

  000af	6a 01		 push	 1
  000b1	8d 45 e0	 lea	 eax, DWORD PTR $T3[ebp]
  000b4	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  000b8	50		 push	 eax
  000b9	8d 4d 10	 lea	 ecx, DWORD PTR _packetNames$9[ebp]
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Right@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h

; 2567 : 		return( str1.Compare( psz2 ) != 0 );

  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0@
  000c7	8b c8		 mov	 ecx, eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp

; 351  : 	if (packetNames.Right(1) != ",")

  000c9	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h

; 2567 : 		return( str1.Compare( psz2 ) != 0 );

  000cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Compare@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp

; 351  : 	if (packetNames.Right(1) != ",")

  000d3	8d 4d e0	 lea	 ecx, DWORD PTR $T3[ebp]
  000d6	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h

; 2567 : 		return( str1.Compare( psz2 ) != 0 );

  000da	8b f0		 mov	 esi, eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp

; 351  : 	if (packetNames.Right(1) != ",")

  000dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000e2	85 f6		 test	 esi, esi
  000e4	74 0e		 je	 SHORT $LN21@GetRowView

; 352  : 		packetNames += ",";

  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0@
  000eb	8d 4d 10	 lea	 ecx, DWORD PTR _packetNames$9[ebp]
  000ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
$LN21@GetRowView:

; 353  : 
; 354  : 	int nPacketCount = CDataConversion::GetStringDataCount(packetNames, ",");

  000f4	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0@
  000f9	8d 4d e8	 lea	 ecx, DWORD PTR $T5[ebp]
  000fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  00102	8d 45 e8	 lea	 eax, DWORD PTR $T5[ebp]
  00105	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00109	50		 push	 eax
  0010a	8d 45 10	 lea	 eax, DWORD PTR _packetNames$9[ebp]
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 ?GetStringDataCount@CDataConversion@@SAHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z ; CDataConversion::GetStringDataCount
  00113	83 c4 08	 add	 esp, 8
  00116	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0011a	8d 4d e8	 lea	 ecx, DWORD PTR $T5[ebp]
  0011d	8b f8		 mov	 edi, eax
  0011f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 355  : 	for(int npacket = 0 ; npacket< nPacketCount ; npacket++) {

  00125	33 f6		 xor	 esi, esi
  00127	85 ff		 test	 edi, edi
  00129	7e 5f		 jle	 SHORT $LN19@GetRowView
  0012b	0f 1f 44 00 00	 npad	 5
$LL20@GetRowView:

; 356  : 		CString packetname = CDataConversion::GetStringData(packetNames, ",");

  00130	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0@
  00135	8d 4d e4	 lea	 ecx, DWORD PTR $T4[ebp]
  00138	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  0013e	6a 01		 push	 1
  00140	8d 45 e4	 lea	 eax, DWORD PTR $T4[ebp]
  00143	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00147	50		 push	 eax
  00148	8d 45 10	 lea	 eax, DWORD PTR _packetNames$9[ebp]
  0014b	50		 push	 eax
  0014c	8d 45 f0	 lea	 eax, DWORD PTR _packetname$7[ebp]
  0014f	50		 push	 eax
  00150	e8 00 00 00 00	 call	 ?GetStringData@CDataConversion@@SA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@AAV23@ABV23@_N@Z ; CDataConversion::GetStringData
  00155	83 c4 10	 add	 esp, 16			; 00000010H
  00158	8d 4d e4	 lea	 ecx, DWORD PTR $T4[ebp]
  0015b	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  0015f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 357  : 		if(packetname.CompareNoCase(strSubGraphName) == 0)

  00165	ff 33		 push	 DWORD PTR [ebx]
  00167	8d 4d f0	 lea	 ecx, DWORD PTR _packetname$7[ebp]
  0016a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?CompareNoCase@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z
  00170	85 c0		 test	 eax, eax
  00172	0f 84 99 00 00
	00		 je	 $LN50@GetRowView

; 359  : 	}

  00178	8d 4d f0	 lea	 ecx, DWORD PTR _packetname$7[ebp]
  0017b	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0017f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00185	46		 inc	 esi
  00186	3b f7		 cmp	 esi, edi
  00188	7c a6		 jl	 SHORT $LL20@GetRowView
$LN19@GetRowView:

; 360  : 	return strData;

  0018a	8d 45 ec	 lea	 eax, DWORD PTR _strData$6[ebp]
  0018d	50		 push	 eax
  0018e	8d 4d 0c	 lea	 ecx, DWORD PTR _strTitle$8[ebp]
  00191	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
$LN59@GetRowView:

; 339  : 		CString strTitle = GetSubGraphViewData(strSubGraphName, &subgraphdata);

  00197	8d 4d 10	 lea	 ecx, DWORD PTR _packetNames$9[ebp]
  0019a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  001a0	8d 4d ec	 lea	 ecx, DWORD PTR _strData$6[ebp]
  001a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 519  : 		return( GetData()->nDataLength );

  001a9	8b 45 0c	 mov	 eax, DWORD PTR _strTitle$8[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp

; 339  : 		CString strTitle = GetSubGraphViewData(strSubGraphName, &subgraphdata);

  001ac	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 533  : 		return( GetLength() == 0 );

  001b0	83 78 f4 00	 cmp	 DWORD PTR [eax-12], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp

; 340  : 		if(!strTitle.IsEmpty())

  001b4	75 75		 jne	 SHORT $LN51@GetRowView

; 342  : 	}

  001b6	8d 4d 0c	 lea	 ecx, DWORD PTR _strTitle$8[ebp]
  001b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  001bf	8d 4d d8	 lea	 ecx, DWORD PTR _subgraphdata$2[ebp+16]
  001c2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  001cf	8d 4d d4	 lea	 ecx, DWORD PTR _subgraphdata$2[ebp+12]
  001d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  001d8	8d 4d d0	 lea	 ecx, DWORD PTR _subgraphdata$2[ebp+8]
  001db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  001e1	8b 45 dc	 mov	 eax, DWORD PTR _subPos$1$[ebp]
  001e4	85 c0		 test	 eax, eax
  001e6	0f 85 59 fe ff
	ff		 jne	 $LL2@GetRowView
$LN3@GetRowView:

; 343  : 	return "";

  001ec	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  001ef	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  001f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
$LN60@GetRowView:

; 344  : }

  001fa	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  001fd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00200	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00207	59		 pop	 ecx
  00208	5f		 pop	 edi
  00209	5e		 pop	 esi
  0020a	5b		 pop	 ebx
  0020b	8b e5		 mov	 esp, ebp
  0020d	5d		 pop	 ebp
  0020e	c2 0c 00	 ret	 12			; 0000000cH
$LN50@GetRowView:

; 358  : 			return subgraphdata->GetTitle();

  00211	8d 45 0c	 lea	 eax, DWORD PTR _strTitle$8[ebp]
  00214	50		 push	 eax
  00215	8d 4d c8	 lea	 ecx, DWORD PTR _subgraphdata$2[ebp]
  00218	e8 00 00 00 00	 call	 ?GetTitle@CSubGraphViewData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; CSubGraphViewData::GetTitle
  0021d	8d 4d f0	 lea	 ecx, DWORD PTR _packetname$7[ebp]
  00220	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00226	e9 6c ff ff ff	 jmp	 $LN59@GetRowView
$LN51@GetRowView:

; 341  : 			return strTitle;

  0022b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0022e	8d 45 0c	 lea	 eax, DWORD PTR _strTitle$8[ebp]
  00231	50		 push	 eax
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00238	8d 4d 0c	 lea	 ecx, DWORD PTR _strTitle$8[ebp]
  0023b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00241	8d 4d d8	 lea	 ecx, DWORD PTR _subgraphdata$2[ebp+16]
  00244	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0024a	8d 4d d4	 lea	 ecx, DWORD PTR _subgraphdata$2[ebp+12]
  0024d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00253	8d 4d d0	 lea	 ecx, DWORD PTR _subgraphdata$2[ebp+8]
  00256	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0025c	eb 9c		 jmp	 SHORT $LN60@GetRowView
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z$3:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _subgraphdata$2[ebp+8]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z$4:
  00009	8d 4d d4	 lea	 ecx, DWORD PTR _subgraphdata$2[ebp+12]
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z$0:
  00012	8d 4d c8	 lea	 ecx, DWORD PTR _subgraphdata$2[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1CSubGraphViewData@@QAE@XZ
__unwindfunclet$?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z$6:
  0001a	8d 4d ec	 lea	 ecx, DWORD PTR _strData$6[ebp]
  0001d	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z$7:
  00023	8d 4d 10	 lea	 ecx, DWORD PTR _packetNames$9[ebp]
  00026	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z$8:
  0002c	8d 4d e0	 lea	 ecx, DWORD PTR $T3[ebp]
  0002f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z$9:
  00035	8d 4d e8	 lea	 ecx, DWORD PTR $T5[ebp]
  00038	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z$10:
  0003e	8d 4d e4	 lea	 ecx, DWORD PTR $T4[ebp]
  00041	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z$11:
  00047	8d 4d f0	 lea	 ecx, DWORD PTR _packetname$7[ebp]
  0004a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z$1:
  00050	8d 4d 0c	 lea	 ecx, DWORD PTR _strTitle$8[ebp]
  00053	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00059	cc		 int	 3
  0005a	cc		 int	 3
  0005b	cc		 int	 3
  0005c	cc		 int	 3
  0005d	cc		 int	 3
__ehhandler$?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z:
  0005e	90		 npad	 1
  0005f	90		 npad	 1
  00060	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00064	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00067	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  0006a	33 c8		 xor	 ecx, eax
  0006c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00071	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z
  00076	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z ENDP ; CDataExtracter::GetRowViewData
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
;	COMDAT ?GetSubGraphViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCSubGraphViewData@@@Z
_TEXT	SEGMENT
$T2 = -24						; size = 4
$T3 = -24						; size = 4
$T4 = -24						; size = 4
_strData$ = -20						; size = 4
_packetNames$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_packetname$5 = 12					; size = 4
_strSubGraphName$ = 12					; size = 4
_subgraphdata$ = 16					; size = 4
?GetSubGraphViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCSubGraphViewData@@@Z PROC ; CDataExtracter::GetSubGraphViewData, COMDAT
; _this$ = ecx

; 348  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetSubGraphViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCSubGraphViewData@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 349  : 	CString strData = "";

  00028	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0002d	8d 4d ec	 lea	 ecx, DWORD PTR _strData$[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z

; 350  : 	CString packetNames = subgraphdata->GetPacketNames();

  00036	8b 4d 10	 mov	 ecx, DWORD PTR _subgraphdata$[ebp]
  00039	8d 45 f0	 lea	 eax, DWORD PTR _packetNames$[ebp]
  0003c	50		 push	 eax
  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00044	e8 00 00 00 00	 call	 ?GetPacketNames@CSubGraphViewData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; CSubGraphViewData::GetPacketNames

; 351  : 	if (packetNames.Right(1) != ",")

  00049	6a 01		 push	 1
  0004b	8d 45 e8	 lea	 eax, DWORD PTR $T4[ebp]
  0004e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00052	50		 push	 eax
  00053	8d 4d f0	 lea	 ecx, DWORD PTR _packetNames$[ebp]
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Right@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h

; 2567 : 		return( str1.Compare( psz2 ) != 0 );

  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0@
  00061	8b c8		 mov	 ecx, eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp

; 351  : 	if (packetNames.Right(1) != ",")

  00063	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h

; 2567 : 		return( str1.Compare( psz2 ) != 0 );

  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Compare@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp

; 351  : 	if (packetNames.Right(1) != ",")

  0006d	8d 4d e8	 lea	 ecx, DWORD PTR $T4[ebp]
  00070	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h

; 2567 : 		return( str1.Compare( psz2 ) != 0 );

  00074	8b f0		 mov	 esi, eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp

; 351  : 	if (packetNames.Right(1) != ",")

  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0007c	85 f6		 test	 esi, esi
  0007e	74 0e		 je	 SHORT $LN5@GetSubGrap

; 352  : 		packetNames += ",";

  00080	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0@
  00085	8d 4d f0	 lea	 ecx, DWORD PTR _packetNames$[ebp]
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
$LN5@GetSubGrap:

; 353  : 
; 354  : 	int nPacketCount = CDataConversion::GetStringDataCount(packetNames, ",");

  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0@
  00093	8d 4d e8	 lea	 ecx, DWORD PTR $T3[ebp]
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  0009c	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  0009f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000a3	50		 push	 eax
  000a4	8d 45 f0	 lea	 eax, DWORD PTR _packetNames$[ebp]
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 ?GetStringDataCount@CDataConversion@@SAHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z ; CDataConversion::GetStringDataCount
  000ad	83 c4 08	 add	 esp, 8
  000b0	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000b4	8d 4d e8	 lea	 ecx, DWORD PTR $T3[ebp]
  000b7	8b f8		 mov	 edi, eax
  000b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 355  : 	for(int npacket = 0 ; npacket< nPacketCount ; npacket++) {

  000bf	33 f6		 xor	 esi, esi
  000c1	85 ff		 test	 edi, edi
  000c3	7e 61		 jle	 SHORT $LN3@GetSubGrap
  000c5	8b 5d 0c	 mov	 ebx, DWORD PTR _strSubGraphName$[ebp]
  000c8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@GetSubGrap:

; 356  : 		CString packetname = CDataConversion::GetStringData(packetNames, ",");

  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0@
  000d5	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp]
  000d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  000de	6a 01		 push	 1
  000e0	8d 45 e8	 lea	 eax, DWORD PTR $T2[ebp]
  000e3	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  000e7	50		 push	 eax
  000e8	8d 45 f0	 lea	 eax, DWORD PTR _packetNames$[ebp]
  000eb	50		 push	 eax
  000ec	8d 45 0c	 lea	 eax, DWORD PTR _packetname$5[ebp]
  000ef	50		 push	 eax
  000f0	e8 00 00 00 00	 call	 ?GetStringData@CDataConversion@@SA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@AAV23@ABV23@_N@Z ; CDataConversion::GetStringData
  000f5	83 c4 10	 add	 esp, 16			; 00000010H
  000f8	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp]
  000fb	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  000ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 357  : 		if(packetname.CompareNoCase(strSubGraphName) == 0)

  00105	ff 33		 push	 DWORD PTR [ebx]
  00107	8d 4d 0c	 lea	 ecx, DWORD PTR _packetname$5[ebp]
  0010a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?CompareNoCase@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z
  00110	85 c0		 test	 eax, eax
  00112	74 48		 je	 SHORT $LN21@GetSubGrap

; 359  : 	}

  00114	8d 4d 0c	 lea	 ecx, DWORD PTR _packetname$5[ebp]
  00117	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0011b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00121	46		 inc	 esi
  00122	3b f7		 cmp	 esi, edi
  00124	7c aa		 jl	 SHORT $LL4@GetSubGrap
$LN3@GetSubGrap:

; 360  : 	return strData;

  00126	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00129	8d 45 ec	 lea	 eax, DWORD PTR _strData$[ebp]
  0012c	50		 push	 eax
  0012d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00133	8d 4d f0	 lea	 ecx, DWORD PTR _packetNames$[ebp]
  00136	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0013c	8d 4d ec	 lea	 ecx, DWORD PTR _strData$[ebp]
  0013f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00145	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 361  : }

  00148	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0014b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00152	59		 pop	 ecx
  00153	5f		 pop	 edi
  00154	5e		 pop	 esi
  00155	5b		 pop	 ebx
  00156	8b e5		 mov	 esp, ebp
  00158	5d		 pop	 ebp
  00159	c2 0c 00	 ret	 12			; 0000000cH
$LN21@GetSubGrap:

; 358  : 			return subgraphdata->GetTitle();

  0015c	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0015f	8b 4d 10	 mov	 ecx, DWORD PTR _subgraphdata$[ebp]
  00162	56		 push	 esi
  00163	e8 00 00 00 00	 call	 ?GetTitle@CSubGraphViewData@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; CSubGraphViewData::GetTitle
  00168	8d 4d 0c	 lea	 ecx, DWORD PTR _packetname$5[ebp]
  0016b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00171	8d 4d f0	 lea	 ecx, DWORD PTR _packetNames$[ebp]
  00174	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0017a	8d 4d ec	 lea	 ecx, DWORD PTR _strData$[ebp]
  0017d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00183	8b c6		 mov	 eax, esi

; 361  : }

  00185	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00188	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0018f	59		 pop	 ecx
  00190	5f		 pop	 edi
  00191	5e		 pop	 esi
  00192	5b		 pop	 ebx
  00193	8b e5		 mov	 esp, ebp
  00195	5d		 pop	 ebp
  00196	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetSubGraphViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCSubGraphViewData@@@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _strData$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?GetSubGraphViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCSubGraphViewData@@@Z$1:
  00009	8d 4d f0	 lea	 ecx, DWORD PTR _packetNames$[ebp]
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?GetSubGraphViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCSubGraphViewData@@@Z$2:
  00012	8d 4d e8	 lea	 ecx, DWORD PTR $T4[ebp]
  00015	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?GetSubGraphViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCSubGraphViewData@@@Z$3:
  0001b	8d 4d e8	 lea	 ecx, DWORD PTR $T3[ebp]
  0001e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?GetSubGraphViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCSubGraphViewData@@@Z$4:
  00024	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp]
  00027	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?GetSubGraphViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCSubGraphViewData@@@Z$5:
  0002d	8d 4d 0c	 lea	 ecx, DWORD PTR _packetname$5[ebp]
  00030	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00036	cc		 int	 3
  00037	cc		 int	 3
  00038	cc		 int	 3
  00039	cc		 int	 3
  0003a	cc		 int	 3
__ehhandler$?GetSubGraphViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCSubGraphViewData@@@Z:
  0003b	90		 npad	 1
  0003c	90		 npad	 1
  0003d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00041	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00044	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00047	33 c8		 xor	 ecx, eax
  00049	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetSubGraphViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCSubGraphViewData@@@Z
  00053	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetSubGraphViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCSubGraphViewData@@@Z ENDP ; CDataExtracter::GetSubGraphViewData
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
;	COMDAT ?GetTitle@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCMainBlock@@@Z
_TEXT	SEGMENT
_columndata$2 = -152					; size = 28
_strSubGraphName$GSCopy$1$ = -124			; size = 4
_nCount$1$ = -120					; size = 4
___$ReturnUdt$GSCopy$ = -120				; size = 4
___$ReturnUdt$GSCopy$1$ = -116				; size = 4
_viewData$ = -112					; size = 28
_strTitle$3 = -84					; size = 4
_rowdata$4 = -80					; size = 64
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_strSubGraphName$ = 12					; size = 4
_pMainBlock$ = 16					; size = 4
?GetTitle@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCMainBlock@@@Z PROC ; CDataExtracter::GetTitle, COMDAT
; _this$ = ecx

; 309  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetTitle@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCMainBlock@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b d9		 mov	 ebx, ecx
  00030	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00033	8b 45 0c	 mov	 eax, DWORD PTR _strSubGraphName$[ebp]
  00036	8b 4d 10	 mov	 ecx, DWORD PTR _pMainBlock$[ebp]
  00039	89 7d 8c	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], edi
  0003c	89 7d 88	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], edi
  0003f	89 45 84	 mov	 DWORD PTR _strSubGraphName$GSCopy$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 851  : {

  00042	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _viewData$[ebp], OFFSET ??_7?$CList@VCColumnViewData@@AAV1@@@6B@

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;

  00049	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _viewData$[ebp+12], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00050	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _viewData$[ebp+16], 0
  00057	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _viewData$[ebp+8], 0
  0005e	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _viewData$[ebp+4], 0

; 856  : 	m_pBlocks = NULL;

  00065	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _viewData$[ebp+20], 0

; 857  : 	m_nBlockSize = nBlockSize;

  0006c	c7 45 a8 0a 00
	00 00		 mov	 DWORD PTR _viewData$[ebp+24], 10 ; 0000000aH
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp

; 311  : 	pMainBlock->GetViewDataListInAllBlock( NULL, viewData);

  00073	8b 01		 mov	 eax, DWORD PTR [ecx]
  00075	8d 55 90	 lea	 edx, DWORD PTR _viewData$[ebp]
  00078	52		 push	 edx
  00079	6a 00		 push	 0
  0007b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00082	ff 90 54 02 00
	00		 call	 DWORD PTR [eax+596]

; 312  : 	if(viewData.GetColumnViewDataCount() <= 0)

  00088	8d 4d 90	 lea	 ecx, DWORD PTR _viewData$[ebp]
  0008b	e8 00 00 00 00	 call	 ?GetColumnViewDataCount@CViewData@@QBEHXZ ; CViewData::GetColumnViewDataCount
  00090	85 c0		 test	 eax, eax
  00092	7f 5b		 jg	 SHORT $LN7@GetTitle

; 313  : 		return "";

  00094	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00099	8b cf		 mov	 ecx, edi
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  000a1	8b 75 94	 mov	 esi, DWORD PTR _viewData$[ebp+4]

; 878  : {

  000a4	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000ab	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _viewData$[ebp], OFFSET ??_7?$CList@VCColumnViewData@@AAV1@@@6B@

; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  000b2	85 f6		 test	 esi, esi
  000b4	74 0e		 je	 SHORT $LN28@GetTitle
$LL29@GetTitle:

; 868  : 		pNode->data.~TYPE();

  000b6	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  000b9	e8 00 00 00 00	 call	 ??1?$CList@VCRowViewData@@AAV1@@@UAE@XZ ; CList<CRowViewData,CRowViewData &>::~CList<CRowViewData,CRowViewData &>

; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  000be	8b 36		 mov	 esi, DWORD PTR [esi]
  000c0	85 f6		 test	 esi, esi
  000c2	75 f2		 jne	 SHORT $LL29@GetTitle
$LN28@GetTitle:

; 869  : 
; 870  : 	m_nCount = 0;
; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 872  : 	m_pBlocks->FreeDataChain();

  000c4	8b 4d a4	 mov	 ecx, DWORD PTR _viewData$[ebp+20]
  000c7	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _viewData$[ebp+12], 0
  000ce	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _viewData$[ebp+16], 0
  000d5	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _viewData$[ebp+8], 0
  000dc	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _viewData$[ebp+4], 0
  000e3	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp

; 313  : 		return "";

  000e8	8b c7		 mov	 eax, edi
  000ea	e9 65 01 00 00	 jmp	 $LN1@GetTitle
$LN7@GetTitle:

; 314  : 
; 315  : 	int nCount = viewData.GetColumnViewDataCount();

  000ef	8d 4d 90	 lea	 ecx, DWORD PTR _viewData$[ebp]
  000f2	e8 00 00 00 00	 call	 ?GetColumnViewDataCount@CViewData@@QBEHXZ ; CViewData::GetColumnViewDataCount

; 316  : 
; 317  : 	for(int i = 0 ;  i< nCount ; i++) {

  000f7	33 ff		 xor	 edi, edi
  000f9	89 45 88	 mov	 DWORD PTR _nCount$1$[ebp], eax
  000fc	85 c0		 test	 eax, eax
  000fe	0f 8e 9e 00 00
	00		 jle	 $LN139@GetTitle
$LL4@GetTitle:

; 318  : 		CColumnViewData columndata = viewData.GetAt(i);

  00104	57		 push	 edi
  00105	8d 4d 90	 lea	 ecx, DWORD PTR _viewData$[ebp]
  00108	e8 00 00 00 00	 call	 ?GetAt@CViewData@@QAEAAVCColumnViewData@@H@Z ; CViewData::GetAt
  0010d	50		 push	 eax
  0010e	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _columndata$2[ebp]
  00114	e8 00 00 00 00	 call	 ??0CColumnViewData@@QAE@ABV0@@Z ; CColumnViewData::CColumnViewData

; 319  : 		const CList<CRowViewData, CRowViewData&>& rowdatalist = columndata.GetRowViewDataList(); 

  00119	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _columndata$2[ebp]
  0011f	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00123	e8 00 00 00 00	 call	 ?GetRowViewDataList@CColumnViewData@@QAEAAV?$CList@VCRowViewData@@AAV1@@@XZ ; CColumnViewData::GetRowViewDataList

; 320  : 		POSITION pos = rowdatalist.GetHeadPosition();

  00128	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 321  : 		while(pos) {

  0012b	85 f6		 test	 esi, esi
  0012d	74 5a		 je	 SHORT $LN6@GetTitle
  0012f	90		 npad	 1
$LL5@GetTitle:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 817  : 	{ CNode* pNode = (CNode*) rPosition;

  00130	8b c6		 mov	 eax, esi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp

; 322  : 			CRowViewData rowdata = rowdatalist.GetNext(pos);

  00132	8d 4d b0	 lea	 ecx, DWORD PTR _rowdata$4[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 819  : 		rPosition = (POSITION) pNode->pNext;

  00135	8b 36		 mov	 esi, DWORD PTR [esi]

; 820  : 		return pNode->data; }

  00137	83 c0 08	 add	 eax, 8
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp

; 322  : 			CRowViewData rowdata = rowdatalist.GetNext(pos);

  0013a	50		 push	 eax
  0013b	e8 00 00 00 00	 call	 ??0CRowViewData@@QAE@ABV0@@Z ; CRowViewData::CRowViewData

; 323  : 			CString strTitle = GetRowViewData(strSubGraphName, &rowdata);

  00140	8d 45 b0	 lea	 eax, DWORD PTR _rowdata$4[ebp]
  00143	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00147	50		 push	 eax
  00148	ff 75 84	 push	 DWORD PTR _strSubGraphName$GSCopy$1$[ebp]
  0014b	8d 45 ac	 lea	 eax, DWORD PTR _strTitle$3[ebp]
  0014e	8b cb		 mov	 ecx, ebx
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 ?GetRowViewData@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCRowViewData@@@Z ; CDataExtracter::GetRowViewData
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 519  : 		return( GetData()->nDataLength );

  00156	8b 45 ac	 mov	 eax, DWORD PTR _strTitle$3[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp

; 323  : 			CString strTitle = GetRowViewData(strSubGraphName, &rowdata);

  00159	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 533  : 		return( GetLength() == 0 );

  0015d	83 78 f4 00	 cmp	 DWORD PTR [eax-12], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp

; 324  : 			if(!strTitle.IsEmpty())

  00161	0f 85 0b 01 00
	00		 jne	 $LN120@GetTitle

; 326  : 		}

  00167	8d 4d ac	 lea	 ecx, DWORD PTR _strTitle$3[ebp]
  0016a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00170	8d 4d d4	 lea	 ecx, DWORD PTR _rowdata$4[ebp+36]
  00173	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00177	e8 00 00 00 00	 call	 ??1?$CList@VCSubGraphViewData@@AAV1@@@UAE@XZ ; CList<CSubGraphViewData,CSubGraphViewData &>::~CList<CSubGraphViewData,CSubGraphViewData &>
  0017c	8d 4d d0	 lea	 ecx, DWORD PTR _rowdata$4[ebp+32]
  0017f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00185	85 f6		 test	 esi, esi
  00187	75 a7		 jne	 SHORT $LL5@GetTitle
$LN6@GetTitle:
  00189	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _columndata$2[ebp]

; 327  : 	}

  0018f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00193	e8 00 00 00 00	 call	 ??1?$CList@VCRowViewData@@AAV1@@@UAE@XZ ; CList<CRowViewData,CRowViewData &>::~CList<CRowViewData,CRowViewData &>
  00198	47		 inc	 edi
  00199	3b 7d 88	 cmp	 edi, DWORD PTR _nCount$1$[ebp]
  0019c	0f 8c 62 ff ff
	ff		 jl	 $LL4@GetTitle
$LN139@GetTitle:

; 328  : 	return "";

  001a2	8b 5d 8c	 mov	 ebx, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  001a5	8b cb		 mov	 ecx, ebx
  001a7	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  001ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  001b2	8b 7d 94	 mov	 edi, DWORD PTR _viewData$[ebp+4]

; 878  : {

  001b5	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
  001bc	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _viewData$[ebp], OFFSET ??_7?$CList@VCColumnViewData@@AAV1@@@6B@

; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  001c3	85 ff		 test	 edi, edi
  001c5	74 67		 je	 SHORT $LN88@GetTitle
  001c7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL89@GetTitle:
  001d0	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]

; 878  : {

  001d3	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  001d7	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ??_7?$CList@VCRowViewData@@AAV1@@@6B@

; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  001de	85 f6		 test	 esi, esi
  001e0	74 17		 je	 SHORT $LN102@GetTitle
$LL103@GetTitle:

; 868  : 		pNode->data.~TYPE();

  001e2	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  001e5	e8 00 00 00 00	 call	 ??1?$CList@VCSubGraphViewData@@AAV1@@@UAE@XZ ; CList<CSubGraphViewData,CSubGraphViewData &>::~CList<CSubGraphViewData,CSubGraphViewData &>
  001ea	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  001ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  001f3	8b 36		 mov	 esi, DWORD PTR [esi]
  001f5	85 f6		 test	 esi, esi
  001f7	75 e9		 jne	 SHORT $LL103@GetTitle
$LN102@GetTitle:

; 869  : 
; 870  : 	m_nCount = 0;
; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 872  : 	m_pBlocks->FreeDataChain();

  001f9	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  001fc	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00203	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  0020a	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00211	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00218	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0021d	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0

; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00224	8b 3f		 mov	 edi, DWORD PTR [edi]

; 881  : }

  00226	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6

; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  0022a	85 ff		 test	 edi, edi
  0022c	75 a2		 jne	 SHORT $LL89@GetTitle
$LN88@GetTitle:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp

; 329  : }

  0022e	8b 4d a4	 mov	 ecx, DWORD PTR _viewData$[ebp+20]
  00231	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _viewData$[ebp+12], 0
  00238	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _viewData$[ebp+16], 0
  0023f	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _viewData$[ebp+8], 0
  00246	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _viewData$[ebp+4], 0
  0024d	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain
  00252	8b c3		 mov	 eax, ebx
$LN1@GetTitle:
  00254	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00257	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0025e	59		 pop	 ecx
  0025f	5f		 pop	 edi
  00260	5e		 pop	 esi
  00261	5b		 pop	 ebx
  00262	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00265	33 cd		 xor	 ecx, ebp
  00267	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0026c	8b e5		 mov	 esp, ebp
  0026e	5d		 pop	 ebp
  0026f	c2 0c 00	 ret	 12			; 0000000cH
$LN120@GetTitle:

; 325  : 				return strTitle;

  00272	8b 5d 8c	 mov	 ebx, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  00275	8d 45 ac	 lea	 eax, DWORD PTR _strTitle$3[ebp]
  00278	50		 push	 eax
  00279	8b cb		 mov	 ecx, ebx
  0027b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00281	8d 4d ac	 lea	 ecx, DWORD PTR _strTitle$3[ebp]
  00284	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0028a	8d 4d d4	 lea	 ecx, DWORD PTR _rowdata$4[ebp+36]
  0028d	e8 00 00 00 00	 call	 ??1?$CList@VCSubGraphViewData@@AAV1@@@UAE@XZ ; CList<CSubGraphViewData,CSubGraphViewData &>::~CList<CSubGraphViewData,CSubGraphViewData &>
  00292	8d 4d d0	 lea	 ecx, DWORD PTR _rowdata$4[ebp+32]
  00295	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0029b	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _columndata$2[ebp]
  002a1	e8 00 00 00 00	 call	 ??1?$CList@VCRowViewData@@AAV1@@@UAE@XZ ; CList<CRowViewData,CRowViewData &>::~CList<CRowViewData,CRowViewData &>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  002a6	8b 75 94	 mov	 esi, DWORD PTR _viewData$[ebp+4]

; 878  : {

  002a9	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
  002b0	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _viewData$[ebp], OFFSET ??_7?$CList@VCColumnViewData@@AAV1@@@6B@

; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  002b7	85 f6		 test	 esi, esi
  002b9	0f 84 6f ff ff
	ff		 je	 $LN88@GetTitle
  002bf	90		 npad	 1
$LL63@GetTitle:

; 868  : 		pNode->data.~TYPE();

  002c0	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  002c3	e8 00 00 00 00	 call	 ??1?$CList@VCRowViewData@@AAV1@@@UAE@XZ ; CList<CRowViewData,CRowViewData &>::~CList<CRowViewData,CRowViewData &>

; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  002c8	8b 36		 mov	 esi, DWORD PTR [esi]
  002ca	85 f6		 test	 esi, esi
  002cc	75 f2		 jne	 SHORT $LL63@GetTitle
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp

; 325  : 				return strTitle;

  002ce	e9 5b ff ff ff	 jmp	 $LN88@GetTitle
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetTitle@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCMainBlock@@@Z$0:
  00000	8d 4d 90	 lea	 ecx, DWORD PTR _viewData$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CViewData@@QAE@XZ
__unwindfunclet$?GetTitle@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCMainBlock@@@Z$2:
  00008	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _columndata$2[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1CColumnViewData@@QAE@XZ
__unwindfunclet$?GetTitle@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCMainBlock@@@Z$3:
  00013	8d 4d b0	 lea	 ecx, DWORD PTR _rowdata$4[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1CRowViewData@@QAE@XZ
__unwindfunclet$?GetTitle@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCMainBlock@@@Z$4:
  0001b	8d 4d ac	 lea	 ecx, DWORD PTR _strTitle$3[ebp]
  0001e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00024	cc		 int	 3
  00025	cc		 int	 3
  00026	cc		 int	 3
  00027	cc		 int	 3
  00028	cc		 int	 3
__ehhandler$?GetTitle@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCMainBlock@@@Z:
  00029	90		 npad	 1
  0002a	90		 npad	 1
  0002b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00032	8b 8a 64 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-156]
  00038	33 c8		 xor	 ecx, eax
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00042	33 c8		 xor	 ecx, eax
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetTitle@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCMainBlock@@@Z
  0004e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetTitle@CDataExtracter@@AAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABV23@PAVCMainBlock@@@Z ENDP ; CDataExtracter::GetTitle
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
;	COMDAT ??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@PBD@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_str1$ = 12						; size = 4
_psz2$ = 16						; size = 4
??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@PBD@Z PROC ; ATL::operator+, COMDAT

; 2400 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 2401 : 		CStringT strResult( str1.GetManager() );

  00026	8b 5d 0c	 mov	 ebx, DWORD PTR _str1$[ebp]
  00029	8b cb		 mov	 ecx, ebx
  0002b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetManager@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEPAUIAtlStringMgr@2@XZ
  00038	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0003b	8b cf		 mov	 ecx, edi
  0003d	50		 push	 eax
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 722  : 		if( psz == NULL )

  00044	8b 75 10	 mov	 esi, DWORD PTR _psz2$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h

; 2405 : 		return( strResult );

  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004e	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 722  : 		if( psz == NULL )

  00055	85 f6		 test	 esi, esi
  00057	75 04		 jne	 SHORT $LN6@operator

; 723  : 		{
; 724  : 			return( 0 );

  00059	33 d2		 xor	 edx, edx
  0005b	eb 0e		 jmp	 SHORT $LN5@operator
$LN6@operator:

; 725  : 		}
; 726  : 		return( int( strlen( psz ) ) );

  0005d	8b d6		 mov	 edx, esi
  0005f	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
$LL14@operator:
  00062	8a 02		 mov	 al, BYTE PTR [edx]
  00064	42		 inc	 edx
  00065	84 c0		 test	 al, al
  00067	75 f9		 jne	 SHORT $LL14@operator
  00069	2b d1		 sub	 edx, ecx
$LN5@operator:

; 519  : 		return( GetData()->nDataLength );

  0006b	8b 0b		 mov	 ecx, DWORD PTR [ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h

; 2403 : 		CThisSimpleString::Concatenate( strResult, str1, str1.GetLength(), psz2, CThisSimpleString::StringLength( psz2 ) );

  0006d	52		 push	 edx
  0006e	56		 push	 esi
  0006f	ff 71 f4	 push	 DWORD PTR [ecx-12]
  00072	51		 push	 ecx
  00073	57		 push	 edi
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Concatenate@?$CSimpleStringT@D$00@ATL@@KAXAAV12@PBDH1H@Z
  0007a	83 c4 14	 add	 esp, 20			; 00000014H

; 2405 : 		return( strResult );

  0007d	8b c7		 mov	 eax, edi

; 2406 : 	}

  0007f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00082	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00089	59		 pop	 ecx
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@PBD@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0d 00 00
	00		 je	 $LN4@operator
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN4@operator:
  00019	c3		 ret	 0
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@PBD@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@PBD@Z ENDP ; ATL::operator+
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
;	COMDAT ??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@0@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_str1$ = 12						; size = 4
_str2$ = 16						; size = 4
??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@0@Z PROC ; ATL::operator+, COMDAT

; 2389 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 2390 : 		CStringT strResult( str1.GetManager() );

  00025	8b 75 0c	 mov	 esi, DWORD PTR _str1$[ebp]
  00028	8b ce		 mov	 ecx, esi
  0002a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetManager@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEPAUIAtlStringMgr@2@XZ
  00037	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0003a	8b cf		 mov	 ecx, edi
  0003c	50		 push	 eax
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 519  : 		return( GetData()->nDataLength );

  00043	8b 45 10	 mov	 eax, DWORD PTR _str2$[ebp]
  00046	8b 16		 mov	 edx, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h

; 2394 : 		return( strResult );

  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004f	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atlsimpstr.h

; 519  : 		return( GetData()->nDataLength );

  00056	8b 08		 mov	 ecx, DWORD PTR [eax]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h

; 2392 : 		CThisSimpleString::Concatenate( strResult, str1, str1.GetLength(), str2, str2.GetLength() );

  00058	ff 71 f4	 push	 DWORD PTR [ecx-12]
  0005b	51		 push	 ecx
  0005c	ff 72 f4	 push	 DWORD PTR [edx-12]
  0005f	52		 push	 edx
  00060	57		 push	 edi
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Concatenate@?$CSimpleStringT@D$00@ATL@@KAXAAV12@PBDH1H@Z
  00067	83 c4 14	 add	 esp, 20			; 00000014H

; 2394 : 		return( strResult );

  0006a	8b c7		 mov	 eax, edi

; 2395 : 	}

  0006c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00076	59		 pop	 ecx
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@0@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0d 00 00
	00		 je	 $LN4@operator
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN4@operator:
  00019	c3		 ret	 0
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@0@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@0@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@0@Z ENDP ; ATL::operator+
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z PROC		; CObject::Dump, COMDAT
; _this$ = ecx

; 122  : 	{ /* no dumping in release builds */ }

  00000	c2 04 00	 ret	 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z ENDP		; CObject::Dump
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT
?AssertValid@CObject@@UBEXXZ PROC			; CObject::AssertValid, COMDAT
; _this$ = ecx

; 120  : 	{ /* no asserts in release builds */ }

  00000	c2 00 00	 ret	 0
?AssertValid@CObject@@UBEXXZ ENDP			; CObject::AssertValid
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z PROC		; CObject::Serialize, COMDAT
; _this$ = ecx

; 106  : 	{ /* CObject does not serialize anything by default */ }

  00000	c2 04 00	 ret	 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z ENDP		; CObject::Serialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT
??1CObject@@UAE@XZ PROC					; CObject::~CObject, COMDAT
; _this$ = ecx

; 104  : 	{ }

  00000	c2 00 00	 ret	 0
??1CObject@@UAE@XZ ENDP					; CObject::~CObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\KTBChart\DataExtracter.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
