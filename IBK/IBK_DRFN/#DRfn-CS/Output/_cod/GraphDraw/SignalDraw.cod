; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30145.0 

	TITLE	D:\git\src\IBK\IBK_DRFN\#DRfn-CS\_Obj\GraphDraw\SignalDraw.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?DrawElement_AddShapePolygon@CDraw@@IAEXPAUtagPOINT@@PAHAAH2ABFABJPBU2@ABU2@ABH@Z ; CDraw::DrawElement_AddShapePolygon
PUBLIC	?DrawSignal@CSignalDraw@@QAE_NPAVCDC@@ABVCDrawingGraphData@@ABVCDisplayAttributes@@PAVCPacket@@PBV?$CList@NN@@AAVCSignalData@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAVCXScaleManager@@H@Z ; CSignalDraw::DrawSignal
PUBLIC	??4CGraphDrawer@@QAEAAV0@ABV0@@Z		; CGraphDrawer::operator=
PUBLIC	??4CGraphDrawer@@QAEAAV0@$$QAV0@@Z		; CGraphDrawer::operator=
PUBLIC	?FindIndex@?$CList@NN@@QBEPAU__POSITION@@H@Z	; CList<double,double>::FindIndex
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3fffd70a3d70a3d7
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_?Compare@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z:PROC
EXTRN	?CalLogValue@CDraw@@IAEN_NN@Z:PROC		; CDraw::CalLogValue
EXTRN	?DrawElement_DrawPolygon@CDraw@@IAEXPAVCDC@@ABH1PAUtagPOINT@@PBKPAH1ABK11ABW4LINEDRAWSTYLE@CGraphBaseData@@@Z:PROC ; CDraw::DrawElement_DrawPolygon
EXTRN	?Log@CMath@@SANABN@Z:PROC			; CMath::Log
EXTRN	__imp_?GetDisplayMin@CDisplayDataMinMax@@QBENXZ:PROC
EXTRN	__imp_?GetDisplayMax@CDisplayDataMinMax@@QBENXZ:PROC
EXTRN	??0CCalcDataForDraw@@QAE@XZ:PROC		; CCalcDataForDraw::CCalcDataForDraw
EXTRN	?CheckYValue@CCalcDataForDraw@@QAE_NNN_N0ABVCRect@@H@Z:PROC ; CCalcDataForDraw::CheckYValue
EXTRN	?SetYValue@CCalcDataForDraw@@QAEXNN_N0ABVCRect@@H@Z:PROC ; CCalcDataForDraw::SetYValue
EXTRN	?ResetValue@CCalcDataForDraw@@QAEXXZ:PROC	; CCalcDataForDraw::ResetValue
EXTRN	?Alloc_lpPoint_High@CCalcDataForDraw@@QAEXH@Z:PROC ; CCalcDataForDraw::Alloc_lpPoint_High
EXTRN	?Alloc_lpPolyCount_High@CCalcDataForDraw@@QAEXH@Z:PROC ; CCalcDataForDraw::Alloc_lpPolyCount_High
EXTRN	?Alloc_lpPoint_Low@CCalcDataForDraw@@QAEXH@Z:PROC ; CCalcDataForDraw::Alloc_lpPoint_Low
EXTRN	?Alloc_lpPolyCount_Low@CCalcDataForDraw@@QAEXH@Z:PROC ; CCalcDataForDraw::Alloc_lpPolyCount_Low
EXTRN	?Alloc_lpPointBuffer@CCalcDataForDraw@@QAEXH@Z:PROC ; CCalcDataForDraw::Alloc_lpPointBuffer
EXTRN	?GetDataStartInBlock@CDisplayAttributes@@QBEHXZ:PROC ; CDisplayAttributes::GetDataStartInBlock
EXTRN	?GetDataCountInBlock@CDisplayAttributes@@QBEHXZ:PROC ; CDisplayAttributes::GetDataCountInBlock
EXTRN	?GetDrawingRegion@CGraphRegions@@QBE?AVCRect@@W4GRAPHTYPE@CGraphBaseData@@ABVCGraphStyle@@@Z:PROC ; CGraphRegions::GetDrawingRegion
EXTRN	?DoesVertScaleLogType@CDrawingGraphData@@QBE_NXZ:PROC ; CDrawingGraphData::DoesVertScaleLogType
EXTRN	?DoesVertScaleInvertType@CDrawingGraphData@@QBE_NXZ:PROC ; CDrawingGraphData::DoesVertScaleInvertType
EXTRN	?GetGraphRegions@CDrawingGraphData@@QBEABVCGraphRegions@@XZ:PROC ; CDrawingGraphData::GetGraphRegions
EXTRN	?GetDisplayDataVertMinMax@CDrawingGraphData@@QBE?AVCDisplayDataMinMax@@XZ:PROC ; CDrawingGraphData::GetDisplayDataVertMinMax
EXTRN	?GetIndicatorInfo@CDrawingGraphData@@QBEPAVCIndicatorInfo@@XZ:PROC ; CDrawingGraphData::GetIndicatorInfo
EXTRN	__imp_?GetStartPeriod@CPacket@@QAEHXZ:PROC
EXTRN	__imp_?GetnumericDataList@CPacket@@QAEPAV?$CList@NN@@XZ:PROC
EXTRN	__imp_?GetIndicatorName@CIndicatorInfo@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ:PROC
EXTRN	??0DblCursor@CDataBlockListUNK@@QAE@XZ:PROC	; CDataBlockListUNK::DblCursor::DblCursor
EXTRN	?GetDblCursorUNK@CDataBlockListUNK@@QAEXHHAAVDblCursor@1@@Z:PROC ; CDataBlockListUNK::GetDblCursorUNK
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?g_iMetaTable@@3VIMetaTable@@A:BYTE		; g_iMetaTable
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@3fffd70a3d70a3d7
CONST	SEGMENT
__real@3fffd70a3d70a3d7 DQ 03fffd70a3d70a3d7r	; 1.99
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?DrawSignal@CSignalDraw@@QAE_NPAVCDC@@ABVCDrawingGraphData@@ABVCDisplayAttributes@@PAVCPacket@@PBV?$CList@NN@@AAVCSignalData@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAVCXScaleManager@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DrawSignal@CSignalDraw@@QAE_NPAVCDC@@ABVCDrawingGraphData@@ABVCDisplayAttributes@@PAVCPacket@@PBV?$CList@NN@@AAVCSignalData@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAVCXScaleManager@@H@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?DrawSignal@CSignalDraw@@QAE_NPAVCDC@@ABVCDrawingGraphData@@ABVCDisplayAttributes@@PAVCPacket@@PBV?$CList@NN@@AAVCSignalData@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAVCXScaleManager@@H@Z$2
__ehfuncinfo$?DrawSignal@CSignalDraw@@QAE_NPAVCDC@@ABVCDrawingGraphData@@ABVCDisplayAttributes@@PAVCPacket@@PBV?$CList@NN@@AAVCSignalData@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAVCXScaleManager@@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?DrawSignal@CSignalDraw@@QAE_NPAVCDC@@ABVCDrawingGraphData@@ABVCDisplayAttributes@@PAVCPacket@@PBV?$CList@NN@@AAVCSignalData@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAVCXScaleManager@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?FindIndex@?$CList@NN@@QBEPAU__POSITION@@H@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?FindIndex@?$CList@NN@@QBEPAU__POSITION@@H@Z PROC	; CList<double,double>::FindIndex, COMDAT
; _this$ = ecx

; 1130 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1131 : 	ASSERT_VALID(this);
; 1132 : 
; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00003	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00006	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00009	7d 14		 jge	 SHORT $LN5@FindIndex
  0000b	85 d2		 test	 edx, edx
  0000d	78 10		 js	 SHORT $LN5@FindIndex

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0000f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1137 : 	while (nIndex--)

  00012	74 0d		 je	 SHORT $LN1@FindIndex
$LL2@FindIndex:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	83 ea 01	 sub	 edx, 1
  00019	75 f9		 jne	 SHORT $LL2@FindIndex

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;
; 1143 : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
$LN5@FindIndex:

; 1134 : 		return NULL;  // went too far

  0001f	33 c0		 xor	 eax, eax
$LN1@FindIndex:

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;
; 1143 : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?FindIndex@?$CList@NN@@QBEPAU__POSITION@@H@Z ENDP	; CList<double,double>::FindIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??4CGraphDrawer@@QAEAAV0@$$QAV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4CGraphDrawer@@QAEAAV0@$$QAV0@@Z PROC			; CGraphDrawer::operator=, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??4CGraphDrawer@@QAEAAV0@$$QAV0@@Z ENDP			; CGraphDrawer::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??4CGraphDrawer@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4CGraphDrawer@@QAEAAV0@ABV0@@Z PROC			; CGraphDrawer::operator=, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??4CGraphDrawer@@QAEAAV0@ABV0@@Z ENDP			; CGraphDrawer::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\GraphDraw\SignalDraw.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\BlockBaseData.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\GraphDraw\SignalDraw.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\GraphDraw\SignalDraw.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\GraphDraw\SignalDraw.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\GraphDraw\SignalDraw.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\GraphDraw\SignalDraw.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\GraphDraw\SignalDraw.cpp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\GraphDraw\SignalDraw.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\GraphDraw\SignalDraw.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\GraphDraw\SignalDraw.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\GraphDraw\SignalDraw.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\GraphDraw\SignalDraw.cpp
;	COMDAT ?DrawSignal@CSignalDraw@@QAE_NPAVCDC@@ABVCDrawingGraphData@@ABVCDisplayAttributes@@PAVCPacket@@PBV?$CList@NN@@AAVCSignalData@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAVCXScaleManager@@H@Z
_TEXT	SEGMENT
_displayDataMinMax$2 = -212				; size = 16
_dViewBottom$1$ = -196					; size = 8
_dRealHeight$1$ = -188					; size = 8
$T3 = -180						; size = 4
_dblCursor$4 = -176					; size = 20
_bSignal$1$ = -156					; size = 8
$T5 = -152						; size = 4
$T6 = -152						; size = 4
_dValue$7 = -148					; size = 8
_nZeroDTI$8 = -140					; size = 4
_dViewMax$9 = -136					; size = 8
_lpPoint_High$1$ = -128					; size = 4
$T10 = -128						; size = 4
_lpPolyCount_High$1$ = -124				; size = 4
$T11 = -124						; size = 4
_nViewY_half2$1$ = -120					; size = 4
$T12 = -120						; size = 4
_drawingGraphData$GSCopy$1$ = -116			; size = 4
tv1425 = -116						; size = 4
_lpPoint_Low$1$ = -112					; size = 4
$T13 = -112						; size = 4
_displayAttributes$GSCopy$1$ = -108			; size = 4
_nFullPointCount_High$14 = -108				; size = 4
_ptUpArrow$1$ = -104					; size = 4
$T15 = -104						; size = 4
_pblaAreafDTI$1$ = -100					; size = 4
$T16 = -100						; size = 4
_bInvert$17 = -96					; size = 1
_bLog$18 = -92						; size = 1
_dViewMin$19 = -88					; size = 8
_lpPolyCount_Low$1$ = -84				; size = 4
$T20 = -84						; size = 4
$T21 = -80						; size = 2
$T22 = -80						; size = 4
$T23 = -80						; size = 4
_nDTI_End$24 = -76					; size = 4
_strRQ$GSCopy$1$ = -72					; size = 4
_nX$1$ = -72						; size = 4
_p_nColumn$GSCopy$1$ = -68				; size = 4
_posSignal$1$ = -68					; size = 4
_this$GSCopy$1$ = -64					; size = 4
_pPacket$GSCopy$1$ = -60				; size = 4
_nPointCounts_Low$1$ = -56				; size = 4
_graphRegion$1$ = -56					; size = 4
$T25 = -56						; size = 4
$T26 = -56						; size = 4
_ptDownArrow$1$ = -52					; size = 4
_xScaleMode$1$ = -52					; size = 4
$T27 = -52						; size = 4
_pDC$GSCopy$1$ = -48					; size = 4
_nFullPointCount_Low$28 = -48				; size = 4
$T29 = -48						; size = 4
$T30 = -48						; size = 4
_nDTI_Start$31 = -44					; size = 4
_nDTI$1$ = -40						; size = 4
_nDataCount$1$ = -40					; size = 4
$T32 = -40						; size = 2
$T33 = -40						; size = 4
$T34 = -40						; size = 4
_posValue$1$ = -36					; size = 4
_pCalcData$1$ = -36					; size = 4
_nMaxElementCount$1$ = -36				; size = 4
_graphRegion$35 = -32					; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pDC$ = 8						; size = 4
_drawingGraphData$ = 12					; size = 4
_displayAttributes$ = 16				; size = 4
_pPacket$ = 20						; size = 4
_pSignalData$ = 24					; size = 4
_p_signalData$ = 28					; size = 4
_strRQ$ = 32						; size = 4
_pxScaleManager$ = 36					; size = 4
_p_nColumn$ = 40					; size = 4
?DrawSignal@CSignalDraw@@QAE_NPAVCDC@@ABVCDrawingGraphData@@ABVCDisplayAttributes@@PAVCPacket@@PBV?$CList@NN@@AAVCSignalData@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAVCXScaleManager@@H@Z PROC ; CSignalDraw::DrawSignal, COMDAT
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?DrawSignal@CSignalDraw@@QAE_NPAVCDC@@ABVCDrawingGraphData@@ABVCDisplayAttributes@@PAVCPacket@@PBV?$CList@NN@@AAVCSignalData@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAVCXScaleManager@@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 4d c0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00031	8b 45 08	 mov	 eax, DWORD PTR _pDC$[ebp]
  00034	8b 7d 24	 mov	 edi, DWORD PTR _pxScaleManager$[ebp]

; 39   : 	if(pxScaleManager->GetThreadFlag() == THREAD_CALCULATION)

  00037	8b cf		 mov	 ecx, edi
  00039	8b 75 0c	 mov	 esi, DWORD PTR _drawingGraphData$[ebp]
  0003c	8b 5d 1c	 mov	 ebx, DWORD PTR _p_signalData$[ebp]
  0003f	89 45 d0	 mov	 DWORD PTR _pDC$GSCopy$1$[ebp], eax
  00042	8b 45 10	 mov	 eax, DWORD PTR _displayAttributes$[ebp]
  00045	89 45 94	 mov	 DWORD PTR _displayAttributes$GSCopy$1$[ebp], eax
  00048	8b 45 14	 mov	 eax, DWORD PTR _pPacket$[ebp]
  0004b	89 45 c4	 mov	 DWORD PTR _pPacket$GSCopy$1$[ebp], eax
  0004e	8b 45 20	 mov	 eax, DWORD PTR _strRQ$[ebp]
  00051	89 45 b8	 mov	 DWORD PTR _strRQ$GSCopy$1$[ebp], eax
  00054	8b 45 28	 mov	 eax, DWORD PTR _p_nColumn$[ebp]
  00057	89 45 bc	 mov	 DWORD PTR _p_nColumn$GSCopy$1$[ebp], eax
  0005a	8b 07		 mov	 eax, DWORD PTR [edi]
  0005c	89 75 8c	 mov	 DWORD PTR _drawingGraphData$GSCopy$1$[ebp], esi
  0005f	ff 90 f8 00 00
	00		 call	 DWORD PTR [eax+248]
  00065	8b 17		 mov	 edx, DWORD PTR [edi]
  00067	8b cf		 mov	 ecx, edi
  00069	83 f8 01	 cmp	 eax, 1
  0006c	0f 85 d5 07 00
	00		 jne	 $LN5@DrawSignal

; 40   : 	{
; 41   : 		// 1. Get the cache size.
; 42   : 		// (2009/3/11 - Seung-Won, Bae) Manage memory for no-reallocation.
; 43   : 		//		Alloc max memory.
; 44   : 		int nDataCount = pxScaleManager->GetColumnWidth( p_nColumn);

  00072	ff 75 bc	 push	 DWORD PTR _p_nColumn$GSCopy$1$[ebp]
  00075	ff 92 10 01 00
	00		 call	 DWORD PTR [edx+272]
  0007b	89 45 d8	 mov	 DWORD PTR _nDataCount$1$[ebp], eax

; 45   : 		// (2009/2/26 - Seung-Won, Bae) Check no data.
; 46   : 		if( nDataCount < 1) return true;

  0007e	83 f8 01	 cmp	 eax, 1
  00081	0f 8c bf 08 00
	00		 jl	 $LN47@DrawSignal

; 49   : 		CRect graphRegion = drawingGraphData.GetGraphRegions().GetDrawingRegion();

  00087	8d 45 d0	 lea	 eax, DWORD PTR $T30[ebp]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\BlockBaseData.h

; 43   : 	CGraphStyle(const int style) { m_nStyle = style; };

  0008a	c7 45 d0 ff ff
	ff ff		 mov	 DWORD PTR $T30[ebp], -1
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\GraphDraw\SignalDraw.cpp

; 49   : 		CRect graphRegion = drawingGraphData.GetGraphRegions().GetDrawingRegion();

  00091	50		 push	 eax
  00092	6a ff		 push	 -1
  00094	8d 45 e0	 lea	 eax, DWORD PTR _graphRegion$35[ebp]
  00097	8b ce		 mov	 ecx, esi
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ?GetGraphRegions@CDrawingGraphData@@QBEABVCGraphRegions@@XZ ; CDrawingGraphData::GetGraphRegions
  0009f	8b c8		 mov	 ecx, eax
  000a1	e8 00 00 00 00	 call	 ?GetDrawingRegion@CGraphRegions@@QBE?AVCRect@@W4GRAPHTYPE@CGraphBaseData@@ABVCGraphStyle@@@Z ; CGraphRegions::GetDrawingRegion

; 50   : 		if( graphRegion.bottom <= graphRegion.top) return false;

  000a6	8b 45 ec	 mov	 eax, DWORD PTR _graphRegion$35[ebp+12]
  000a9	8b 4d e4	 mov	 ecx, DWORD PTR _graphRegion$35[ebp+4]
  000ac	3b c1		 cmp	 eax, ecx
  000ae	0f 8e 8c 07 00
	00		 jle	 $LN24@DrawSignal
  000b4	66 0f 6e c0	 movd	 xmm0, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 581  : 	return bottom - top;

  000b8	2b c1		 sub	 eax, ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\GraphDraw\SignalDraw.cpp

; 51   : 		double dViewBottom = (double)graphRegion.bottom;

  000ba	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\atltypes.h

; 581  : 	return bottom - top;

  000be	89 45 c8	 mov	 DWORD PTR _graphRegion$1$[ebp], eax
  000c1	66 0f 6e c8	 movd	 xmm1, eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\GraphDraw\SignalDraw.cpp

; 53   : 		int nViewY_half2 = graphRegion.top + graphRegion.top + dViewHeight;

  000c5	8d 04 09	 lea	 eax, DWORD PTR [ecx+ecx]
  000c8	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR _dViewBottom$1$[ebp], xmm0

; 54   : 		CDisplayDataMinMax displayDataMinMax = drawingGraphData.GetDisplayDataVertMinMax();

  000d0	8b ce		 mov	 ecx, esi
  000d2	66 0f 6e c0	 movd	 xmm0, eax
  000d6	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  000da	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  000de	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000e2	f2 0f 2c c0	 cvttsd2si eax, xmm0
  000e6	89 45 88	 mov	 DWORD PTR _nViewY_half2$1$[ebp], eax
  000e9	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _displayDataMinMax$2[ebp]
  000ef	50		 push	 eax
  000f0	e8 00 00 00 00	 call	 ?GetDisplayDataVertMinMax@CDrawingGraphData@@QBE?AVCDisplayDataMinMax@@XZ ; CDrawingGraphData::GetDisplayDataVertMinMax

; 55   : 		double dViewMax = displayDataMinMax.GetDisplayMin();

  000f5	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _displayDataMinMax$2[ebp]
  000fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDisplayMin@CDisplayDataMinMax@@QBENXZ
  00101	dd 9d 78 ff ff
	ff		 fstp	 QWORD PTR _dViewMax$9[ebp]

; 56   : 		double dViewMin = displayDataMinMax.GetDisplayMax();

  00107	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _displayDataMinMax$2[ebp]
  0010d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDisplayMax@CDisplayDataMinMax@@QBENXZ

; 57   : 		bool bLog = drawingGraphData.DoesVertScaleLogType();

  00113	8b ce		 mov	 ecx, esi
  00115	dd 5d a8	 fstp	 QWORD PTR _dViewMin$19[ebp]
  00118	e8 00 00 00 00	 call	 ?DoesVertScaleLogType@CDrawingGraphData@@QBE_NXZ ; CDrawingGraphData::DoesVertScaleLogType

; 58   : 		bool bInvert = drawingGraphData.DoesVertScaleInvertType();

  0011d	8b ce		 mov	 ecx, esi
  0011f	88 45 a4	 mov	 BYTE PTR _bLog$18[ebp], al
  00122	e8 00 00 00 00	 call	 ?DoesVertScaleInvertType@CDrawingGraphData@@QBE_NXZ ; CDrawingGraphData::DoesVertScaleInvertType

; 59   : 
; 60   : 		// 1. Check the Range
; 61   : 		int nDTI_Start = -1, nDTI_End = -1;
; 62   : 		// (2010/5/4 - Seung-Won, Bae) Fixed Area of Obvious Glance Balance Chart on X Scale Manager
; 63   : 		BOOL bOEBT = FALSE;
; 64   : 		CIndicatorInfo *pIndicatorInfo = drawingGraphData.GetIndicatorInfo();

  00127	8b 4d 8c	 mov	 ecx, DWORD PTR _drawingGraphData$GSCopy$1$[ebp]
  0012a	33 f6		 xor	 esi, esi
  0012c	88 45 a0	 mov	 BYTE PTR _bInvert$17[ebp], al
  0012f	c7 45 d4 ff ff
	ff ff		 mov	 DWORD PTR _nDTI_Start$31[ebp], -1
  00136	c7 45 b4 ff ff
	ff ff		 mov	 DWORD PTR _nDTI_End$24[ebp], -1
  0013d	e8 00 00 00 00	 call	 ?GetIndicatorInfo@CDrawingGraphData@@QBEPAVCIndicatorInfo@@XZ ; CDrawingGraphData::GetIndicatorInfo

; 65   : 		if( pIndicatorInfo) bOEBT = ( pIndicatorInfo->GetIndicatorName() == _MTEXT( C2_OBVIOUSLY_BALANCE_CHART));

  00142	85 c0		 test	 eax, eax
  00144	74 38		 je	 SHORT $LN9@DrawSignal
  00146	8d 4d d0	 lea	 ecx, DWORD PTR $T29[ebp]
  00149	51		 push	 ecx
  0014a	8b c8		 mov	 ecx, eax
  0014c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetIndicatorName@CIndicatorInfo@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
  00152	8b 0d 54 00 00
	00		 mov	 ecx, DWORD PTR ?g_iMetaTable@@3VIMetaTable@@A+84
  00158	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h

; 2486 : 		return(str1.Compare(psz2) == 0);

  0015b	ff b1 38 03 00
	00		 push	 DWORD PTR [ecx+824]
  00161	8b c8		 mov	 ecx, eax
  00163	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Compare@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBD@Z
  00169	f7 d8		 neg	 eax
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\GraphDraw\SignalDraw.cpp

; 65   : 		if( pIndicatorInfo) bOEBT = ( pIndicatorInfo->GetIndicatorName() == _MTEXT( C2_OBVIOUSLY_BALANCE_CHART));

  0016b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00172	8d 4d d0	 lea	 ecx, DWORD PTR $T29[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\cstringt.h

; 2486 : 		return(str1.Compare(psz2) == 0);

  00175	1b f6		 sbb	 esi, esi
  00177	46		 inc	 esi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\GraphDraw\SignalDraw.cpp

; 65   : 		if( pIndicatorInfo) bOEBT = ( pIndicatorInfo->GetIndicatorName() == _MTEXT( C2_OBVIOUSLY_BALANCE_CHART));

  00178	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN9@DrawSignal:

; 66   : 		pxScaleManager->GetDrawIndex(strRQ, FALSE, bOEBT, nDTI_Start, nDTI_End);

  0017e	8d 45 b4	 lea	 eax, DWORD PTR _nDTI_End$24[ebp]
  00181	50		 push	 eax
  00182	8d 45 d4	 lea	 eax, DWORD PTR _nDTI_Start$31[ebp]
  00185	50		 push	 eax
  00186	56		 push	 esi
  00187	6a 00		 push	 0
  00189	51		 push	 ecx
  0018a	8b cc		 mov	 ecx, esp
  0018c	ff 75 b8	 push	 DWORD PTR _strRQ$GSCopy$1$[ebp]
  0018f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00195	8b 07		 mov	 eax, DWORD PTR [edi]
  00197	8b cf		 mov	 ecx, edi
  00199	ff 90 a4 00 00
	00		 call	 DWORD PTR [eax+164]

; 67   : 		if( nDTI_Start == -1) return true;

  0019f	83 7d d4 ff	 cmp	 DWORD PTR _nDTI_Start$31[ebp], -1
  001a3	0f 84 9d 07 00
	00		 je	 $LN47@DrawSignal

; 68   : 		if( nDTI_Start < pPacket->GetStartPeriod()) nDTI_Start = pPacket->GetStartPeriod();

  001a9	8b 4d c4	 mov	 ecx, DWORD PTR _pPacket$GSCopy$1$[ebp]
  001ac	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?GetStartPeriod@CPacket@@QAEHXZ
  001b2	ff d6		 call	 esi
  001b4	8b 4d d4	 mov	 ecx, DWORD PTR _nDTI_Start$31[ebp]
  001b7	3b c8		 cmp	 ecx, eax
  001b9	7d 0a		 jge	 SHORT $LN11@DrawSignal
  001bb	8b 4d c4	 mov	 ecx, DWORD PTR _pPacket$GSCopy$1$[ebp]
  001be	ff d6		 call	 esi
  001c0	8b c8		 mov	 ecx, eax
  001c2	89 4d d4	 mov	 DWORD PTR _nDTI_Start$31[ebp], ecx
$LN11@DrawSignal:

; 69   : 		int nDRICount = nDTI_End - nDTI_Start + 1;

  001c5	8b 75 b4	 mov	 esi, DWORD PTR _nDTI_End$24[ebp]

; 70   : 
; 71   : 		// 2. Check X Scale Mode.
; 72   : 		// the change of Graph Style, Y Min/Max is xScaleMode 2 (Don't ask X Scale Manager !)
; 73   : 		int xScaleMode = 2;
; 74   : 		if(	p_signalData.m_pSignalCache)

  001c8	f2 0f 10 45 a8	 movsd	 xmm0, QWORD PTR _dViewMin$19[ebp]
  001cd	2b f1		 sub	 esi, ecx
  001cf	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  001d2	46		 inc	 esi
  001d3	89 75 dc	 mov	 DWORD PTR _nMaxElementCount$1$[ebp], esi
  001d6	c7 45 cc 02 00
	00 00		 mov	 DWORD PTR _xScaleMode$1$[ebp], 2
  001dd	85 c9		 test	 ecx, ecx
  001df	74 4c		 je	 SHORT $LN86@DrawSignal

; 75   : 		{	
; 76   : 			//Check YValue
; 77   : 			bool bYValue = p_signalData.m_pSignalCache->CheckYValue( dViewMax, dViewMin, bLog, bInvert, graphRegion, nDataCount);

  001e1	ff 75 d8	 push	 DWORD PTR _nDataCount$1$[ebp]
  001e4	f2 0f 10 8d 78
	ff ff ff	 movsd	 xmm1, QWORD PTR _dViewMax$9[ebp]
  001ec	8d 45 e0	 lea	 eax, DWORD PTR _graphRegion$35[ebp]
  001ef	50		 push	 eax
  001f0	ff 75 a0	 push	 DWORD PTR _bInvert$17[ebp]
  001f3	ff 75 a4	 push	 DWORD PTR _bLog$18[ebp]
  001f6	83 ec 10	 sub	 esp, 16			; 00000010H
  001f9	f2 0f 11 44 24
	08		 movsd	 QWORD PTR [esp+8], xmm0
  001ff	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  00204	e8 00 00 00 00	 call	 ?CheckYValue@CCalcDataForDraw@@QAE_NNN_N0ABVCRect@@H@Z ; CCalcDataForDraw::CheckYValue

; 78   : 			if(bYValue)

  00209	84 c0		 test	 al, al
  0020b	74 20		 je	 SHORT $LN86@DrawSignal

; 79   : 			{					
; 80   : 				if(pxScaleManager) xScaleMode = pxScaleManager->GetCalculationMode();

  0020d	8b 07		 mov	 eax, DWORD PTR [edi]
  0020f	8b cf		 mov	 ecx, edi
  00211	ff 90 fc 00 00
	00		 call	 DWORD PTR [eax+252]
  00217	8b d0		 mov	 edx, eax
  00219	89 55 cc	 mov	 DWORD PTR _xScaleMode$1$[ebp], edx

; 81   : 				if(xScaleMode == 0)	return true;

  0021c	85 d2		 test	 edx, edx
  0021e	0f 84 22 07 00
	00		 je	 $LN47@DrawSignal

; 82   : 			}
; 83   : 		}		
; 84   : 		
; 85   : 		if( 2 == xScaleMode)

  00224	83 fa 02	 cmp	 edx, 2
  00227	0f 85 ac 00 00
	00		 jne	 $LN16@DrawSignal
$LN86@DrawSignal:

; 86   : 		{
; 87   : 			// ReAlloc Memory
; 88   : 			// const int nOneLineMode = pxScaleManager->IsAllOnePixel( nColumn, strRQ);
; 89   : 			int nMaxElementCount = nDRICount;
; 90   : 			if( graphRegion.right != graphRegion.left) nMaxElementCount += int( nDRICount / double( graphRegion.right - graphRegion.left) + 1.99);

  0022d	8b 4d e8	 mov	 ecx, DWORD PTR _graphRegion$35[ebp+8]
  00230	8b 45 e0	 mov	 eax, DWORD PTR _graphRegion$35[ebp]
  00233	3b c8		 cmp	 ecx, eax
  00235	74 27		 je	 SHORT $LN17@DrawSignal
  00237	2b c8		 sub	 ecx, eax
  00239	66 0f 6e ce	 movd	 xmm1, esi
  0023d	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  00241	66 0f 6e c1	 movd	 xmm0, ecx
  00245	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00249	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0024d	f2 0f 58 0d 00
	00 00 00	 addsd	 xmm1, QWORD PTR __real@3fffd70a3d70a3d7
  00255	f2 0f 2c c1	 cvttsd2si eax, xmm1
  00259	03 f0		 add	 esi, eax
  0025b	89 75 dc	 mov	 DWORD PTR _nMaxElementCount$1$[ebp], esi
$LN17@DrawSignal:

; 91   : 
; 92   : 			// (2009/3/11 - Seung-Won, Bae) Manage memory for no-reallocation.
; 93   : 			if( p_signalData.m_pSignalCache) p_signalData.m_pSignalCache->ResetValue();

  0025e	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00261	85 c9		 test	 ecx, ecx
  00263	74 0a		 je	 SHORT $LN18@DrawSignal
  00265	e8 00 00 00 00	 call	 ?ResetValue@CCalcDataForDraw@@QAEXXZ ; CCalcDataForDraw::ResetValue
  0026a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0026d	eb 33		 jmp	 SHORT $LN19@DrawSignal
$LN18@DrawSignal:

; 94   : 			else							p_signalData.m_pSignalCache = new CCalcDataForDraw;

  0026f	68 70 01 00 00	 push	 368			; 00000170H
  00274	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00279	83 c4 04	 add	 esp, 4
  0027c	89 85 68 ff ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
  00282	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00289	85 c0		 test	 eax, eax
  0028b	74 09		 je	 SHORT $LN49@DrawSignal
  0028d	8b c8		 mov	 ecx, eax
  0028f	e8 00 00 00 00	 call	 ??0CCalcDataForDraw@@QAE@XZ ; CCalcDataForDraw::CCalcDataForDraw
  00294	eb 02		 jmp	 SHORT $LN50@DrawSignal
$LN49@DrawSignal:
  00296	33 c0		 xor	 eax, eax
$LN50@DrawSignal:
  00298	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0029f	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LN19@DrawSignal:

; 95   : 			p_signalData.m_pSignalCache->Alloc_lpPoint_High( nMaxElementCount * 7);

  002a2	c1 e6 03	 shl	 esi, 3
  002a5	8b c8		 mov	 ecx, eax
  002a7	2b 75 dc	 sub	 esi, DWORD PTR _nMaxElementCount$1$[ebp]
  002aa	56		 push	 esi
  002ab	e8 00 00 00 00	 call	 ?Alloc_lpPoint_High@CCalcDataForDraw@@QAEXH@Z ; CCalcDataForDraw::Alloc_lpPoint_High

; 96   : 			p_signalData.m_pSignalCache->Alloc_lpPolyCount_High( nMaxElementCount);

  002b0	ff 75 dc	 push	 DWORD PTR _nMaxElementCount$1$[ebp]
  002b3	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  002b6	e8 00 00 00 00	 call	 ?Alloc_lpPolyCount_High@CCalcDataForDraw@@QAEXH@Z ; CCalcDataForDraw::Alloc_lpPolyCount_High

; 97   : 			p_signalData.m_pSignalCache->Alloc_lpPoint_Low( nMaxElementCount* 7);

  002bb	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  002be	56		 push	 esi
  002bf	e8 00 00 00 00	 call	 ?Alloc_lpPoint_Low@CCalcDataForDraw@@QAEXH@Z ; CCalcDataForDraw::Alloc_lpPoint_Low

; 98   : 			p_signalData.m_pSignalCache->Alloc_lpPolyCount_Low( nMaxElementCount);

  002c4	ff 75 dc	 push	 DWORD PTR _nMaxElementCount$1$[ebp]
  002c7	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  002ca	e8 00 00 00 00	 call	 ?Alloc_lpPolyCount_Low@CCalcDataForDraw@@QAEXH@Z ; CCalcDataForDraw::Alloc_lpPolyCount_Low

; 99   : 			p_signalData.m_pSignalCache->Alloc_lpPointBuffer( 16);

  002cf	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  002d2	6a 10		 push	 16			; 00000010H
  002d4	e8 00 00 00 00	 call	 ?Alloc_lpPointBuffer@CCalcDataForDraw@@QAEXH@Z ; CCalcDataForDraw::Alloc_lpPointBuffer
$LN16@DrawSignal:

; 100  : 		}
; 101  : 		CCalcDataForDraw* pCalcData = p_signalData.m_pSignalCache;
; 102  : 		//YValue Set
; 103  : 		pCalcData->SetYValue( dViewMax, dViewMin, bLog, bInvert, graphRegion, nDataCount);

  002d9	ff 75 d8	 push	 DWORD PTR _nDataCount$1$[ebp]
  002dc	f2 0f 10 45 a8	 movsd	 xmm0, QWORD PTR _dViewMin$19[ebp]
  002e1	8d 45 e0	 lea	 eax, DWORD PTR _graphRegion$35[ebp]
  002e4	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  002e7	8b ce		 mov	 ecx, esi
  002e9	50		 push	 eax
  002ea	ff 75 a0	 push	 DWORD PTR _bInvert$17[ebp]
  002ed	89 75 dc	 mov	 DWORD PTR _pCalcData$1$[ebp], esi
  002f0	ff 75 a4	 push	 DWORD PTR _bLog$18[ebp]
  002f3	83 ec 10	 sub	 esp, 16			; 00000010H
  002f6	f2 0f 11 44 24
	08		 movsd	 QWORD PTR [esp+8], xmm0
  002fc	f2 0f 10 85 78
	ff ff ff	 movsd	 xmm0, QWORD PTR _dViewMax$9[ebp]
  00304	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00309	e8 00 00 00 00	 call	 ?SetYValue@CCalcDataForDraw@@QAEXNN_N0ABVCRect@@H@Z ; CCalcDataForDraw::SetYValue

; 104  : 
; 105  : 		if( 2 == xScaleMode)

  0030e	8b 5d cc	 mov	 ebx, DWORD PTR _xScaleMode$1$[ebp]
  00311	83 fb 02	 cmp	 ebx, 2
  00314	0f 85 de 00 00
	00		 jne	 $LN20@DrawSignal

; 106  : 		{
; 107  : 			//////////////////////////////////////////////////////////////////////
; 108  : 			// [for Dot Shape]
; 109  : 			// pCalcData->lpPointBuffer			: lpPointBuffer[0]		the Center Point of Template.
; 110  : 			//									  lpPointBuffer[1:]		Array of Point for the Element Template.
; 111  : 			//////////////////////////////////////////////////////////////////////
; 112  : 			if( pCalcData->GetSize_lpPointBuffer() < 16) return true;

  0031a	83 be 6c 01 00
	00 10		 cmp	 DWORD PTR [esi+364], 16	; 00000010H
  00321	0f 8c 1f 06 00
	00		 jl	 $LN47@DrawSignal

; 113  : 			POINT &ptUpArrowCenter			= pCalcData->Get_lpPointBuffer()[ 0];

  00327	8b 96 68 01 00
	00		 mov	 edx, DWORD PTR [esi+360]

; 114  : 			POINT *ptUpArrow				= pCalcData->Get_lpPointBuffer() + 1;
; 115  : 			POINT &ptDownArrowCenter		= pCalcData->Get_lpPointBuffer()[ 8];
; 116  : 			POINT *ptDownArrow				= pCalcData->Get_lpPointBuffer() + 9;
; 117  : 
; 118  : 			ptUpArrowCenter.x = 0;

  0032d	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 119  : 			ptUpArrowCenter.y = 0;

  00333	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 120  : 			ptUpArrow[0].x = ptUpArrowCenter.x;

  0033a	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 121  : 			ptUpArrow[0].y = ptUpArrowCenter.y + 2;

  00341	89 5a 0c	 mov	 DWORD PTR [edx+12], ebx

; 122  : 			ptUpArrow[1].y = ptUpArrow[2].y = ptUpArrow[5].y = ptUpArrow[6].y = ptUpArrow[0].y + 3;

  00344	c7 42 3c 05 00
	00 00		 mov	 DWORD PTR [edx+60], 5
  0034b	c7 42 34 05 00
	00 00		 mov	 DWORD PTR [edx+52], 5
  00352	c7 42 1c 05 00
	00 00		 mov	 DWORD PTR [edx+28], 5
  00359	c7 42 14 05 00
	00 00		 mov	 DWORD PTR [edx+20], 5

; 123  : 			ptUpArrow[3].y = ptUpArrow[4].y = ptUpArrow[0].y + 8;

  00360	c7 42 2c 0a 00
	00 00		 mov	 DWORD PTR [edx+44], 10	; 0000000aH
  00367	c7 42 24 0a 00
	00 00		 mov	 DWORD PTR [edx+36], 10	; 0000000aH

; 124  : 			ptUpArrow[1].x = ptUpArrow[0].x - 3;

  0036e	c7 42 10 fd ff
	ff ff		 mov	 DWORD PTR [edx+16], -3	; fffffffdH

; 125  : 			ptUpArrow[2].x = ptUpArrow[3].x = ptUpArrow[0].x - 1;

  00375	c7 42 20 ff ff
	ff ff		 mov	 DWORD PTR [edx+32], -1
  0037c	c7 42 18 ff ff
	ff ff		 mov	 DWORD PTR [edx+24], -1

; 126  : 			ptUpArrow[4].x = ptUpArrow[5].x = ptUpArrow[0].x + 1;

  00383	c7 42 30 01 00
	00 00		 mov	 DWORD PTR [edx+48], 1
  0038a	c7 42 28 01 00
	00 00		 mov	 DWORD PTR [edx+40], 1

; 127  : 			ptUpArrow[6].x = ptUpArrow[0].x + 3;

  00391	c7 42 38 03 00
	00 00		 mov	 DWORD PTR [edx+56], 3

; 128  : 
; 129  : 			ptDownArrowCenter.x = 0;
; 130  : 			ptDownArrowCenter.y = 0;

  00398	c7 42 44 00 00
	00 00		 mov	 DWORD PTR [edx+68], 0
  0039f	c7 42 40 00 00
	00 00		 mov	 DWORD PTR [edx+64], 0

; 131  : 			ptDownArrow[0].x = ptDownArrowCenter.x;

  003a6	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0

; 132  : 			ptDownArrow[0].y = ptDownArrowCenter.y - 2;

  003ad	8b 4a 44	 mov	 ecx, DWORD PTR [edx+68]

; 133  : 			ptDownArrow[5].y = ptDownArrow[2].y = ptDownArrow[6].y = ptDownArrow[1].y = ptDownArrow[0].y - 3;
; 134  : 			ptDownArrow[4].y = ptDownArrow[3].y = ptDownArrow[0].y - 8;
; 135  : 			ptDownArrow[1].x = ptDownArrow[0].x - 3;

  003b0	c7 42 50 fd ff
	ff ff		 mov	 DWORD PTR [edx+80], -3	; fffffffdH

; 136  : 			ptDownArrow[2].x = ptDownArrow[3].x = ptDownArrow[0].x - 1;

  003b7	c7 42 60 ff ff
	ff ff		 mov	 DWORD PTR [edx+96], -1
  003be	c7 42 58 ff ff
	ff ff		 mov	 DWORD PTR [edx+88], -1
  003c5	8d 41 fe	 lea	 eax, DWORD PTR [ecx-2]

; 137  : 			ptDownArrow[4].x = ptDownArrow[5].x = ptDownArrow[0].x + 1;

  003c8	c7 42 70 01 00
	00 00		 mov	 DWORD PTR [edx+112], 1
  003cf	89 42 4c	 mov	 DWORD PTR [edx+76], eax
  003d2	8d 41 fb	 lea	 eax, DWORD PTR [ecx-5]
  003d5	89 42 54	 mov	 DWORD PTR [edx+84], eax
  003d8	89 42 7c	 mov	 DWORD PTR [edx+124], eax
  003db	89 42 5c	 mov	 DWORD PTR [edx+92], eax
  003de	89 42 74	 mov	 DWORD PTR [edx+116], eax
  003e1	8d 41 f6	 lea	 eax, DWORD PTR [ecx-10]
  003e4	89 42 64	 mov	 DWORD PTR [edx+100], eax
  003e7	89 42 6c	 mov	 DWORD PTR [edx+108], eax
  003ea	c7 42 68 01 00
	00 00		 mov	 DWORD PTR [edx+104], 1

; 138  : 			ptDownArrow[6].x = ptDownArrow[0].x + 3;

  003f1	c7 42 78 03 00
	00 00		 mov	 DWORD PTR [edx+120], 3
$LN20@DrawSignal:

; 139  : 		}
; 140  : 
; 141  : 		// (2009/10/7 - Seung-Won, Bae) draw all Arrow (without near one with one pixel.)
; 142  : 		nDataCount = nDTI_End - nDTI_Start;

  003f8	8b 45 b4	 mov	 eax, DWORD PTR _nDTI_End$24[ebp]
  003fb	2b 45 d4	 sub	 eax, DWORD PTR _nDTI_Start$31[ebp]

; 143  : 		if( nDataCount < 1) return true;

  003fe	83 f8 01	 cmp	 eax, 1
  00401	0f 8c 3f 05 00
	00		 jl	 $LN47@DrawSignal

; 144  : 
; 145  : 		// 0. Check Data
; 146  : 		if( pPacket == NULL || displayAttributes.GetDataStartInBlock() < 0 || displayAttributes.GetDataCountInBlock() <= 0)

  00407	83 7d c4 00	 cmp	 DWORD PTR _pPacket$GSCopy$1$[ebp], 0
  0040b	0f 84 2f 04 00
	00		 je	 $LN24@DrawSignal
  00411	8b 75 94	 mov	 esi, DWORD PTR _displayAttributes$GSCopy$1$[ebp]
  00414	8b ce		 mov	 ecx, esi
  00416	e8 00 00 00 00	 call	 ?GetDataStartInBlock@CDisplayAttributes@@QBEHXZ ; CDisplayAttributes::GetDataStartInBlock
  0041b	85 c0		 test	 eax, eax
  0041d	0f 88 1d 04 00
	00		 js	 $LN24@DrawSignal
  00423	8b ce		 mov	 ecx, esi
  00425	e8 00 00 00 00	 call	 ?GetDataCountInBlock@CDisplayAttributes@@QBEHXZ ; CDisplayAttributes::GetDataCountInBlock
  0042a	85 c0		 test	 eax, eax
  0042c	0f 8e 0e 04 00
	00		 jle	 $LN24@DrawSignal

; 148  : 
; 149  : 		if( !pPacket->GetnumericDataList()) return false;

  00432	8b 4d c4	 mov	 ecx, DWORD PTR _pPacket$GSCopy$1$[ebp]
  00435	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetnumericDataList@CPacket@@QAEPAV?$CList@NN@@XZ
  0043b	85 c0		 test	 eax, eax
  0043d	0f 84 fd 03 00
	00		 je	 $LN24@DrawSignal

; 150  : 		if( pSignalData == NULL || pSignalData->GetCount() <= 0)

  00443	8b 75 18	 mov	 esi, DWORD PTR _pSignalData$[ebp]
  00446	85 f6		 test	 esi, esi
  00448	0f 84 f2 03 00
	00		 je	 $LN24@DrawSignal
  0044e	83 7e 0c 00	 cmp	 DWORD PTR [esi+12], 0
  00452	0f 8e e8 03 00
	00		 jle	 $LN24@DrawSignal

; 151  : 			return false;
; 152  : 
; 153  : 		if( bLog)

  00458	80 7d a4 00	 cmp	 BYTE PTR _bLog$18[ebp], 0
  0045c	f2 0f 10 45 a8	 movsd	 xmm0, QWORD PTR _dViewMin$19[ebp]
  00461	74 3a		 je	 SHORT $LN28@DrawSignal

; 154  : 		{
; 155  : 			dViewMin = CDraw::CalLogValue(true, dViewMin);

  00463	8b 4d c0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00466	83 ec 08	 sub	 esp, 8
  00469	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0046e	6a 01		 push	 1
  00470	e8 00 00 00 00	 call	 ?CalLogValue@CDraw@@IAEN_NN@Z ; CDraw::CalLogValue

; 156  : 			dViewMax = CDraw::CalLogValue(true, dViewMax);

  00475	f2 0f 10 85 78
	ff ff ff	 movsd	 xmm0, QWORD PTR _dViewMax$9[ebp]
  0047d	83 ec 08	 sub	 esp, 8
  00480	8b 4d c0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00483	dd 5d a8	 fstp	 QWORD PTR _dViewMin$19[ebp]
  00486	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0048b	6a 01		 push	 1
  0048d	e8 00 00 00 00	 call	 ?CalLogValue@CDraw@@IAEN_NN@Z ; CDraw::CalLogValue
  00492	f2 0f 10 45 a8	 movsd	 xmm0, QWORD PTR _dViewMin$19[ebp]
  00497	dd 9d 78 ff ff
	ff		 fstp	 QWORD PTR _dViewMax$9[ebp]
$LN28@DrawSignal:

; 157  : 		}
; 158  : 		double dRealHeight = dViewMin - dViewMax;

  0049d	f2 0f 5c 85 78
	ff ff ff	 subsd	 xmm0, QWORD PTR _dViewMax$9[ebp]

; 159  : 
; 160  : 		// 3. Loop
; 161  : 		int nZeroDTI = 0;
; 162  : 		CDataBlockList< CXScaleManager::AREA> *pblaAreafDTI = pxScaleManager->GetDTIArea( p_nColumn, strRQ, nZeroDTI);

  004a5	8b 07		 mov	 eax, DWORD PTR [edi]
  004a7	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _nZeroDTI$8[ebp]
  004ad	51		 push	 ecx
  004ae	8b 4d b8	 mov	 ecx, DWORD PTR _strRQ$GSCopy$1$[ebp]
  004b1	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _nZeroDTI$8[ebp], 0
  004bb	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR _dRealHeight$1$[ebp], xmm0
  004c3	ff 31		 push	 DWORD PTR [ecx]
  004c5	8b cf		 mov	 ecx, edi
  004c7	ff 75 bc	 push	 DWORD PTR _p_nColumn$GSCopy$1$[ebp]
  004ca	ff 90 58 01 00
	00		 call	 DWORD PTR [eax+344]
  004d0	8b f8		 mov	 edi, eax
  004d2	89 7d 9c	 mov	 DWORD PTR _pblaAreafDTI$1$[ebp], edi

; 163  : 		if( !pblaAreafDTI) return false;

  004d5	85 ff		 test	 edi, edi
  004d7	0f 84 63 03 00
	00		 je	 $LN24@DrawSignal

; 164  : 
; 165  : 		//////////////////////////////////////////////////////////////////////
; 166  : 		// [for Dot Shape]
; 167  : 		// pCalcData->lpPointBuffer			: lpPointBuffer[0]		the Center Point of Template.
; 168  : 		//									  lpPointBuffer[1:]		Array of Point for the Element Template.
; 169  : 		//////////////////////////////////////////////////////////////////////
; 170  : 		if( pCalcData->GetSize_lpPointBuffer() < 16) return true;

  004dd	8b 4d dc	 mov	 ecx, DWORD PTR _pCalcData$1$[ebp]
  004e0	83 b9 6c 01 00
	00 10		 cmp	 DWORD PTR [ecx+364], 16	; 00000010H
  004e7	0f 8c 59 04 00
	00		 jl	 $LN47@DrawSignal

; 171  : 		POINT *ptUpArrowCenter			= pCalcData->Get_lpPointBuffer();

  004ed	8b 81 68 01 00
	00		 mov	 eax, DWORD PTR [ecx+360]
  004f3	89 45 8c	 mov	 DWORD PTR tv1425[ebp], eax

; 172  : 		POINT *ptUpArrow				= pCalcData->Get_lpPointBuffer() + 1;

  004f6	8d 50 08	 lea	 edx, DWORD PTR [eax+8]

; 173  : 		POINT *ptDownArrowCenter		= pCalcData->Get_lpPointBuffer();
; 174  : 		POINT *ptDownArrow				= pCalcData->Get_lpPointBuffer() + 9;

  004f9	83 c0 48	 add	 eax, 72			; 00000048H

; 175  : 		if( bInvert)

  004fc	80 7d a0 00	 cmp	 BYTE PTR _bInvert$17[ebp], 0
  00500	89 55 98	 mov	 DWORD PTR _ptUpArrow$1$[ebp], edx
  00503	89 45 cc	 mov	 DWORD PTR _ptDownArrow$1$[ebp], eax
  00506	74 0b		 je	 SHORT $LN31@DrawSignal

; 176  : 		{
; 177  : 			POINT *ptArrowCenter		= ptUpArrowCenter;
; 178  : 			POINT *ptArrow				= ptUpArrow;

  00508	8b c2		 mov	 eax, edx

; 179  : 			ptUpArrowCenter				= ptDownArrowCenter;
; 180  : 			ptUpArrow					= ptDownArrow;

  0050a	8b 55 cc	 mov	 edx, DWORD PTR _ptDownArrow$1$[ebp]
  0050d	89 55 98	 mov	 DWORD PTR _ptUpArrow$1$[ebp], edx

; 181  : 			ptDownArrowCenter			= ptArrowCenter;
; 182  : 			ptDownArrow					= ptArrow;

  00510	89 45 cc	 mov	 DWORD PTR _ptDownArrow$1$[ebp], eax
$LN31@DrawSignal:

; 183  : 		}
; 184  : 
; 185  : 		int		&nLastDTI				= pCalcData->nDTI_Start;
; 186  : 		int		&nCount_High			= pCalcData->nPolyCount_High;
; 187  : 		int		&nLastPolyCount_High	= pCalcData->nLastPolyCount_High;
; 188  : 		if( pCalcData->GetSize_lpPoint_High() < 1) return true;

  00513	83 b9 04 01 00
	00 01		 cmp	 DWORD PTR [ecx+260], 1
  0051a	8d 91 48 01 00
	00		 lea	 edx, DWORD PTR [ecx+328]
  00520	0f 8c 20 04 00
	00		 jl	 $LN47@DrawSignal

; 189  : 		LPPOINT	lpPoint_High			= pCalcData->Get_lpPoint_High();

  00526	8b 81 00 01 00
	00		 mov	 eax, DWORD PTR [ecx+256]

; 190  : 		int *	lpPolyCount_High		= pCalcData->Get_lpPolyCount_High();
; 191  : 		int		&nCount_Low				= pCalcData->nPolyCount_Low;
; 192  : 		int		&nLastPolyCount_Low		= pCalcData->nLastPolyCount_Low;
; 193  : 		LPPOINT	lpPoint_Low				= pCalcData->Get_lpPoint_Low();
; 194  : 		int *	lpPolyCount_Low			= pCalcData->Get_lpPolyCount_Low();
; 195  : 		int nFullPointCount_High		= 0;
; 196  : 		int nFullPointCount_Low			= 0;
; 197  : 
; 198  : 		// for X Scale Mode 1
; 199  : 		if( xScaleMode == 1)

  0052c	83 fb 01	 cmp	 ebx, 1
  0052f	89 45 80	 mov	 DWORD PTR _lpPoint_High$1$[ebp], eax
  00532	8b d9		 mov	 ebx, ecx
  00534	8b 81 08 01 00
	00		 mov	 eax, DWORD PTR [ecx+264]
  0053a	89 45 84	 mov	 DWORD PTR _lpPolyCount_High$1$[ebp], eax
  0053d	8b 81 18 01 00
	00		 mov	 eax, DWORD PTR [ecx+280]
  00543	89 45 90	 mov	 DWORD PTR _lpPoint_Low$1$[ebp], eax
  00546	8b 81 20 01 00
	00		 mov	 eax, DWORD PTR [ecx+288]
  0054c	89 45 ac	 mov	 DWORD PTR _lpPolyCount_Low$1$[ebp], eax
  0054f	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _nFullPointCount_High$14[ebp], 0
  00556	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _nFullPointCount_Low$28[ebp], 0
  0055d	75 32		 jne	 SHORT $LN33@DrawSignal

; 200  : 		{
; 201  : 			nDTI_Start				= nLastDTI;

  0055f	8b 43 6c	 mov	 eax, DWORD PTR [ebx+108]
  00562	89 45 d4	 mov	 DWORD PTR _nDTI_Start$31[ebp], eax

; 202  : 			nCount_High				= nLastPolyCount_High;

  00565	8b 8b 50 01 00
	00		 mov	 ecx, DWORD PTR [ebx+336]
  0056b	89 0a		 mov	 DWORD PTR [edx], ecx

; 203  : 			nCount_Low				= nLastPolyCount_Low;

  0056d	8b 93 60 01 00
	00		 mov	 edx, DWORD PTR [ebx+352]
  00573	89 93 58 01 00
	00		 mov	 DWORD PTR [ebx+344], edx

; 204  : 			nFullPointCount_High	= nCount_High * 7;

  00579	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  00580	2b c1		 sub	 eax, ecx
  00582	89 45 94	 mov	 DWORD PTR _nFullPointCount_High$14[ebp], eax

; 205  : 			nFullPointCount_Low		= nCount_Low * 7;

  00585	8d 04 d5 00 00
	00 00		 lea	 eax, DWORD PTR [edx*8]
  0058c	2b c2		 sub	 eax, edx
  0058e	89 45 d0	 mov	 DWORD PTR _nFullPointCount_Low$28[ebp], eax
$LN33@DrawSignal:

; 206  : 		}
; 207  : 
; 208  : 		POSITION posValue = pPacket->GetnumericDataList()->FindIndex( nDTI_Start);

  00591	ff 75 d4	 push	 DWORD PTR _nDTI_Start$31[ebp]
  00594	8b 4d c4	 mov	 ecx, DWORD PTR _pPacket$GSCopy$1$[ebp]
  00597	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetnumericDataList@CPacket@@QAEPAV?$CList@NN@@XZ
  0059d	8b c8		 mov	 ecx, eax
  0059f	e8 00 00 00 00	 call	 ?FindIndex@?$CList@NN@@QBEPAU__POSITION@@H@Z ; CList<double,double>::FindIndex
  005a4	89 45 dc	 mov	 DWORD PTR _posValue$1$[ebp], eax

; 209  : 		if( posValue == NULL)	return false;

  005a7	85 c0		 test	 eax, eax
  005a9	0f 84 91 02 00
	00		 je	 $LN24@DrawSignal

; 210  : 		POSITION posSignal = pSignalData->FindIndex( nDTI_Start);

  005af	ff 75 d4	 push	 DWORD PTR _nDTI_Start$31[ebp]
  005b2	8b ce		 mov	 ecx, esi
  005b4	e8 00 00 00 00	 call	 ?FindIndex@?$CList@NN@@QBEPAU__POSITION@@H@Z ; CList<double,double>::FindIndex
  005b9	89 45 bc	 mov	 DWORD PTR _posSignal$1$[ebp], eax

; 211  : 		if( posSignal == NULL) return false;

  005bc	85 c0		 test	 eax, eax
  005be	0f 84 7c 02 00
	00		 je	 $LN24@DrawSignal

; 212  : 		CDataBlockList< CXScaleManager::AREA>::DblCursor dblCursor;

  005c4	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _dblCursor$4[ebp]
  005ca	e8 00 00 00 00	 call	 ??0DblCursor@CDataBlockListUNK@@QAE@XZ ; CDataBlockListUNK::DblCursor::DblCursor
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h

; 230  : 	void			GetCursor( int nIndex, int nZeroDTI, DblCursor &p_dblCursor)	{	GetDblCursorUNK( nIndex, nZeroDTI, p_dblCursor);	}

  005cf	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR _dblCursor$4[ebp]
  005d5	8b cf		 mov	 ecx, edi
  005d7	50		 push	 eax
  005d8	ff b5 74 ff ff
	ff		 push	 DWORD PTR _nZeroDTI$8[ebp]
  005de	ff 75 d4	 push	 DWORD PTR _nDTI_Start$31[ebp]
  005e1	e8 00 00 00 00	 call	 ?GetDblCursorUNK@CDataBlockListUNK@@QAEXHHAAVDblCursor@1@@Z ; CDataBlockListUNK::GetDblCursorUNK
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\GraphDraw\SignalDraw.cpp

; 217  : 		for( int nDTI = nDTI_Start; nDTI <= nDTI_End; nDTI++)

  005e6	8b 75 d4	 mov	 esi, DWORD PTR _nDTI_Start$31[ebp]
  005e9	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR _nX$1$[ebp], -1
  005f0	89 75 d8	 mov	 DWORD PTR _nDTI$1$[ebp], esi
  005f3	3b 75 b4	 cmp	 esi, DWORD PTR _nDTI_End$24[ebp]
  005f6	0f 8f 4a 03 00
	00		 jg	 $LN47@DrawSignal
  005fc	8b 7d c8	 mov	 edi, DWORD PTR _graphRegion$1$[ebp]
  005ff	90		 npad	 1
$LL4@DrawSignal:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\DataBlockList.h

; 135  : 						if( 0 == p_dblCursor.m_nItemCount || p_dblCursor.m_nItemCount <= p_dblCursor.m_nIndex || p_dblCursor.m_nIndex < 0) return NULL;

  00600	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _dblCursor$4[ebp]
  00606	85 c0		 test	 eax, eax
  00608	74 73		 je	 SHORT $LN70@DrawSignal
  0060a	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _dblCursor$4[ebp+4]
  00610	3b c1		 cmp	 eax, ecx
  00612	7e 69		 jle	 SHORT $LN70@DrawSignal
  00614	85 c9		 test	 ecx, ecx
  00616	78 65		 js	 SHORT $LN70@DrawSignal

; 136  : 
; 137  : 						// ? How do you believe m_lpBlockIndex is not NULL?
; 138  : 						if( !p_dblCursor.m_lpBlockIndex || p_dblCursor.m_nIndexInBlock < 0 || m_nBlockSize <= p_dblCursor.m_nIndexInBlock) return NULL;

  00618	8b b5 5c ff ff
	ff		 mov	 esi, DWORD PTR _dblCursor$4[ebp+12]
  0061e	85 f6		 test	 esi, esi
  00620	74 58		 je	 SHORT $LN72@DrawSignal
  00622	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _dblCursor$4[ebp+16]
  00628	85 c0		 test	 eax, eax
  0062a	78 4e		 js	 SHORT $LN72@DrawSignal
  0062c	8b 55 9c	 mov	 edx, DWORD PTR _pblaAreafDTI$1$[ebp]
  0062f	39 42 08	 cmp	 DWORD PTR [edx+8], eax
  00632	7e 46		 jle	 SHORT $LN72@DrawSignal

; 139  : 						LPVOID lpResult = ( ( PBYTE)p_dblCursor.m_lpBlockIndex + ( p_dblCursor.m_nIndexInBlock * m_nItemSize));

  00634	8b 52 04	 mov	 edx, DWORD PTR [edx+4]

; 140  : 
; 141  : 						p_dblCursor.m_nIndex++;

  00637	41		 inc	 ecx
  00638	0f af d0	 imul	 edx, eax

; 142  : 						p_dblCursor.m_nIndexInBlock++;

  0063b	40		 inc	 eax
  0063c	89 8d 54 ff ff
	ff		 mov	 DWORD PTR _dblCursor$4[ebp+4], ecx
  00642	89 85 60 ff ff
	ff		 mov	 DWORD PTR _dblCursor$4[ebp+16], eax
  00648	03 d6		 add	 edx, esi

; 143  : 						if( m_nBlockSize <= p_dblCursor.m_nIndexInBlock)

  0064a	8b 75 9c	 mov	 esi, DWORD PTR _pblaAreafDTI$1$[ebp]
  0064d	39 46 08	 cmp	 DWORD PTR [esi+8], eax
  00650	7f 23		 jg	 SHORT $LN73@DrawSignal

; 144  : 						{
; 145  : 							p_dblCursor.m_nBlockIndex++;

  00652	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _dblCursor$4[ebp+8]
  00658	41		 inc	 ecx

; 146  : 							p_dblCursor.m_nIndexInBlock = 0;

  00659	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _dblCursor$4[ebp+16], 0
  00663	89 8d 58 ff ff
	ff		 mov	 DWORD PTR _dblCursor$4[ebp+8], ecx

; 147  : 							p_dblCursor.m_lpBlockIndex = m_vtBlockPointer[ p_dblCursor.m_nBlockIndex];

  00669	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0066c	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  0066f	89 85 5c ff ff
	ff		 mov	 DWORD PTR _dblCursor$4[ebp+12], eax
$LN73@DrawSignal:

; 148  : 						}
; 149  : 
; 150  : 						return lpResult;

  00675	8b 75 d8	 mov	 esi, DWORD PTR _nDTI$1$[ebp]
  00678	eb 05		 jmp	 SHORT $LN68@DrawSignal
$LN72@DrawSignal:

; 136  : 
; 137  : 						// ? How do you believe m_lpBlockIndex is not NULL?
; 138  : 						if( !p_dblCursor.m_lpBlockIndex || p_dblCursor.m_nIndexInBlock < 0 || m_nBlockSize <= p_dblCursor.m_nIndexInBlock) return NULL;

  0067a	8b 75 d8	 mov	 esi, DWORD PTR _nDTI$1$[ebp]
$LN70@DrawSignal:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\GraphDraw\SignalDraw.cpp

; 220  : 			if( posValue == NULL || parea == NULL || posSignal == NULL) break;

  0067d	33 d2		 xor	 edx, edx
$LN68@DrawSignal:
  0067f	83 7d dc 00	 cmp	 DWORD PTR _posValue$1$[ebp], 0
  00683	0f 84 bd 02 00
	00		 je	 $LN47@DrawSignal
  00689	85 d2		 test	 edx, edx
  0068b	0f 84 b5 02 00
	00		 je	 $LN47@DrawSignal
  00691	83 7d bc 00	 cmp	 DWORD PTR _posSignal$1$[ebp], 0
  00695	0f 84 ab 02 00
	00		 je	 $LN47@DrawSignal

; 221  : 
; 222  : 			// (2009/2/27 - Seung-Won, Bae) Backup for XScaleMode 1
; 223  : 			if( nX != parea->center)

  0069b	0f bf 42 02	 movsx	 eax, WORD PTR [edx+2]
  0069f	39 45 b8	 cmp	 DWORD PTR _nX$1$[ebp], eax
  006a2	74 1e		 je	 SHORT $LN38@DrawSignal

; 224  : 			{
; 225  : 				nX = parea->center;
; 226  : 				nLastDTI			= nDTI;

  006a4	89 73 6c	 mov	 DWORD PTR [ebx+108], esi
  006a7	89 45 b8	 mov	 DWORD PTR _nX$1$[ebp], eax

; 227  : 				nLastPolyCount_High	= nCount_High;

  006aa	8b 83 48 01 00
	00		 mov	 eax, DWORD PTR [ebx+328]
  006b0	89 83 50 01 00
	00		 mov	 DWORD PTR [ebx+336], eax

; 228  : 				nLastPolyCount_Low	= nCount_Low;

  006b6	8b 83 58 01 00
	00		 mov	 eax, DWORD PTR [ebx+344]
  006bc	89 83 60 01 00
	00		 mov	 DWORD PTR [ebx+352], eax
$LN38@DrawSignal:

; 232  : 			double dValue = pPacket->GetnumericDataList()->GetNext( posValue);

  006c2	8b 4d c4	 mov	 ecx, DWORD PTR _pPacket$GSCopy$1$[ebp]
  006c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetnumericDataList@CPacket@@QAEPAV?$CList@NN@@XZ
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 811  : 	{ CNode* pNode = (CNode*) rPosition;

  006cb	8b 4d dc	 mov	 ecx, DWORD PTR _posValue$1$[ebp]
  006ce	0f 57 c0	 xorps	 xmm0, xmm0
  006d1	8b c1		 mov	 eax, ecx

; 813  : 		rPosition = (POSITION) pNode->pNext;

  006d3	8b 09		 mov	 ecx, DWORD PTR [ecx]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\GraphDraw\SignalDraw.cpp

; 232  : 			double dValue = pPacket->GetnumericDataList()->GetNext( posValue);

  006d5	f2 0f 10 48 08	 movsd	 xmm1, QWORD PTR [eax+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  006da	89 4d dc	 mov	 DWORD PTR _posValue$1$[ebp], ecx

; 817  : 	{ CNode* pNode = (CNode*) rPosition;

  006dd	8b 4d bc	 mov	 ecx, DWORD PTR _posSignal$1$[ebp]
  006e0	8b c1		 mov	 eax, ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\GraphDraw\SignalDraw.cpp

; 232  : 			double dValue = pPacket->GetnumericDataList()->GetNext( posValue);

  006e2	f2 0f 11 8d 6c
	ff ff ff	 movsd	 QWORD PTR _dValue$7[ebp], xmm1

; 234  : 			double bSignal = pSignalData->GetNext(posSignal);		

  006ea	f2 0f 10 50 08	 movsd	 xmm2, QWORD PTR [eax+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 819  : 		rPosition = (POSITION) pNode->pNext;

  006ef	8b 09		 mov	 ecx, DWORD PTR [ecx]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\GraphDraw\SignalDraw.cpp

; 235  : 			if( bSignal == CGraphBaseData::NONE) continue;

  006f1	66 0f 2e d0	 ucomisd xmm2, xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 819  : 		rPosition = (POSITION) pNode->pNext;

  006f5	89 4d bc	 mov	 DWORD PTR _posSignal$1$[ebp], ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\GraphDraw\SignalDraw.cpp

; 234  : 			double bSignal = pSignalData->GetNext(posSignal);		

  006f8	f2 0f 11 95 64
	ff ff ff	 movsd	 QWORD PTR _bSignal$1$[ebp], xmm2

; 235  : 			if( bSignal == CGraphBaseData::NONE) continue;

  00700	9f		 lahf
  00701	f6 c4 44	 test	 ah, 68			; 00000044H
  00704	0f 8b 24 01 00
	00		 jnp	 $LN2@DrawSignal

; 236  : 
; 237  : 			// 3.2 Get the position.
; 238  : 			if( bLog) dValue = CMath::Log( dValue);

  0070a	80 7d a4 00	 cmp	 BYTE PTR _bLog$18[ebp], 0
  0070e	74 25		 je	 SHORT $LN40@DrawSignal
  00710	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _dValue$7[ebp]
  00716	50		 push	 eax
  00717	e8 00 00 00 00	 call	 ?Log@CMath@@SANABN@Z	; CMath::Log
  0071c	f2 0f 10 95 64
	ff ff ff	 movsd	 xmm2, QWORD PTR _bSignal$1$[ebp]
  00724	83 c4 04	 add	 esp, 4
  00727	dd 9d 6c ff ff
	ff		 fstp	 QWORD PTR _dValue$7[ebp]
  0072d	f2 0f 10 8d 6c
	ff ff ff	 movsd	 xmm1, QWORD PTR _dValue$7[ebp]
$LN40@DrawSignal:

; 239  : 			dValue = dViewBottom - ( dViewHeight * (( dValue - dViewMax) / dRealHeight));

  00735	f2 0f 5c 8d 78
	ff ff ff	 subsd	 xmm1, QWORD PTR _dViewMax$9[ebp]
  0073d	66 0f 6e c7	 movd	 xmm0, edi
  00741	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00745	f2 0f 5e 8d 44
	ff ff ff	 divsd	 xmm1, QWORD PTR _dRealHeight$1$[ebp]
  0074d	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00751	f2 0f 10 85 3c
	ff ff ff	 movsd	 xmm0, QWORD PTR _dViewBottom$1$[ebp]
  00759	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0075d	0f 57 c9	 xorps	 xmm1, xmm1
  00760	66 0f 2f c1	 comisd	 xmm0, xmm1

; 240  : 			dValue = ROUND( dValue);

  00764	76 0a		 jbe	 SHORT $LN51@DrawSignal
  00766	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0076e	eb 08		 jmp	 SHORT $LN52@DrawSignal
$LN51@DrawSignal:
  00770	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe0000000000000
$LN52@DrawSignal:

; 241  : 			if( bInvert) dValue = nViewY_half2 - dValue;

  00778	80 7d a0 00	 cmp	 BYTE PTR _bInvert$17[ebp], 0
  0077c	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00780	66 0f 6e c8	 movd	 xmm1, eax
  00784	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  00788	f2 0f 11 8d 6c
	ff ff ff	 movsd	 QWORD PTR _dValue$7[ebp], xmm1
  00790	74 18		 je	 SHORT $LN41@DrawSignal
  00792	66 0f 6e 45 88	 movd	 xmm0, DWORD PTR _nViewY_half2$1$[ebp]
  00797	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0079b	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0079f	0f 28 c8	 movaps	 xmm1, xmm0
  007a2	f2 0f 11 8d 6c
	ff ff ff	 movsd	 QWORD PTR _dValue$7[ebp], xmm1
$LN41@DrawSignal:

; 242  : 
; 243  : 			if( bSignal == CGraphBaseData::BUY)

  007aa	66 0f 2e 15 00
	00 00 00	 ucomisd xmm2, QWORD PTR __real@3ff0000000000000
  007b2	8b 45 b8	 mov	 eax, DWORD PTR _nX$1$[ebp]
  007b5	0f b7 c8	 movzx	 ecx, ax
  007b8	f2 0f 2c d1	 cvttsd2si edx, xmm1
  007bc	9f		 lahf
  007bd	f6 c4 44	 test	 ah, 68			; 00000044H
  007c0	8b c1		 mov	 eax, ecx
  007c2	8b 4d c0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  007c5	7a 32		 jp	 SHORT $LN42@DrawSignal

; 244  : 				DrawElement_AddShapePolygon( lpPoint_High, lpPolyCount_High, nCount_High, nFullPointCount_High,

  007c7	89 45 b0	 mov	 DWORD PTR $T21[ebp], eax
  007ca	8d 45 c8	 lea	 eax, DWORD PTR $T26[ebp]
  007cd	50		 push	 eax
  007ce	ff 75 8c	 push	 DWORD PTR tv1425[ebp]
  007d1	8d 45 d8	 lea	 eax, DWORD PTR $T34[ebp]
  007d4	c7 45 c8 07 00
	00 00		 mov	 DWORD PTR $T26[ebp], 7
  007db	ff 75 98	 push	 DWORD PTR _ptUpArrow$1$[ebp]
  007de	89 55 d8	 mov	 DWORD PTR $T34[ebp], edx
  007e1	50		 push	 eax
  007e2	8d 45 b0	 lea	 eax, DWORD PTR $T21[ebp]
  007e5	50		 push	 eax
  007e6	8d 45 94	 lea	 eax, DWORD PTR _nFullPointCount_High$14[ebp]
  007e9	50		 push	 eax
  007ea	8d 83 48 01 00
	00		 lea	 eax, DWORD PTR [ebx+328]
  007f0	50		 push	 eax
  007f1	ff 75 84	 push	 DWORD PTR _lpPolyCount_High$1$[ebp]
  007f4	ff 75 80	 push	 DWORD PTR _lpPoint_High$1$[ebp]
  007f7	eb 30		 jmp	 SHORT $LN91@DrawSignal
$LN42@DrawSignal:

; 245  : 									nX, dValue, ptUpArrow, *ptUpArrowCenter, 7);
; 246  : 			else
; 247  : 				DrawElement_AddShapePolygon( lpPoint_Low, lpPolyCount_Low, nCount_Low, nFullPointCount_Low,

  007f9	89 45 d8	 mov	 DWORD PTR $T32[ebp], eax
  007fc	8d 45 b0	 lea	 eax, DWORD PTR $T23[ebp]
  007ff	50		 push	 eax
  00800	ff 75 8c	 push	 DWORD PTR tv1425[ebp]
  00803	8d 45 c8	 lea	 eax, DWORD PTR $T25[ebp]
  00806	c7 45 b0 07 00
	00 00		 mov	 DWORD PTR $T23[ebp], 7
  0080d	ff 75 cc	 push	 DWORD PTR _ptDownArrow$1$[ebp]
  00810	89 55 c8	 mov	 DWORD PTR $T25[ebp], edx
  00813	50		 push	 eax
  00814	8d 45 d8	 lea	 eax, DWORD PTR $T32[ebp]
  00817	50		 push	 eax
  00818	8d 45 d0	 lea	 eax, DWORD PTR _nFullPointCount_Low$28[ebp]
  0081b	50		 push	 eax
  0081c	8d 83 58 01 00
	00		 lea	 eax, DWORD PTR [ebx+344]
  00822	50		 push	 eax
  00823	ff 75 ac	 push	 DWORD PTR _lpPolyCount_Low$1$[ebp]
  00826	ff 75 90	 push	 DWORD PTR _lpPoint_Low$1$[ebp]
$LN91@DrawSignal:

; 217  : 		for( int nDTI = nDTI_Start; nDTI <= nDTI_End; nDTI++)

  00829	e8 00 00 00 00	 call	 ?DrawElement_AddShapePolygon@CDraw@@IAEXPAUtagPOINT@@PAHAAH2ABFABJPBU2@ABU2@ABH@Z ; CDraw::DrawElement_AddShapePolygon
$LN2@DrawSignal:
  0082e	46		 inc	 esi
  0082f	89 75 d8	 mov	 DWORD PTR _nDTI$1$[ebp], esi
  00832	3b 75 b4	 cmp	 esi, DWORD PTR _nDTI_End$24[ebp]
  00835	0f 8e c5 fd ff
	ff		 jle	 $LL4@DrawSignal

; 248  : 									nX, dValue, ptDownArrow, *ptDownArrowCenter, 7);
; 249  : 		}
; 250  : 	}

  0083b	e9 06 01 00 00	 jmp	 $LN47@DrawSignal
$LN24@DrawSignal:

; 147  : 			return false;

  00840	32 c0		 xor	 al, al
  00842	e9 01 01 00 00	 jmp	 $LN1@DrawSignal
$LN5@DrawSignal:

; 251  : 	else if(pxScaleManager->GetThreadFlag() == THREAD_DRAWING)

  00847	ff 92 f8 00 00
	00		 call	 DWORD PTR [edx+248]
  0084d	83 f8 02	 cmp	 eax, 2
  00850	0f 85 f0 00 00
	00		 jne	 $LN47@DrawSignal

; 252  : 	{
; 253  : 		if( !p_signalData.m_pSignalCache) return true;

  00856	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00859	85 c0		 test	 eax, eax
  0085b	0f 84 e5 00 00
	00		 je	 $LN47@DrawSignal

; 254  : 
; 255  : 		CCalcDataForDraw* pCalcData = p_signalData.m_pSignalCache;
; 256  : 
; 257  : 		int &nCountOfPoly_High		= pCalcData->nPolyCount_High;
; 258  : 		POINT *ptPolyPoints_High	= pCalcData->Get_lpPoint_High();
; 259  : 		int *nPointCounts_High		= pCalcData->Get_lpPolyCount_High();
; 260  : 		int &nCountOfPoly_Low		= pCalcData->nPolyCount_Low;
; 261  : 		POINT *ptPolyPoints_Low		= pCalcData->Get_lpPoint_Low();
; 262  : 		int *nPointCounts_Low		= pCalcData->Get_lpPolyCount_Low();
; 263  : 
; 264  : 		if( 0 < nCountOfPoly_High)

  00861	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  00868	8d 88 48 01 00
	00		 lea	 ecx, DWORD PTR [eax+328]
  0086e	8b 90 20 01 00
	00		 mov	 edx, DWORD PTR [eax+288]
  00874	8d b0 58 01 00
	00		 lea	 esi, DWORD PTR [eax+344]
  0087a	8b 98 18 01 00
	00		 mov	 ebx, DWORD PTR [eax+280]
  00880	8b 7d d0	 mov	 edi, DWORD PTR _pDC$GSCopy$1$[ebp]
  00883	89 55 c8	 mov	 DWORD PTR _nPointCounts_Low$1$[ebp], edx
  00886	7e 5d		 jle	 SHORT $LN46@DrawSignal

; 265  : 			DrawElement_DrawPolygon( pDC, 0, nCountOfPoly_High,		ptPolyPoints_High,	NULL,	nPointCounts_High,	1, RGB( 255, 0, 0), TRUE);

  00888	8d 55 90	 lea	 edx, DWORD PTR $T13[ebp]
  0088b	c7 45 90 00 00
	00 00		 mov	 DWORD PTR $T13[ebp], 0
  00892	52		 push	 edx
  00893	8d 55 ac	 lea	 edx, DWORD PTR $T20[ebp]
  00896	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR $T20[ebp], 0
  0089d	52		 push	 edx
  0089e	8d 55 80	 lea	 edx, DWORD PTR $T10[ebp]
  008a1	c7 45 80 01 00
	00 00		 mov	 DWORD PTR $T10[ebp], 1
  008a8	52		 push	 edx
  008a9	8d 55 84	 lea	 edx, DWORD PTR $T11[ebp]
  008ac	c7 45 84 ff 00
	00 00		 mov	 DWORD PTR $T11[ebp], 255 ; 000000ffH
  008b3	52		 push	 edx
  008b4	8d 55 b0	 lea	 edx, DWORD PTR $T22[ebp]
  008b7	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR $T22[ebp], 1
  008be	52		 push	 edx
  008bf	ff b0 08 01 00
	00		 push	 DWORD PTR [eax+264]
  008c5	c7 45 88 00 00
	00 00		 mov	 DWORD PTR $T12[ebp], 0
  008cc	6a 00		 push	 0
  008ce	ff b0 00 01 00
	00		 push	 DWORD PTR [eax+256]
  008d4	8d 45 88	 lea	 eax, DWORD PTR $T12[ebp]
  008d7	51		 push	 ecx
  008d8	8b 4d c0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  008db	50		 push	 eax
  008dc	57		 push	 edi
  008dd	e8 00 00 00 00	 call	 ?DrawElement_DrawPolygon@CDraw@@IAEXPAVCDC@@ABH1PAUtagPOINT@@PBKPAH1ABK11ABW4LINEDRAWSTYLE@CGraphBaseData@@@Z ; CDraw::DrawElement_DrawPolygon
  008e2	8b 55 c8	 mov	 edx, DWORD PTR _nPointCounts_Low$1$[ebp]
$LN46@DrawSignal:

; 266  : 		if( 0 < nCountOfPoly_Low)

  008e5	83 3e 00	 cmp	 DWORD PTR [esi], 0
  008e8	7e 5c		 jle	 SHORT $LN47@DrawSignal

; 267  : 			DrawElement_DrawPolygon( pDC, 0, nCountOfPoly_Low,		ptPolyPoints_Low,	NULL,	nPointCounts_Low,	1, RGB( 0, 0, 255), TRUE);

  008ea	8b 4d c0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  008ed	8d 45 98	 lea	 eax, DWORD PTR $T15[ebp]
  008f0	50		 push	 eax
  008f1	8d 45 9c	 lea	 eax, DWORD PTR $T16[ebp]
  008f4	c7 45 98 00 00
	00 00		 mov	 DWORD PTR $T15[ebp], 0
  008fb	50		 push	 eax
  008fc	8d 45 d8	 lea	 eax, DWORD PTR $T33[ebp]
  008ff	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR $T16[ebp], 0
  00906	50		 push	 eax
  00907	8d 45 cc	 lea	 eax, DWORD PTR $T27[ebp]
  0090a	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR $T33[ebp], 1
  00911	50		 push	 eax
  00912	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00918	c7 45 cc 00 00
	ff 00		 mov	 DWORD PTR $T27[ebp], 16711680 ; 00ff0000H
  0091f	50		 push	 eax
  00920	52		 push	 edx
  00921	6a 00		 push	 0
  00923	53		 push	 ebx
  00924	56		 push	 esi
  00925	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  0092b	c7 85 4c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR $T3[ebp], 1
  00935	50		 push	 eax
  00936	57		 push	 edi
  00937	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T5[ebp], 0
  00941	e8 00 00 00 00	 call	 ?DrawElement_DrawPolygon@CDraw@@IAEXPAVCDC@@ABH1PAUtagPOINT@@PBKPAH1ABK11ABW4LINEDRAWSTYLE@CGraphBaseData@@@Z ; CDraw::DrawElement_DrawPolygon
$LN47@DrawSignal:

; 268  : 	}
; 269  : 	return true;

  00946	b0 01		 mov	 al, 1
$LN1@DrawSignal:

; 270  : }

  00948	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0094b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00952	59		 pop	 ecx
  00953	5f		 pop	 edi
  00954	5e		 pop	 esi
  00955	5b		 pop	 ebx
  00956	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00959	33 cd		 xor	 ecx, ebp
  0095b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00960	8b e5		 mov	 esp, ebp
  00962	5d		 pop	 ebp
  00963	c2 24 00	 ret	 36			; 00000024H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DrawSignal@CSignalDraw@@QAE_NPAVCDC@@ABVCDrawingGraphData@@ABVCDisplayAttributes@@PAVCPacket@@PBV?$CList@NN@@AAVCSignalData@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAVCXScaleManager@@H@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR $T29[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?DrawSignal@CSignalDraw@@QAE_NPAVCDC@@ABVCDrawingGraphData@@ABVCDisplayAttributes@@PAVCPacket@@PBV?$CList@NN@@AAVCSignalData@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAVCXScaleManager@@H@Z$2:
  00009	68 70 01 00 00	 push	 368			; 00000170H
  0000e	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
  0001d	c3		 ret	 0
  0001e	cc		 int	 3
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
__ehhandler$?DrawSignal@CSignalDraw@@QAE_NPAVCDC@@ABVCDrawingGraphData@@ABVCDisplayAttributes@@PAVCPacket@@PBV?$CList@NN@@AAVCSignalData@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAVCXScaleManager@@H@Z:
  00023	90		 npad	 1
  00024	90		 npad	 1
  00025	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00029	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002c	8b 8a 28 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-216]
  00032	33 c8		 xor	 ecx, eax
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003c	33 c8		 xor	 ecx, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?DrawSignal@CSignalDraw@@QAE_NPAVCDC@@ABVCDrawingGraphData@@ABVCDisplayAttributes@@PAVCPacket@@PBV?$CList@NN@@AAVCSignalData@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAVCXScaleManager@@H@Z
  00048	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?DrawSignal@CSignalDraw@@QAE_NPAVCDC@@ABVCDrawingGraphData@@ABVCDisplayAttributes@@PAVCPacket@@PBV?$CList@NN@@AAVCSignalData@@ABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAVCXScaleManager@@H@Z ENDP ; CSignalDraw::DrawSignal
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\GraphDraw\Draw.h
;	COMDAT ?DrawElement_AddShapePolygon@CDraw@@IAEXPAUtagPOINT@@PAHAAH2ABFABJPBU2@ABU2@ABH@Z
_TEXT	SEGMENT
_ptPolyPoints$ = 8					; size = 4
_pnPointCounts$ = 12					; size = 4
_nCountOfElement$ = 16					; size = 4
_nFullPointCount$ = 20					; size = 4
_nX$ = 24						; size = 4
_dValue$ = 28						; size = 4
_ptTemplatePoints$ = 32					; size = 4
_ptTemplateCenter$ = 36					; size = 4
_nPointCountOfOneElement$ = 40				; size = 4
?DrawElement_AddShapePolygon@CDraw@@IAEXPAUtagPOINT@@PAHAAH2ABFABJPBU2@ABU2@ABH@Z PROC ; CDraw::DrawElement_AddShapePolygon, COMDAT
; _this$ = ecx

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 288  : 	// to skip of overlapped element.
; 289  : 	if( nPointCountOfOneElement <= nFullPointCount)

  00003	8b 45 14	 mov	 eax, DWORD PTR _nFullPointCount$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 24	 mov	 ebx, DWORD PTR _ptTemplateCenter$[ebp]
  0000a	56		 push	 esi
  0000b	8b 30		 mov	 esi, DWORD PTR [eax]
  0000d	57		 push	 edi
  0000e	8b 7d 28	 mov	 edi, DWORD PTR _nPointCountOfOneElement$[ebp]
  00011	8b 3f		 mov	 edi, DWORD PTR [edi]
  00013	3b fe		 cmp	 edi, esi
  00015	7f 34		 jg	 SHORT $LN6@DrawElemen

; 290  : 	{
; 291  : 		// Get New Start Point
; 292  : 		POINT ptStart = ptTemplatePoints[ 0];
; 293  : 		ptStart.x = nX - ptTemplateCenter.x;
; 294  : 		ptStart.y = dValue - ptTemplateCenter.y;
; 295  : 
; 296  : 		POINT &ptPreStart = ptPolyPoints[ nFullPointCount - nPointCountOfOneElement];

  00017	8b 4d 08	 mov	 ecx, DWORD PTR _ptPolyPoints$[ebp]
  0001a	8b c6		 mov	 eax, esi
  0001c	2b c7		 sub	 eax, edi
  0001e	8b 14 c1	 mov	 edx, DWORD PTR [ecx+eax*8]
  00021	8d 0c c1	 lea	 ecx, DWORD PTR [ecx+eax*8]
  00024	8b 45 18	 mov	 eax, DWORD PTR _nX$[ebp]
  00027	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0002a	03 4b 04	 add	 ecx, DWORD PTR [ebx+4]
  0002d	0f bf 00	 movsx	 eax, WORD PTR [eax]
  00030	2b d0		 sub	 edx, eax
  00032	8b 45 1c	 mov	 eax, DWORD PTR _dValue$[ebp]

; 297  : 		int nXGap = ptPreStart.x - ptStart.x;

  00035	03 13		 add	 edx, DWORD PTR [ebx]
  00037	2b 08		 sub	 ecx, DWORD PTR [eax]

; 298  : 		int nYGap = ptPreStart.y - ptStart.y;
; 299  : 		if( -2 < nXGap && nXGap < 2 && -2 < nYGap && nYGap < 2)

  00039	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0003c	83 f8 02	 cmp	 eax, 2
  0003f	77 0a		 ja	 SHORT $LN6@DrawElemen
  00041	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  00044	7e 05		 jle	 SHORT $LN6@DrawElemen
  00046	83 f9 02	 cmp	 ecx, 2
  00049	7c 52		 jl	 SHORT $LN1@DrawElemen
$LN6@DrawElemen:

; 300  : 			return;
; 301  : 	}
; 302  : 
; 303  : 	ptPolyPoints += nFullPointCount;

  0004b	8b 45 08	 mov	 eax, DWORD PTR _ptPolyPoints$[ebp]
  0004e	8d 14 f0	 lea	 edx, DWORD PTR [eax+esi*8]

; 304  : 	for( int i = 0; i < nPointCountOfOneElement; i++)

  00051	33 f6		 xor	 esi, esi
  00053	85 ff		 test	 edi, edi
  00055	7e 2f		 jle	 SHORT $LN3@DrawElemen
$LL4@DrawElemen:

; 305  : 	{
; 306  : 		ptPolyPoints->x = ptTemplatePoints[ i].x + nX - ptTemplateCenter.x;

  00057	8b 7d 20	 mov	 edi, DWORD PTR _ptTemplatePoints$[ebp]

; 307  : 		ptPolyPoints->y = ptTemplatePoints[ i].y + dValue - ptTemplateCenter.y;
; 308  : 		ptPolyPoints++;

  0005a	8d 52 08	 lea	 edx, DWORD PTR [edx+8]
  0005d	8b 45 18	 mov	 eax, DWORD PTR _nX$[ebp]
  00060	8b 0c f7	 mov	 ecx, DWORD PTR [edi+esi*8]
  00063	0f bf 00	 movsx	 eax, WORD PTR [eax]
  00066	03 c8		 add	 ecx, eax
  00068	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  0006a	89 4a f8	 mov	 DWORD PTR [edx-8], ecx
  0006d	8b 44 f7 04	 mov	 eax, DWORD PTR [edi+esi*8+4]
  00071	46		 inc	 esi
  00072	2b 43 04	 sub	 eax, DWORD PTR [ebx+4]
  00075	8b 4d 1c	 mov	 ecx, DWORD PTR _dValue$[ebp]
  00078	03 01		 add	 eax, DWORD PTR [ecx]
  0007a	89 42 fc	 mov	 DWORD PTR [edx-4], eax
  0007d	8b 45 28	 mov	 eax, DWORD PTR _nPointCountOfOneElement$[ebp]
  00080	8b 38		 mov	 edi, DWORD PTR [eax]
  00082	3b f7		 cmp	 esi, edi
  00084	7c d1		 jl	 SHORT $LL4@DrawElemen
$LN3@DrawElemen:

; 309  : 	}
; 310  : 
; 311  : 	pnPointCounts[ nCountOfElement] = nPointCountOfOneElement;

  00086	8b 55 10	 mov	 edx, DWORD PTR _nCountOfElement$[ebp]
  00089	8b 4d 0c	 mov	 ecx, DWORD PTR _pnPointCounts$[ebp]
  0008c	8b 02		 mov	 eax, DWORD PTR [edx]
  0008e	89 3c 81	 mov	 DWORD PTR [ecx+eax*4], edi

; 312  : 	nFullPointCount += pnPointCounts[ nCountOfElement];

  00091	8b 02		 mov	 eax, DWORD PTR [edx]
  00093	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00096	8b 4d 14	 mov	 ecx, DWORD PTR _nFullPointCount$[ebp]
  00099	01 01		 add	 DWORD PTR [ecx], eax

; 313  : 
; 314  : 	nCountOfElement++;

  0009b	ff 02		 inc	 DWORD PTR [edx]
$LN1@DrawElemen:

; 315  : }

  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	5d		 pop	 ebp
  000a1	c2 24 00	 ret	 36			; 00000024H
?DrawElement_AddShapePolygon@CDraw@@IAEXPAUtagPOINT@@PAHAAH2ABFABJPBU2@ABU2@ABH@Z ENDP ; CDraw::DrawElement_AddShapePolygon
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\GraphDraw\SignalDraw.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\GraphDraw\SignalDraw.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
