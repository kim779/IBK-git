; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30145.0 

	TITLE	D:\git\src\IBK\IBK_DRFN\#DRfn-CS\_Obj\GraphDraw\PacketPointerList.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1CObject@@UAE@XZ				; CObject::~CObject
PUBLIC	?Serialize@CObject@@UAEXAAVCArchive@@@Z		; CObject::Serialize
PUBLIC	?AssertValid@CObject@@UBEXXZ			; CObject::AssertValid
PUBLIC	?Dump@CObject@@UBEXAAVCDumpContext@@@Z		; CObject::Dump
PUBLIC	??4CSubGraphPacketList@@QAEAAV0@ABV0@@Z		; CSubGraphPacketList::operator=
PUBLIC	?RemoveAll@CSubGraphPacketList@@QAEXXZ		; CSubGraphPacketList::RemoveAll
PUBLIC	?GetCount@CSubGraphPacketList@@QBEHXZ		; CSubGraphPacketList::GetCount
PUBLIC	?GetHeadPosition@CSubGraphPacketList@@QBEPAU__POSITION@@XZ ; CSubGraphPacketList::GetHeadPosition
PUBLIC	?GetHeadPosition@CSubGraphPacketList@@QAEPAU__POSITION@@XZ ; CSubGraphPacketList::GetHeadPosition
PUBLIC	?GetTailPosition@CSubGraphPacketList@@QBEPAU__POSITION@@XZ ; CSubGraphPacketList::GetTailPosition
PUBLIC	?GetTailPosition@CSubGraphPacketList@@QAEPAU__POSITION@@XZ ; CSubGraphPacketList::GetTailPosition
PUBLIC	?GetHeadPacket@CSubGraphPacketList@@QBEPAVCPacket@@XZ ; CSubGraphPacketList::GetHeadPacket
PUBLIC	?GetHeadPacket@CSubGraphPacketList@@QAEPAVCPacket@@XZ ; CSubGraphPacketList::GetHeadPacket
PUBLIC	?GetTailPacket@CSubGraphPacketList@@QBEPAVCPacket@@XZ ; CSubGraphPacketList::GetTailPacket
PUBLIC	?GetTailPacket@CSubGraphPacketList@@QAEPAVCPacket@@XZ ; CSubGraphPacketList::GetTailPacket
PUBLIC	?GetPacket@CSubGraphPacketList@@QAEPAVCPacket@@H@Z ; CSubGraphPacketList::GetPacket
PUBLIC	?GetNext@CSubGraphPacketList@@QBEPAVCPacket@@AAPAU__POSITION@@@Z ; CSubGraphPacketList::GetNext
PUBLIC	?GetNext@CSubGraphPacketList@@QAEPAVCPacket@@AAPAU__POSITION@@@Z ; CSubGraphPacketList::GetNext
PUBLIC	?GetSubGraphPacketList@CSubGraphPacketList@@QBEABV?$CList@PAVCPacket@@PAV1@@@XZ ; CSubGraphPacketList::GetSubGraphPacketList
PUBLIC	?IsExistenceSamePacket@CSubGraphPacketList@@QBE_NPAVCPacket@@@Z ; CSubGraphPacketList::IsExistenceSamePacket
PUBLIC	?AddTail@?$CList@PAVCPacket@@PAV1@@@QAEPAU__POSITION@@PAVCPacket@@@Z ; CList<CPacket *,CPacket *>::AddTail
PUBLIC	?RemoveAll@?$CList@PAVCPacket@@PAV1@@@QAEXXZ	; CList<CPacket *,CPacket *>::RemoveAll
PUBLIC	?FindIndex@?$CList@PAVCPacket@@PAV1@@@QBEPAU__POSITION@@H@Z ; CList<CPacket *,CPacket *>::FindIndex
PUBLIC	?NewNode@?$CList@PAVCPacket@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<CPacket *,CPacket *>::NewNode
PUBLIC	?SetData@CSubGraphPacketList@@AAEXABV?$CList@PAVCPacket@@PAV1@@@@Z ; CSubGraphPacketList::SetData
PUBLIC	?AddTail2@CSubGraphPacketList@@QAEXPAVCPacket@@@Z ; CSubGraphPacketList::AddTail2
PUBLIC	??4CGraphCalculateData@@QAEAAV0@ABV0@@Z		; CGraphCalculateData::operator=
PUBLIC	??0CGraphCalculateData@@QAE@AAPAVCPacket@@AAPAVCIndicator@@@Z ; CGraphCalculateData::CGraphCalculateData
PUBLIC	?RemoveAll@CGraphCalculateData@@QAEXXZ		; CGraphCalculateData::RemoveAll
PUBLIC	?AddTail@CGraphCalculateData@@QAEXPAVCSubGraphPacketList@@@Z ; CGraphCalculateData::AddTail
PUBLIC	?GetSubGraphPacketList@CGraphCalculateData@@QBEABV?$CList@PAVCSubGraphPacketList@@PAV1@@@XZ ; CGraphCalculateData::GetSubGraphPacketList
PUBLIC	?GetSubGraphPacketList@CGraphCalculateData@@QAEPAV?$CList@PAVCSubGraphPacketList@@PAV1@@@XZ ; CGraphCalculateData::GetSubGraphPacketList
PUBLIC	?GetSignalPacket@CGraphCalculateData@@QBEPAVCPacket@@XZ ; CGraphCalculateData::GetSignalPacket
PUBLIC	?GetCount@CGraphCalculateData@@QBEHXZ		; CGraphCalculateData::GetCount
PUBLIC	?GetHeadPosition@CGraphCalculateData@@QBEPAU__POSITION@@XZ ; CGraphCalculateData::GetHeadPosition
PUBLIC	?GetHeadPosition@CGraphCalculateData@@QAEPAU__POSITION@@XZ ; CGraphCalculateData::GetHeadPosition
PUBLIC	?GetHead@CGraphCalculateData@@QBEPAVCSubGraphPacketList@@XZ ; CGraphCalculateData::GetHead
PUBLIC	?GetHead@CGraphCalculateData@@QAEPAVCSubGraphPacketList@@XZ ; CGraphCalculateData::GetHead
PUBLIC	?GetTail@CGraphCalculateData@@QBEPAVCSubGraphPacketList@@XZ ; CGraphCalculateData::GetTail
PUBLIC	?GetTail@CGraphCalculateData@@QAEPAVCSubGraphPacketList@@XZ ; CGraphCalculateData::GetTail
PUBLIC	?GetAt@CGraphCalculateData@@QAEPAVCSubGraphPacketList@@H@Z ; CGraphCalculateData::GetAt
PUBLIC	?GetNext@CGraphCalculateData@@QBEPAVCSubGraphPacketList@@AAPAU__POSITION@@@Z ; CGraphCalculateData::GetNext
PUBLIC	?GetNext@CGraphCalculateData@@QAEPAVCSubGraphPacketList@@AAPAU__POSITION@@@Z ; CGraphCalculateData::GetNext
PUBLIC	?SetSignalPacket@CGraphCalculateData@@QAEXPAVCPacket@@@Z ; CGraphCalculateData::SetSignalPacket
PUBLIC	?SetData@CGraphCalculateData@@AAEXABV?$CList@PAVCSubGraphPacketList@@PAV1@@@@Z ; CGraphCalculateData::SetData
PUBLIC	??0?$CList@PAVCSubGraphPacketList@@PAV1@@@QAE@H@Z ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::CList<CSubGraphPacketList *,CSubGraphPacketList *>
PUBLIC	?AddTail@?$CList@PAVCSubGraphPacketList@@PAV1@@@QAEPAU__POSITION@@PAVCSubGraphPacketList@@@Z ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::AddTail
PUBLIC	?RemoveAll@?$CList@PAVCSubGraphPacketList@@PAV1@@@QAEXXZ ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::RemoveAll
PUBLIC	?FindIndex@?$CList@PAVCSubGraphPacketList@@PAV1@@@QBEPAU__POSITION@@H@Z ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::FindIndex
PUBLIC	?NewNode@?$CList@PAVCSubGraphPacketList@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::NewNode
PUBLIC	??1?$CList@PAVCSubGraphPacketList@@PAV1@@@UAE@XZ ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::~CList<CSubGraphPacketList *,CSubGraphPacketList *>
PUBLIC	?Serialize@?$CList@PAVCSubGraphPacketList@@PAV1@@@UAEXAAVCArchive@@@Z ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::Serialize
PUBLIC	??_G?$CList@PAVCSubGraphPacketList@@PAV1@@@UAEPAXI@Z ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::`scalar deleting destructor'
PUBLIC	??$SerializeElements@PAVCSubGraphPacketList@@@@YGXAAVCArchive@@PAPAVCSubGraphPacketList@@H@Z ; SerializeElements<CSubGraphPacketList *>
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R3CObject@@8					; CObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObject@@8					; CObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CObject@@8			; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$CList@PAVCSubGraphPacketList@@PAV1@@@6B@	; CList<CSubGraphPacketList *,CSubGraphPacketList *>::`vftable'
PUBLIC	??_R4?$CList@PAVCSubGraphPacketList@@PAV1@@@6B@	; CList<CSubGraphPacketList *,CSubGraphPacketList *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CList@PAVCSubGraphPacketList@@PAV1@@@@8 ; CList<CSubGraphPacketList *,CSubGraphPacketList *> `RTTI Type Descriptor'
PUBLIC	??_R3?$CList@PAVCSubGraphPacketList@@PAV1@@@8	; CList<CSubGraphPacketList *,CSubGraphPacketList *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CList@PAVCSubGraphPacketList@@PAV1@@@8	; CList<CSubGraphPacketList *,CSubGraphPacketList *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CList@PAVCSubGraphPacketList@@PAV1@@@8 ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?__global_delete@@YAXPAXI@Z:PROC		; __global_delete
EXTRN	___std_terminate:PROC
EXTRN	?AfxThrowInvalidArgException@@YGXXZ:PROC	; AfxThrowInvalidArgException
EXTRN	?AfxThrowArchiveException@@YGXHPBD@Z:PROC	; AfxThrowArchiveException
EXTRN	?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ:PROC ; CObject::GetRuntimeClass
EXTRN	?Read@CArchive@@QAEIPAXI@Z:PROC			; CArchive::Read
EXTRN	?Write@CArchive@@QAEXPBXI@Z:PROC		; CArchive::Write
EXTRN	?ReadCount@CArchive@@QAEKXZ:PROC		; CArchive::ReadCount
EXTRN	?WriteCount@CArchive@@QAEXK@Z:PROC		; CArchive::WriteCount
EXTRN	?Create@CPlex@@SGPAU1@AAPAU1@II@Z:PROC		; CPlex::Create
EXTRN	?FreeDataChain@CPlex@@QAEXXZ:PROC		; CPlex::FreeDataChain
EXTRN	??_E?$CList@PAVCSubGraphPacketList@@PAV1@@@UAEPAXI@Z:PROC ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R1A@?0A@EA@?$CList@PAVCSubGraphPacketList@@PAV1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CList@PAVCSubGraphPacketList@@PAV1@@@8 DD FLAT:??_R0?AV?$CList@PAVCSubGraphPacketList@@PAV1@@@@8 ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CList@PAVCSubGraphPacketList@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CList@PAVCSubGraphPacketList@@PAV1@@@8
rdata$r	SEGMENT
??_R2?$CList@PAVCSubGraphPacketList@@PAV1@@@8 DD FLAT:??_R1A@?0A@EA@?$CList@PAVCSubGraphPacketList@@PAV1@@@8 ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CList@PAVCSubGraphPacketList@@PAV1@@@8
rdata$r	SEGMENT
??_R3?$CList@PAVCSubGraphPacketList@@PAV1@@@8 DD 00H	; CList<CSubGraphPacketList *,CSubGraphPacketList *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CList@PAVCSubGraphPacketList@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CList@PAVCSubGraphPacketList@@PAV1@@@@8
data$rs	SEGMENT
??_R0?AV?$CList@PAVCSubGraphPacketList@@PAV1@@@@8 DD FLAT:??_7type_info@@6B@ ; CList<CSubGraphPacketList *,CSubGraphPacketList *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CList@PAVCSubGraphPacketList@@PAV1@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CList@PAVCSubGraphPacketList@@PAV1@@@6B@
rdata$r	SEGMENT
??_R4?$CList@PAVCSubGraphPacketList@@PAV1@@@6B@ DD 00H	; CList<CSubGraphPacketList *,CSubGraphPacketList *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CList@PAVCSubGraphPacketList@@PAV1@@@@8
	DD	FLAT:??_R3?$CList@PAVCSubGraphPacketList@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_7?$CList@PAVCSubGraphPacketList@@PAV1@@@6B@
CONST	SEGMENT
??_7?$CList@PAVCSubGraphPacketList@@PAV1@@@6B@ DD FLAT:??_R4?$CList@PAVCSubGraphPacketList@@PAV1@@@6B@ ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CList@PAVCSubGraphPacketList@@PAV1@@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CList@PAVCSubGraphPacketList@@PAV1@@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CObject@@8
rdata$r	SEGMENT
??_R2CObject@@8 DD FLAT:??_R1A@?0A@EA@CObject@@8	; CObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObject@@8
rdata$r	SEGMENT
??_R3CObject@@8 DD 00H					; CObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
data$rs	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
data$rs	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$CList@PAVCSubGraphPacketList@@PAV1@@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_G?$CList@PAVCSubGraphPacketList@@PAV1@@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$CList@PAVCSubGraphPacketList@@PAV1@@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CList@PAVCSubGraphPacketList@@PAV1@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@PAVCSubGraphPacketList@@@@YGXAAVCArchive@@PAPAVCSubGraphPacketList@@H@Z
_TEXT	SEGMENT
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@PAVCSubGraphPacketList@@@@YGXAAVCArchive@@PAPAVCSubGraphPacketList@@H@Z PROC ; SerializeElements<CSubGraphPacketList *>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR _nCount$[ebp]
  0000b	57		 push	 edi
  0000c	85 f6		 test	 esi, esi
  0000e	74 08		 je	 SHORT $LN2@SerializeE
  00010	85 c9		 test	 ecx, ecx
  00012	0f 84 89 00 00
	00		 je	 $LN34@SerializeE
$LN2@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00018	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  0001b	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0001e	f7 d0		 not	 eax
  00020	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00022	74 3c		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;
; 79   : 		pData = pElements;
; 80   : 		while( nElementsLeft > 0 )

  00024	85 f6		 test	 esi, esi
  00026	74 31		 je	 SHORT $LN8@SerializeE
  00028	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL5@SerializeE:

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00030	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00035	3b f3		 cmp	 esi, ebx
  00037	0f 42 de	 cmovb	 ebx, esi

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0003a	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
  00041	57		 push	 edi
  00042	51		 push	 ecx
  00043	8b ca		 mov	 ecx, edx
  00045	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;
; 87   : 			pData += nElementsToWrite;

  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  00050	03 cf		 add	 ecx, edi
  00052	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  00055	2b f3		 sub	 esi, ebx
  00057	75 d7		 jne	 SHORT $LL5@SerializeE
$LN8@SerializeE:
  00059	5f		 pop	 edi

; 105  : 		}
; 106  : 	}
; 107  : }

  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	5d		 pop	 ebp
  0005d	c2 0c 00	 ret	 12			; 0000000cH
$LN10@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  00060	85 f6		 test	 esi, esi
  00062	74 f5		 je	 SHORT $LN8@SerializeE
$LL7@SerializeE:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00064	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00069	3b f7		 cmp	 esi, edi
  0006b	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0006e	8d 1c bd 00 00
	00 00		 lea	 ebx, DWORD PTR [edi*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00075	53		 push	 ebx
  00076	51		 push	 ecx
  00077	8b ca		 mov	 ecx, edx
  00079	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0007e	3b c3		 cmp	 eax, ebx
  00080	75 16		 jne	 SHORT $LN23@SerializeE
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  00082	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00085	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;
; 104  : 			pData += nElementsToRead;

  00088	03 cb		 add	 ecx, ebx
  0008a	89 4d 0c	 mov	 DWORD PTR _pElements$[ebp], ecx
  0008d	2b f7		 sub	 esi, edi
  0008f	75 d3		 jne	 SHORT $LL7@SerializeE

; 105  : 		}
; 106  : 	}
; 107  : }

  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	5d		 pop	 ebp
  00095	c2 0c 00	 ret	 12			; 0000000cH
$LN23@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 402  : 		AfxThrowArchiveException(CArchiveException::endOfFile);

  00098	6a 00		 push	 0
  0009a	6a 03		 push	 3
  0009c	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN34@SerializeE:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  000a1	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN32@SerializeE:
  000a6	cc		 int	 3
??$SerializeElements@PAVCSubGraphPacketList@@@@YGXAAVCArchive@@PAPAVCSubGraphPacketList@@H@Z ENDP ; SerializeElements<CSubGraphPacketList *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??_G?$CList@PAVCSubGraphPacketList@@PAV1@@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$CList@PAVCSubGraphPacketList@@PAV1@@@UAEPAXI@Z PROC ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$CList@PAVCSubGraphPacketList@@PAV1@@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00025	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 878  : {

  00028	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@PAVCSubGraphPacketList@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  00035	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  0003c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00043	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0004a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 872  : 	m_pBlocks->FreeDataChain();

  00051	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00056	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00059	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00060	a8 01		 test	 al, 1
  00062	74 2c		 je	 SHORT $LN22@scalar
  00064	a8 04		 test	 al, 4
  00066	75 1d		 jne	 SHORT $LN3@scalar
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 112  : 	{ ::operator delete(p); }

  00068	56		 push	 esi
  00069	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006e	83 c4 04	 add	 esp, 4
  00071	8b c6		 mov	 eax, esi
  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007d	59		 pop	 ecx
  0007e	5e		 pop	 esi
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
$LN3@scalar:
  00085	6a 1c		 push	 28			; 0000001cH
  00087	56		 push	 esi
  00088	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0008d	83 c4 08	 add	 esp, 8
$LN22@scalar:
  00090	8b c6		 mov	 eax, esi
  00092	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00095	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009c	59		 pop	 ecx
  0009d	5e		 pop	 esi
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 04 00	 ret	 4
  000a4	cc		 int	 3
  000a5	cc		 int	 3
  000a6	cc		 int	 3
  000a7	cc		 int	 3
  000a8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_G?$CList@PAVCSubGraphPacketList@@PAV1@@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$CList@PAVCSubGraphPacketList@@PAV1@@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$CList@PAVCSubGraphPacketList@@PAV1@@@UAEPAXI@Z ENDP ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CList@PAVCSubGraphPacketList@@PAV1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_nNewCount$1$ = -16					; size = 4
_newData$1 = -12					; size = 4
_pData$1$ = -8						; size = 4
_pNode$1$ = -8						; size = 4
_nElementsLeft$1$ = -4					; size = 4
_this$1$ = -4						; size = 4
_ar$ = 8						; size = 4
?Serialize@?$CList@PAVCSubGraphPacketList@@PAV1@@@UAEXAAVCArchive@@@Z PROC ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::Serialize, COMDAT
; _this$ = ecx

; 1169 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00009	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1169 : {

  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  00011	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00014	f7 d0		 not	 eax
  00016	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1174 : 	if (ar.IsStoring())

  00018	0f 84 ae 00 00
	00		 je	 $LN7@Serialize

; 1175 : 	{
; 1176 : 		ar.WriteCount(m_nCount);

  0001e	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00021	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00026	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00029	89 45 f8	 mov	 DWORD PTR _pNode$1$[ebp], eax
  0002c	85 c0		 test	 eax, eax
  0002e	0f 84 43 01 00
	00		 je	 $LN68@Serialize
$LL4@Serialize:

; 1178 : 		{
; 1179 : 			ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1180 : 			TYPE* pData;
; 1181 : 			/*
; 1182 : 			 * in some cases the & operator might be overloaded, and we cannot use it to obtain
; 1183 : 			 * the address of a given object.  We then use the following trick to get the address
; 1184 : 			 */
; 1185 : 			pData = reinterpret_cast< TYPE* >( &reinterpret_cast< int& >( static_cast< TYPE& >( pNode->data ) ) );

  00034	8d 70 08	 lea	 esi, DWORD PTR [eax+8]

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00037	85 f6		 test	 esi, esi
  00039	0f 84 4a 01 00
	00		 je	 $LN60@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00042	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00045	f7 d0		 not	 eax
  00047	a8 01		 test	 al, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  00049	74 33		 je	 SHORT $LN21@Serialize

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0004b	b8 01 00 00 00	 mov	 eax, 1
  00050	89 45 fc	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
$LL16@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00053	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00058	3b c3		 cmp	 eax, ebx
  0005a	0f 42 d8	 cmovb	 ebx, eax

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0005d	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
  00064	57		 push	 edi
  00065	56		 push	 esi
  00066	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _nElementsLeft$1$[ebp]

; 87   : 			pData += nElementsToWrite;

  0006e	03 f7		 add	 esi, edi
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00073	2b c3		 sub	 eax, ebx
  00075	89 45 fc	 mov	 DWORD PTR _nElementsLeft$1$[ebp], eax
  00078	85 c0		 test	 eax, eax
  0007a	75 d7		 jne	 SHORT $LL16@Serialize

; 88   : 		}
; 89   : 	}

  0007c	eb 35		 jmp	 SHORT $LN2@Serialize
$LN21@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  0007e	bf 01 00 00 00	 mov	 edi, 1
$LL18@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00083	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  00088	3b fb		 cmp	 edi, ebx
  0008a	0f 42 df	 cmovb	 ebx, edi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0008d	8d 04 9d 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00094	50		 push	 eax
  00095	56		 push	 esi
  00096	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0009b	8d 0c 9d 00 00
	00 00		 lea	 ecx, DWORD PTR [ebx*4]
  000a2	3b c1		 cmp	 eax, ecx
  000a4	0f 85 d6 00 00
	00		 jne	 $LN59@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 97   : 		while( nElementsLeft > 0 )

  000aa	03 f1		 add	 esi, ecx
  000ac	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]

; 103  : 			nElementsLeft -= nElementsToRead;

  000af	2b fb		 sub	 edi, ebx
  000b1	75 d0		 jne	 SHORT $LL18@Serialize
$LN2@Serialize:

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  000b3	8b 45 f8	 mov	 eax, DWORD PTR _pNode$1$[ebp]
  000b6	8b 00		 mov	 eax, DWORD PTR [eax]
  000b8	89 45 f8	 mov	 DWORD PTR _pNode$1$[ebp], eax
  000bb	85 c0		 test	 eax, eax
  000bd	0f 85 71 ff ff
	ff		 jne	 $LL4@Serialize

; 1197 : 		}
; 1198 : 	}
; 1199 : }

  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 04 00	 ret	 4
$LN7@Serialize:

; 1186 : 			SerializeElements<TYPE>(ar, pData, 1);
; 1187 : 		}
; 1188 : 	}
; 1189 : 	else
; 1190 : 	{
; 1191 : 		DWORD_PTR nNewCount = ar.ReadCount();

  000cc	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount

; 1192 : 		while (nNewCount--)

  000d1	85 c0		 test	 eax, eax
  000d3	0f 84 9e 00 00
	00		 je	 $LN68@Serialize
  000d9	0f 1f 80 00 00
	00 00		 npad	 7
$LL5@Serialize:
  000e0	48		 dec	 eax
  000e1	89 45 f0	 mov	 DWORD PTR _nNewCount$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 212  : 	{ return (m_nMode & CArchive::load) == 0; }

  000e4	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  000e7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000ea	f7 d1		 not	 ecx
  000ec	f6 c1 01	 test	 cl, 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 73   : 	if (ar.IsStoring())

  000ef	74 3a		 je	 SHORT $LN42@Serialize

; 79   : 		pData = pElements;

  000f1	8d 4d f4	 lea	 ecx, DWORD PTR _newData$1[ebp]
  000f4	bb 01 00 00 00	 mov	 ebx, 1
  000f9	89 4d f8	 mov	 DWORD PTR _pData$1$[ebp], ecx
  000fc	0f 1f 40 00	 npad	 4
$LL37@Serialize:

; 80   : 		while( nElementsLeft > 0 )
; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00100	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00105	3b df		 cmp	 ebx, edi
  00107	0f 42 fb	 cmovb	 edi, ebx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  0010a	8d 34 bd 00 00
	00 00		 lea	 esi, DWORD PTR [edi*4]
  00111	56		 push	 esi
  00112	51		 push	 ecx
  00113	8b c8		 mov	 ecx, eax
  00115	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 87   : 			pData += nElementsToWrite;

  0011a	8b 4d f8	 mov	 ecx, DWORD PTR _pData$1$[ebp]
  0011d	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  00120	03 ce		 add	 ecx, esi
  00122	89 4d f8	 mov	 DWORD PTR _pData$1$[ebp], ecx
  00125	2b df		 sub	 ebx, edi
  00127	75 d7		 jne	 SHORT $LL37@Serialize

; 88   : 		}
; 89   : 	}

  00129	eb 36		 jmp	 SHORT $LN40@Serialize
$LN42@Serialize:

; 90   : 	else
; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  0012b	be 01 00 00 00	 mov	 esi, 1

; 96   : 		pData = pElements;

  00130	8d 5d f4	 lea	 ebx, DWORD PTR _newData$1[ebp]
$LL39@Serialize:

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  00133	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00138	3b f7		 cmp	 esi, edi
  0013a	0f 42 fe	 cmovb	 edi, esi

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  0013d	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl

; 399  : 	UINT nRead=Read(lpBuf, nCount);

  00144	51		 push	 ecx
  00145	53		 push	 ebx
  00146	8b c8		 mov	 ecx, eax
  00148	e8 00 00 00 00	 call	 ?Read@CArchive@@QAEIPAXI@Z ; CArchive::Read

; 400  : 	if(nRead!=nCount)

  0014d	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
  00154	3b c1		 cmp	 eax, ecx
  00156	75 28		 jne	 SHORT $LN59@Serialize
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 104  : 			pData += nElementsToRead;

  00158	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  0015b	03 d9		 add	 ebx, ecx
  0015d	2b f7		 sub	 esi, edi
  0015f	75 d2		 jne	 SHORT $LL39@Serialize
$LN40@Serialize:

; 1193 : 		{
; 1194 : 			TYPE newData[1];
; 1195 : 			SerializeElements<TYPE>(ar, newData, 1);
; 1196 : 			AddTail(newData[0]);

  00161	ff 75 f4	 push	 DWORD PTR _newData$1[ebp]
  00164	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00167	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCSubGraphPacketList@@PAV1@@@QAEPAU__POSITION@@PAVCSubGraphPacketList@@@Z ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::AddTail
  0016c	8b 45 f0	 mov	 eax, DWORD PTR _nNewCount$1$[ebp]
  0016f	85 c0		 test	 eax, eax
  00171	0f 85 69 ff ff
	ff		 jne	 $LL5@Serialize
$LN68@Serialize:
  00177	5f		 pop	 edi

; 1197 : 		}
; 1198 : 	}
; 1199 : }

  00178	5e		 pop	 esi
  00179	5b		 pop	 ebx
  0017a	8b e5		 mov	 esp, ebp
  0017c	5d		 pop	 ebp
  0017d	c2 04 00	 ret	 4
$LN59@Serialize:
  00180	6a 00		 push	 0
  00182	6a 03		 push	 3
  00184	e8 00 00 00 00	 call	 ?AfxThrowArchiveException@@YGXHPBD@Z ; AfxThrowArchiveException
$LN60@Serialize:

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00189	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN85@Serialize:
  0018e	cc		 int	 3
?Serialize@?$CList@PAVCSubGraphPacketList@@PAV1@@@UAEXAAVCArchive@@@Z ENDP ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::Serialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??1?$CList@PAVCSubGraphPacketList@@PAV1@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CList@PAVCSubGraphPacketList@@PAV1@@@UAE@XZ PROC	; CList<CSubGraphPacketList *,CSubGraphPacketList *>::~CList<CSubGraphPacketList *,CSubGraphPacketList *>, COMDAT
; _this$ = ecx

; 878  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CList@PAVCSubGraphPacketList@@PAV1@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 872  : 	m_pBlocks->FreeDataChain();

  00025	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 878  : {

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CList@PAVCSubGraphPacketList@@PAV1@@@6B@

; 870  : 	m_nCount = 0;

  0002e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00035	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0003c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00043	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 872  : 	m_pBlocks->FreeDataChain();

  0004a	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0004f	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 879  : 	RemoveAll();
; 880  : 	ASSERT(m_nCount == 0);
; 881  : }

  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	5e		 pop	 esi
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
  00066	cc		 int	 3
  00067	cc		 int	 3
  00068	cc		 int	 3
  00069	cc		 int	 3
  0006a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CList@PAVCSubGraphPacketList@@PAV1@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CList@PAVCSubGraphPacketList@@PAV1@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CList@PAVCSubGraphPacketList@@PAV1@@@UAE@XZ ENDP	; CList<CSubGraphPacketList *,CSubGraphPacketList *>::~CList<CSubGraphPacketList *,CSubGraphPacketList *>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?NewNode@?$CList@PAVCSubGraphPacketList@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z
_TEXT	SEGMENT
_pPrev$ = 8						; size = 4
_pNext$ = 12						; size = 4
?NewNode@?$CList@PAVCSubGraphPacketList@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z PROC ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::NewNode, COMDAT
; _this$ = ecx

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 902  : 	if (m_pNodeFree == NULL)

  00006	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0000a	75 34		 jne	 SHORT $LN7@NewNode

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  0000c	6a 0c		 push	 12			; 0000000cH
  0000e	ff 76 18	 push	 DWORD PTR [esi+24]
  00011	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001a	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0001d	83 c0 08	 add	 eax, 8
  00020	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  00023	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00026	83 c0 f4	 add	 eax, -12		; fffffff4H

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00029	83 c2 ff	 add	 edx, -1
  0002c	78 12		 js	 SHORT $LN7@NewNode
  0002e	66 90		 npad	 2
$LL4@NewNode:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	89 08		 mov	 DWORD PTR [eax], ecx

; 915  : 			m_pNodeFree = pNode;

  00035	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00038	83 e8 0c	 sub	 eax, 12			; 0000000cH
  0003b	83 ea 01	 sub	 edx, 1
  0003e	79 f0		 jns	 SHORT $LL4@NewNode
$LN7@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00040	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00043	85 c0		 test	 eax, eax
  00045	74 18		 je	 SHORT $LN17@NewNode

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00047	8b 08		 mov	 ecx, DWORD PTR [eax]
  00049	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 922  : 	pNode->pPrev = pPrev;

  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _pPrev$[ebp]
  0004f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 923  : 	pNode->pNext = pNext;

  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _pNext$[ebp]
  00055	89 08		 mov	 DWORD PTR [eax], ecx

; 924  : 	m_nCount++;

  00057	ff 46 0c	 inc	 DWORD PTR [esi+12]

; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;
; 930  : #pragma pop_macro("new")
; 931  : 	return pNode;

  0005a	5e		 pop	 esi

; 932  : }

  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
$LN17@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  0005f	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN15@NewNode:
  00064	cc		 int	 3
?NewNode@?$CList@PAVCSubGraphPacketList@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z ENDP ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::NewNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?FindIndex@?$CList@PAVCSubGraphPacketList@@PAV1@@@QBEPAU__POSITION@@H@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?FindIndex@?$CList@PAVCSubGraphPacketList@@PAV1@@@QBEPAU__POSITION@@H@Z PROC ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::FindIndex, COMDAT
; _this$ = ecx

; 1130 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1131 : 	ASSERT_VALID(this);
; 1132 : 
; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00003	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00006	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00009	7d 14		 jge	 SHORT $LN5@FindIndex
  0000b	85 d2		 test	 edx, edx
  0000d	78 10		 js	 SHORT $LN5@FindIndex

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0000f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1137 : 	while (nIndex--)

  00012	74 0d		 je	 SHORT $LN1@FindIndex
$LL2@FindIndex:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	83 ea 01	 sub	 edx, 1
  00019	75 f9		 jne	 SHORT $LL2@FindIndex

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;
; 1143 : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
$LN5@FindIndex:

; 1134 : 		return NULL;  // went too far

  0001f	33 c0		 xor	 eax, eax
$LN1@FindIndex:

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;
; 1143 : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?FindIndex@?$CList@PAVCSubGraphPacketList@@PAV1@@@QBEPAU__POSITION@@H@Z ENDP ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::FindIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAll@?$CList@PAVCSubGraphPacketList@@PAV1@@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@?$CList@PAVCSubGraphPacketList@@PAV1@@@QAEXXZ PROC ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::RemoveAll, COMDAT
; _this$ = ecx

; 862  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 863  : 	ASSERT_VALID(this);
; 864  : 
; 865  : 	// destroy elements
; 866  : 	CNode* pNode;
; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)
; 868  : 		pNode->data.~TYPE();
; 869  : 
; 870  : 	m_nCount = 0;
; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 872  : 	m_pBlocks->FreeDataChain();

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0000d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00014	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0001b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00022	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00027	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0002e	5e		 pop	 esi

; 874  : }

  0002f	c3		 ret	 0
?RemoveAll@?$CList@PAVCSubGraphPacketList@@PAV1@@@QAEXXZ ENDP ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?AddTail@?$CList@PAVCSubGraphPacketList@@PAV1@@@QAEPAU__POSITION@@PAVCSubGraphPacketList@@@Z
_TEXT	SEGMENT
_newElement$ = 8					; size = 4
?AddTail@?$CList@PAVCSubGraphPacketList@@PAV1@@@QAEPAU__POSITION@@PAVCSubGraphPacketList@@@Z PROC ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::AddTail, COMDAT
; _this$ = ecx

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 902  : 	if (m_pNodeFree == NULL)

  00007	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0

; 966  : 	ASSERT_VALID(this);
; 967  : 
; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  0000b	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 902  : 	if (m_pNodeFree == NULL)

  0000e	75 32		 jne	 SHORT $LN11@AddTail

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  00010	6a 0c		 push	 12			; 0000000cH
  00012	ff 76 18	 push	 DWORD PTR [esi+24]
  00015	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001e	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00021	83 c0 08	 add	 eax, 8
  00024	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00027	83 c2 ff	 add	 edx, -1
  0002a	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  0002d	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  00030	78 10		 js	 SHORT $LN11@AddTail
$LL8@AddTail:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00032	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00035	89 01		 mov	 DWORD PTR [ecx], eax

; 915  : 			m_pNodeFree = pNode;

  00037	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0003a	83 e9 0c	 sub	 ecx, 12			; 0000000cH
  0003d	83 ea 01	 sub	 edx, 1
  00040	79 f0		 jns	 SHORT $LL8@AddTail
$LN11@AddTail:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00042	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00045	85 c9		 test	 ecx, ecx
  00047	74 39		 je	 SHORT $LN22@AddTail

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00049	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004b	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 969  : 	pNewNode->data = newElement;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]

; 922  : 	pNode->pPrev = pPrev;

  00051	89 79 04	 mov	 DWORD PTR [ecx+4], edi

; 923  : 	pNode->pNext = pNext;

  00054	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 924  : 	m_nCount++;

  0005a	ff 46 0c	 inc	 DWORD PTR [esi+12]

; 969  : 	pNewNode->data = newElement;

  0005d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 970  : 	if (m_pNodeTail != NULL)

  00060	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00063	85 c0		 test	 eax, eax
  00065	74 0d		 je	 SHORT $LN2@AddTail

; 971  : 		m_pNodeTail->pNext = pNewNode;

  00067	89 08		 mov	 DWORD PTR [eax], ecx

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00069	8b c1		 mov	 eax, ecx
  0006b	5f		 pop	 edi
  0006c	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0006f	5e		 pop	 esi

; 976  : }

  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
$LN2@AddTail:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00074	5f		 pop	 edi
  00075	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00078	8b c1		 mov	 eax, ecx
  0007a	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0007d	5e		 pop	 esi

; 976  : }

  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
$LN22@AddTail:

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00082	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN20@AddTail:
  00087	cc		 int	 3
?AddTail@?$CList@PAVCSubGraphPacketList@@PAV1@@@QAEPAU__POSITION@@PAVCSubGraphPacketList@@@Z ENDP ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::AddTail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ??0?$CList@PAVCSubGraphPacketList@@PAV1@@@QAE@H@Z
_TEXT	SEGMENT
_nBlockSize$ = 8					; size = 4
??0?$CList@PAVCSubGraphPacketList@@PAV1@@@QAE@H@Z PROC	; CList<CSubGraphPacketList *,CSubGraphPacketList *>::CList<CSubGraphPacketList *,CSubGraphPacketList *>, COMDAT
; _this$ = ecx

; 851  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;
; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 856  : 	m_pBlocks = NULL;
; 857  : 	m_nBlockSize = nBlockSize;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nBlockSize$[ebp]
  00006	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 858  : }

  00009	8b c1		 mov	 eax, ecx
  0000b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CList@PAVCSubGraphPacketList@@PAV1@@@6B@
  00011	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00018	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0001f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00026	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0002d	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??0?$CList@PAVCSubGraphPacketList@@PAV1@@@QAE@H@Z ENDP	; CList<CSubGraphPacketList *,CSubGraphPacketList *>::CList<CSubGraphPacketList *,CSubGraphPacketList *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?SetData@CGraphCalculateData@@AAEXABV?$CList@PAVCSubGraphPacketList@@PAV1@@@@Z
_TEXT	SEGMENT
_subGraphPacketList$ = 8				; size = 4
?SetData@CGraphCalculateData@@AAEXABV?$CList@PAVCSubGraphPacketList@@PAV1@@@@Z PROC ; CGraphCalculateData::SetData, COMDAT
; _this$ = ecx

; 282  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00007	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  0000a	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00011	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00018	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  0001f	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00026	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp

; 284  : 	POSITION pos = subGraphPacketList.GetHeadPosition();

  0002b	8b 75 08	 mov	 esi, DWORD PTR _subGraphPacketList$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 873  : 	m_pBlocks = NULL;

  0002e	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp

; 284  : 	POSITION pos = subGraphPacketList.GetHeadPosition();

  00035	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 285  : 	while(pos != NULL){

  00038	85 f6		 test	 esi, esi
  0003a	74 19		 je	 SHORT $LN3@SetData
  0003c	0f 1f 40 00	 npad	 4
$LL2@SetData:

; 286  : 		CSubGraphPacketList* pSubGraphPacketList = subGraphPacketList.GetNext(pos);

  00040	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 819  : 		rPosition = (POSITION) pNode->pNext;

  00043	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp

; 287  : 		if(pSubGraphPacketList != NULL)

  00045	85 c0		 test	 eax, eax
  00047	74 08		 je	 SHORT $LN4@SetData

; 288  : 			m_subGraphPacketList.AddTail(pSubGraphPacketList);

  00049	50		 push	 eax
  0004a	8b cf		 mov	 ecx, edi
  0004c	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCSubGraphPacketList@@PAV1@@@QAEPAU__POSITION@@PAVCSubGraphPacketList@@@Z ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::AddTail
$LN4@SetData:

; 285  : 	while(pos != NULL){

  00051	85 f6		 test	 esi, esi
  00053	75 eb		 jne	 SHORT $LL2@SetData
$LN3@SetData:
  00055	5f		 pop	 edi

; 289  : 	}
; 290  : }

  00056	5e		 pop	 esi
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?SetData@CGraphCalculateData@@AAEXABV?$CList@PAVCSubGraphPacketList@@PAV1@@@@Z ENDP ; CGraphCalculateData::SetData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?SetSignalPacket@CGraphCalculateData@@QAEXPAVCPacket@@@Z
_TEXT	SEGMENT
_pSignalPacket$ = 8					; size = 4
?SetSignalPacket@CGraphCalculateData@@QAEXPAVCPacket@@@Z PROC ; CGraphCalculateData::SetSignalPacket, COMDAT
; _this$ = ecx

; 275  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 276  : 	m_pSignalPacket = pSignalPacket;

  00003	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00006	8b 45 08	 mov	 eax, DWORD PTR _pSignalPacket$[ebp]
  00009	89 01		 mov	 DWORD PTR [ecx], eax

; 277  : }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?SetSignalPacket@CGraphCalculateData@@QAEXPAVCPacket@@@Z ENDP ; CGraphCalculateData::SetSignalPacket
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?GetNext@CGraphCalculateData@@QAEPAVCSubGraphPacketList@@AAPAU__POSITION@@@Z
_TEXT	SEGMENT
_pos$ = 8						; size = 4
?GetNext@CGraphCalculateData@@QAEPAVCSubGraphPacketList@@AAPAU__POSITION@@@Z PROC ; CGraphCalculateData::GetNext, COMDAT
; _this$ = ecx

; 267  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 268  : 	if(pos == NULL)

  00003	8b 55 08	 mov	 edx, DWORD PTR _pos$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	85 c0		 test	 eax, eax
  0000a	75 04		 jne	 SHORT $LN2@GetNext

; 271  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
$LN2@GetNext:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	89 0a		 mov	 DWORD PTR [edx], ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp

; 270  : 	return m_subGraphPacketList.GetNext(pos);

  00014	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 271  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?GetNext@CGraphCalculateData@@QAEPAVCSubGraphPacketList@@AAPAU__POSITION@@@Z ENDP ; CGraphCalculateData::GetNext
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?GetNext@CGraphCalculateData@@QBEPAVCSubGraphPacketList@@AAPAU__POSITION@@@Z
_TEXT	SEGMENT
_pos$ = 8						; size = 4
?GetNext@CGraphCalculateData@@QBEPAVCSubGraphPacketList@@AAPAU__POSITION@@@Z PROC ; CGraphCalculateData::GetNext, COMDAT
; _this$ = ecx

; 260  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 261  : 	if(pos == NULL)

  00003	8b 55 08	 mov	 edx, DWORD PTR _pos$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	85 c0		 test	 eax, eax
  0000a	75 04		 jne	 SHORT $LN2@GetNext

; 264  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
$LN2@GetNext:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 819  : 		rPosition = (POSITION) pNode->pNext;

  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	89 0a		 mov	 DWORD PTR [edx], ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp

; 263  : 	return m_subGraphPacketList.GetNext(pos);

  00014	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 264  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?GetNext@CGraphCalculateData@@QBEPAVCSubGraphPacketList@@AAPAU__POSITION@@@Z ENDP ; CGraphCalculateData::GetNext
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?GetAt@CGraphCalculateData@@QAEPAVCSubGraphPacketList@@H@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?GetAt@CGraphCalculateData@@QAEPAVCSubGraphPacketList@@H@Z PROC ; CGraphCalculateData::GetAt, COMDAT
; _this$ = ecx

; 252  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 253  : 	POSITION pos = m_subGraphPacketList.FindIndex(nIndex);

  00003	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00006	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00009	7d 1b		 jge	 SHORT $LN15@GetAt
  0000b	85 d2		 test	 edx, edx
  0000d	78 17		 js	 SHORT $LN15@GetAt

; 1134 : 		return NULL;  // went too far
; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0000f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1137 : 	while (nIndex--)

  00012	74 07		 je	 SHORT $LN11@GetAt
$LL5@GetAt:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	83 ea 01	 sub	 edx, 1
  00019	75 f9		 jne	 SHORT $LL5@GetAt
$LN11@GetAt:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp

; 254  : 	if(pos == NULL)

  0001b	85 c0		 test	 eax, eax
  0001d	74 07		 je	 SHORT $LN15@GetAt

; 256  : 	return m_subGraphPacketList.GetAt(pos);

  0001f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 257  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN15@GetAt:

; 255  : 		return NULL;

  00026	33 c0		 xor	 eax, eax

; 257  : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?GetAt@CGraphCalculateData@@QAEPAVCSubGraphPacketList@@H@Z ENDP ; CGraphCalculateData::GetAt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?GetTail@CGraphCalculateData@@QAEPAVCSubGraphPacketList@@XZ
_TEXT	SEGMENT
?GetTail@CGraphCalculateData@@QAEPAVCSubGraphPacketList@@XZ PROC ; CGraphCalculateData::GetTail, COMDAT
; _this$ = ecx

; 246  : 	if(m_subGraphPacketList.GetCount() <= 0)

  00000	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00004	7f 03		 jg	 SHORT $LN2@GetTail

; 247  : 		return NULL;

  00006	33 c0		 xor	 eax, eax

; 249  : }

  00008	c3		 ret	 0
$LN2@GetTail:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 797  : 	{ ENSURE(m_pNodeTail != NULL);

  00009	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000c	85 c0		 test	 eax, eax
  0000e	0f 84 00 00 00
	00		 je	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp

; 249  : }

  00014	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00017	c3		 ret	 0
?GetTail@CGraphCalculateData@@QAEPAVCSubGraphPacketList@@XZ ENDP ; CGraphCalculateData::GetTail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?GetTail@CGraphCalculateData@@QBEPAVCSubGraphPacketList@@XZ
_TEXT	SEGMENT
?GetTail@CGraphCalculateData@@QBEPAVCSubGraphPacketList@@XZ PROC ; CGraphCalculateData::GetTail, COMDAT
; _this$ = ecx

; 239  : 	if(m_subGraphPacketList.GetCount() <= 0)

  00000	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00004	7f 03		 jg	 SHORT $LN2@GetTail

; 240  : 		return NULL;

  00006	33 c0		 xor	 eax, eax

; 242  : }

  00008	c3		 ret	 0
$LN2@GetTail:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 801  : 	{ ENSURE(m_pNodeTail != NULL);

  00009	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000c	85 c0		 test	 eax, eax
  0000e	0f 84 00 00 00
	00		 je	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp

; 242  : }

  00014	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00017	c3		 ret	 0
?GetTail@CGraphCalculateData@@QBEPAVCSubGraphPacketList@@XZ ENDP ; CGraphCalculateData::GetTail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?GetHead@CGraphCalculateData@@QAEPAVCSubGraphPacketList@@XZ
_TEXT	SEGMENT
?GetHead@CGraphCalculateData@@QAEPAVCSubGraphPacketList@@XZ PROC ; CGraphCalculateData::GetHead, COMDAT
; _this$ = ecx

; 232  : 	if(m_subGraphPacketList.GetCount() <= 0)

  00000	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00004	7f 03		 jg	 SHORT $LN2@GetHead

; 233  : 		return NULL;

  00006	33 c0		 xor	 eax, eax

; 235  : }

  00008	c3		 ret	 0
$LN2@GetHead:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 789  : 	{ ENSURE(m_pNodeHead != NULL);

  00009	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000c	85 c0		 test	 eax, eax
  0000e	0f 84 00 00 00
	00		 je	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp

; 235  : }

  00014	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00017	c3		 ret	 0
?GetHead@CGraphCalculateData@@QAEPAVCSubGraphPacketList@@XZ ENDP ; CGraphCalculateData::GetHead
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?GetHead@CGraphCalculateData@@QBEPAVCSubGraphPacketList@@XZ
_TEXT	SEGMENT
?GetHead@CGraphCalculateData@@QBEPAVCSubGraphPacketList@@XZ PROC ; CGraphCalculateData::GetHead, COMDAT
; _this$ = ecx

; 225  : 	if(m_subGraphPacketList.GetCount() <= 0)

  00000	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00004	7f 03		 jg	 SHORT $LN2@GetHead

; 226  : 		return NULL;

  00006	33 c0		 xor	 eax, eax

; 228  : }

  00008	c3		 ret	 0
$LN2@GetHead:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 793  : 	{ ENSURE(m_pNodeHead != NULL);

  00009	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000c	85 c0		 test	 eax, eax
  0000e	0f 84 00 00 00
	00		 je	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp

; 228  : }

  00014	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00017	c3		 ret	 0
?GetHead@CGraphCalculateData@@QBEPAVCSubGraphPacketList@@XZ ENDP ; CGraphCalculateData::GetHead
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?GetHeadPosition@CGraphCalculateData@@QAEPAU__POSITION@@XZ
_TEXT	SEGMENT
?GetHeadPosition@CGraphCalculateData@@QAEPAU__POSITION@@XZ PROC ; CGraphCalculateData::GetHeadPosition, COMDAT
; _this$ = ecx

; 217  : 	if(m_subGraphPacketList.GetCount() <= 0)

  00000	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00004	7f 03		 jg	 SHORT $LN2@GetHeadPos

; 218  : 		return NULL;

  00006	33 c0		 xor	 eax, eax

; 220  : }

  00008	c3		 ret	 0
$LN2@GetHeadPos:

; 219  : 	return m_subGraphPacketList.GetHeadPosition();

  00009	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 220  : }

  0000c	c3		 ret	 0
?GetHeadPosition@CGraphCalculateData@@QAEPAU__POSITION@@XZ ENDP ; CGraphCalculateData::GetHeadPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?GetHeadPosition@CGraphCalculateData@@QBEPAU__POSITION@@XZ
_TEXT	SEGMENT
?GetHeadPosition@CGraphCalculateData@@QBEPAU__POSITION@@XZ PROC ; CGraphCalculateData::GetHeadPosition, COMDAT
; _this$ = ecx

; 210  : 	if(m_subGraphPacketList.GetCount() <= 0)

  00000	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00004	7f 03		 jg	 SHORT $LN2@GetHeadPos

; 211  : 		return NULL;

  00006	33 c0		 xor	 eax, eax

; 213  : }

  00008	c3		 ret	 0
$LN2@GetHeadPos:

; 212  : 	return m_subGraphPacketList.GetHeadPosition();

  00009	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 213  : }

  0000c	c3		 ret	 0
?GetHeadPosition@CGraphCalculateData@@QBEPAU__POSITION@@XZ ENDP ; CGraphCalculateData::GetHeadPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?GetCount@CGraphCalculateData@@QBEHXZ
_TEXT	SEGMENT
?GetCount@CGraphCalculateData@@QBEHXZ PROC		; CGraphCalculateData::GetCount, COMDAT
; _this$ = ecx

; 205  : 	return m_subGraphPacketList.GetCount();

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 206  : }

  00003	c3		 ret	 0
?GetCount@CGraphCalculateData@@QBEHXZ ENDP		; CGraphCalculateData::GetCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?GetSignalPacket@CGraphCalculateData@@QBEPAVCPacket@@XZ
_TEXT	SEGMENT
?GetSignalPacket@CGraphCalculateData@@QBEPAVCPacket@@XZ PROC ; CGraphCalculateData::GetSignalPacket, COMDAT
; _this$ = ecx

; 199  : 	return m_pSignalPacket;

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 200  : }

  00005	c3		 ret	 0
?GetSignalPacket@CGraphCalculateData@@QBEPAVCPacket@@XZ ENDP ; CGraphCalculateData::GetSignalPacket
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?GetSubGraphPacketList@CGraphCalculateData@@QAEPAV?$CList@PAVCSubGraphPacketList@@PAV1@@@XZ
_TEXT	SEGMENT
?GetSubGraphPacketList@CGraphCalculateData@@QAEPAV?$CList@PAVCSubGraphPacketList@@PAV1@@@XZ PROC ; CGraphCalculateData::GetSubGraphPacketList, COMDAT
; _this$ = ecx

; 194  : 	return &m_subGraphPacketList;

  00000	8b c1		 mov	 eax, ecx

; 195  : }

  00002	c3		 ret	 0
?GetSubGraphPacketList@CGraphCalculateData@@QAEPAV?$CList@PAVCSubGraphPacketList@@PAV1@@@XZ ENDP ; CGraphCalculateData::GetSubGraphPacketList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?GetSubGraphPacketList@CGraphCalculateData@@QBEABV?$CList@PAVCSubGraphPacketList@@PAV1@@@XZ
_TEXT	SEGMENT
?GetSubGraphPacketList@CGraphCalculateData@@QBEABV?$CList@PAVCSubGraphPacketList@@PAV1@@@XZ PROC ; CGraphCalculateData::GetSubGraphPacketList, COMDAT
; _this$ = ecx

; 189  : 	return m_subGraphPacketList;

  00000	8b c1		 mov	 eax, ecx

; 190  : }

  00002	c3		 ret	 0
?GetSubGraphPacketList@CGraphCalculateData@@QBEABV?$CList@PAVCSubGraphPacketList@@PAV1@@@XZ ENDP ; CGraphCalculateData::GetSubGraphPacketList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?AddTail@CGraphCalculateData@@QAEXPAVCSubGraphPacketList@@@Z
_TEXT	SEGMENT
_pSubGraphPacketList$ = 8				; size = 4
?AddTail@CGraphCalculateData@@QAEXPAVCSubGraphPacketList@@@Z PROC ; CGraphCalculateData::AddTail, COMDAT
; _this$ = ecx

; 181  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 	if(pSubGraphPacketList != NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _pSubGraphPacketList$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN2@AddTail

; 183  : 		m_subGraphPacketList.AddTail(pSubGraphPacketList);

  0000a	89 45 08	 mov	 DWORD PTR _pSubGraphPacketList$[ebp], eax

; 184  : }

  0000d	5d		 pop	 ebp

; 183  : 		m_subGraphPacketList.AddTail(pSubGraphPacketList);

  0000e	e9 00 00 00 00	 jmp	 ?AddTail@?$CList@PAVCSubGraphPacketList@@PAV1@@@QAEPAU__POSITION@@PAVCSubGraphPacketList@@@Z ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::AddTail
$LN2@AddTail:

; 184  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?AddTail@CGraphCalculateData@@QAEXPAVCSubGraphPacketList@@@Z ENDP ; CGraphCalculateData::AddTail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?RemoveAll@CGraphCalculateData@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@CGraphCalculateData@@QAEXXZ PROC		; CGraphCalculateData::RemoveAll, COMDAT
; _this$ = ecx

; 176  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0000d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00014	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0001b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00022	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00027	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0002e	5e		 pop	 esi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp

; 178  : }

  0002f	c3		 ret	 0
?RemoveAll@CGraphCalculateData@@QAEXXZ ENDP		; CGraphCalculateData::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ??0CGraphCalculateData@@QAE@AAPAVCPacket@@AAPAVCIndicator@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pSignalPacket$ = 8					; size = 4
_p_pIndicator$ = 12					; size = 4
??0CGraphCalculateData@@QAE@AAPAVCPacket@@AAPAVCIndicator@@@Z PROC ; CGraphCalculateData::CGraphCalculateData, COMDAT
; _this$ = ecx

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 169  : 	m_pSignalPacket(pSignalPacket),

  00004	8b 45 08	 mov	 eax, DWORD PTR _pSignalPacket$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 851  : {

  00007	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CList@PAVCSubGraphPacketList@@PAV1@@@6B@

; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;

  0000d	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00014	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0001b	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00022	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 856  : 	m_pBlocks = NULL;

  00029	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 857  : 	m_nBlockSize = nBlockSize;

  00030	c7 41 18 0a 00
	00 00		 mov	 DWORD PTR [ecx+24], 10	; 0000000aH
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp

; 169  : 	m_pSignalPacket(pSignalPacket),

  00037	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 170  : 	m_pIndicator( p_pIndicator)	// (2006/9/8 - Seung-Won, Bae) the Temp Variables for Calculating 

  0003a	8b 45 0c	 mov	 eax, DWORD PTR _p_pIndicator$[ebp]
  0003d	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 172  : }

  00040	8b c1		 mov	 eax, ecx
  00042	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??0CGraphCalculateData@@QAE@AAPAVCPacket@@AAPAVCIndicator@@@Z ENDP ; CGraphCalculateData::CGraphCalculateData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ??4CGraphCalculateData@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
??4CGraphCalculateData@@QAEAAV0@ABV0@@Z PROC		; CGraphCalculateData::operator=, COMDAT
; _this$ = ecx

; 158  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 159  : 	if(this == &data)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _data$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	3b fb		 cmp	 edi, ebx
  0000c	74 5d		 je	 SHORT $LN26@operator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  0000e	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00011	56		 push	 esi

; 820  : 		return pNode->data; }
; 821  : template<class TYPE, class ARG_TYPE>
; 822  : AFX_INLINE TYPE& CList<TYPE, ARG_TYPE>::GetPrev(POSITION& rPosition) // return *Position--
; 823  : 	{ CNode* pNode = (CNode*) rPosition;
; 824  : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 825  : 		rPosition = (POSITION) pNode->pPrev;
; 826  : 		return pNode->data; }
; 827  : template<class TYPE, class ARG_TYPE>
; 828  : AFX_INLINE const TYPE& CList<TYPE, ARG_TYPE>::GetPrev(POSITION& rPosition) const // return *Position--
; 829  : 	{ CNode* pNode = (CNode*) rPosition;
; 830  : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 831  : 		rPosition = (POSITION) pNode->pPrev;
; 832  : 		return pNode->data; }
; 833  : template<class TYPE, class ARG_TYPE>
; 834  : AFX_INLINE TYPE& CList<TYPE, ARG_TYPE>::GetAt(POSITION position)
; 835  : 	{ CNode* pNode = (CNode*) position;
; 836  : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 837  : 		return pNode->data; }
; 838  : template<class TYPE, class ARG_TYPE>
; 839  : AFX_INLINE const TYPE& CList<TYPE, ARG_TYPE>::GetAt(POSITION position) const
; 840  : 	{ CNode* pNode = (CNode*) position;
; 841  : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 842  : 		return pNode->data; }
; 843  : template<class TYPE, class ARG_TYPE>
; 844  : AFX_INLINE void CList<TYPE, ARG_TYPE>::SetAt(POSITION pos, ARG_TYPE newElement)
; 845  : 	{ CNode* pNode = (CNode*) pos;
; 846  : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 847  : 		pNode->data = newElement; }
; 848  : 
; 849  : template<class TYPE, class ARG_TYPE>
; 850  : CList<TYPE, ARG_TYPE>::CList(INT_PTR nBlockSize)
; 851  : {
; 852  : 	ASSERT(nBlockSize > 0);
; 853  : 
; 854  : 	m_nCount = 0;
; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 856  : 	m_pBlocks = NULL;
; 857  : 	m_nBlockSize = nBlockSize;
; 858  : }
; 859  : 
; 860  : template<class TYPE, class ARG_TYPE>
; 861  : void CList<TYPE, ARG_TYPE>::RemoveAll()
; 862  : {
; 863  : 	ASSERT_VALID(this);
; 864  : 
; 865  : 	// destroy elements
; 866  : 	CNode* pNode;
; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)
; 868  : 		pNode->data.~TYPE();
; 869  : 
; 870  : 	m_nCount = 0;

  00012	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00019	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00020	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00027	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 872  : 	m_pBlocks->FreeDataChain();

  0002e	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00033	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp

; 284  : 	POSITION pos = subGraphPacketList.GetHeadPosition();

  0003a	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]

; 285  : 	while(pos != NULL){

  0003d	85 f6		 test	 esi, esi
  0003f	74 15		 je	 SHORT $LN6@operator
$LL5@operator:

; 286  : 		CSubGraphPacketList* pSubGraphPacketList = subGraphPacketList.GetNext(pos);

  00041	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 819  : 		rPosition = (POSITION) pNode->pNext;

  00044	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp

; 287  : 		if(pSubGraphPacketList != NULL)

  00046	85 c0		 test	 eax, eax
  00048	74 08		 je	 SHORT $LN7@operator

; 288  : 			m_subGraphPacketList.AddTail(pSubGraphPacketList);

  0004a	50		 push	 eax
  0004b	8b cf		 mov	 ecx, edi
  0004d	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCSubGraphPacketList@@PAV1@@@QAEPAU__POSITION@@PAVCSubGraphPacketList@@@Z ; CList<CSubGraphPacketList *,CSubGraphPacketList *>::AddTail
$LN7@operator:

; 285  : 	while(pos != NULL){

  00052	85 f6		 test	 esi, esi
  00054	75 eb		 jne	 SHORT $LL5@operator
$LN6@operator:

; 199  : 	return m_pSignalPacket;

  00056	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]

; 160  : 		return *this;
; 161  : 
; 162  : 	SetData(data.GetSubGraphPacketList());
; 163  : 	m_pSignalPacket		= data.GetSignalPacket();

  00059	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]

; 164  : 	m_pIndicator		= data.GetIndicator();	// (2006/9/8 - Seung-Won, Bae) the Temp Variables for Calculating 
; 165  : 	return *this;

  0005c	5e		 pop	 esi
  0005d	8b 00		 mov	 eax, DWORD PTR [eax]
  0005f	89 01		 mov	 DWORD PTR [ecx], eax
  00061	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  00064	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  00067	8b 00		 mov	 eax, DWORD PTR [eax]
  00069	89 01		 mov	 DWORD PTR [ecx], eax
$LN26@operator:

; 166  : }

  0006b	8b c7		 mov	 eax, edi
  0006d	5f		 pop	 edi
  0006e	5b		 pop	 ebx
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
??4CGraphCalculateData@@QAEAAV0@ABV0@@Z ENDP		; CGraphCalculateData::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?AddTail2@CSubGraphPacketList@@QAEXPAVCPacket@@@Z
_TEXT	SEGMENT
_pPacket$ = 8						; size = 4
?AddTail2@CSubGraphPacketList@@QAEXPAVCPacket@@@Z PROC	; CSubGraphPacketList::AddTail2, COMDAT
; _this$ = ecx

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 150  : 	if(pPacket != NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _pPacket$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN2@AddTail2

; 151  : 		m_packetList.AddTail(pPacket);

  0000a	89 45 08	 mov	 DWORD PTR _pPacket$[ebp], eax

; 152  : }

  0000d	5d		 pop	 ebp

; 151  : 		m_packetList.AddTail(pPacket);

  0000e	e9 00 00 00 00	 jmp	 ?AddTail@?$CList@PAVCPacket@@PAV1@@@QAEPAU__POSITION@@PAVCPacket@@@Z ; CList<CPacket *,CPacket *>::AddTail
$LN2@AddTail2:

; 152  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?AddTail2@CSubGraphPacketList@@QAEXPAVCPacket@@@Z ENDP	; CSubGraphPacketList::AddTail2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?SetData@CSubGraphPacketList@@AAEXABV?$CList@PAVCPacket@@PAV1@@@@Z
_TEXT	SEGMENT
_packetList$ = 8					; size = 4
?SetData@CSubGraphPacketList@@AAEXABV?$CList@PAVCPacket@@PAV1@@@@Z PROC ; CSubGraphPacketList::SetData, COMDAT
; _this$ = ecx

; 136  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00007	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  0000a	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00011	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00018	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  0001f	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00026	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp

; 138  : 	POSITION pos = packetList.GetHeadPosition();

  0002b	8b 75 08	 mov	 esi, DWORD PTR _packetList$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 873  : 	m_pBlocks = NULL;

  0002e	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp

; 138  : 	POSITION pos = packetList.GetHeadPosition();

  00035	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 139  : 	while(pos != NULL){

  00038	85 f6		 test	 esi, esi
  0003a	74 19		 je	 SHORT $LN3@SetData
  0003c	0f 1f 40 00	 npad	 4
$LL2@SetData:

; 140  : 		CPacket* pPacket = packetList.GetNext(pos);

  00040	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 819  : 		rPosition = (POSITION) pNode->pNext;

  00043	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp

; 141  : 		if(pPacket != NULL)

  00045	85 c0		 test	 eax, eax
  00047	74 08		 je	 SHORT $LN4@SetData

; 142  : 			m_packetList.AddTail(pPacket);

  00049	50		 push	 eax
  0004a	8b cf		 mov	 ecx, edi
  0004c	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCPacket@@PAV1@@@QAEPAU__POSITION@@PAVCPacket@@@Z ; CList<CPacket *,CPacket *>::AddTail
$LN4@SetData:

; 139  : 	while(pos != NULL){

  00051	85 f6		 test	 esi, esi
  00053	75 eb		 jne	 SHORT $LL2@SetData
$LN3@SetData:
  00055	5f		 pop	 edi

; 143  : 	}
; 144  : }

  00056	5e		 pop	 esi
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?SetData@CSubGraphPacketList@@AAEXABV?$CList@PAVCPacket@@PAV1@@@@Z ENDP ; CSubGraphPacketList::SetData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?NewNode@?$CList@PAVCPacket@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z
_TEXT	SEGMENT
_pPrev$ = 8						; size = 4
_pNext$ = 12						; size = 4
?NewNode@?$CList@PAVCPacket@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z PROC ; CList<CPacket *,CPacket *>::NewNode, COMDAT
; _this$ = ecx

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 902  : 	if (m_pNodeFree == NULL)

  00006	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0000a	75 34		 jne	 SHORT $LN7@NewNode

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  0000c	6a 0c		 push	 12			; 0000000cH
  0000e	ff 76 18	 push	 DWORD PTR [esi+24]
  00011	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001a	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0001d	83 c0 08	 add	 eax, 8
  00020	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  00023	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00026	83 c0 f4	 add	 eax, -12		; fffffff4H

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00029	83 c2 ff	 add	 edx, -1
  0002c	78 12		 js	 SHORT $LN7@NewNode
  0002e	66 90		 npad	 2
$LL4@NewNode:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	89 08		 mov	 DWORD PTR [eax], ecx

; 915  : 			m_pNodeFree = pNode;

  00035	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00038	83 e8 0c	 sub	 eax, 12			; 0000000cH
  0003b	83 ea 01	 sub	 edx, 1
  0003e	79 f0		 jns	 SHORT $LL4@NewNode
$LN7@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00040	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00043	85 c0		 test	 eax, eax
  00045	74 18		 je	 SHORT $LN17@NewNode

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00047	8b 08		 mov	 ecx, DWORD PTR [eax]
  00049	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 922  : 	pNode->pPrev = pPrev;

  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _pPrev$[ebp]
  0004f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 923  : 	pNode->pNext = pNext;

  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _pNext$[ebp]
  00055	89 08		 mov	 DWORD PTR [eax], ecx

; 924  : 	m_nCount++;

  00057	ff 46 0c	 inc	 DWORD PTR [esi+12]

; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow
; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;
; 930  : #pragma pop_macro("new")
; 931  : 	return pNode;

  0005a	5e		 pop	 esi

; 932  : }

  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
$LN17@NewNode:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  0005f	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN15@NewNode:
  00064	cc		 int	 3
?NewNode@?$CList@PAVCPacket@@PAV1@@@IAEPAUCNode@1@PAU21@0@Z ENDP ; CList<CPacket *,CPacket *>::NewNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?FindIndex@?$CList@PAVCPacket@@PAV1@@@QBEPAU__POSITION@@H@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?FindIndex@?$CList@PAVCPacket@@PAV1@@@QBEPAU__POSITION@@H@Z PROC ; CList<CPacket *,CPacket *>::FindIndex, COMDAT
; _this$ = ecx

; 1130 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1131 : 	ASSERT_VALID(this);
; 1132 : 
; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00003	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00006	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00009	7d 14		 jge	 SHORT $LN5@FindIndex
  0000b	85 d2		 test	 edx, edx
  0000d	78 10		 js	 SHORT $LN5@FindIndex

; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0000f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1137 : 	while (nIndex--)

  00012	74 0d		 je	 SHORT $LN1@FindIndex
$LL2@FindIndex:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	83 ea 01	 sub	 edx, 1
  00019	75 f9		 jne	 SHORT $LL2@FindIndex

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;
; 1143 : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
$LN5@FindIndex:

; 1134 : 		return NULL;  // went too far

  0001f	33 c0		 xor	 eax, eax
$LN1@FindIndex:

; 1141 : 	}
; 1142 : 	return (POSITION) pNode;
; 1143 : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?FindIndex@?$CList@PAVCPacket@@PAV1@@@QBEPAU__POSITION@@H@Z ENDP ; CList<CPacket *,CPacket *>::FindIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAll@?$CList@PAVCPacket@@PAV1@@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@?$CList@PAVCPacket@@PAV1@@@QAEXXZ PROC	; CList<CPacket *,CPacket *>::RemoveAll, COMDAT
; _this$ = ecx

; 862  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 863  : 	ASSERT_VALID(this);
; 864  : 
; 865  : 	// destroy elements
; 866  : 	CNode* pNode;
; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)
; 868  : 		pNode->data.~TYPE();
; 869  : 
; 870  : 	m_nCount = 0;
; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;
; 872  : 	m_pBlocks->FreeDataChain();

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0000d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00014	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0001b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00022	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00027	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0002e	5e		 pop	 esi

; 874  : }

  0002f	c3		 ret	 0
?RemoveAll@?$CList@PAVCPacket@@PAV1@@@QAEXXZ ENDP	; CList<CPacket *,CPacket *>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
;	COMDAT ?AddTail@?$CList@PAVCPacket@@PAV1@@@QAEPAU__POSITION@@PAVCPacket@@@Z
_TEXT	SEGMENT
_newElement$ = 8					; size = 4
?AddTail@?$CList@PAVCPacket@@PAV1@@@QAEPAU__POSITION@@PAVCPacket@@@Z PROC ; CList<CPacket *,CPacket *>::AddTail, COMDAT
; _this$ = ecx

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 902  : 	if (m_pNodeFree == NULL)

  00007	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0

; 966  : 	ASSERT_VALID(this);
; 967  : 
; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  0000b	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 902  : 	if (m_pNodeFree == NULL)

  0000e	75 32		 jne	 SHORT $LN11@AddTail

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  00010	6a 0c		 push	 12			; 0000000cH
  00012	ff 76 18	 push	 DWORD PTR [esi+24]
  00015	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();
; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  0001e	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00021	83 c0 08	 add	 eax, 8
  00024	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  00027	83 c2 ff	 add	 edx, -1
  0002a	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  0002d	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  00030	78 10		 js	 SHORT $LN11@AddTail
$LL8@AddTail:

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00032	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00035	89 01		 mov	 DWORD PTR [ecx], eax

; 915  : 			m_pNodeFree = pNode;

  00037	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0003a	83 e9 0c	 sub	 ecx, 12			; 0000000cH
  0003d	83 ea 01	 sub	 edx, 1
  00040	79 f0		 jns	 SHORT $LL8@AddTail
$LN11@AddTail:

; 916  : 		}
; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00042	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00045	85 c9		 test	 ecx, ecx
  00047	74 39		 je	 SHORT $LN22@AddTail

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;
; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  00049	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004b	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 969  : 	pNewNode->data = newElement;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]

; 922  : 	pNode->pPrev = pPrev;

  00051	89 79 04	 mov	 DWORD PTR [ecx+4], edi

; 923  : 	pNode->pNext = pNext;

  00054	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 924  : 	m_nCount++;

  0005a	ff 46 0c	 inc	 DWORD PTR [esi+12]

; 969  : 	pNewNode->data = newElement;

  0005d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 970  : 	if (m_pNodeTail != NULL)

  00060	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00063	85 c0		 test	 eax, eax
  00065	74 0d		 je	 SHORT $LN2@AddTail

; 971  : 		m_pNodeTail->pNext = pNewNode;

  00067	89 08		 mov	 DWORD PTR [eax], ecx

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00069	8b c1		 mov	 eax, ecx
  0006b	5f		 pop	 edi
  0006c	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0006f	5e		 pop	 esi

; 976  : }

  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
$LN2@AddTail:

; 972  : 	else
; 973  : 		m_pNodeHead = pNewNode;
; 974  : 	m_pNodeTail = pNewNode;
; 975  : 	return (POSITION) pNewNode;

  00074	5f		 pop	 edi
  00075	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00078	8b c1		 mov	 eax, ecx
  0007a	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0007d	5e		 pop	 esi

; 976  : }

  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
$LN22@AddTail:

; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00082	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN20@AddTail:
  00087	cc		 int	 3
?AddTail@?$CList@PAVCPacket@@PAV1@@@QAEPAU__POSITION@@PAVCPacket@@@Z ENDP ; CList<CPacket *,CPacket *>::AddTail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?IsExistenceSamePacket@CSubGraphPacketList@@QBE_NPAVCPacket@@@Z
_TEXT	SEGMENT
_pPacket$ = 8						; size = 4
?IsExistenceSamePacket@CSubGraphPacketList@@QBE_NPAVCPacket@@@Z PROC ; CSubGraphPacketList::IsExistenceSamePacket, COMDAT
; _this$ = ecx

; 116  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 117  : 	if(pPacket == NULL)

  00003	8b 55 08	 mov	 edx, DWORD PTR _pPacket$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 14		 je	 SHORT $LN3@IsExistenc

; 118  : 		return false;
; 119  : 
; 120  : 	POSITION pos = m_packetList.GetHeadPosition();

  0000a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 121  : 	while(pos != NULL){

  0000d	85 c9		 test	 ecx, ecx
  0000f	74 0d		 je	 SHORT $LN3@IsExistenc
$LL2@IsExistenc:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 817  : 	{ CNode* pNode = (CNode*) rPosition;

  00011	8b c1		 mov	 eax, ecx

; 818  : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 819  : 		rPosition = (POSITION) pNode->pNext;

  00013	8b 09		 mov	 ecx, DWORD PTR [ecx]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp

; 123  : 		if(pPacket == pTemp)

  00015	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00018	74 0a		 je	 SHORT $LN10@IsExistenc

; 121  : 	while(pos != NULL){

  0001a	85 c9		 test	 ecx, ecx
  0001c	75 f3		 jne	 SHORT $LL2@IsExistenc
$LN3@IsExistenc:

; 125  : 	}
; 126  : 	return false;

  0001e	32 c0		 xor	 al, al

; 127  : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN10@IsExistenc:

; 124  : 			return true;

  00024	b0 01		 mov	 al, 1

; 127  : }

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?IsExistenceSamePacket@CSubGraphPacketList@@QBE_NPAVCPacket@@@Z ENDP ; CSubGraphPacketList::IsExistenceSamePacket
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?GetSubGraphPacketList@CSubGraphPacketList@@QBEABV?$CList@PAVCPacket@@PAV1@@@XZ
_TEXT	SEGMENT
?GetSubGraphPacketList@CSubGraphPacketList@@QBEABV?$CList@PAVCPacket@@PAV1@@@XZ PROC ; CSubGraphPacketList::GetSubGraphPacketList, COMDAT
; _this$ = ecx

; 131  : 	return m_packetList;

  00000	8b c1		 mov	 eax, ecx

; 132  : }

  00002	c3		 ret	 0
?GetSubGraphPacketList@CSubGraphPacketList@@QBEABV?$CList@PAVCPacket@@PAV1@@@XZ ENDP ; CSubGraphPacketList::GetSubGraphPacketList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?GetNext@CSubGraphPacketList@@QAEPAVCPacket@@AAPAU__POSITION@@@Z
_TEXT	SEGMENT
_pos$ = 8						; size = 4
?GetNext@CSubGraphPacketList@@QAEPAVCPacket@@AAPAU__POSITION@@@Z PROC ; CSubGraphPacketList::GetNext, COMDAT
; _this$ = ecx

; 107  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 108  : 	if(pos == NULL)

  00003	8b 55 08	 mov	 edx, DWORD PTR _pos$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	85 c0		 test	 eax, eax
  0000a	75 04		 jne	 SHORT $LN2@GetNext

; 111  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
$LN2@GetNext:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	89 0a		 mov	 DWORD PTR [edx], ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp

; 110  : 	return m_packetList.GetNext(pos);

  00014	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 111  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?GetNext@CSubGraphPacketList@@QAEPAVCPacket@@AAPAU__POSITION@@@Z ENDP ; CSubGraphPacketList::GetNext
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?GetNext@CSubGraphPacketList@@QBEPAVCPacket@@AAPAU__POSITION@@@Z
_TEXT	SEGMENT
_pos$ = 8						; size = 4
?GetNext@CSubGraphPacketList@@QBEPAVCPacket@@AAPAU__POSITION@@@Z PROC ; CSubGraphPacketList::GetNext, COMDAT
; _this$ = ecx

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 101  : 	if(pos == NULL)

  00003	8b 55 08	 mov	 edx, DWORD PTR _pos$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	85 c0		 test	 eax, eax
  0000a	75 04		 jne	 SHORT $LN2@GetNext

; 104  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
$LN2@GetNext:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 819  : 		rPosition = (POSITION) pNode->pNext;

  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	89 0a		 mov	 DWORD PTR [edx], ecx
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp

; 103  : 	return m_packetList.GetNext(pos);

  00014	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 104  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?GetNext@CSubGraphPacketList@@QBEPAVCPacket@@AAPAU__POSITION@@@Z ENDP ; CSubGraphPacketList::GetNext
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?GetPacket@CSubGraphPacketList@@QAEPAVCPacket@@H@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?GetPacket@CSubGraphPacketList@@QAEPAVCPacket@@H@Z PROC	; CSubGraphPacketList::GetPacket, COMDAT
; _this$ = ecx

; 92   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 93   : 	POSITION pos = m_packetList.FindIndex(nIndex);

  00003	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 1133 : 	if (nIndex >= m_nCount || nIndex < 0)

  00006	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00009	7d 1b		 jge	 SHORT $LN15@GetPacket
  0000b	85 d2		 test	 edx, edx
  0000d	78 17		 js	 SHORT $LN15@GetPacket

; 1134 : 		return NULL;  // went too far
; 1135 : 
; 1136 : 	CNode* pNode = m_pNodeHead;

  0000f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1137 : 	while (nIndex--)

  00012	74 07		 je	 SHORT $LN11@GetPacket
$LL5@GetPacket:

; 1138 : 	{
; 1139 : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));
; 1140 : 		pNode = pNode->pNext;

  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	83 ea 01	 sub	 edx, 1
  00019	75 f9		 jne	 SHORT $LL5@GetPacket
$LN11@GetPacket:
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp

; 94   : 	if(pos == NULL)

  0001b	85 c0		 test	 eax, eax
  0001d	74 07		 je	 SHORT $LN15@GetPacket

; 96   : 	return m_packetList.GetAt(pos);

  0001f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 97   : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN15@GetPacket:

; 95   : 		return NULL;

  00026	33 c0		 xor	 eax, eax

; 97   : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?GetPacket@CSubGraphPacketList@@QAEPAVCPacket@@H@Z ENDP	; CSubGraphPacketList::GetPacket
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?GetTailPacket@CSubGraphPacketList@@QAEPAVCPacket@@XZ
_TEXT	SEGMENT
?GetTailPacket@CSubGraphPacketList@@QAEPAVCPacket@@XZ PROC ; CSubGraphPacketList::GetTailPacket, COMDAT
; _this$ = ecx

; 86   : 	if(m_packetList.GetCount() <= 0)

  00000	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00004	7f 03		 jg	 SHORT $LN2@GetTailPac

; 87   : 		return NULL;

  00006	33 c0		 xor	 eax, eax

; 89   : }

  00008	c3		 ret	 0
$LN2@GetTailPac:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 797  : 	{ ENSURE(m_pNodeTail != NULL);

  00009	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000c	85 c0		 test	 eax, eax
  0000e	0f 84 00 00 00
	00		 je	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp

; 89   : }

  00014	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00017	c3		 ret	 0
?GetTailPacket@CSubGraphPacketList@@QAEPAVCPacket@@XZ ENDP ; CSubGraphPacketList::GetTailPacket
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?GetTailPacket@CSubGraphPacketList@@QBEPAVCPacket@@XZ
_TEXT	SEGMENT
?GetTailPacket@CSubGraphPacketList@@QBEPAVCPacket@@XZ PROC ; CSubGraphPacketList::GetTailPacket, COMDAT
; _this$ = ecx

; 79   : 	if(m_packetList.GetCount() <= 0)

  00000	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00004	7f 03		 jg	 SHORT $LN2@GetTailPac

; 80   : 		return NULL;

  00006	33 c0		 xor	 eax, eax

; 82   : }

  00008	c3		 ret	 0
$LN2@GetTailPac:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 801  : 	{ ENSURE(m_pNodeTail != NULL);

  00009	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000c	85 c0		 test	 eax, eax
  0000e	0f 84 00 00 00
	00		 je	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp

; 82   : }

  00014	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00017	c3		 ret	 0
?GetTailPacket@CSubGraphPacketList@@QBEPAVCPacket@@XZ ENDP ; CSubGraphPacketList::GetTailPacket
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?GetHeadPacket@CSubGraphPacketList@@QAEPAVCPacket@@XZ
_TEXT	SEGMENT
?GetHeadPacket@CSubGraphPacketList@@QAEPAVCPacket@@XZ PROC ; CSubGraphPacketList::GetHeadPacket, COMDAT
; _this$ = ecx

; 72   : 	if(m_packetList.GetCount() <= 0)

  00000	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00004	7f 03		 jg	 SHORT $LN2@GetHeadPac

; 73   : 		return NULL;

  00006	33 c0		 xor	 eax, eax

; 75   : }

  00008	c3		 ret	 0
$LN2@GetHeadPac:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 789  : 	{ ENSURE(m_pNodeHead != NULL);

  00009	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000c	85 c0		 test	 eax, eax
  0000e	0f 84 00 00 00
	00		 je	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp

; 75   : }

  00014	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00017	c3		 ret	 0
?GetHeadPacket@CSubGraphPacketList@@QAEPAVCPacket@@XZ ENDP ; CSubGraphPacketList::GetHeadPacket
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?GetHeadPacket@CSubGraphPacketList@@QBEPAVCPacket@@XZ
_TEXT	SEGMENT
?GetHeadPacket@CSubGraphPacketList@@QBEPAVCPacket@@XZ PROC ; CSubGraphPacketList::GetHeadPacket, COMDAT
; _this$ = ecx

; 65   : 	if(m_packetList.GetCount() <= 0)

  00000	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00004	7f 03		 jg	 SHORT $LN2@GetHeadPac

; 66   : 		return NULL;

  00006	33 c0		 xor	 eax, eax

; 68   : }

  00008	c3		 ret	 0
$LN2@GetHeadPac:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 793  : 	{ ENSURE(m_pNodeHead != NULL);

  00009	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000c	85 c0		 test	 eax, eax
  0000e	0f 84 00 00 00
	00		 je	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp

; 68   : }

  00014	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00017	c3		 ret	 0
?GetHeadPacket@CSubGraphPacketList@@QBEPAVCPacket@@XZ ENDP ; CSubGraphPacketList::GetHeadPacket
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?GetTailPosition@CSubGraphPacketList@@QAEPAU__POSITION@@XZ
_TEXT	SEGMENT
?GetTailPosition@CSubGraphPacketList@@QAEPAU__POSITION@@XZ PROC ; CSubGraphPacketList::GetTailPosition, COMDAT
; _this$ = ecx

; 57   : 	if(m_packetList.GetCount() <= 0)

  00000	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00004	7f 03		 jg	 SHORT $LN2@GetTailPos

; 58   : 		return NULL;

  00006	33 c0		 xor	 eax, eax

; 60   : }

  00008	c3		 ret	 0
$LN2@GetTailPos:

; 59   : 	return m_packetList.GetTailPosition();

  00009	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 60   : }

  0000c	c3		 ret	 0
?GetTailPosition@CSubGraphPacketList@@QAEPAU__POSITION@@XZ ENDP ; CSubGraphPacketList::GetTailPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?GetTailPosition@CSubGraphPacketList@@QBEPAU__POSITION@@XZ
_TEXT	SEGMENT
?GetTailPosition@CSubGraphPacketList@@QBEPAU__POSITION@@XZ PROC ; CSubGraphPacketList::GetTailPosition, COMDAT
; _this$ = ecx

; 50   : 	if(m_packetList.GetCount() <= 0)

  00000	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00004	7f 03		 jg	 SHORT $LN2@GetTailPos

; 51   : 		return NULL;

  00006	33 c0		 xor	 eax, eax

; 53   : }

  00008	c3		 ret	 0
$LN2@GetTailPos:

; 52   : 	return m_packetList.GetTailPosition();

  00009	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 53   : }

  0000c	c3		 ret	 0
?GetTailPosition@CSubGraphPacketList@@QBEPAU__POSITION@@XZ ENDP ; CSubGraphPacketList::GetTailPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?GetHeadPosition@CSubGraphPacketList@@QAEPAU__POSITION@@XZ
_TEXT	SEGMENT
?GetHeadPosition@CSubGraphPacketList@@QAEPAU__POSITION@@XZ PROC ; CSubGraphPacketList::GetHeadPosition, COMDAT
; _this$ = ecx

; 43   : 	if(m_packetList.GetCount() <= 0)

  00000	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00004	7f 03		 jg	 SHORT $LN2@GetHeadPos

; 44   : 		return NULL;

  00006	33 c0		 xor	 eax, eax

; 46   : }

  00008	c3		 ret	 0
$LN2@GetHeadPos:

; 45   : 	return m_packetList.GetHeadPosition();

  00009	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 46   : }

  0000c	c3		 ret	 0
?GetHeadPosition@CSubGraphPacketList@@QAEPAU__POSITION@@XZ ENDP ; CSubGraphPacketList::GetHeadPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?GetHeadPosition@CSubGraphPacketList@@QBEPAU__POSITION@@XZ
_TEXT	SEGMENT
?GetHeadPosition@CSubGraphPacketList@@QBEPAU__POSITION@@XZ PROC ; CSubGraphPacketList::GetHeadPosition, COMDAT
; _this$ = ecx

; 36   : 	if(m_packetList.GetCount() <= 0)

  00000	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00004	7f 03		 jg	 SHORT $LN2@GetHeadPos

; 37   : 		return NULL;

  00006	33 c0		 xor	 eax, eax

; 39   : }

  00008	c3		 ret	 0
$LN2@GetHeadPos:

; 38   : 	return m_packetList.GetHeadPosition();

  00009	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 39   : }

  0000c	c3		 ret	 0
?GetHeadPosition@CSubGraphPacketList@@QBEPAU__POSITION@@XZ ENDP ; CSubGraphPacketList::GetHeadPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?GetCount@CSubGraphPacketList@@QBEHXZ
_TEXT	SEGMENT
?GetCount@CSubGraphPacketList@@QBEHXZ PROC		; CSubGraphPacketList::GetCount, COMDAT
; _this$ = ecx

; 31   : 	return m_packetList.GetCount();

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 32   : }

  00003	c3		 ret	 0
?GetCount@CSubGraphPacketList@@QBEHXZ ENDP		; CSubGraphPacketList::GetCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?RemoveAll@CSubGraphPacketList@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@CSubGraphPacketList@@QAEXXZ PROC		; CSubGraphPacketList::RemoveAll, COMDAT
; _this$ = ecx

; 24   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0000d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00014	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0001b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00022	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00027	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0002e	5e		 pop	 esi
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp

; 26   : }

  0002f	c3		 ret	 0
?RemoveAll@CSubGraphPacketList@@QAEXXZ ENDP		; CSubGraphPacketList::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ??4CSubGraphPacketList@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
??4CSubGraphPacketList@@QAEAAV0@ABV0@@Z PROC		; CSubGraphPacketList::operator=, COMDAT
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 15   : 	if(this == &data)

  00004	8b 75 08	 mov	 esi, DWORD PTR _data$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	3b fe		 cmp	 edi, esi
  0000c	74 47		 je	 SHORT $LN25@operator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 872  : 	m_pBlocks->FreeDataChain();

  0000e	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00011	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00018	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  0001f	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00026	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0002d	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  00032	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp

; 138  : 	POSITION pos = packetList.GetHeadPosition();

  00039	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 139  : 	while(pos != NULL){

  0003c	85 f6		 test	 esi, esi
  0003e	74 15		 je	 SHORT $LN25@operator
$LL5@operator:

; 140  : 		CPacket* pPacket = packetList.GetNext(pos);

  00040	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afxtempl.h

; 819  : 		rPosition = (POSITION) pNode->pNext;

  00043	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp

; 141  : 		if(pPacket != NULL)

  00045	85 c0		 test	 eax, eax
  00047	74 08		 je	 SHORT $LN7@operator

; 142  : 			m_packetList.AddTail(pPacket);

  00049	50		 push	 eax
  0004a	8b cf		 mov	 ecx, edi
  0004c	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAVCPacket@@PAV1@@@QAEPAU__POSITION@@PAVCPacket@@@Z ; CList<CPacket *,CPacket *>::AddTail
$LN7@operator:

; 139  : 	while(pos != NULL){

  00051	85 f6		 test	 esi, esi
  00053	75 eb		 jne	 SHORT $LL5@operator
$LN25@operator:

; 16   : 		return *this;
; 17   : 
; 18   : 	SetData( data.GetSubGraphPacketList());
; 19   : 	return *this;
; 20   : }

  00055	8b c7		 mov	 eax, edi
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
??4CSubGraphPacketList@@QAEAAV0@ABV0@@Z ENDP		; CSubGraphPacketList::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z PROC		; CObject::Dump, COMDAT
; _this$ = ecx

; 122  : 	{ /* no dumping in release builds */ }

  00000	c2 04 00	 ret	 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z ENDP		; CObject::Dump
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT
?AssertValid@CObject@@UBEXXZ PROC			; CObject::AssertValid, COMDAT
; _this$ = ecx

; 120  : 	{ /* no asserts in release builds */ }

  00000	c2 00 00	 ret	 0
?AssertValid@CObject@@UBEXXZ ENDP			; CObject::AssertValid
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z PROC		; CObject::Serialize, COMDAT
; _this$ = ecx

; 106  : 	{ /* CObject does not serialize anything by default */ }

  00000	c2 04 00	 ret	 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z ENDP		; CObject::Serialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\include\afx.inl
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT
??1CObject@@UAE@XZ PROC					; CObject::~CObject, COMDAT
; _this$ = ecx

; 104  : 	{ }

  00000	c2 00 00	 ret	 0
??1CObject@@UAE@XZ ENDP					; CObject::~CObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\git\src\IBK\IBK_DRFN\ProjSrc\SrcChartEx\ChartOCX\Include_Chart\PacketPointerList.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
