// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "DispOutput.h"

/////////////////////////////////////////////////////////////////////////////
// CDispOutput

//IMPLEMENT_DYNCREATE(CDispOutput, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CDispOutput properties


/////////////////////////////////////////////////////////////////////////////
// CDispTable properties
OLECHAR *CDispOutput::m_osInterfaceName[] = {
	// Variable
	L"GetBase",
	L"SetText",
	L"GetText",
	L"SetComment",
	L"SetData",
	L"SetSStr",
	L"GetSStr",
};

CDispOutput::CDispOutput()
{
	m_pdID = NULL;
	m_pdispatch = NULL;
}

CDispOutput::~CDispOutput()
{
	if( m_pdID)
	{
		delete m_pdID;
		m_pdID = NULL;
	}
}

long CDispOutput::GetCtrlBasePacket()
{
	return GetBase("PACKOUT");
}

void CDispOutput::InitInterfaceName(IDispatch *pDisp)
{
	int i, nCount = sizeof( m_osInterfaceName) / sizeof( OLECHAR *);
	m_pdID = new DISPID[ nCount];
	for( i = 0; i < nCount; i++)
		pDisp->GetIDsOfNames( IID_NULL, &m_osInterfaceName[ i], 1, LOCALE_USER_DEFAULT, m_pdID + i);
}

long CDispOutput::GetBase(LPCTSTR szKey)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_GetBase], DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szKey);
	return result;
}

CString CDispOutput::GetText()
{
	CString result;
	GetProperty(DISPID_TEXT, VT_BSTR, (void*)&result);
	return result;
}

void CDispOutput::SetText(LPCTSTR propVal)
{
	SetProperty(DISPID_TEXT, VT_BSTR, propVal);
}

BOOL CDispOutput::SetData(LPCTSTR szData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_SetData], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szData);
	return result;
}


/*void CDispOutput::SetText(LPCTSTR propVal)
{
	SetProperty(DISPID_TEXT, VT_BSTR, propVal);
}*/


void CDispOutput::SetComment(LPCTSTR propVal)
{
	SetProperty(m_pdID[IIx_SetComment], VT_BSTR, propVal);
}

CString CDispOutput::GetSStr()
{
	CString result;
	GetProperty(m_pdID[IIx_GetSStr], VT_BSTR, (void*)&result);
	return result;
}

void CDispOutput::SetSStr(LPCTSTR propVal)
{
	SetProperty(m_pdID[IIx_SetSStr], VT_BSTR, propVal);
}

/*BOOL CDispOutput::GetStyleComma()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}

void CDispOutput::SetStyleComma(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}

short CDispOutput::GetStylePlusSign()
{
	short result;
	GetProperty(0x2, VT_I2, (void*)&result);
	return result;
}

void CDispOutput::SetStylePlusSign(short propVal)
{
	SetProperty(0x2, VT_I2, propVal);
}

BOOL CDispOutput::GetStylePoint()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CDispOutput::SetStylePoint(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

short CDispOutput::GetStylePointLen()
{
	short result;
	GetProperty(0x4, VT_I2, (void*)&result);
	return result;
}

void CDispOutput::SetStylePointLen(short propVal)
{
	SetProperty(0x4, VT_I2, propVal);
}

BOOL CDispOutput::GetErrorShow()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void CDispOutput::SetErrorShow(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

OLE_COLOR CDispOutput::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CDispOutput::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

OLE_COLOR CDispOutput::GetForeColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_FORECOLOR, VT_I4, (void*)&result);
	return result;
}

void CDispOutput::SetForeColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_FORECOLOR, VT_I4, propVal);
}

short CDispOutput::GetStyleAlign()
{
	short result;
	GetProperty(0x6, VT_I2, (void*)&result);
	return result;
}

void CDispOutput::SetStyleAlign(short propVal)
{
	SetProperty(0x6, VT_I2, propVal);
}

short CDispOutput::GetStyleVAlign()
{
	short result;
	GetProperty(0x7, VT_I2, (void*)&result);
	return result;
}

void CDispOutput::SetStyleVAlign(short propVal)
{
	SetProperty(0x7, VT_I2, propVal);
}

short CDispOutput::GetLabelType()
{
	short result;
	GetProperty(0x8, VT_I2, (void*)&result);
	return result;
}

void CDispOutput::SetLabelType(short propVal)
{
	SetProperty(0x8, VT_I2, propVal);
}

short CDispOutput::GetStyleDate()
{
	short result;
	GetProperty(0x9, VT_I2, (void*)&result);
	return result;
}

void CDispOutput::SetStyleDate(short propVal)
{
	SetProperty(0x9, VT_I2, propVal);
}

short CDispOutput::GetStyleTime()
{
	short result;
	GetProperty(0xa, VT_I2, (void*)&result);
	return result;
}

void CDispOutput::SetStyleTime(short propVal)
{
	SetProperty(0xa, VT_I2, propVal);
}

short CDispOutput::GetBackColorID()
{
	short result;
	GetProperty(0xb, VT_I2, (void*)&result);
	return result;
}

void CDispOutput::SetBackColorID(short propVal)
{
	SetProperty(0xb, VT_I2, propVal);
}

short CDispOutput::GetForeColorID()
{
	short result;
	GetProperty(0xc, VT_I2, (void*)&result);
	return result;
}

void CDispOutput::SetForeColorID(short propVal)
{
	SetProperty(0xc, VT_I2, propVal);
}

CString CDispOutput::GetText()
{
	CString result;
	GetProperty(DISPID_TEXT, VT_BSTR, (void*)&result);
	return result;
}

void CDispOutput::SetText(LPCTSTR propVal)
{
	SetProperty(DISPID_TEXT, VT_BSTR, propVal);
}

short CDispOutput::GetAppearance()
{
	short result;
	GetProperty(DISPID_APPEARANCE, VT_I2, (void*)&result);
	return result;
}

void CDispOutput::SetAppearance(short propVal)
{
	SetProperty(DISPID_APPEARANCE, VT_I2, propVal);
}

short CDispOutput::GetBorderStyle()
{
	short result;
	GetProperty(DISPID_BORDERSTYLE, VT_I2, (void*)&result);
	return result;
}

void CDispOutput::SetBorderStyle(short propVal)
{
	SetProperty(DISPID_BORDERSTYLE, VT_I2, propVal);
}

short CDispOutput::GetEdgeStyle()
{
	short result;
	GetProperty(0xd, VT_I2, (void*)&result);
	return result;
}

void CDispOutput::SetEdgeStyle(short propVal)
{
	SetProperty(0xd, VT_I2, propVal);
}

short CDispOutput::GetAttribute()
{
	short result;
	GetProperty(0xe, VT_I2, (void*)&result);
	return result;
}

void CDispOutput::SetAttribute(short propVal)
{
	SetProperty(0xe, VT_I2, propVal);
}

short CDispOutput::GetMaxLength()
{
	short result;
	GetProperty(0xf, VT_I2, (void*)&result);
	return result;
}

void CDispOutput::SetMaxLength(short propVal)
{
	SetProperty(0xf, VT_I2, propVal);
}

short CDispOutput::GetUserInfo()
{
	short result;
	GetProperty(0x10, VT_I2, (void*)&result);
	return result;
}

void CDispOutput::SetUserInfo(short propVal)
{
	SetProperty(0x10, VT_I2, propVal);
}

BOOL CDispOutput::GetUseDefaultCharWidth()
{
	BOOL result;
	GetProperty(0x11, VT_BOOL, (void*)&result);
	return result;
}

void CDispOutput::SetUseDefaultCharWidth(BOOL propVal)
{
	SetProperty(0x11, VT_BOOL, propVal);
}

CString CDispOutput::GetKeyName()
{
	CString result;
	GetProperty(0x12, VT_BSTR, (void*)&result);
	return result;
}

void CDispOutput::SetKeyName(LPCTSTR propVal)
{
	SetProperty(0x12, VT_BSTR, propVal);
}

CString CDispOutput::GetDataName()
{
	CString result;
	GetProperty(0x2e, VT_BSTR, (void*)&result);
	return result;
}

void CDispOutput::SetDataName(LPCTSTR propVal)
{
	SetProperty(0x2e, VT_BSTR, propVal);
}

CString CDispOutput::GetFieldName()
{
	CString result;
	GetProperty(0x2f, VT_BSTR, (void*)&result);
	return result;
}

void CDispOutput::SetFieldName(LPCTSTR propVal)
{
	SetProperty(0x2f, VT_BSTR, propVal);
}

CString CDispOutput::GetKeyCtrlName()
{
	CString result;
	GetProperty(0x30, VT_BSTR, (void*)&result);
	return result;
}

void CDispOutput::SetKeyCtrlName(LPCTSTR propVal)
{
	SetProperty(0x30, VT_BSTR, propVal);
}

BOOL CDispOutput::GetUseRealData()
{
	BOOL result;
	GetProperty(0x13, VT_BOOL, (void*)&result);
	return result;
}

void CDispOutput::SetUseRealData(BOOL propVal)
{
	SetProperty(0x13, VT_BOOL, propVal);
}

CString CDispOutput::GetRelateNum()
{
	CString result;
	GetProperty(0x14, VT_BSTR, (void*)&result);
	return result;
}

void CDispOutput::SetRelateNum(LPCTSTR propVal)
{
	SetProperty(0x14, VT_BSTR, propVal);
}

long CDispOutput::GetBrightTickTime()
{
	long result;
	GetProperty(0x15, VT_I4, (void*)&result);
	return result;
}

void CDispOutput::SetBrightTickTime(long propVal)
{
	SetProperty(0x15, VT_I4, propVal);
}

BOOL CDispOutput::GetUseBrightBoard()
{
	BOOL result;
	GetProperty(0x16, VT_BOOL, (void*)&result);
	return result;
}

void CDispOutput::SetUseBrightBoard(BOOL propVal)
{
	SetProperty(0x16, VT_BOOL, propVal);
}

unsigned long CDispOutput::GetClrBrightItem()
{
	unsigned long result;
	GetProperty(0x17, VT_I4, (void*)&result);
	return result;
}

void CDispOutput::SetClrBrightItem(unsigned long propVal)
{
	SetProperty(0x17, VT_I4, propVal);
}

CString CDispOutput::GetRefControlName()
{
	CString result;
	GetProperty(0x18, VT_BSTR, (void*)&result);
	return result;
}

void CDispOutput::SetRefControlName(LPCTSTR propVal)
{
	SetProperty(0x18, VT_BSTR, propVal);
}

short CDispOutput::GetRuleGubun()
{
	short result;
	GetProperty(0x19, VT_I2, (void*)&result);
	return result;
}

void CDispOutput::SetRuleGubun(short propVal)
{
	SetProperty(0x19, VT_I2, propVal);
}

CString CDispOutput::GetSStr()
{
	CString result;
	GetProperty(0x1a, VT_BSTR, (void*)&result);
	return result;
}

void CDispOutput::SetSStr(LPCTSTR propVal)
{
	SetProperty(0x1a, VT_BSTR, propVal);
}

CString CDispOutput::GetServerTag()
{
	CString result;
	GetProperty(0x1b, VT_BSTR, (void*)&result);
	return result;
}

void CDispOutput::SetServerTag(LPCTSTR propVal)
{
	SetProperty(0x1b, VT_BSTR, propVal);
}

BOOL CDispOutput::GetHide()
{
	BOOL result;
	GetProperty(0x1c, VT_BOOL, (void*)&result);
	return result;
}

void CDispOutput::SetHide(BOOL propVal)
{
	SetProperty(0x1c, VT_BOOL, propVal);
}

unsigned long CDispOutput::GetBullColor()
{
	unsigned long result;
	GetProperty(0x1d, VT_I4, (void*)&result);
	return result;
}

void CDispOutput::SetBullColor(unsigned long propVal)
{
	SetProperty(0x1d, VT_I4, propVal);
}

unsigned long CDispOutput::GetSteadyColor()
{
	unsigned long result;
	GetProperty(0x1e, VT_I4, (void*)&result);
	return result;
}

void CDispOutput::SetSteadyColor(unsigned long propVal)
{
	SetProperty(0x1e, VT_I4, propVal);
}

unsigned long CDispOutput::GetBearColor()
{
	unsigned long result;
	GetProperty(0x1f, VT_I4, (void*)&result);
	return result;
}

void CDispOutput::SetBearColor(unsigned long propVal)
{
	SetProperty(0x1f, VT_I4, propVal);
}

CString CDispOutput::GetRealDLLName()
{
	CString result;
	GetProperty(0x20, VT_BSTR, (void*)&result);
	return result;
}

void CDispOutput::SetRealDLLName(LPCTSTR propVal)
{
	SetProperty(0x20, VT_BSTR, propVal);
}

CString CDispOutput::GetDataUser()
{
	CString result;
	GetProperty(0x21, VT_BSTR, (void*)&result);
	return result;
}

void CDispOutput::SetDataUser(LPCTSTR propVal)
{
	SetProperty(0x21, VT_BSTR, propVal);
}

CString CDispOutput::GetSLocalSharedList()
{
	CString result;
	GetProperty(0x22, VT_BSTR, (void*)&result);
	return result;
}

void CDispOutput::SetSLocalSharedList(LPCTSTR propVal)
{
	SetProperty(0x22, VT_BSTR, propVal);
}

BOOL CDispOutput::GetUserColorTable()
{
	BOOL result;
	GetProperty(0x23, VT_BOOL, (void*)&result);
	return result;
}

void CDispOutput::SetUserColorTable(BOOL propVal)
{
	SetProperty(0x23, VT_BOOL, propVal);
}

long CDispOutput::GetBackColorTable()
{
	long result;
	GetProperty(0x24, VT_I4, (void*)&result);
	return result;
}

void CDispOutput::SetBackColorTable(long propVal)
{
	SetProperty(0x24, VT_I4, propVal);
}

long CDispOutput::GetTextColorTable()
{
	long result;
	GetProperty(0x25, VT_I4, (void*)&result);
	return result;
}

void CDispOutput::SetTextColorTable(long propVal)
{
	SetProperty(0x25, VT_I4, propVal);
}

long CDispOutput::GetBullColorTable()
{
	long result;
	GetProperty(0x26, VT_I4, (void*)&result);
	return result;
}

void CDispOutput::SetBullColorTable(long propVal)
{
	SetProperty(0x26, VT_I4, propVal);
}

long CDispOutput::GetSteadyColorTable()
{
	long result;
	GetProperty(0x27, VT_I4, (void*)&result);
	return result;
}

void CDispOutput::SetSteadyColorTable(long propVal)
{
	SetProperty(0x27, VT_I4, propVal);
}

long CDispOutput::GetBearColorTable()
{
	long result;
	GetProperty(0x28, VT_I4, (void*)&result);
	return result;
}

void CDispOutput::SetBearColorTable(long propVal)
{
	SetProperty(0x28, VT_I4, propVal);
}

long CDispOutput::GetBrightColorTable()
{
	long result;
	GetProperty(0x29, VT_I4, (void*)&result);
	return result;
}

void CDispOutput::SetBrightColorTable(long propVal)
{
	SetProperty(0x29, VT_I4, propVal);
}

OLE_HANDLE CDispOutput::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CDispOutput::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

CString CDispOutput::GetComment()
{
	CString result;
	GetProperty(0x2a, VT_BSTR, (void*)&result);
	return result;
}

void CDispOutput::SetComment(LPCTSTR propVal)
{
	SetProperty(0x2a, VT_BSTR, propVal);
}

CString CDispOutput::GetControlID()
{
	CString result;
	GetProperty(0x2b, VT_BSTR, (void*)&result);
	return result;
}

void CDispOutput::SetControlID(LPCTSTR propVal)
{
	SetProperty(0x2b, VT_BSTR, propVal);
}

unsigned long CDispOutput::GetLineColor()
{
	unsigned long result;
	GetProperty(0x2c, VT_I4, (void*)&result);
	return result;
}

void CDispOutput::SetLineColor(unsigned long propVal)
{
	SetProperty(0x2c, VT_I4, propVal);
}

long CDispOutput::GetLineColorTable()
{
	long result;
	GetProperty(0x2d, VT_I4, (void*)&result);
	return result;
}

void CDispOutput::SetLineColorTable(long propVal)
{
	SetProperty(0x2d, VT_I4, propVal);
}

CString CDispOutput::GetCustomFont()
{
	CString result;
	GetProperty(0x31, VT_BSTR, (void*)&result);
	return result;
}

void CDispOutput::SetCustomFont(LPCTSTR propVal)
{
	SetProperty(0x31, VT_BSTR, propVal);
}

long CDispOutput::GetTabKeyStop()
{
	long result;
	GetProperty(0x32, VT_I4, (void*)&result);
	return result;
}

void CDispOutput::SetTabKeyStop(long propVal)
{
	SetProperty(0x32, VT_I4, propVal);
}

long CDispOutput::GetUseDefaultFont()
{
	long result;
	GetProperty(0x33, VT_I4, (void*)&result);
	return result;
}

void CDispOutput::SetUseDefaultFont(long propVal)
{
	SetProperty(0x33, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CDispOutput operations

BOOL CDispOutput::SetAttribute(short nForeColorID, short nBackColorID, short nState)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x34, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nForeColorID, nBackColorID, nState);
	return result;
}

BOOL CDispOutput::SetField(LPCTSTR szField)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x35, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szField);
	return result;
}

BOOL CDispOutput::SetEditWidth(short nCharCount)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x36, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nCharCount);
	return result;
}

BOOL CDispOutput::SetAttribute2(short nForeColorID, short nBackColorID, LPCTSTR chState)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_BSTR;
	InvokeHelper(0x39, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nForeColorID, nBackColorID, chState);
	return result;
}

BOOL CDispOutput::OnDrdsAdvise()
{
	BOOL result;
	InvokeHelper(0x3a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CDispOutput::OffDrdsAdvise()
{
	BOOL result;
	InvokeHelper(0x3b, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CDispOutput::SetUpdownSign(LPCTSTR szState)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szState);
	return result;
}

BOOL CDispOutput::SetData(LPCTSTR szData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szData);
	return result;
}

long CDispOutput::GetHWnd()
{
	long result;
	InvokeHelper(0x3e, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL CDispOutput::SetAllProperties(long dwVersion, long dwDataClass)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x3f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		dwVersion, dwDataClass);
	return result;
}

BOOL CDispOutput::SetAllProperties2(long dwData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x40, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		dwData);
	return result;
}

long CDispOutput::GetBase(LPCTSTR szKey)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x41, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szKey);
	return result;
}

void CDispOutput::SetBaseDesk(long lKey)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x42, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lKey);
}

BOOL CDispOutput::SetAttribute3(unsigned long clrForeColor, unsigned long clrBackColor, short nState)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I2;
	InvokeHelper(0x43, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		clrForeColor, clrBackColor, nState);
	return result;
}

void CDispOutput::MakeSaveShortKey(LPCTSTR szFileName, long nFlag)
{
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x44, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 szFileName, nFlag);
}

void CDispOutput::SetCellAttrColorTable(short foreColorTable, short BackColorTable)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x45, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 foreColorTable, BackColorTable);
}

long CDispOutput::OnReceiveFetchData(long pData)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x46, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pData);
	return result;
}

void CDispOutput::SetRscMng(long lKey)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x47, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lKey);
}

long CDispOutput::GetAllProperties2(long lpData)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x48, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lpData);
	return result;
}

long CDispOutput::GetBasePropIf()
{
	long result;
	InvokeHelper(0x49, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CDispOutput::SetBlink()
{
	InvokeHelper(0x4a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CDispOutput::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
*/