// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "DispTable.h"

// Dispatch interfaces referenced by this interface
//#include "font.h"

/////////////////////////////////////////////////////////////////////////////
// CDispTable properties
OLECHAR *CDispTable::m_osInterfaceName[] = {
	// Variable
	L"GetCols",
	L"SetCols",
	L"GetRows",
	
	// Method
	L"SetRows",
	L"GetText",
    L"SetText",
	L"ResetTable",
	L"GetBase",
};

CDispTable::CDispTable()
{
	m_pdispatch = NULL;
}

void CDispTable::InitInterfaceName(IDispatch *pDisp)
{
	int i, nCount = sizeof( m_osInterfaceName) / sizeof( OLECHAR *);
	m_pdID = new DISPID[ nCount];
	for( i = 0; i < nCount; i++)
		pDisp->GetIDsOfNames( IID_NULL, &m_osInterfaceName[ i], 1, LOCALE_USER_DEFAULT, m_pdID + i);
}

long CDispTable::GetBase(LPCTSTR szKey)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_GetBase], DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szKey);
	return result;
}

long CDispTable::GetCtrlBasePacket()
{
	return GetBase("PACKOUT");
}

CString CDispTable::GetText(short nCol, short nRow)
{
	CString result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(m_pdID[IIx_GetText], DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		nCol, nRow);
	return result;
}

void CDispTable::SetText(short nCol, short nRow, LPCTSTR szData)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_BSTR;
	InvokeHelper(m_pdID[IIx_SetText], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nCol, nRow, szData);
}


short CDispTable::GetRows()
{
	short result;
	GetProperty(m_pdID[IIx_GetRows], VT_I2, (void*)&result);
	return result;
}

void CDispTable::SetRows(short propVal)
{
	SetProperty(m_pdID[IIx_SetRows], VT_I2, propVal);
}

short CDispTable::GetCols()
{
	short result;
	GetProperty(m_pdID[IIx_GetCols], VT_I2, (void*)&result);
	return result;
}

void CDispTable::SetCols(short propVal)
{
	SetProperty(m_pdID[IIx_SetCols], VT_I2, propVal);
}

void CDispTable::ResetTable()
{
	InvokeHelper(m_pdID[IIx_ResetTable], DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}


/*OLE_COLOR CDispTable::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CDispTable::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

unsigned long CDispTable::GetBearColor()
{
	unsigned long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CDispTable::SetBearColor(unsigned long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

unsigned long CDispTable::GetBlinkColor()
{
	unsigned long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CDispTable::SetBlinkColor(unsigned long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

short CDispTable::GetBlinkInterval()
{
	short result;
	GetProperty(0x3, VT_I2, (void*)&result);
	return result;
}

void CDispTable::SetBlinkInterval(short propVal)
{
	SetProperty(0x3, VT_I2, propVal);
}

short CDispTable::GetBorderThick()
{
	short result;
	GetProperty(0x4, VT_I2, (void*)&result);
	return result;
}

void CDispTable::SetBorderThick(short propVal)
{
	SetProperty(0x4, VT_I2, propVal);
}

unsigned long CDispTable::GetBullColor()
{
	unsigned long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CDispTable::SetBullColor(unsigned long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

unsigned long CDispTable::GetColorSelect()
{
	unsigned long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CDispTable::SetColorSelect(unsigned long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

short CDispTable::GetCols()
{
	short result;
	GetProperty(0x7, VT_I2, (void*)&result);
	return result;
}

void CDispTable::SetCols(short propVal)
{
	SetProperty(0x7, VT_I2, propVal);
}

unsigned long CDispTable::GetFixedSingleColor()
{
	unsigned long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CDispTable::SetFixedSingleColor(unsigned long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

OLE_COLOR CDispTable::GetForeColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_FORECOLOR, VT_I4, (void*)&result);
	return result;
}

void CDispTable::SetForeColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_FORECOLOR, VT_I4, propVal);
}

CString CDispTable::GetLocalShareList()
{
	CString result;
	GetProperty(0x9, VT_BSTR, (void*)&result);
	return result;
}

void CDispTable::SetLocalShareList(LPCTSTR propVal)
{
	SetProperty(0x9, VT_BSTR, propVal);
}

short CDispTable::GetPriceCellID()
{
	short result;
	GetProperty(0xa, VT_I2, (void*)&result);
	return result;
}

void CDispTable::SetPriceCellID(short propVal)
{
	SetProperty(0xa, VT_I2, propVal);
}

short CDispTable::GetPriceChgCellID()
{
	short result;
	GetProperty(0xb, VT_I2, (void*)&result);
	return result;
}

void CDispTable::SetPriceChgCellID(short propVal)
{
	SetProperty(0xb, VT_I2, propVal);
}

short CDispTable::GetRows()
{
	short result;
	GetProperty(0xc, VT_I2, (void*)&result);
	return result;
}

void CDispTable::SetRows(short propVal)
{
	SetProperty(0xc, VT_I2, propVal);
}

short CDispTable::GetSelectMethod()
{
	short result;
	GetProperty(0xd, VT_I2, (void*)&result);
	return result;
}

void CDispTable::SetSelectMethod(short propVal)
{
	SetProperty(0xd, VT_I2, propVal);
}

short CDispTable::GetShareEventMethod()
{
	short result;
	GetProperty(0xe, VT_I2, (void*)&result);
	return result;
}

void CDispTable::SetShareEventMethod(short propVal)
{
	SetProperty(0xe, VT_I2, propVal);
}

short CDispTable::GetSignCellID()
{
	short result;
	GetProperty(0xf, VT_I2, (void*)&result);
	return result;
}

void CDispTable::SetSignCellID(short propVal)
{
	SetProperty(0xf, VT_I2, propVal);
}

short CDispTable::GetStdPriceCellID()
{
	short result;
	GetProperty(0x10, VT_I2, (void*)&result);
	return result;
}

void CDispTable::SetStdPriceCellID(short propVal)
{
	SetProperty(0x10, VT_I2, propVal);
}

unsigned long CDispTable::GetSteadyColor()
{
	unsigned long result;
	GetProperty(0x11, VT_I4, (void*)&result);
	return result;
}

void CDispTable::SetSteadyColor(unsigned long propVal)
{
	SetProperty(0x11, VT_I4, propVal);
}

CString CDispTable::GetCellFormatInfo()
{
	CString result;
	GetProperty(0x12, VT_BSTR, (void*)&result);
	return result;
}

void CDispTable::SetCellFormatInfo(LPCTSTR propVal)
{
	SetProperty(0x12, VT_BSTR, propVal);
}

CString CDispTable::GetRootPath()
{
	CString result;
	GetProperty(0x13, VT_BSTR, (void*)&result);
	return result;
}

void CDispTable::SetRootPath(LPCTSTR propVal)
{
	SetProperty(0x13, VT_BSTR, propVal);
}

COleFont CDispTable::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CDispTable::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

BOOL CDispTable::GetHide()
{
	BOOL result;
	GetProperty(0x14, VT_BOOL, (void*)&result);
	return result;
}

void CDispTable::SetHide(BOOL propVal)
{
	SetProperty(0x14, VT_BOOL, propVal);
}

CString CDispTable::GetCellHSizes()
{
	CString result;
	GetProperty(0x15, VT_BSTR, (void*)&result);
	return result;
}

void CDispTable::SetCellHSizes(LPCTSTR propVal)
{
	SetProperty(0x15, VT_BSTR, propVal);
}

CString CDispTable::GetCellVSizes()
{
	CString result;
	GetProperty(0x16, VT_BSTR, (void*)&result);
	return result;
}

void CDispTable::SetCellVSizes(LPCTSTR propVal)
{
	SetProperty(0x16, VT_BSTR, propVal);
}

BOOL CDispTable::GetUseSkinColor()
{
	BOOL result;
	GetProperty(0x17, VT_BOOL, (void*)&result);
	return result;
}

void CDispTable::SetUseSkinColor(BOOL propVal)
{
	SetProperty(0x17, VT_BOOL, propVal);
}

long CDispTable::GetSkinBackColor()
{
	long result;
	GetProperty(0x18, VT_I4, (void*)&result);
	return result;
}

void CDispTable::SetSkinBackColor(long propVal)
{
	SetProperty(0x18, VT_I4, propVal);
}

long CDispTable::GetSkinForeColor()
{
	long result;
	GetProperty(0x19, VT_I4, (void*)&result);
	return result;
}

void CDispTable::SetSkinForeColor(long propVal)
{
	SetProperty(0x19, VT_I4, propVal);
}

long CDispTable::GetSkinBullColor()
{
	long result;
	GetProperty(0x1a, VT_I4, (void*)&result);
	return result;
}

void CDispTable::SetSkinBullColor(long propVal)
{
	SetProperty(0x1a, VT_I4, propVal);
}

long CDispTable::GetSkinSteadyColor()
{
	long result;
	GetProperty(0x1b, VT_I4, (void*)&result);
	return result;
}

void CDispTable::SetSkinSteadyColor(long propVal)
{
	SetProperty(0x1b, VT_I4, propVal);
}

long CDispTable::GetSkinBearColor()
{
	long result;
	GetProperty(0x1c, VT_I4, (void*)&result);
	return result;
}

void CDispTable::SetSkinBearColor(long propVal)
{
	SetProperty(0x1c, VT_I4, propVal);
}

long CDispTable::GetSkinBlinkColor()
{
	long result;
	GetProperty(0x1d, VT_I4, (void*)&result);
	return result;
}

void CDispTable::SetSkinBlinkColor(long propVal)
{
	SetProperty(0x1d, VT_I4, propVal);
}

long CDispTable::GetSkinSelectColor()
{
	long result;
	GetProperty(0x1e, VT_I4, (void*)&result);
	return result;
}

void CDispTable::SetSkinSelectColor(long propVal)
{
	SetProperty(0x1e, VT_I4, propVal);
}

long CDispTable::GetSkinBorderColor()
{
	long result;
	GetProperty(0x1f, VT_I4, (void*)&result);
	return result;
}

void CDispTable::SetSkinBorderColor(long propVal)
{
	SetProperty(0x1f, VT_I4, propVal);
}

CString CDispTable::GetCustomFont()
{
	CString result;
	GetProperty(0x25, VT_BSTR, (void*)&result);
	return result;
}

void CDispTable::SetCustomFont(LPCTSTR propVal)
{
	SetProperty(0x25, VT_BSTR, propVal);
}

CString CDispTable::GetComment()
{
	CString result;
	GetProperty(0x20, VT_BSTR, (void*)&result);
	return result;
}

void CDispTable::SetComment(LPCTSTR propVal)
{
	SetProperty(0x20, VT_BSTR, propVal);
}

CString CDispTable::GetControlID()
{
	CString result;
	GetProperty(0x21, VT_BSTR, (void*)&result);
	return result;
}

void CDispTable::SetControlID(LPCTSTR propVal)
{
	SetProperty(0x21, VT_BSTR, propVal);
}

BOOL CDispTable::GetNoUse()
{
	BOOL result;
	GetProperty(0x22, VT_BOOL, (void*)&result);
	return result;
}

void CDispTable::SetNoUse(BOOL propVal)
{
	SetProperty(0x22, VT_BOOL, propVal);
}

long CDispTable::GetTabKeyStop()
{
	long result;
	GetProperty(0x26, VT_I4, (void*)&result);
	return result;
}

void CDispTable::SetTabKeyStop(long propVal)
{
	SetProperty(0x26, VT_I4, propVal);
}

short CDispTable::GetRealCellID()
{
	short result;
	GetProperty(0x23, VT_I2, (void*)&result);
	return result;
}

void CDispTable::SetRealCellID(short propVal)
{
	SetProperty(0x23, VT_I2, propVal);
}

BOOL CDispTable::GetEnableEventCellDataChanged()
{
	BOOL result;
	GetProperty(0x27, VT_BOOL, (void*)&result);
	return result;
}

void CDispTable::SetEnableEventCellDataChanged(BOOL propVal)
{
	SetProperty(0x27, VT_BOOL, propVal);
}

short CDispTable::GetClickEventType()
{
	short result;
	GetProperty(0x24, VT_I2, (void*)&result);
	return result;
}

void CDispTable::SetClickEventType(short propVal)
{
	SetProperty(0x24, VT_I2, propVal);
}

CString CDispTable::GetCellFont()
{
	CString result;
	GetProperty(0x28, VT_BSTR, (void*)&result);
	return result;
}

void CDispTable::SetCellFont(LPCTSTR propVal)
{
	SetProperty(0x28, VT_BSTR, propVal);
}

long CDispTable::GetRightShareEvent()
{
	long result;
	GetProperty(0x29, VT_I4, (void*)&result);
	return result;
}

void CDispTable::SetRightShareEvent(long propVal)
{
	SetProperty(0x29, VT_I4, propVal);
}

long CDispTable::GetUseDefaultFont()
{
	long result;
	GetProperty(0x2a, VT_I4, (void*)&result);
	return result;
}

void CDispTable::SetUseDefaultFont(long propVal)
{
	SetProperty(0x2a, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CDispTable operations

BOOL CDispTable::SetAllProperties2(long dwData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		dwData);
	return result;
}

long CDispTable::GetBase(LPCTSTR szKey)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szKey);
	return result;
}

void CDispTable::SetBaseDesk(long lKey)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lKey);
}

CString CDispTable::GetText(short nCol, short nRow)
{
	CString result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x2e, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		nCol, nRow);
	return result;
}

void CDispTable::SetText(short nCol, short nRow, LPCTSTR szData)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_BSTR;
	InvokeHelper(0x2f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nCol, nRow, szData);
}

void CDispTable::MakeSaveShortKey(LPCTSTR szFileName, long nFlag)
{
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x30, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 szFileName, nFlag);
}

void CDispTable::ResetTable()
{
	InvokeHelper(0x31, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CDispTable::OnGetCellIndex(short* nCol, short* nRow, short* pRectRight, short* nType, short Xpoint, short Ypoint)
{
	static BYTE parms[] =
		VTS_PI2 VTS_PI2 VTS_PI2 VTS_PI2 VTS_I2 VTS_I2;
	InvokeHelper(0x32, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nCol, nRow, pRectRight, nType, Xpoint, Ypoint);
}

long CDispTable::OnReceiveFetchData(long pData)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x33, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pData);
	return result;
}

void CDispTable::SetCellBright(short nCol, short nRow)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x34, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nCol, nRow);
}

void CDispTable::SetCellForeClr(short col, long row, unsigned long clrCellFore)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4 VTS_I4;
	InvokeHelper(0x35, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 col, row, clrCellFore);
}

short CDispTable::OnDrds()
{
	short result;
	InvokeHelper(0x36, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CDispTable::OffDrds()
{
	short result;
	InvokeHelper(0x37, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

void CDispTable::SetRscMng(long lKey)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x38, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lKey);
}

void CDispTable::SetCellBackClr(short col, long row, unsigned long clrCellBack)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4 VTS_I4;
	InvokeHelper(0x39, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 col, row, clrCellBack);
}

void CDispTable::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}*/

/////////////////////////////////////////////////////////////////////////////
// COleFont properties

CString COleFont::GetName()
{
	CString result;
	GetProperty(0x0, VT_BSTR, (void*)&result);
	return result;
}

void COleFont::SetName(LPCTSTR propVal)
{
	SetProperty(0x0, VT_BSTR, propVal);
}

CY COleFont::GetSize()
{
	CY result;
	GetProperty(0x2, VT_CY, (void*)&result);
	return result;
}

void COleFont::SetSize(const CY& propVal)
{
	SetProperty(0x2, VT_CY, &propVal);
}

BOOL COleFont::GetBold()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void COleFont::SetBold(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

BOOL COleFont::GetItalic()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void COleFont::SetItalic(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

BOOL COleFont::GetUnderline()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void COleFont::SetUnderline(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

BOOL COleFont::GetStrikethrough()
{
	BOOL result;
	GetProperty(0x6, VT_BOOL, (void*)&result);
	return result;
}

void COleFont::SetStrikethrough(BOOL propVal)
{
	SetProperty(0x6, VT_BOOL, propVal);
}

short COleFont::GetWeight()
{
	short result;
	GetProperty(0x7, VT_I2, (void*)&result);
	return result;
}

void COleFont::SetWeight(short propVal)
{
	SetProperty(0x7, VT_I2, propVal);
}

short COleFont::GetCharset()
{
	short result;
	GetProperty(0x8, VT_I2, (void*)&result);
	return result;
}

void COleFont::SetCharset(short propVal)
{
	SetProperty(0x8, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// COleFont operations
