// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "DispSpinInput.h"

/////////////////////////////////////////////////////////////////////////////
// CDispSpinInput

//IMPLEMENT_DYNCREATE(CDispSpinInput, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CDispSpinInput properties
/////////////////////////////////////////////////////////////////////////////
// CDispGrid
OLECHAR *CDispSpinInput::m_osInterfaceName[] = {
	L"GetBase",
	L"GetData",
	L"SetDataText",
	L"GetDataName",
};


CDispSpinInput::CDispSpinInput()
{
	m_pdispatch = NULL;
}

void CDispSpinInput::InitInterfaceName(IDispatch *pDisp)
{
	int i, nCount = sizeof( m_osInterfaceName) / sizeof( OLECHAR *);
	m_pdID = new DISPID[ nCount];
	for( i = 0; i < nCount; i++)
		pDisp->GetIDsOfNames( IID_NULL, &m_osInterfaceName[ i], 1, LOCALE_USER_DEFAULT, m_pdID + i);
}

/////////////////////////////////////////////////////////////////////////////
// CDispGrid Method
long CDispSpinInput::GetBase(LPCTSTR szKey)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_GetBase], DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szKey);
	return result;
}

long CDispSpinInput::GetCtrlBasePacket()
{
	return GetBase("PACKOUT");
}


CString CDispSpinInput::GetData()
{
	CString result;
	InvokeHelper(m_pdID[IIx_GetData], DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CDispSpinInput::SetDataText(LPCTSTR szText)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_SetDataText], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 szText);
}

CString CDispSpinInput::GetDataName()
{
	CString result;
	GetProperty(m_pdID[IIx_GetDataName], VT_BSTR, (void*)&result);
	return result;
}




/*unsigned long CDispSpinInput::GetBackColor()
{
	unsigned long result;
	GetProperty(0x1a, VT_I4, (void*)&result);
	return result;
}

void CDispSpinInput::SetBackColor(unsigned long propVal)
{
	SetProperty(0x1a, VT_I4, propVal);
}

BOOL CDispSpinInput::GetButtonChoice()
{
	BOOL result;
	GetProperty(0x1b, VT_BOOL, (void*)&result);
	return result;
}

void CDispSpinInput::SetButtonChoice(BOOL propVal)
{
	SetProperty(0x1b, VT_BOOL, propVal);
}

short CDispSpinInput::GetComma()
{
	short result;
	GetProperty(0x1, VT_I2, (void*)&result);
	return result;
}

void CDispSpinInput::SetComma(short propVal)
{
	SetProperty(0x1, VT_I2, propVal);
}

CString CDispSpinInput::GetComment()
{
	CString result;
	GetProperty(0x1c, VT_BSTR, (void*)&result);
	return result;
}

void CDispSpinInput::SetComment(LPCTSTR propVal)
{
	SetProperty(0x1c, VT_BSTR, propVal);
}

CString CDispSpinInput::GetControlID()
{
	CString result;
	GetProperty(0x1d, VT_BSTR, (void*)&result);
	return result;
}

void CDispSpinInput::SetControlID(LPCTSTR propVal)
{
	SetProperty(0x1d, VT_BSTR, propVal);
}

CString CDispSpinInput::GetCustomFont()
{
	CString result;
	GetProperty(0x1e, VT_BSTR, (void*)&result);
	return result;
}

void CDispSpinInput::SetCustomFont(LPCTSTR propVal)
{
	SetProperty(0x1e, VT_BSTR, propVal);
}

BOOL CDispSpinInput::GetEnabled()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CDispSpinInput::SetEnabled(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

unsigned long CDispSpinInput::GetForeColor()
{
	unsigned long result;
	GetProperty(0x1f, VT_I4, (void*)&result);
	return result;
}

void CDispSpinInput::SetForeColor(unsigned long propVal)
{
	SetProperty(0x1f, VT_I4, propVal);
}

BOOL CDispSpinInput::GetHide()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CDispSpinInput::SetHide(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

long CDispSpinInput::GetInitValue()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CDispSpinInput::SetInitValue(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

BOOL CDispSpinInput::GetInputRequire()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void CDispSpinInput::SetInputRequire(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

short CDispSpinInput::GetMaxLength()
{
	short result;
	GetProperty(0x6, VT_I2, (void*)&result);
	return result;
}

void CDispSpinInput::SetMaxLength(short propVal)
{
	SetProperty(0x6, VT_I2, propVal);
}

long CDispSpinInput::GetMaxLimit()
{
	long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CDispSpinInput::SetMaxLimit(long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

long CDispSpinInput::GetMinLimit()
{
	long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CDispSpinInput::SetMinLimit(long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

BOOL CDispSpinInput::GetMinusVisible()
{
	BOOL result;
	GetProperty(0x9, VT_BOOL, (void*)&result);
	return result;
}

void CDispSpinInput::SetMinusVisible(BOOL propVal)
{
	SetProperty(0x9, VT_BOOL, propVal);
}

BOOL CDispSpinInput::GetMoveTab()
{
	BOOL result;
	GetProperty(0xa, VT_BOOL, (void*)&result);
	return result;
}

void CDispSpinInput::SetMoveTab(BOOL propVal)
{
	SetProperty(0xa, VT_BOOL, propVal);
}

BOOL CDispSpinInput::GetPlusVisible()
{
	BOOL result;
	GetProperty(0xb, VT_BOOL, (void*)&result);
	return result;
}

void CDispSpinInput::SetPlusVisible(BOOL propVal)
{
	SetProperty(0xb, VT_BOOL, propVal);
}

short CDispSpinInput::GetSpinAlignment()
{
	short result;
	GetProperty(0xc, VT_I2, (void*)&result);
	return result;
}

void CDispSpinInput::SetSpinAlignment(short propVal)
{
	SetProperty(0xc, VT_I2, propVal);
}

BOOL CDispSpinInput::GetSpinButtonVisible()
{
	BOOL result;
	GetProperty(0xd, VT_BOOL, (void*)&result);
	return result;
}

void CDispSpinInput::SetSpinButtonVisible(BOOL propVal)
{
	SetProperty(0xd, VT_BOOL, propVal);
}

short CDispSpinInput::GetSpinHelperType()
{
	short result;
	GetProperty(0xe, VT_I2, (void*)&result);
	return result;
}

void CDispSpinInput::SetSpinHelperType(short propVal)
{
	SetProperty(0xe, VT_I2, propVal);
}

short CDispSpinInput::GetSpinType()
{
	short result;
	GetProperty(0xf, VT_I2, (void*)&result);
	return result;
}

void CDispSpinInput::SetSpinType(short propVal)
{
	SetProperty(0xf, VT_I2, propVal);
}

long CDispSpinInput::GetTabKeyStop()
{
	long result;
	GetProperty(0x20, VT_I4, (void*)&result);
	return result;
}

void CDispSpinInput::SetTabKeyStop(long propVal)
{
	SetProperty(0x20, VT_I4, propVal);
}

short CDispSpinInput::GetTextAlignment()
{
	short result;
	GetProperty(0x10, VT_I2, (void*)&result);
	return result;
}

void CDispSpinInput::SetTextAlignment(short propVal)
{
	SetProperty(0x10, VT_I2, propVal);
}

long CDispSpinInput::GetUseDefaultFont()
{
	long result;
	GetProperty(0x21, VT_I4, (void*)&result);
	return result;
}

void CDispSpinInput::SetUseDefaultFont(long propVal)
{
	SetProperty(0x21, VT_I4, propVal);
}

long CDispSpinInput::GetUserBackColor()
{
	long result;
	GetProperty(0x22, VT_I4, (void*)&result);
	return result;
}

void CDispSpinInput::SetUserBackColor(long propVal)
{
	SetProperty(0x22, VT_I4, propVal);
}

BOOL CDispSpinInput::GetUserColorTable()
{
	BOOL result;
	GetProperty(0x23, VT_BOOL, (void*)&result);
	return result;
}

void CDispSpinInput::SetUserColorTable(BOOL propVal)
{
	SetProperty(0x23, VT_BOOL, propVal);
}

long CDispSpinInput::GetUserForeColor()
{
	long result;
	GetProperty(0x24, VT_I4, (void*)&result);
	return result;
}

void CDispSpinInput::SetUserForeColor(long propVal)
{
	SetProperty(0x24, VT_I4, propVal);
}

BOOL CDispSpinInput::GetUsingComma()
{
	BOOL result;
	GetProperty(0x11, VT_BOOL, (void*)&result);
	return result;
}

void CDispSpinInput::SetUsingComma(BOOL propVal)
{
	SetProperty(0x11, VT_BOOL, propVal);
}

BOOL CDispSpinInput::GetUsingMinLimit()
{
	BOOL result;
	GetProperty(0x12, VT_BOOL, (void*)&result);
	return result;
}

void CDispSpinInput::SetUsingMinLimit(BOOL propVal)
{
	SetProperty(0x12, VT_BOOL, propVal);
}

BOOL CDispSpinInput::GetUsingMaxLimit()
{
	BOOL result;
	GetProperty(0x13, VT_BOOL, (void*)&result);
	return result;
}

void CDispSpinInput::SetUsingMaxLimit(BOOL propVal)
{
	SetProperty(0x13, VT_BOOL, propVal);
}

BOOL CDispSpinInput::GetUsingSpinHelper()
{
	BOOL result;
	GetProperty(0x14, VT_BOOL, (void*)&result);
	return result;
}

void CDispSpinInput::SetUsingSpinHelper(BOOL propVal)
{
	SetProperty(0x14, VT_BOOL, propVal);
}

long CDispSpinInput::GetVariation()
{
	long result;
	GetProperty(0x15, VT_I4, (void*)&result);
	return result;
}

void CDispSpinInput::SetVariation(long propVal)
{
	SetProperty(0x15, VT_I4, propVal);
}

CString CDispSpinInput::GetSStr()
{
	CString result;
	GetProperty(0x16, VT_BSTR, (void*)&result);
	return result;
}

void CDispSpinInput::SetSStr(LPCTSTR propVal)
{
	SetProperty(0x16, VT_BSTR, propVal);
}

BOOL CDispSpinInput::GetUseRealData()
{
	BOOL result;
	GetProperty(0x17, VT_BOOL, (void*)&result);
	return result;
}

void CDispSpinInput::SetUseRealData(BOOL propVal)
{
	SetProperty(0x17, VT_BOOL, propVal);
}

CString CDispSpinInput::GetFieldName()
{
	CString result;
	GetProperty(0x25, VT_BSTR, (void*)&result);
	return result;
}

void CDispSpinInput::SetFieldName(LPCTSTR propVal)
{
	SetProperty(0x25, VT_BSTR, propVal);
}

CString CDispSpinInput::GetKeyName()
{
	CString result;
	GetProperty(0x26, VT_BSTR, (void*)&result);
	return result;
}

void CDispSpinInput::SetKeyName(LPCTSTR propVal)
{
	SetProperty(0x26, VT_BSTR, propVal);
}

CString CDispSpinInput::GetSLocalSharedList()
{
	CString result;
	GetProperty(0x18, VT_BSTR, (void*)&result);
	return result;
}

void CDispSpinInput::SetSLocalSharedList(LPCTSTR propVal)
{
	SetProperty(0x18, VT_BSTR, propVal);
}

CString CDispSpinInput::GetSGlobalSharedList()
{
	CString result;
	GetProperty(0x19, VT_BSTR, (void*)&result);
	return result;
}

void CDispSpinInput::SetSGlobalSharedList(LPCTSTR propVal)
{
	SetProperty(0x19, VT_BSTR, propVal);
}

CString CDispSpinInput::GetDataName()
{
	CString result;
	GetProperty(0x27, VT_BSTR, (void*)&result);
	return result;
}

void CDispSpinInput::SetDataName(LPCTSTR propVal)
{
	SetProperty(0x27, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CDispSpinInput operations

BOOL CDispSpinInput::SetAllProperties2(long dwData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		dwData);
	return result;
}

long CDispSpinInput::GetBase(LPCTSTR szKey)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szKey);
	return result;
}

CString CDispSpinInput::GetData()
{
	CString result;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CDispSpinInput::ClearEditText()
{
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CDispSpinInput::SetSpinInputData(short JangGubun, LPCTSTR Data)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 JangGubun, Data);
}

void CDispSpinInput::GotoFocus()
{
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CDispSpinInput::MakeSaveShortKey(LPCTSTR szFileName, long nFlag)
{
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x2e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 szFileName, nFlag);
}

long CDispSpinInput::OnReceiveFetchData(long pData)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2f, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pData);
	return result;
}

void CDispSpinInput::SetDataText(LPCTSTR szText)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x30, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 szText);
}

void CDispSpinInput::SetRscMng(long lKey)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x31, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lKey);
}

void CDispSpinInput::SetDebugData(LPCTSTR szText)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x32, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 szText);
}

long CDispSpinInput::GetAllProperties2(long lpData)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x33, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lpData);
	return result;
}

long CDispSpinInput::GetBasePropIf()
{
	long result;
	InvokeHelper(0x34, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CDispSpinInput::SetBaseDesk(long lKey)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x35, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lKey);
}

BOOL CDispSpinInput::OnDrdsAdvise()
{
	BOOL result;
	InvokeHelper(0x36, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CDispSpinInput::OffDrdsAdvise()
{
	BOOL result;
	InvokeHelper(0x37, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CDispSpinInput::SetButtonEnable(short bLeft, short bRight)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x38, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bLeft, bRight);
}

void CDispSpinInput::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
*/