// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "DispAcctInput.h"

/////////////////////////////////////////////////////////////////////////////
// CNtsAcctInput properties

OLECHAR *CDispAcctInput::m_osInterfaceName[] = {
	// Variable
	L"SetText",
	L"GetText",
	L"GetDataText",
	L"GetBase",
};


CDispAcctInput::CDispAcctInput()
{
	m_pdispatch = NULL;
}

long CDispAcctInput::GetBase(LPCTSTR szKey)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_GetBase], DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szKey);
	return result;
}

long CDispAcctInput::GetCtrlBasePacket()
{
	return GetBase("PACKOUT");
}

void CDispAcctInput::InitInterfaceName(IDispatch *pDisp)
{
	int i, nCount = sizeof( m_osInterfaceName) / sizeof( OLECHAR *);
	m_pdID = new DISPID[ nCount];
	for( i = 0; i < nCount; i++)
		pDisp->GetIDsOfNames( IID_NULL, &m_osInterfaceName[ i], 1, LOCALE_USER_DEFAULT, m_pdID + i);
}


CString CDispAcctInput::GetText()
{
	CString result;
	GetProperty(m_pdID[IIx_GetText], VT_BSTR, (void*)&result);
	return result;
}

void CDispAcctInput::SetText(LPCTSTR propVal)
{
	SetProperty(m_pdID[IIx_SetText], VT_BSTR, propVal);
}

CString CDispAcctInput::GetDataText()
{
	CString result;
	InvokeHelper(m_pdID[IIx_GetDataText], DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}



/*CString CNtsAcctInput::GetGlobalSharedList()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}

void CNtsAcctInput::SetGlobalSharedList(LPCTSTR propVal)
{
	SetProperty(0x1, VT_BSTR, propVal);
}

BOOL CNtsAcctInput::GetHide()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CNtsAcctInput::SetHide(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

CString CNtsAcctInput::GetSStr()
{
	CString result;
	GetProperty(0x3, VT_BSTR, (void*)&result);
	return result;
}

void CNtsAcctInput::SetSStr(LPCTSTR propVal)
{
	SetProperty(0x3, VT_BSTR, propVal);
}

CString CNtsAcctInput::GetCustomFont()
{
	CString result;
	GetProperty(0x4, VT_BSTR, (void*)&result);
	return result;
}

void CNtsAcctInput::SetCustomFont(LPCTSTR propVal)
{
	SetProperty(0x4, VT_BSTR, propVal);
}

unsigned long CNtsAcctInput::GetBackColor()
{
	unsigned long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CNtsAcctInput::SetBackColor(unsigned long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

unsigned long CNtsAcctInput::GetForeColor()
{
	unsigned long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CNtsAcctInput::SetForeColor(unsigned long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

BOOL CNtsAcctInput::GetEnabled()
{
	BOOL result;
	GetProperty(0x7, VT_BOOL, (void*)&result);
	return result;
}

void CNtsAcctInput::SetEnabled(BOOL propVal)
{
	SetProperty(0x7, VT_BOOL, propVal);
}

BOOL CNtsAcctInput::GetIsUserDefine()
{
	BOOL result;
	GetProperty(0x8, VT_BOOL, (void*)&result);
	return result;
}

void CNtsAcctInput::SetIsUserDefine(BOOL propVal)
{
	SetProperty(0x8, VT_BOOL, propVal);
}

CString CNtsAcctInput::GetAcctChoice()
{
	CString result;
	GetProperty(0x9, VT_BSTR, (void*)&result);
	return result;
}

void CNtsAcctInput::SetAcctChoice(LPCTSTR propVal)
{
	SetProperty(0x9, VT_BSTR, propVal);
}

CString CNtsAcctInput::GetOutputCtrlName()
{
	CString result;
	GetProperty(0xa, VT_BSTR, (void*)&result);
	return result;
}

void CNtsAcctInput::SetOutputCtrlName(LPCTSTR propVal)
{
	SetProperty(0xa, VT_BSTR, propVal);
}

CString CNtsAcctInput::GetPassCtrlName()
{
	CString result;
	GetProperty(0xb, VT_BSTR, (void*)&result);
	return result;
}

void CNtsAcctInput::SetPassCtrlName(LPCTSTR propVal)
{
	SetProperty(0xb, VT_BSTR, propVal);
}

BOOL CNtsAcctInput::GetMoveTab()
{
	BOOL result;
	GetProperty(0xc, VT_BOOL, (void*)&result);
	return result;
}

void CNtsAcctInput::SetMoveTab(BOOL propVal)
{
	SetProperty(0xc, VT_BOOL, propVal);
}

BOOL CNtsAcctInput::GetWhenEqual()
{
	BOOL result;
	GetProperty(0xd, VT_BOOL, (void*)&result);
	return result;
}

void CNtsAcctInput::SetWhenEqual(BOOL propVal)
{
	SetProperty(0xd, VT_BOOL, propVal);
}

BOOL CNtsAcctInput::GetButtonVisible()
{
	BOOL result;
	GetProperty(0xe, VT_BOOL, (void*)&result);
	return result;
}

void CNtsAcctInput::SetButtonVisible(BOOL propVal)
{
	SetProperty(0xe, VT_BOOL, propVal);
}

CString CNtsAcctInput::GetText()
{
	CString result;
	GetProperty(0xf, VT_BSTR, (void*)&result);
	return result;
}

void CNtsAcctInput::SetText(LPCTSTR propVal)
{
	SetProperty(0xf, VT_BSTR, propVal);
}

short CNtsAcctInput::GetMyAppearance()
{
	short result;
	GetProperty(0x10, VT_I2, (void*)&result);
	return result;
}

void CNtsAcctInput::SetMyAppearance(short propVal)
{
	SetProperty(0x10, VT_I2, propVal);
}

short CNtsAcctInput::GetMyBorderStyle()
{
	short result;
	GetProperty(0x11, VT_I2, (void*)&result);
	return result;
}

void CNtsAcctInput::SetMyBorderStyle(short propVal)
{
	SetProperty(0x11, VT_I2, propVal);
}

short CNtsAcctInput::GetPosition()
{
	short result;
	GetProperty(0x12, VT_I2, (void*)&result);
	return result;
}

void CNtsAcctInput::SetPosition(short propVal)
{
	SetProperty(0x12, VT_I2, propVal);
}

short CNtsAcctInput::GetEditStyle()
{
	short result;
	GetProperty(0x13, VT_I2, (void*)&result);
	return result;
}

void CNtsAcctInput::SetEditStyle(short propVal)
{
	SetProperty(0x13, VT_I2, propVal);
}

short CNtsAcctInput::GetButtonStyle()
{
	short result;
	GetProperty(0x14, VT_I2, (void*)&result);
	return result;
}

void CNtsAcctInput::SetButtonStyle(short propVal)
{
	SetProperty(0x14, VT_I2, propVal);
}

CString CNtsAcctInput::GetLocalSharedList()
{
	CString result;
	GetProperty(0x15, VT_BSTR, (void*)&result);
	return result;
}

void CNtsAcctInput::SetLocalSharedList(LPCTSTR propVal)
{
	SetProperty(0x15, VT_BSTR, propVal);
}

CString CNtsAcctInput::GetMask()
{
	CString result;
	GetProperty(0x16, VT_BSTR, (void*)&result);
	return result;
}

void CNtsAcctInput::SetMask(LPCTSTR propVal)
{
	SetProperty(0x16, VT_BSTR, propVal);
}

short CNtsAcctInput::GetMaxLength()
{
	short result;
	GetProperty(0x17, VT_I2, (void*)&result);
	return result;
}

void CNtsAcctInput::SetMaxLength(short propVal)
{
	SetProperty(0x17, VT_I2, propVal);
}

BOOL CNtsAcctInput::GetInputRequire()
{
	BOOL result;
	GetProperty(0x18, VT_BOOL, (void*)&result);
	return result;
}

void CNtsAcctInput::SetInputRequire(BOOL propVal)
{
	SetProperty(0x18, VT_BOOL, propVal);
}

CString CNtsAcctInput::GetComment()
{
	CString result;
	GetProperty(0x19, VT_BSTR, (void*)&result);
	return result;
}

void CNtsAcctInput::SetComment(LPCTSTR propVal)
{
	SetProperty(0x19, VT_BSTR, propVal);
}

CString CNtsAcctInput::GetControlID()
{
	CString result;
	GetProperty(0x1a, VT_BSTR, (void*)&result);
	return result;
}

void CNtsAcctInput::SetControlID(LPCTSTR propVal)
{
	SetProperty(0x1a, VT_BSTR, propVal);
}

OLE_HANDLE CNtsAcctInput::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CNtsAcctInput::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

short CNtsAcctInput::GetUserBackColor()
{
	short result;
	GetProperty(0x1b, VT_I2, (void*)&result);
	return result;
}

void CNtsAcctInput::SetUserBackColor(short propVal)
{
	SetProperty(0x1b, VT_I2, propVal);
}

short CNtsAcctInput::GetUserForeColor()
{
	short result;
	GetProperty(0x1c, VT_I2, (void*)&result);
	return result;
}

void CNtsAcctInput::SetUserForeColor(short propVal)
{
	SetProperty(0x1c, VT_I2, propVal);
}

BOOL CNtsAcctInput::GetUserColorTable()
{
	BOOL result;
	GetProperty(0x1d, VT_BOOL, (void*)&result);
	return result;
}

void CNtsAcctInput::SetUserColorTable(BOOL propVal)
{
	SetProperty(0x1d, VT_BOOL, propVal);
}

long CNtsAcctInput::GetTabKeyStop()
{
	long result;
	GetProperty(0x1e, VT_I4, (void*)&result);
	return result;
}

void CNtsAcctInput::SetTabKeyStop(long propVal)
{
	SetProperty(0x1e, VT_I4, propVal);
}

BOOL CNtsAcctInput::GetBranchNumEditable()
{
	BOOL result;
	GetProperty(0x1f, VT_BOOL, (void*)&result);
	return result;
}

void CNtsAcctInput::SetBranchNumEditable(BOOL propVal)
{
	SetProperty(0x1f, VT_BOOL, propVal);
}

long CNtsAcctInput::GetUseDefaultFont()
{
	long result;
	GetProperty(0x20, VT_I4, (void*)&result);
	return result;
}

void CNtsAcctInput::SetUseDefaultFont(long propVal)
{
	SetProperty(0x20, VT_I4, propVal);
}

BOOL CNtsAcctInput::GetApplyToAll()
{
	BOOL result;
	GetProperty(0x21, VT_BOOL, (void*)&result);
	return result;
}

void CNtsAcctInput::SetApplyToAll(BOOL propVal)
{
	SetProperty(0x21, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CNtsAcctInput operations

BOOL CNtsAcctInput::SetAllProperties2(long dwData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		dwData);
	return result;
}

long CNtsAcctInput::GetBase(LPCTSTR szKey)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szKey);
	return result;
}

void CNtsAcctInput::SetBaseDesk(long lKey)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lKey);
}

void CNtsAcctInput::MakeSaveShortKey(LPCTSTR szFileName, long nFlag)
{
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 szFileName, nFlag);
}

void CNtsAcctInput::Clear()
{
	InvokeHelper(0x26, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

CString CNtsAcctInput::GetDataText()
{
	CString result;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

long CNtsAcctInput::OnReceiveFetchData(long pData)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pData);
	return result;
}

void CNtsAcctInput::SetRscMng(long lKey)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lKey);
}

long CNtsAcctInput::GetAllProperties2(long lpData)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lpData);
	return result;
}

long CNtsAcctInput::GetBasePropIf()
{
	long result;
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}*/
