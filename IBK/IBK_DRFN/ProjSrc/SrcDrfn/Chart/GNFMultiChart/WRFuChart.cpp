// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "wrfuchart.h"

#include <occimpl.h>				// for COleControlSite

/////////////////////////////////////////////////////////////////////////////
// CWRFuChart

IMPLEMENT_DYNCREATE(CWRFuChart, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CWRFuChart properties

BOOL CWRFuChart::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

OLE_HANDLE CWRFuChart::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

long CWRFuChart::GetNNumericalInquiryOption()
{
	long result;
	GetProperty(0x36, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetNNumericalInquiryOption(long propVal)
{
	SetProperty(0x36, VT_I4, propVal);
}

CString CWRFuChart::GetStrGlobalSharedList()
{
	CString result;
	GetProperty(0x37, VT_BSTR, (void*)&result);
	return result;
}

void CWRFuChart::SetStrGlobalSharedList(LPCTSTR propVal)
{
	SetProperty(0x37, VT_BSTR, propVal);
}

void CWRFuChart::SetStrStartDateOfData(LPCTSTR propVal)
{
	SetProperty(0x4d, VT_BSTR, propVal);
}

void CWRFuChart::SetOnRunningOneChart(BOOL propVal)
{
	SetProperty(0x4e, VT_BOOL, propVal);
}

BOOL CWRFuChart::GetBDoesUseSkinColor()
{
	BOOL result;
	GetProperty(0x3a, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBDoesUseSkinColor(BOOL propVal)
{
	SetProperty(0x3a, VT_BOOL, propVal);
}

BOOL CWRFuChart::SetAllProperties2(long dwData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(m_pdID[IIx_SetAllProperties2], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		dwData);
	return result;
}

void CWRFuChart::SetBaseDesk(long lKey)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(m_pdID[IIx_SetBaseDesk], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lKey);
}


long CWRFuChart::GetBase(LPCTSTR szKey)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_GetBase], DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szKey);
	return result;
}

void CWRFuChart::AddGraph(short nRow, short nColumn, short nVertScaleGroup, LPCTSTR szGraphOption, BOOL bCreateBlock, BOOL bCreateVertScaleGroup, BOOL bUseAutoScale)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_BSTR VTS_BOOL VTS_BOOL VTS_BOOL;
	InvokeHelper(m_pdID[IIx_AddGraph], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nRow, nColumn, nVertScaleGroup, szGraphOption, bCreateBlock, bCreateVertScaleGroup, bUseAutoScale);
}

void CWRFuChart::AddPacket(LPCTSTR szPacketOption)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_AddPacket], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 szPacketOption);
}

void CWRFuChart::RemovePacket(LPCTSTR szPacketName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_RemovePacket], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 szPacketName);
}

CString CWRFuChart::GetIndicatorNameList(LPCTSTR p_strGroup)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_GetIndicatorNameList], DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		p_strGroup);
	return result;
}

void CWRFuChart::SetContainerDllInfo(long p_lDllWnd, short p_nID)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(m_pdID[IIx_SetContainerDllInfo], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 p_lDllWnd, p_nID);
}

short CWRFuChart::SetChartData(long pChartData, short nCount, short nType)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I2;
	InvokeHelper(m_pdID[IIx_SetChartData], DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pChartData, nCount, nType);
	return result;
}


BOOL CWRFuChart::SetPacketData(LPCTSTR szPacketName, long szData, long nLength, BOOL bReset)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(m_pdID[IIx_SetPacketData], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szPacketName, szData, nLength, bReset);
	return result;
}

BOOL CWRFuChart::AddChartBlock(LPCTSTR strChartName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_AddChartBlock], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strChartName);
	return result;
}

BOOL CWRFuChart::ResetChart()
{
	BOOL result;
	InvokeHelper(m_pdID[IIx_ResetChart], DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CWRFuChart::SetBackgroundColors(unsigned long p_rgbBlockArea, unsigned long p_rgbScaleArea)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(m_pdID[IIx_SetBackgroundColors], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 p_rgbBlockArea, p_rgbScaleArea);
}

BOOL CWRFuChart::SetDrdsAdvise(BOOL bOnAdvise)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(m_pdID[IIx_SetDrdsAdvise], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		bOnAdvise);
	return result;
}

void CWRFuChart::AddRealItem(LPCTSTR szRealInfo)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_AddRealItem], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 szRealInfo);
}

void CWRFuChart::ShowIndicatorConfigDlg()
{
	InvokeHelper(m_pdID[IIx_ShowIndicatorConfigDlg], DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CWRFuChart::GetNOnePageDataCount()
{
	long result;
	GetProperty(m_pdID[IIx_NOnePageDataCount], VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetNOnePageDataCount(long propVal)
{
	SetProperty(m_pdID[IIx_NOnePageDataCount], VT_I4, propVal);
}


CString CWRFuChart::GetStrStartDateOfData()
{
	CString result;
	GetProperty(m_pdID[IIx_StrStartDateOfData], VT_BSTR, (void*)&result);
	return result;
}

void CWRFuChart::ResetChartCfgWith(short p_nIndex)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(m_pdID[IIx_ResetChartCfgWith], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 p_nIndex);
}

// JSR 20060117 Modify Begin (From : ResetOCX() )
///////////////////////////////////////////////////////////////////////////////
/*
// Function Parameter : bIsDeleteAllPacket : true -> TRdata, 지표data 모두 삭제
											 false -> 지표data만 삭제
						bIsDefault : true -> 빈상태을 디폴트값으로 변경
									 false -> 디폴트값으로 변경 안함
*/
///////////////////////////////////////////////////////////////////////////////
BOOL CWRFuChart::EmptyChart(BOOL bIsDeleteAllPacket, BOOL bIsDefault)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL;
	InvokeHelper(m_pdID[IIx_EmptyChart], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		bIsDeleteAllPacket, bIsDefault);
	return result;
}
// JSR 20060117 Modify End

BOOL CWRFuChart::HasGraph(LPCTSTR p_szGraphName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_HasGraph], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szGraphName);
	return result;
}

void CWRFuChart::RemoveRealItem(LPCTSTR szRealInfo)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_RemoveRealItem], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 szRealInfo);
}

BOOL CWRFuChart::SaveandOpenFromFile(LPCTSTR strOpenFileName, LPCTSTR strSaveFileName, BOOL bOpenOption, BOOL bSaveOption)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BOOL VTS_BOOL;
	InvokeHelper(m_pdID[IIx_SaveandOpenFromFile], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strOpenFileName, strSaveFileName, bOpenOption, bSaveOption);
	return result;
}

short CWRFuChart::ClearChartData(short nOption)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(m_pdID[IIx_ClearChartData], DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		nOption);
	return result;
}

void CWRFuChart::ShowInnerToolBar(BOOL p_bShow)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(m_pdID[IIx_ShowInnerToolBar], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 p_bShow);
}

BOOL CWRFuChart::ChangeVertScalePosition(short nScalePosition, short nRowIndex, short nColumnIndex, short nVSGroupIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(m_pdID[IIx_ChangeVertScalePosition], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nScalePosition, nRowIndex, nColumnIndex, nVSGroupIndex);
	return result;
}


short CWRFuChart::GetRowBlockCount()
{
	short result;
	InvokeHelper(m_pdID[IIx_GetRowBlockCount], DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWRFuChart::GetColumnBlockCount()
{
	short result;
	InvokeHelper(m_pdID[IIx_GetColumnBlockCount], DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

BOOL CWRFuChart::ChangeHorzScalePosition(short nScalePosition, short nRowIndex, short nColumnIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(m_pdID[IIx_ChangeHorzScalePosition], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nScalePosition, nRowIndex, nColumnIndex);
	return result;
}

BOOL CWRFuChart::RemoveChart(LPCTSTR strChartName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_RemoveChart], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strChartName);
	return result;
}

BOOL CWRFuChart::SetStartPeriodOfPacket(LPCTSTR p_szPacketName, long p_lStartPeriod, long p_bAddSpace)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I4;
	InvokeHelper(m_pdID[IIx_SetStartPeriodOfPacket], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szPacketName, p_lStartPeriod, p_bAddSpace);
	return result;
}

long CWRFuChart::GetStartPeriodOfPacket(LPCTSTR p_szPacketName)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_GetStartPeriodOfPacket], DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		p_szPacketName);
	return result;
}

void CWRFuChart::SetStrUserIndicatorListFileName(LPCTSTR propVal)
{
	SetProperty(m_pdID[IIx_StrUserIndicatorListFileName], VT_BSTR, propVal);
}

void CWRFuChart::SetStrUserEnvironmentFileName(LPCTSTR propVal)
{
	SetProperty(m_pdID[IIx_StrUserEnvironmentFileName], VT_BSTR, propVal);
}

BOOL CWRFuChart::GetStartEndDateOnView(double* p_pStartDate, double* p_pEndDate)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8;
	InvokeHelper(m_pdID[IIx_GetStartEndDateOnView], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_pStartDate, p_pEndDate);
	return result;
}

BOOL CWRFuChart::SetStartEndDateOfView(double p_dStartDate, double p_dEndDate)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8;
	InvokeHelper(m_pdID[IIx_SetStartEndDateOfView], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_dStartDate, p_dEndDate);
	return result;
}


BOOL CWRFuChart::ScrollToDataOfEnd(double p_dData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(m_pdID[IIx_ScrollToDataOfEnd], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_dData);
	return result;
}

short CWRFuChart::ZoomToWithRightFix(short p_nZoomValue, BOOL p_bWithRightFix)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_BOOL;
	InvokeHelper(m_pdID[IIx_ZoomToWithRightFix], DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		p_nZoomValue, p_bWithRightFix);
	return result;
}


void CWRFuChart::ClearTimeMark()
{
	InvokeHelper(m_pdID[IIx_ClearTimeMark], DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWRFuChart::ShowEnvironmentDlg()
{
	InvokeHelper(m_pdID[IIx_ShowEnvironmentDlg], DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWRFuChart::SetTimeMark(LPCTSTR p_szMarkTime, BOOL p_bWithScroll)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL;
	InvokeHelper(m_pdID[IIx_SetTimeMark], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 p_szMarkTime, p_bWithScroll);
}


void CWRFuChart::SetBOcxAreaNumericalInquiry(BOOL propVal)
{
	SetProperty(m_pdID[IIx_BOcxAreaNumericalInquiry], VT_BOOL, propVal);
}

BOOL CWRFuChart::GetOnRunningOneChart()
{
	BOOL result;
	GetProperty(m_pdID[IIx_OnRunningOneChart], VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::EnableBoundMark(BOOL p_bEnable)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(m_pdID[IIx_EnableBoundMark], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 p_bEnable);
}

void CWRFuChart::EnableReceivingTimeShare(BOOL p_bEnable)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(m_pdID[IIx_EnableReceivingTimeShare], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 p_bEnable);
}

BOOL CWRFuChart::ChangePacketType(LPCTSTR p_szPacketName, LPCTSTR p_szPacketType)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(m_pdID[IIx_ChangePacketType], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szPacketName, p_szPacketType);
	return result;
}

BOOL CWRFuChart::ChangePriceGraphDrawingData(BOOL p_bLowHigh, BOOL p_bLowCur, BOOL p_bHighCur, BOOL p_bPrevCur, short p_nCurData, short p_nDefaultType)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL VTS_BOOL VTS_BOOL VTS_I2 VTS_I2;
	InvokeHelper(m_pdID[IIx_ChangePriceGraphDrawingData], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_bLowHigh, p_bLowCur, p_bHighCur, p_bPrevCur, p_nCurData, p_nDefaultType);
	return result;
}

void CWRFuChart::SetNUseInquiryWithCrossline(short propVal)
{
	SetProperty(m_pdID[IIx_NUseInquiryWithCrossline], VT_I2, propVal);
}

short CWRFuChart::GetNUseInquiryWithCrossline()
{
	short result;
	GetProperty(m_pdID[IIx_NUseInquiryWithCrossline], VT_I2, (void*)&result);
	return result;
}

BOOL CWRFuChart::GetBShowPriceRateInquiry()
{
	BOOL result;
	GetProperty(m_pdID[IIx_BShowPriceRateInquiry], VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBShowPriceRateInquiry(BOOL propVal)
{
	SetProperty(m_pdID[IIx_BShowPriceRateInquiry], VT_BOOL, propVal);
}

BOOL CWRFuChart::GetBNormalizedMinuteTimeRule()
{
	BOOL result;
	GetProperty(m_pdID[IIx_BNormalizedMinuteTimeRule], VT_BOOL, (void*)&result);
	return result;
}
void CWRFuChart::SetBNormalizedMinuteTimeRule(BOOL propVal)
{
	SetProperty(m_pdID[IIx_BNormalizedMinuteTimeRule], VT_BOOL, propVal);
}

// (2008/11/3 - Seung-Won, Bae) for Gap Revision Info.
BOOL CWRFuChart::GetBUseGapRevision()
{
	BOOL result;
	GetProperty( m_pdID[ IIx_BUseGapRevision], VT_BOOL, (void*)&result);
	return result;
}
void CWRFuChart::SetBUseGapRevision(BOOL propVal)
{
	SetProperty( m_pdID[IIx_BUseGapRevision], VT_BOOL, propVal);
}


BOOL CWRFuChart::HasGraphInSpecialBack(LPCTSTR p_szGraphName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_HasGraphInSpecialBack], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szGraphName);
	return result;
}

BOOL CWRFuChart::InvokeAddIn(LPCTSTR p_szAddInDllName, short p_nCommandType, long p_lData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I4;
	InvokeHelper(m_pdID[IIx_InvokeAddIn], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szAddInDllName, p_nCommandType, p_lData);
	return result;
}

BOOL CWRFuChart::LoadAddIn(LPCTSTR p_szAddInDllName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_LoadAddIn], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szAddInDllName);
	return result;
}

void CWRFuChart::SetDragModeType(short p_nDragModeType)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(m_pdID[IIx_SetDragModeType], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 p_nDragModeType);
}

void CWRFuChart::SetHtsPath(LPCTSTR pcszHtsPath)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_SetHtsPath], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pcszHtsPath);
}

void CWRFuChart::SetAllLogScale(BOOL bLogScale)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(m_pdID[IIx_SetAllLogScale], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bLogScale);
}

void CWRFuChart::GetListViewerData(BSTR* bstrTitle, BSTR* bstrHorzScale, BSTR* bstrPacketNamesPerBlock, BSTR* bstrPacketNames, BSTR* bstrSaveFilePath, BOOL* bViewPacketSequence, long* lpPacketList)
{
	static BYTE parms[] =
		VTS_PBSTR VTS_PBSTR VTS_PBSTR VTS_PBSTR VTS_PBSTR VTS_PBOOL VTS_PI4;
	InvokeHelper(m_pdID[IIx_GetListViewerData], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bstrTitle, bstrHorzScale, bstrPacketNamesPerBlock, bstrPacketNames, bstrSaveFilePath, bViewPacketSequence, lpPacketList);
}

void CWRFuChart::SetDataIndexByDate(LPCTSTR pcszStartDate, LPCTSTR pcszEndDate)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(m_pdID[IIx_SetDataIndexByDate], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pcszStartDate, pcszEndDate);
}


//2005. 07. 15 이후 추가 ================================================================
void CWRFuChart::SetRunTimeMode(BOOL bRunTimeMode)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(m_pdID[IIx_SetRunTimeMode], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bRunTimeMode);
}

CString CWRFuChart::GetPacketOption()
{
	CString result;
	InvokeHelper(m_pdID[IIx_GetPacketOption], DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CWRFuChart::SetPacketOption(LPCTSTR strPacketOption)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_SetPacketOption], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 strPacketOption);
}

void CWRFuChart::SetOutsideCommonInterface(long lpOutsideCommonInterface)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(m_pdID[IIx_SetOutsideCommonInterface], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lpOutsideCommonInterface);
}


BOOL CWRFuChart::RemoveGraph_Title(short nRowIndex, short nColumnIndex, LPCTSTR szGraphTitle, BOOL bIsOnlyNoTRData, BOOL bIsAutoHorzScalePosition)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_BSTR VTS_BOOL VTS_BOOL;
	InvokeHelper(m_pdID[IIx_RemoveGraph_Title], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nRowIndex, nColumnIndex, szGraphTitle, bIsOnlyNoTRData, bIsAutoHorzScalePosition);
	return result;
}


CString CWRFuChart::GetGraphPacketName(short nRowIndex, short nColumnIndex, LPCTSTR szGraphTitle)
{
	CString result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_BSTR;
	InvokeHelper(m_pdID[IIx_GetGraphPacketName], DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		nRowIndex, nColumnIndex, szGraphTitle);
	return result;
}

BOOL CWRFuChart::ChangeGraphTitle2(LPCTSTR szTargetTitle, LPCTSTR szSourceTitle)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(m_pdID[IIx_ChangeGraphTitle2], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szTargetTitle, szSourceTitle);
	return result;
}

BOOL CWRFuChart::PartitionAllGraph()
{
	BOOL result;
	InvokeHelper(m_pdID[IIx_PartitionAllGraph], DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CWRFuChart::JoinAllGraph(BOOL bIsOneVertScaleGroup)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(m_pdID[IIx_JoinAllGraph], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		bIsOneVertScaleGroup);
	return result;
}

void CWRFuChart::SetBSelectTitle(BOOL propVal)
{
	SetProperty(m_pdID[IIx_SetBSelectTitle], VT_BOOL, propVal);
}

BOOL CWRFuChart::ChangeAllFunctionName(LPCTSTR szTargetFunctionName, LPCTSTR szSourceFunctionName, BOOL bKeepOldGraphColor)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BOOL;
	InvokeHelper(m_pdID[IIx_ChangeAllFunctionName], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szTargetFunctionName, szSourceFunctionName, bKeepOldGraphColor);
	return result;
}

BOOL CWRFuChart::ChangeIndicatorPacketName(LPCTSTR strIndicatorName, short nSubGraphIndex, LPCTSTR strNewPacketName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_BSTR;
	InvokeHelper(m_pdID[IIx_ChangeIndicatorPacketName], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strIndicatorName, nSubGraphIndex, strNewPacketName);
	return result;
}

void CWRFuChart::RunEnvironmentDlg(short nOption)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(m_pdID[IIx_RunEnvironmentDlg], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nOption);
}

BOOL CWRFuChart::SetIndicatorCondition(LPCTSTR strIndicatorName, short nConditionType, short nConditionIndex, short dValue, BOOL bReCalculate)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I2 VTS_I2 VTS_BOOL;
	InvokeHelper(m_pdID[IIx_SetIndicatorCondition], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strIndicatorName, nConditionType, nConditionIndex, dValue, bReCalculate);
	return result;
}

BOOL CWRFuChart::SetLogScale(LPCTSTR strIndicatorName, BOOL bLogScale)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL;
	InvokeHelper(m_pdID[IIx_SetLogScale], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strIndicatorName, bLogScale);
	return result;
}

BOOL CWRFuChart::GetLogScale(LPCTSTR strIndicatorName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_GetLogScale], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strIndicatorName);
	return result;
}

BOOL CWRFuChart::SetHelpMessageRealDataRate(LPCTSTR strHelpMessageData, BOOL bIsRemove)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL;
	InvokeHelper(m_pdID[IIx_SetHelpMessageRealDataRate], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strHelpMessageData, bIsRemove);
	return result;
}

BOOL CWRFuChart::InvokeAddInStr(LPCTSTR p_szAddInDllName, LPCTSTR p_szCommandName, LPCTSTR p_szData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(m_pdID[IIx_InvokeAddInStr], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szAddInDllName, p_szCommandName, p_szData);
	return result;
}

BOOL CWRFuChart::SetGraphHide3(LPCTSTR strTitle, BOOL bIsHide)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL;
	InvokeHelper(m_pdID[IIx_SetGraphHide3], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strTitle, bIsHide);
	return result;
}

void CWRFuChart::SetOnePageDataCount2(long nOnePageDataCount, BOOL bIncludeRightMargin)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(m_pdID[IIx_SetOnePageDataCount2], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nOnePageDataCount, bIncludeRightMargin);
}

//BOOL CWRFuChart::SetPacketDataInAdditionPacket(LPCTSTR szPacketName, long szData, long szSize, BOOL bReset)
//{
//	BOOL result;
//	static BYTE parms[] =
//		VTS_BSTR VTS_I4 VTS_BOOL;
//	InvokeHelper(m_pdID[IIx_SetPacketDataInAdditionPacket], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
//		szPacketName, szData, bReset);
//	return result;
//}

BOOL CWRFuChart::SetPacketDataInAdditionPacket(LPCTSTR szPacketName, long szData, long nLength, BOOL bReset)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(m_pdID[IIx_SetPacketDataInAdditionPacket], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szPacketName, szData, nLength, bReset);
	return result;
}

void CWRFuChart::SetOnePageDataCount(long nOnePageDataCount)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(m_pdID[IIx_SetOnePageDataCount], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nOnePageDataCount);
}

BOOL CWRFuChart::SetPacketHelpMessage(LPCTSTR strHelpMsg, BOOL bIsAllRemove)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL;
	InvokeHelper(m_pdID[IIx_SetPacketHelpMessage], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strHelpMsg, bIsAllRemove);
	return result;
}


void CWRFuChart::SetRealData(LPCTSTR strPacketName, double dData, short nOption)
{
	static BYTE parms[] =
		VTS_BSTR VTS_R8 VTS_I2;
	InvokeHelper(m_pdID[IIx_SetRealData], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 strPacketName, dData, nOption);
}

void CWRFuChart::PrintChatImage()
{
	InvokeHelper(m_pdID[IIx_PrintChatImage], DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWRFuChart::ExportToExcel()
{
	InvokeHelper(m_pdID[IIx_ExportToExcel], DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//===========================================================================================
// 2006. 08. 24 추가
BOOL CWRFuChart::LoadAddInWithOverExclusive(LPCTSTR p_szAddInName)
{
	BOOL result;
	static BYTE parms[] = VTS_BSTR ;
	InvokeHelper(m_pdID[IIx_LoadAddInWithOverExclusive], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, p_szAddInName);
	return result;
}

long CWRFuChart::GetAllProperties3(long p_lIPropertyMap)
{
	long result;
	static BYTE parms[] = VTS_I4 ;
	InvokeHelper(m_pdID[IIx_GetAllProperties3], DISPATCH_METHOD, VT_I4, (void*)&result, parms, p_lIPropertyMap);
	return result;
}
long CWRFuChart::SetAllProperties3(long p_lIPropertyMap)
{
	long result;
	static BYTE parms[] = VTS_I4 ;
	InvokeHelper(m_pdID[IIx_SetAllProperties3], DISPATCH_METHOD, VT_I4, (void*)&result, parms, p_lIPropertyMap);
	return result;
}

LPUNKNOWN CWRFuChart::GetAddInCustomInterface(LPCTSTR p_szAddInName)
{
	LPUNKNOWN result = NULL;
	static BYTE parms[] = VTS_BSTR ;
	InvokeHelper(m_pdID[IIx_GetAddInCustomInterface], DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, parms, p_szAddInName);
	return result;
}
//===========================================================================================

//===========================================================================================
// 2006. 08. 24 추가
BOOL CWRFuChart::ShowIndicatorConfigDlgWithName(LPCTSTR p_szIndicatorName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_ShowIndicatorConfigDlgWithName], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szIndicatorName);
	return result;
}
//===========================================================================================

//===========================================================================================
// 2006. 12. 12 추가
BOOL CWRFuChart::GetBEnableIndicatorCalculation()
{
	BOOL result;
	GetProperty(m_pdID[IIx_BEnableIndicatorCalculation], VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBEnableIndicatorCalculation(BOOL propVal)
{
	SetProperty(m_pdID[IIx_BEnableIndicatorCalculation], VT_BOOL, propVal);
}

CString CWRFuChart::GetStrChartList()
{
	CString result;
	GetProperty(m_pdID[IIx_StrChartList], VT_BSTR, (void*)&result);
	return result;
}

void CWRFuChart::SetStrChartList(LPCTSTR propVal)
{
	SetProperty(m_pdID[IIx_StrChartList], VT_BSTR, propVal);
}

BOOL CWRFuChart::GetBWholeView()
{
	BOOL result;
	GetProperty(m_pdID[IIx_BWholeView], VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBWholeView(BOOL propVal)
{
	SetProperty(m_pdID[IIx_BWholeView], VT_BOOL, propVal);
}
//===========================================================================================
BOOL CWRFuChart::EmptyChart2(LPCTSTR p_szChartList, BOOL p_bIsDeleteAllPacket, BOOL p_bIsDefault)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL VTS_BOOL;
	InvokeHelper(m_pdID[IIx_EmptyChart2], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szChartList, p_bIsDeleteAllPacket, p_bIsDefault);
	return result;
}

CString CWRFuChart::AddChartItem(LPCTSTR lpszItemCode, LPCTSTR lpszItemName, BOOL bBuiltChart)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BOOL;
	InvokeHelper(m_pdID[IIx_AddChartItem], DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		lpszItemCode, lpszItemName, bBuiltChart);
	return result;
}

// (2008/9/14 - Seung-Won, Bae) for Pair Tick
CString CWRFuChart::AddPairItem(LPCTSTR p_szItemCode, LPCTSTR p_szItemName, BOOL p_bBuildChart)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BOOL;
	InvokeHelper( m_pdID[IIx_AddPairItem], DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		p_szItemCode, p_szItemName, p_bBuildChart);
	return result;
}

void CWRFuChart::SetRealDataCode(LPCTSTR strCode, LPCTSTR strPacketName, double dData, short nOption)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_R8 VTS_I2;
	InvokeHelper(m_pdID[IIx_SetRealDataCode], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		strCode, strPacketName, dData, nOption);
}

void CWRFuChart::AddPacketRQ(LPCTSTR lpszRQ, LPCTSTR lpszPacketOption)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(m_pdID[IIx_AddPacketRQ], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		lpszRQ, lpszPacketOption);
}

BOOL CWRFuChart::SetPacketDataRQ(LPCTSTR lpszRQ, LPCTSTR lpszPacketName, long nData, long nLength, BOOL bReset)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(m_pdID[IIx_SetPacketDataRQ], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lpszRQ, lpszPacketName, nData, nLength, bReset);
	return result;
}

BOOL CWRFuChart::AddChartItemRQ(LPCTSTR lpszRQ, LPCTSTR lpszItemCode, LPCTSTR lpszItemName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(m_pdID[IIx_AddChartItemRQ], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lpszRQ, lpszItemCode, lpszItemName);
	return result;
}

void CWRFuChart::SetCurrentRQ(LPCTSTR lpszRQ)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_SetCurrentRQ], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		lpszRQ);
}

// xScaleManager : xScaleManager - ojtaso (20070529)
void CWRFuChart::SetResetTotalCountWhileDraw(BOOL bReset) 
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(m_pdID[IIx_SetResetTotalCountWhileDraw], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		bReset);
}

// 차트DLL에서 복수종목을 사용할지 : 복수종목 - ojtaso (20070904)
void CWRFuChart::SetMultiItemMode(BOOL bMultiItem) 
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(m_pdID[IIx_SetMultiItemMode], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		bMultiItem);
}

// (2008/2/13 - Seung-Won, Bae) for MultiLanguage.
short CWRFuChart::GetNLanguageID()
{
	short result;
	GetProperty( m_pdID[IIx_NLanguageID], VT_I2, (void*)&result);
	return result;
}
void CWRFuChart::SetNLanguageID(short propVal)
{
	SetProperty( m_pdID[IIx_NLanguageID], VT_I2, propVal);
}

// (2008/5/22 - Seung-Won, Bae) Use page info for User File Path Redirection.
void CWRFuChart::SetBFreezedPageState(BOOL propVal)
{
	SetProperty( m_pdID[ IIx_bFreezedPageState], VT_BOOL, propVal);
}
CString CWRFuChart::GetStrPagePathWithPrefix()
{
	CString result;
	GetProperty( m_pdID[ IIx_strPagePathWithPrefix], VT_BSTR, (void*)&result);
	return result;
}
void CWRFuChart::SetStrPagePathWithPrefix(LPCTSTR propVal)
{
	SetProperty( m_pdID[ IIx_strPagePathWithPrefix], VT_BSTR, propVal);
}

// (2008/9/14 - Seung-Won, Bae) for Pair Tick
BOOL CWRFuChart::HasIndicatorWithRQ(LPCTSTR p_szIndicatorName, LPCTSTR p_szRQ)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper( m_pdID[ IIx_HasIndicatorWithRQ], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szIndicatorName, p_szRQ);
	return result;
}
void CWRFuChart::RemoveAllGraphOfRQ(LPCTSTR p_szRQ)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper( m_pdID[ IIx_RemoveAllGraphOfRQ], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 p_szRQ);
}
short CWRFuChart::GetRowOfGraphWithRQ(LPCTSTR p_szIndicatorName, LPCTSTR p_szRQ)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper( m_pdID[ IIx_GetRowOfGraphWithRQ], DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		p_szIndicatorName, p_szRQ);
	return result;
}
BOOL CWRFuChart::SetGraphColorWithRQ(LPCTSTR p_szRQ, LPCTSTR p_szIndicatorName, LPCTSTR p_szColor)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper( m_pdID[ IIx_SetGraphColorWithRQ], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szRQ, p_szIndicatorName, p_szColor);
	return result;
}

BOOL CWRFuChart::SaveandOpenFromAnalToolFile(LPCTSTR lpszOpenFileName, LPCTSTR lpszSaveFileName, BOOL bOpenOption, BOOL bSaveOption)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BOOL VTS_BOOL;
//	InvokeHelper(0x111, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
	InvokeHelper(m_pdID[IIx_SaveandOpenFromAnalToolFile], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lpszOpenFileName, lpszSaveFileName, bOpenOption, bSaveOption);
	return result;
}

void CWRFuChart::SetItemInfo(LPCTSTR lpstrCode, LPCTSTR lpstrName)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(m_pdID[IIx_SetItemInfo], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		lpstrCode, lpstrName);
}

long CWRFuChart::GetNFullDataCount()
{
	long result;
	GetProperty( m_pdID[ IIx_NFullDataCount], VT_I4, (void*)&result);
	return result;
}

// (2008/3/3 - Seung-Won, Bae) to avoid the old version loading.
DISPID CWRFuChart::m_pdID[ CWRFuChart::IIx_InterfaceCount] = { NULL, };

///////////////////////////////////////////////////////////////////////////////
//	작업자	:	배승원(Seung-Won, Bae)
//	E-Mail	:	radox@dooriic.co.kr
//	일자	:	2003.03.27
//
//	목적	:	CodeInput OCX의 Interface를 Dispatch하여 관리한다.
///////////////////////////////////////////////////////////////////////////////
OLECHAR *CWRFuChart::m_osInterfaceName[] = {
	L"SetAllProperties2",
	L"SetBaseDesk",
	L"GetBase",
	L"AddGraph",
	L"AddPacket",
	L"RemovePacket",
	L"GetIndicatorNameList",
	L"SetContainerDllInfo",
	L"SetChartData",
	L"SetPacketData",
	L"AddChartBlock",
	L"ResetChart",
	L"SetBackgroundColors",
	L"SetDrdsAdvise",
	L"AddRealItem",
	L"ShowIndicatorConfigDlg",
	L"NOnePageDataCount",
	L"StrStartDateOfData",
	L"ResetChartCfgWith",
	L"EmptyChart",
	L"HasGraph",
	L"RemoveRealItem",
	L"SaveandOpenFromFile",
	L"ClearChartData",
	L"ShowInnerToolBar",
	L"ChangeVertScalePosition",
	L"GetRowBlockCount",
	L"GetColumnBlockCount",
	L"ChangeHorzScalePosition",
	L"RemoveChart",
	L"SetStartPeriodOfPacket",
	L"GetStartPeriodOfPacket",
	L"StrUserIndicatorListFileName",
	L"StrUserEnvironmentFileName",
	L"GetStartEndDateOnView",
	L"SetStartEndDateOfView",
	L"ScrollToDataOfEnd",
	L"ZoomToWithRightFix",
	L"ClearTimeMark",
	L"ShowEnvironmentDlg",
	L"SetTimeMark",
	L"BOcxAreaNumericalInquiry",
	L"OnRunningOneChart",
	L"EnableBoundMark",
	L"EnableReceivingTimeShare",
	L"ChangePacketType",
	L"ChangePriceGraphDrawingData",
	L"NUseInquiryWithCrossline",
	L"BShowPriceRateInquiry",
	L"BNormalizedMinuteTimeRule",
	L"BUseGapRevision",			// (2008/11/3 - Seung-Won, Bae) for Gap Revision Info.
	L"HasGraphInSpecialBack",
	L"InvokeAddIn",
	L"LoadAddIn",
	L"SetDragModeType",
	L"SetHtsPath",
	L"SetAllLogScale",
	L"GetListViewerData",
	L"SetDataIndexByDate",
	L"SetRunTimeMode",				//2005. 07. 15 이후 추가 
	L"GetPacketOption",
	L"SetPacketOption",
	L"SetOutsideCommonInterface",
	L"RemoveGraph_Title",
	L"GetGraphPacketName",
	L"ChangeGraphTitle2",
	L"PartitionAllGraph",
	L"JoinAllGraph",
	L"SetBSelectTitle",
	L"ChangeAllFunctionName",
	L"ChangeIndicatorPacketName",
	L"RunEnvironmentDlg",
	L"SetIndicatorCondition",
	L"SetLogScale",
	L"GetLogScale",
	L"SetHelpMessageRealDataRate",
	L"InvokeAddInStr",
	L"SetGraphHide3",
	L"SetOnePageDataCount2",
	L"SetPacketDataInAdditionPacket",
	L"SetOnePageDataCount",
	L"SetPacketHelpMessage",
	L"SetRealData",
	L"PrintChatImage",
	L"ExportToExcel",
	L"LoadAddInWithOverExclusive",
	L"GetAllProperties3",
	L"SetAllProperties3",
	L"GetAddInCustomInterface",
	L"ShowIndicatorConfigDlgWithName",
	L"bEnableIndicatorCalculation",
	L"StrChartList",
	L"bWholeView",
	L"EmptyChart2",
	L"AddChartItem",		// 복수종목에 사용되는 인터페이스 : 복수종목 - ojtaso (20070206)
	L"AddPairItem",			// (2008/9/14 - Seung-Won, Bae) for Pair Tick
	L"SetRealDataCode",		// 복수종목에 사용되는 인터페이스 : 복수종목 - ojtaso (20070206)
	L"AddPacketRQ",			// 복수종목 불러오기 : 복수종목 - ojtaso (20070514)
	L"SetPacketDataRQ",		// 복수종목 불러오기 : 복수종목 - ojtaso (20070514)
	L"AddChartItemRQ",		// 복수종목 불러오기 : 복수종목 - ojtaso (20070514)
	L"SetCurrentRQ",		// 복수종목 불러오기 : 복수종목 - ojtaso (20070514)
	L"SetResetTotalCountWhileDraw",			// xScaleManager : xScaleManager - ojtaso (20070529)
	L"SetMultiItemMode",			// 복수종목을 사용할지 : 복수종목 - ojtaso (20070904)
	L"ChangeGraphDrawingData",
	L"ChangeGraphTitle",
	L"AddChartAllBlock",		// 모든 RQ의 그래프의 차트 변경 - ojtaso (20080516)
	L"ChangeGraphPropertyAtOnce",
	L"ShowGraphDataDrawingData",
	L"ShowSelEnvironmentDlg",
	L"GetVertScaleGroupCount",
	L"nLanguageID",
	L"bFreezedPageState",		// (2008/5/22 - Seung-Won, Bae) Use page info for User File Path Redirection.
	L"strPagePathWithPrefix",
	L"HasIndicatorWithRQ",		// (2008/9/14 - Seung-Won, Bae) for Pair Tick
	L"RemoveAllGraphOfRQ",
	L"GetRowOfGraphWithRQ",
	L"SetGraphColorWithRQ",
	L"SaveandOpenFromAnalToolFile",
	L"SetItemInfo",
	L"NFullDataCount",		// (2008/11/3 - Seung-Won, Bae) Support m_nFullDataCount to MultiChart.
// --> [Edit]  강지원 2008/11/09
	L"RemoveBlockWithIndex",
//	L"LockWindowUpdate",
//	L"UnlockWindowUpdate",
	L"GetAllProperties2",
// <-- [Edit]  강지원 2008/11/09
};

CWRFuChart::CWRFuChart()
{
//	m_pdID = NULL;
}

CWRFuChart::~CWRFuChart()
{
//	if( m_pdID)
//	{
//		delete m_pdID;
//		m_pdID = NULL;
//	}
}

// (2008/4/29 - Seung-Won, Bae) to use the ProgID in ChartMetaTable.dat
BOOL CWRFuChart::Create( CString strDataPath, LPCTSTR lpszWindowName, DWORD dwStyle,
	const RECT& rect, CWnd* pParentWnd, UINT nID,
	CFile* pPersist /*= NULL*/, BOOL bStorage/* = FALSE*/,
	BSTR bstrLicKey/* = NULL*/)
{
	BOOL bResult = CreateControl(GetClsid(strDataPath), lpszWindowName, dwStyle, rect, pParentWnd, nID, pPersist, bStorage, bstrLicKey);
	// (2008/3/3 - Seung-Won, Bae) to avoid the old version loading.
	if( bResult && !m_pdID[ 0])
	{
		IUnknown* pUnk = GetControlUnknown();
		if( pUnk)
		{
			IDispatch *pDisp = NULL;
			HRESULT hr = pUnk->QueryInterface( IID_IDispatch, (void**)&pDisp);
			if( !FAILED(hr))
			{
				pUnk->Release();				
				int i, nCount = IIx_InterfaceCount;
//				m_pdID = new DISPID[ nCount];
				for( i = 0; i < nCount; i++)
					pDisp->GetIDsOfNames( IID_NULL, &m_osInterfaceName[ i], 1, LOCALE_USER_DEFAULT, &m_pdID[ i]);
			}
		}
		
	}

	return bResult;
}

// (2008/11/21 - Seung-Won, Bae) for TEST of Controless
#ifdef _DEBUG
void CWRFuChart::InvokeHelper(DISPID dwDispID, WORD wFlags, VARTYPE vtRet,
	void* pvRet, const BYTE* pbParamInfo, ...)
{
	if (m_pCtrlSite == NULL)
		return;

	va_list argList;
	va_start(argList, pbParamInfo);
	m_pCtrlSite->InvokeHelperV(dwDispID, wFlags, vtRet, pvRet, pbParamInfo,
		argList);
	va_end(argList);
}
void CWRFuChart::GetProperty(DISPID dwDispID, VARTYPE vtProp,
	void* pvProp) const
{
	if (m_pCtrlSite == NULL)
		return;

	CWnd::GetProperty( dwDispID, vtProp, pvProp);
}
void CWRFuChart::SetProperty(DISPID dwDispID, VARTYPE vtProp, ...)
{
	if (m_pCtrlSite == NULL)
		return;

	va_list argList;    // really only one arg, but...
	va_start(argList, vtProp);
	m_pCtrlSite->SetPropertyV(dwDispID, vtProp, argList);
	va_end(argList);
}
#endif

/*
void CWRFuChart::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

BOOL CWRFuChart::GetBNormalizedMinuteTimeRule()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBNormalizedMinuteTimeRule(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}

long CWRFuChart::GetNBlockType()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetNBlockType(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

long CWRFuChart::GetNBlockCompart()
{
	long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetNBlockCompart(long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

long CWRFuChart::GetNBlockRowCount()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetNBlockRowCount(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

long CWRFuChart::GetNBlockColumnCount()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetNBlockColumnCount(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

long CWRFuChart::GetNBlockGap()
{
	long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetNBlockGap(long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

long CWRFuChart::GetNBlockBorderThickness()
{
	long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetNBlockBorderThickness(long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

CString CWRFuChart::GetStrAddInLoadList()
{
	CString result;
	GetProperty(0x8, VT_BSTR, (void*)&result);
	return result;
}

void CWRFuChart::SetStrAddInLoadList(LPCTSTR propVal)
{
	SetProperty(0x8, VT_BSTR, propVal);
}

long CWRFuChart::GetNBorderType()
{
	long result;
	GetProperty(0x9, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetNBorderType(long propVal)
{
	SetProperty(0x9, VT_I4, propVal);
}

long CWRFuChart::GetNScaleLineType()
{
	long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetNScaleLineType(long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}

BOOL CWRFuChart::GetBWholeView()
{
	BOOL result;
	GetProperty(0xb, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBWholeView(BOOL propVal)
{
	SetProperty(0xb, VT_BOOL, propVal);
}

long CWRFuChart::GetNOnePageDataCount()
{
	long result;
	GetProperty(0xc, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetNOnePageDataCount(long propVal)
{
	SetProperty(0xc, VT_I4, propVal);
}

long CWRFuChart::GetNUserBlockAddCount()
{
	long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetNUserBlockAddCount(long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}

BOOL CWRFuChart::GetBGraphDragDrop()
{
	BOOL result;
	GetProperty(0xe, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBGraphDragDrop(BOOL propVal)
{
	SetProperty(0xe, VT_BOOL, propVal);
}

long CWRFuChart::GetNLeftMargin()
{
	long result;
	GetProperty(0xf, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetNLeftMargin(long propVal)
{
	SetProperty(0xf, VT_I4, propVal);
}

long CWRFuChart::GetNRightMargin()
{
	long result;
	GetProperty(0x10, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetNRightMargin(long propVal)
{
	SetProperty(0x10, VT_I4, propVal);
}

long CWRFuChart::GetNTopMargin()
{
	long result;
	GetProperty(0x11, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetNTopMargin(long propVal)
{
	SetProperty(0x11, VT_I4, propVal);
}

long CWRFuChart::GetNBottomMargin()
{
	long result;
	GetProperty(0x12, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetNBottomMargin(long propVal)
{
	SetProperty(0x12, VT_I4, propVal);
}

BOOL CWRFuChart::GetBAddGraphMenuShow()
{
	BOOL result;
	GetProperty(0x13, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBAddGraphMenuShow(BOOL propVal)
{
	SetProperty(0x13, VT_BOOL, propVal);
}

CString CWRFuChart::GetStrUserEnvironmentFileName()
{
	CString result;
	GetProperty(0x14, VT_BSTR, (void*)&result);
	return result;
}

void CWRFuChart::SetStrUserEnvironmentFileName(LPCTSTR propVal)
{
	SetProperty(0x14, VT_BSTR, propVal);
}

CString CWRFuChart::GetStrUserIndicatorListFileName()
{
	CString result;
	GetProperty(0x15, VT_BSTR, (void*)&result);
	return result;
}

void CWRFuChart::SetStrUserIndicatorListFileName(LPCTSTR propVal)
{
	SetProperty(0x15, VT_BSTR, propVal);
}

CString CWRFuChart::GetStrUserSeriesListFileName()
{
	CString result;
	GetProperty(0x16, VT_BSTR, (void*)&result);
	return result;
}

void CWRFuChart::SetStrUserSeriesListFileName(LPCTSTR propVal)
{
	SetProperty(0x16, VT_BSTR, propVal);
}

BOOL CWRFuChart::GetBHide()
{
	BOOL result;
	GetProperty(0x17, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBHide(BOOL propVal)
{
	SetProperty(0x17, VT_BOOL, propVal);
}

BOOL CWRFuChart::GetBIsInput()
{
	BOOL result;
	GetProperty(0x18, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBIsInput(BOOL propVal)
{
	SetProperty(0x18, VT_BOOL, propVal);
}

CString CWRFuChart::GetStrToolbarOption()
{
	CString result;
	GetProperty(0x19, VT_BSTR, (void*)&result);
	return result;
}

void CWRFuChart::SetStrToolbarOption(LPCTSTR propVal)
{
	SetProperty(0x19, VT_BSTR, propVal);
}

CString CWRFuChart::GetStrPacketOption()
{
	CString result;
	GetProperty(0x1a, VT_BSTR, (void*)&result);
	return result;
}

void CWRFuChart::SetStrPacketOption(LPCTSTR propVal)
{
	SetProperty(0x1a, VT_BSTR, propVal);
}

CString CWRFuChart::GetStrLocalSharedList()
{
	CString result;
	GetProperty(0x1b, VT_BSTR, (void*)&result);
	return result;
}

void CWRFuChart::SetStrLocalSharedList(LPCTSTR propVal)
{
	SetProperty(0x1b, VT_BSTR, propVal);
}

BOOL CWRFuChart::GetBUseRealData()
{
	BOOL result;
	GetProperty(0x1c, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBUseRealData(BOOL propVal)
{
	SetProperty(0x1c, VT_BOOL, propVal);
}

CString CWRFuChart::GetStrRealList()
{
	CString result;
	GetProperty(0x1d, VT_BSTR, (void*)&result);
	return result;
}

void CWRFuChart::SetStrRealList(LPCTSTR propVal)
{
	SetProperty(0x1d, VT_BSTR, propVal);
}

short CWRFuChart::GetNMarginBorderType()
{
	short result;
	GetProperty(0x1e, VT_I2, (void*)&result);
	return result;
}

void CWRFuChart::SetNMarginBorderType(short propVal)
{
	SetProperty(0x1e, VT_I2, propVal);
}

long CWRFuChart::GetNRowDoubleSizeBlock()
{
	long result;
	GetProperty(0x1f, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetNRowDoubleSizeBlock(long propVal)
{
	SetProperty(0x1f, VT_I4, propVal);
}

BOOL CWRFuChart::GetBUseInquiryDlgWhenUseCrossLine()
{
	BOOL result;
	GetProperty(0x20, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBUseInquiryDlgWhenUseCrossLine(BOOL propVal)
{
	SetProperty(0x20, VT_BOOL, propVal);
}

long CWRFuChart::GetNColumnDoubleSizeBlock()
{
	long result;
	GetProperty(0x21, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetNColumnDoubleSizeBlock(long propVal)
{
	SetProperty(0x21, VT_I4, propVal);
}

BOOL CWRFuChart::GetBUseShortKey()
{
	BOOL result;
	GetProperty(0x22, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBUseShortKey(BOOL propVal)
{
	SetProperty(0x22, VT_BOOL, propVal);
}

BOOL CWRFuChart::GetBUseConditiontoTitle()
{
	BOOL result;
	GetProperty(0x23, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBUseConditiontoTitle(BOOL propVal)
{
	SetProperty(0x23, VT_BOOL, propVal);
}

BOOL CWRFuChart::GetBUseDatatoTitle()
{
	BOOL result;
	GetProperty(0x24, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBUseDatatoTitle(BOOL propVal)
{
	SetProperty(0x24, VT_BOOL, propVal);
}

short CWRFuChart::GetNHorzGap()
{
	short result;
	GetProperty(0x25, VT_I2, (void*)&result);
	return result;
}

void CWRFuChart::SetNHorzGap(short propVal)
{
	SetProperty(0x25, VT_I2, propVal);
}

short CWRFuChart::GetNVertGap()
{
	short result;
	GetProperty(0x26, VT_I2, (void*)&result);
	return result;
}

void CWRFuChart::SetNVertGap(short propVal)
{
	SetProperty(0x26, VT_I2, propVal);
}

short CWRFuChart::GetNRButtonMenuType()
{
	short result;
	GetProperty(0x27, VT_I2, (void*)&result);
	return result;
}

void CWRFuChart::SetNRButtonMenuType(short propVal)
{
	SetProperty(0x27, VT_I2, propVal);
}

BOOL CWRFuChart::GetBShowWarningMessageBox()
{
	BOOL result;
	GetProperty(0x28, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBShowWarningMessageBox(BOOL propVal)
{
	SetProperty(0x28, VT_BOOL, propVal);
}

BOOL CWRFuChart::GetBControlBlockSize()
{
	BOOL result;
	GetProperty(0x29, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBControlBlockSize(BOOL propVal)
{
	SetProperty(0x29, VT_BOOL, propVal);
}

BOOL CWRFuChart::GetBBlockMoveDelete()
{
	BOOL result;
	GetProperty(0x2a, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBBlockMoveDelete(BOOL propVal)
{
	SetProperty(0x2a, VT_BOOL, propVal);
}

BOOL CWRFuChart::GetBSelectTitle()
{
	BOOL result;
	GetProperty(0x2b, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBSelectTitle(BOOL propVal)
{
	SetProperty(0x2b, VT_BOOL, propVal);
}

BOOL CWRFuChart::GetBSelectGraph()
{
	BOOL result;
	GetProperty(0x2c, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBSelectGraph(BOOL propVal)
{
	SetProperty(0x2c, VT_BOOL, propVal);
}

BOOL CWRFuChart::GetBUseScaleRButtonMenu()
{
	BOOL result;
	GetProperty(0x2d, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBUseScaleRButtonMenu(BOOL propVal)
{
	SetProperty(0x2d, VT_BOOL, propVal);
}

short CWRFuChart::GetNGraphRButtonType()
{
	short result;
	GetProperty(0x2e, VT_I2, (void*)&result);
	return result;
}

void CWRFuChart::SetNGraphRButtonType(short propVal)
{
	SetProperty(0x2e, VT_I2, propVal);
}

short CWRFuChart::GetNHoldingPacketSize()
{
	short result;
	GetProperty(0x2f, VT_I2, (void*)&result);
	return result;
}

void CWRFuChart::SetNHoldingPacketSize(short propVal)
{
	SetProperty(0x2f, VT_I2, propVal);
}

CString CWRFuChart::GetSzBasePacketName()
{
	CString result;
	GetProperty(0x30, VT_BSTR, (void*)&result);
	return result;
}

void CWRFuChart::SetSzBasePacketName(LPCTSTR propVal)
{
	SetProperty(0x30, VT_BSTR, propVal);
}

BOOL CWRFuChart::GetBRedrawAfterUpdatedAllPackets()
{
	BOOL result;
	GetProperty(0x31, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBRedrawAfterUpdatedAllPackets(BOOL propVal)
{
	SetProperty(0x31, VT_BOOL, propVal);
}

short CWRFuChart::GetNMinDataCountOnOnePage()
{
	short result;
	GetProperty(0x32, VT_I2, (void*)&result);
	return result;
}

void CWRFuChart::SetNMinDataCountOnOnePage(short propVal)
{
	SetProperty(0x32, VT_I2, propVal);
}

BOOL CWRFuChart::GetBFireRealEvent()
{
	BOOL result;
	GetProperty(0x33, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBFireRealEvent(BOOL propVal)
{
	SetProperty(0x33, VT_BOOL, propVal);
}

short CWRFuChart::GetNInquiryType()
{
	short result;
	GetProperty(0x34, VT_I2, (void*)&result);
	return result;
}

void CWRFuChart::SetNInquiryType(short propVal)
{
	SetProperty(0x34, VT_I2, propVal);
}

BOOL CWRFuChart::GetBOcxAreaNumericalInquiry()
{
	BOOL result;
	GetProperty(0x35, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBOcxAreaNumericalInquiry(BOOL propVal)
{
	SetProperty(0x35, VT_BOOL, propVal);
}

long CWRFuChart::GetNNumericalInquiryOption()
{
	long result;
	GetProperty(0x36, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetNNumericalInquiryOption(long propVal)
{
	SetProperty(0x36, VT_I4, propVal);
}

CString CWRFuChart::GetStrGlobalSharedList()
{
	CString result;
	GetProperty(0x37, VT_BSTR, (void*)&result);
	return result;
}

void CWRFuChart::SetStrGlobalSharedList(LPCTSTR propVal)
{
	SetProperty(0x37, VT_BSTR, propVal);
}

short CWRFuChart::GetNUseInquiryWithCrossline()
{
	short result;
	GetProperty(0x38, VT_I2, (void*)&result);
	return result;
}

void CWRFuChart::SetNUseInquiryWithCrossline(short propVal)
{
	SetProperty(0x38, VT_I2, propVal);
}

BOOL CWRFuChart::GetBShowPriceRateInquiry()
{
	BOOL result;
	GetProperty(0x39, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBShowPriceRateInquiry(BOOL propVal)
{
	SetProperty(0x39, VT_BOOL, propVal);
}

BOOL CWRFuChart::GetBDoesUseSkinColor()
{
	BOOL result;
	GetProperty(0x3a, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBDoesUseSkinColor(BOOL propVal)
{
	SetProperty(0x3a, VT_BOOL, propVal);
}

CString CWRFuChart::GetStrMapName()
{
	CString result;
	GetProperty(0x3b, VT_BSTR, (void*)&result);
	return result;
}

void CWRFuChart::SetStrMapName(LPCTSTR propVal)
{
	SetProperty(0x3b, VT_BSTR, propVal);
}

short CWRFuChart::GetNBongCountMargin()
{
	short result;
	GetProperty(0x3c, VT_I2, (void*)&result);
	return result;
}

void CWRFuChart::SetNBongCountMargin(short propVal)
{
	SetProperty(0x3c, VT_I2, propVal);
}

BOOL CWRFuChart::GetBOnePageDataCountInTRCount()
{
	BOOL result;
	GetProperty(0x3d, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBOnePageDataCountInTRCount(BOOL propVal)
{
	SetProperty(0x3d, VT_BOOL, propVal);
}

BOOL CWRFuChart::GetBIsMapDefault()
{
	BOOL result;
	GetProperty(0x3e, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBIsMapDefault(BOOL propVal)
{
	SetProperty(0x3e, VT_BOOL, propVal);
}

short CWRFuChart::GetNPacketCountDataSize()
{
	short result;
	GetProperty(0x3f, VT_I2, (void*)&result);
	return result;
}

void CWRFuChart::SetNPacketCountDataSize(short propVal)
{
	SetProperty(0x3f, VT_I2, propVal);
}

short CWRFuChart::GetNLanguageID()
{
	short result;
	GetProperty(0x40, VT_I2, (void*)&result);
	return result;
}

void CWRFuChart::SetNLanguageID(short propVal)
{
	SetProperty(0x40, VT_I2, propVal);
}

BOOL CWRFuChart::GetBFreezedPageState()
{
	BOOL result;
	GetProperty(0x41, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBFreezedPageState(BOOL propVal)
{
	SetProperty(0x41, VT_BOOL, propVal);
}

BOOL CWRFuChart::GetIsShowInneerToolBar()
{
	BOOL result;
	GetProperty(0x43, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetIsShowInneerToolBar(BOOL propVal)
{
	SetProperty(0x43, VT_BOOL, propVal);
}

CString CWRFuChart::GetStrChartList()
{
	CString result;
	GetProperty(0x44, VT_BSTR, (void*)&result);
	return result;
}

void CWRFuChart::SetStrChartList(LPCTSTR propVal)
{
	SetProperty(0x44, VT_BSTR, propVal);
}

unsigned long CWRFuChart::GetClrBackground()
{
	unsigned long result;
	GetProperty(0x45, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetClrBackground(unsigned long propVal)
{
	SetProperty(0x45, VT_I4, propVal);
}

unsigned long CWRFuChart::GetClrBackBorder()
{
	unsigned long result;
	GetProperty(0x46, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetClrBackBorder(unsigned long propVal)
{
	SetProperty(0x46, VT_I4, propVal);
}

unsigned long CWRFuChart::GetClrBlock()
{
	unsigned long result;
	GetProperty(0x47, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetClrBlock(unsigned long propVal)
{
	SetProperty(0x47, VT_I4, propVal);
}

unsigned long CWRFuChart::GetClrBlockBorder()
{
	unsigned long result;
	GetProperty(0x48, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetClrBlockBorder(unsigned long propVal)
{
	SetProperty(0x48, VT_I4, propVal);
}

unsigned long CWRFuChart::GetClrScaleLine()
{
	unsigned long result;
	GetProperty(0x49, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetClrScaleLine(unsigned long propVal)
{
	SetProperty(0x49, VT_I4, propVal);
}

unsigned long CWRFuChart::GetClrScaleText()
{
	unsigned long result;
	GetProperty(0x4a, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetClrScaleText(unsigned long propVal)
{
	SetProperty(0x4a, VT_I4, propVal);
}

unsigned long CWRFuChart::GetClrGraphBase1()
{
	unsigned long result;
	GetProperty(0x4b, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetClrGraphBase1(unsigned long propVal)
{
	SetProperty(0x4b, VT_I4, propVal);
}

unsigned long CWRFuChart::GetClrGraphBase2()
{
	unsigned long result;
	GetProperty(0x4c, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetClrGraphBase2(unsigned long propVal)
{
	SetProperty(0x4c, VT_I4, propVal);
}

unsigned long CWRFuChart::GetClrGraphBase3()
{
	unsigned long result;
	GetProperty(0x4d, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetClrGraphBase3(unsigned long propVal)
{
	SetProperty(0x4d, VT_I4, propVal);
}

unsigned long CWRFuChart::GetClrGraphBase4()
{
	unsigned long result;
	GetProperty(0x4e, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetClrGraphBase4(unsigned long propVal)
{
	SetProperty(0x4e, VT_I4, propVal);
}

unsigned long CWRFuChart::GetClrGraphBase5()
{
	unsigned long result;
	GetProperty(0x4f, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetClrGraphBase5(unsigned long propVal)
{
	SetProperty(0x4f, VT_I4, propVal);
}

unsigned long CWRFuChart::GetClrGraphBase6()
{
	unsigned long result;
	GetProperty(0x50, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetClrGraphBase6(unsigned long propVal)
{
	SetProperty(0x50, VT_I4, propVal);
}

unsigned long CWRFuChart::GetClrAnalysisTool()
{
	unsigned long result;
	GetProperty(0x51, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetClrAnalysisTool(unsigned long propVal)
{
	SetProperty(0x51, VT_I4, propVal);
}

CString CWRFuChart::GetStrBlockRegion()
{
	CString result;
	GetProperty(0x52, VT_BSTR, (void*)&result);
	return result;
}

void CWRFuChart::SetStrBlockRegion(LPCTSTR propVal)
{
	SetProperty(0x52, VT_BSTR, propVal);
}

unsigned long CWRFuChart::GetClrScaleLine2()
{
	unsigned long result;
	GetProperty(0x53, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetClrScaleLine2(unsigned long propVal)
{
	SetProperty(0x53, VT_I4, propVal);
}

unsigned long CWRFuChart::GetClrInquiryWindow()
{
	unsigned long result;
	GetProperty(0x54, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetClrInquiryWindow(unsigned long propVal)
{
	SetProperty(0x54, VT_I4, propVal);
}

CString CWRFuChart::GetCustomFont()
{
	CString result;
	GetProperty(0x55, VT_BSTR, (void*)&result);
	return result;
}

void CWRFuChart::SetCustomFont(LPCTSTR propVal)
{
	SetProperty(0x55, VT_BSTR, propVal);
}

unsigned long CWRFuChart::GetClrLattice()
{
	unsigned long result;
	GetProperty(0x56, VT_I4, (void*)&result);
	return result;
}

void CWRFuChart::SetClrLattice(unsigned long propVal)
{
	SetProperty(0x56, VT_I4, propVal);
}

CString CWRFuChart::GetStrStartDateOfData()
{
	CString result;
	GetProperty(0x57, VT_BSTR, (void*)&result);
	return result;
}

void CWRFuChart::SetStrStartDateOfData(LPCTSTR propVal)
{
	SetProperty(0x57, VT_BSTR, propVal);
}

BOOL CWRFuChart::GetOnRunningOneChart()
{
	BOOL result;
	GetProperty(0x58, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetOnRunningOneChart(BOOL propVal)
{
	SetProperty(0x58, VT_BOOL, propVal);
}

BOOL CWRFuChart::GetEnableHorizontalLineInNIDLG()
{
	BOOL result;
	GetProperty(0x59, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetEnableHorizontalLineInNIDLG(BOOL propVal)
{
	SetProperty(0x59, VT_BOOL, propVal);
}

BOOL CWRFuChart::GetBShowPriceMinMaxText()
{
	BOOL result;
	GetProperty(0x5a, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBShowPriceMinMaxText(BOOL propVal)
{
	SetProperty(0x5a, VT_BOOL, propVal);
}

BOOL CWRFuChart::GetBHideAllTitle()
{
	BOOL result;
	GetProperty(0x5b, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBHideAllTitle(BOOL propVal)
{
	SetProperty(0x5b, VT_BOOL, propVal);
}

CString CWRFuChart::GetStrMapIndicatorInfo()
{
	CString result;
	GetProperty(0x5c, VT_BSTR, (void*)&result);
	return result;
}

void CWRFuChart::SetStrMapIndicatorInfo(LPCTSTR propVal)
{
	SetProperty(0x5c, VT_BSTR, propVal);
}

BOOL CWRFuChart::GetBEnableIndicatorCalculation()
{
	BOOL result;
	GetProperty(0x5d, VT_BOOL, (void*)&result);
	return result;
}

void CWRFuChart::SetBEnableIndicatorCalculation(BOOL propVal)
{
	SetProperty(0x5d, VT_BOOL, propVal);
}

CString CWRFuChart::GetStrPagePathWithPrefix()
{
	CString result;
	GetProperty(0x42, VT_BSTR, (void*)&result);
	return result;
}

void CWRFuChart::SetStrPagePathWithPrefix(LPCTSTR propVal)
{
	SetProperty(0x42, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CWRFuChart operations

BOOL CWRFuChart::SetAllProperties2(long dwData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		dwData);
	return result;
}

void CWRFuChart::SetBaseDesk(long lKey)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lKey);
}

long CWRFuChart::GetBase(LPCTSTR szKey)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x60, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szKey);
	return result;
}

short CWRFuChart::SetChartData(long pChartData, short nCount, short nType)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I2;
	InvokeHelper(0x61, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pChartData, nCount, nType);
	return result;
}

short CWRFuChart::SetChartDataStr(LPCTSTR szChartData, short nCount, short nType)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I2;
	InvokeHelper(0x62, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		szChartData, nCount, nType);
	return result;
}

short CWRFuChart::testGetPacketdatasize(LPCTSTR pIn)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x63, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pIn);
	return result;
}

void CWRFuChart::testLoadAnalysisTools(short nToolOption, short nOption)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x64, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nToolOption, nOption);
}

void CWRFuChart::MakeSaveShortKey(LPCTSTR szFileName, short nFlag)
{
	static BYTE parms[] =
		VTS_BSTR VTS_I2;
	InvokeHelper(0x65, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 szFileName, nFlag);
}

short CWRFuChart::ChangeChart(short nBlockRowPosition, short nBlockColumnPosition, LPCTSTR strGraphTitle, LPCTSTR strGraphName, LPCTSTR strPacketName, LPCTSTR strGraphType, LPCTSTR strGraphStyle, short nLineWidth, unsigned long clrLineColor)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_I2 VTS_I4;
	InvokeHelper(0x66, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		nBlockRowPosition, nBlockColumnPosition, strGraphTitle, strGraphName, strPacketName, strGraphType, strGraphStyle, nLineWidth, clrLineColor);
	return result;
}

short CWRFuChart::ClearChartData(short nOption)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x67, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		nOption);
	return result;
}

short CWRFuChart::SetGraphHide(short nRow, short nColumn, LPCTSTR strTitle, BOOL bHide)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_BSTR VTS_BOOL;
	InvokeHelper(0x68, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		nRow, nColumn, strTitle, bHide);
	return result;
}

BOOL CWRFuChart::AddChartBlock(LPCTSTR strChartName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x69, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strChartName);
	return result;
}

void CWRFuChart::SetOnePageDataCount(long nOnePageDataCount)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nOnePageDataCount);
}

long CWRFuChart::GetOnePageDataCount()
{
	long result;
	InvokeHelper(0x6b, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL CWRFuChart::SaveandOpenFromFile(LPCTSTR strOpenFileName, LPCTSTR strSaveFileName, BOOL bOpenOption, BOOL bSaveOption)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BOOL VTS_BOOL;
	InvokeHelper(0x6c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strOpenFileName, strSaveFileName, bOpenOption, bSaveOption);
	return result;
}

BOOL CWRFuChart::JoinandDevisionforCompareChart(long nRowCount, long nColumnCount, BOOL bJoin)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x6d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nRowCount, nColumnCount, bJoin);
	return result;
}

BOOL CWRFuChart::ChangeGraphTitle(short nRowIndex, short nColumnIndex, short nGraphIndex, LPCTSTR strNewTitle)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_BSTR;
	InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nRowIndex, nColumnIndex, nGraphIndex, strNewTitle);
	return result;
}

short CWRFuChart::SetChartDataFromFile(LPCTSTR szFileName, short nType)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2;
	InvokeHelper(0x6f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		szFileName, nType);
	return result;
}

BOOL CWRFuChart::RemoveChart(LPCTSTR strChartName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x70, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strChartName);
	return result;
}

BOOL CWRFuChart::ChangeGraphType(LPCTSTR strGraphName, LPCTSTR strGraphType, LPCTSTR strGraphStyle, LPCTSTR strPacketNameList, BOOL bRunatOnce)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BOOL;
	InvokeHelper(0x71, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strGraphName, strGraphType, strGraphStyle, strPacketNameList, bRunatOnce);
	return result;
}

void CWRFuChart::SetChartAllInfo()
{
	InvokeHelper(0x72, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

CString CWRFuChart::GetData(LPCTSTR strPacketName, short nDataIndex)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2;
	InvokeHelper(0x73, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		strPacketName, nDataIndex);
	return result;
}

BOOL CWRFuChart::SetDrdsAdvise(BOOL bOnAdvise)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x74, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		bOnAdvise);
	return result;
}

short CWRFuChart::GetDataCount()
{
	short result;
	InvokeHelper(0x75, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

BOOL CWRFuChart::ChangeChartItem(LPCTSTR strGraphName, short nSubGraphIndex, LPCTSTR strNewTitle, LPCTSTR strNewPacketName, LPCTSTR strNewGraphType, LPCTSTR strNewGraphStyle, short nNewUpLineWidth, short nNewDownLineWidth, short nNewEqualLineWidth, 
		BOOL bRunatOnce)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_I2 VTS_I2 VTS_I2 VTS_BOOL;
	InvokeHelper(0x76, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strGraphName, nSubGraphIndex, strNewTitle, strNewPacketName, strNewGraphType, strNewGraphStyle, nNewUpLineWidth, nNewDownLineWidth, nNewEqualLineWidth, bRunatOnce);
	return result;
}

BOOL CWRFuChart::SetStopLossPrice(BOOL bIsStopLoss, double dStopLossPrice, BOOL bIsProfit, double dProfitPrice)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_R8 VTS_BOOL VTS_R8;
	InvokeHelper(0x77, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		bIsStopLoss, dStopLossPrice, bIsProfit, dProfitPrice);
	return result;
}

BOOL CWRFuChart::RestoreMinMax(LPCTSTR strPacketName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x78, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strPacketName);
	return result;
}

BOOL CWRFuChart::RestoreMin(LPCTSTR strPacketName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x79, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strPacketName);
	return result;
}

BOOL CWRFuChart::RestorMax(LPCTSTR strPacketName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x7a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strPacketName);
	return result;
}

BOOL CWRFuChart::SetMin(LPCTSTR strPacketName, double dMin)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_R8;
	InvokeHelper(0x7b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strPacketName, dMin);
	return result;
}

BOOL CWRFuChart::SetMax(LPCTSTR strPacketName, double dMax)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_R8;
	InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strPacketName, dMax);
	return result;
}

BOOL CWRFuChart::SetMinMax(LPCTSTR strPacketName, double dMin, double dMax)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_R8 VTS_R8;
	InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strPacketName, dMin, dMax);
	return result;
}

BOOL CWRFuChart::SetHorzScaleData(short nRowIndex, short nColumnIndex, LPCTSTR strScaleData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_BSTR;
	InvokeHelper(0x7e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nRowIndex, nColumnIndex, strScaleData);
	return result;
}

double CWRFuChart::GetMin(LPCTSTR strPacketName)
{
	double result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x7f, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		strPacketName);
	return result;
}

double CWRFuChart::GetMax(LPCTSTR strPacketName)
{
	double result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x80, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		strPacketName);
	return result;
}

BOOL CWRFuChart::SetGraphHide2(short nRowIndex, short nColumnIndex, short nVerticalIndex, short nGraphIndex, short nSubGraphIndex, BOOL bHide)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_BOOL;
	InvokeHelper(0x81, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nRowIndex, nColumnIndex, nVerticalIndex, nGraphIndex, nSubGraphIndex, bHide);
	return result;
}

BOOL CWRFuChart::ChangeGraphDatas(short nRowIndex, short nColumnIndex, short nVerticalIndex, short nGraphIndex, LPCTSTR strNewGraphName, LPCTSTR strNewTitle, LPCTSTR strNewPacketName, LPCTSTR strNewGraphType, LPCTSTR strNewGraphStyle, 
		short nNewUpLineWidth, short nNewDownLineWidth, short nNewEqualLineWidth, BOOL bRunatOnce)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_I2 VTS_I2 VTS_I2 VTS_BOOL;
	InvokeHelper(0x82, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nRowIndex, nColumnIndex, nVerticalIndex, nGraphIndex, strNewGraphName, strNewTitle, strNewPacketName, strNewGraphType, strNewGraphStyle, nNewUpLineWidth, nNewDownLineWidth, nNewEqualLineWidth, bRunatOnce);
	return result;
}

void CWRFuChart::SaveandApplyGraphStyle(short nSaveDataType, short nChangeDataType)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x83, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nSaveDataType, nChangeDataType);
}

void CWRFuChart::SetDataRegionInBlock(short nDataStartIndex)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x84, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nDataStartIndex);
}

void CWRFuChart::SetItemInfo(LPCTSTR lpstrCode, LPCTSTR lpstrName)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x85, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lpstrCode, lpstrName);
}

void CWRFuChart::AddandDeleteIndicator(LPCTSTR strGraphName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x86, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 strGraphName);
}
*/
long CWRFuChart::GetAllProperties2(long lpData)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(m_pdID[IIx_GetAllProperties2], DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lpData);
	return result;
}
/*
long CWRFuChart::GetBasePropIf()
{
	long result;
	InvokeHelper(0x88, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL CWRFuChart::SetVertScaleData(short nRowIndex, short nColumnIndex, short nVertScaleGroupIndex, LPCTSTR strVertScaleData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_BSTR;
	InvokeHelper(0x89, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nRowIndex, nColumnIndex, nVertScaleGroupIndex, strVertScaleData);
	return result;
}

BOOL CWRFuChart::ChangeBlockType(short nBlockType, short nRowCount, short nColumnCount)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x8a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nBlockType, nRowCount, nColumnCount);
	return result;
}

BOOL CWRFuChart::ChangeHorzScalePosition(short nScalePosition, short nRowIndex, short nColumnIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x8b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nScalePosition, nRowIndex, nColumnIndex);
	return result;
}

BOOL CWRFuChart::ResetChart()
{
	BOOL result;
	InvokeHelper(0x8c, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CWRFuChart::SetRealData(LPCTSTR strPacketName, double dData, short nOption)
{
	static BYTE parms[] =
		VTS_BSTR VTS_R8 VTS_I2;
	InvokeHelper(0x8d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 strPacketName, dData, nOption);
}

BOOL CWRFuChart::SetGraphTitle(LPCTSTR strGraphName, short nSubGraphIndex, LPCTSTR strNewGraphTitle, BOOL bGraphShowing)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_BSTR VTS_BOOL;
	InvokeHelper(0x8e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strGraphName, nSubGraphIndex, strNewGraphTitle, bGraphShowing);
	return result;
}

CString CWRFuChart::GetIndicatorNameList(LPCTSTR p_strGroup)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x8f, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		p_strGroup);
	return result;
}

void CWRFuChart::AddGraph(short nRow, short nColumn, short nVertScaleGroup, LPCTSTR szGraphOption, BOOL bCreateBlock, BOOL bCreateVertScaleGroup, BOOL bUseAutoScale)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_BSTR VTS_BOOL VTS_BOOL VTS_BOOL;
	InvokeHelper(0x90, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nRow, nColumn, nVertScaleGroup, szGraphOption, bCreateBlock, bCreateVertScaleGroup, bUseAutoScale);
}

void CWRFuChart::AddPacket(LPCTSTR szPacketOption)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x91, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 szPacketOption);
}

long CWRFuChart::RemovePacket(LPCTSTR szPacketName)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x92, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szPacketName);
	return result;
}

void CWRFuChart::SetContainerDllInfo(long p_lDllWnd, short p_nID)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x93, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 p_lDllWnd, p_nID);
}

BOOL CWRFuChart::SetPacketData(LPCTSTR szPacketName, long szData, long lLength, BOOL bReset)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x94, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szPacketName, szData, lLength, bReset);
	return result;
}

void CWRFuChart::SetBackgroundColors(unsigned long p_rgbBlockArea, unsigned long p_rgbScaleArea)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x95, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 p_rgbBlockArea, p_rgbScaleArea);
}

BOOL CWRFuChart::AddRealItem(LPCTSTR szRealInfo)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x96, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szRealInfo);
	return result;
}

void CWRFuChart::ShowIndicatorConfigDlg()
{
	InvokeHelper(0x97, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWRFuChart::ResetChartCfgWith(short p_nIndex)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x98, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 p_nIndex);
}

BOOL CWRFuChart::EmptyChart(BOOL bIsDeleteAllPacket, BOOL bIsDefault)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL;
	InvokeHelper(0x99, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		bIsDeleteAllPacket, bIsDefault);
	return result;
}

BOOL CWRFuChart::HasGraph(LPCTSTR p_szGraphName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szGraphName);
	return result;
}

void CWRFuChart::RemoveRealItem(LPCTSTR szRealInfo)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 szRealInfo);
}

void CWRFuChart::ShowInnerToolBar(BOOL p_bShow)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 p_bShow);
}

BOOL CWRFuChart::ChangeVertScalePosition(short nScalePosition, short nRowIndex, short nColumnIndex, short nVSGroupIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x9d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nScalePosition, nRowIndex, nColumnIndex, nVSGroupIndex);
	return result;
}

short CWRFuChart::GetRowBlockCount()
{
	short result;
	InvokeHelper(0x9e, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWRFuChart::GetColumnBlockCount()
{
	short result;
	InvokeHelper(0x9f, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

BOOL CWRFuChart::SetStartPeriodOfPacket(LPCTSTR p_szPacketName, long p_lStartPeriod, long p_bAddSpace)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I4;
	InvokeHelper(0xa0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szPacketName, p_lStartPeriod, p_bAddSpace);
	return result;
}

long CWRFuChart::GetStartPeriodOfPacket(LPCTSTR p_szPacketName)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xa1, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		p_szPacketName);
	return result;
}

BOOL CWRFuChart::GetStartEndDateOnView(double* p_pStartDate, double* p_pEndDate)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8;
	InvokeHelper(0xa2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_pStartDate, p_pEndDate);
	return result;
}

BOOL CWRFuChart::SetStartEndDateOfView(double p_dStartDate, double p_dEndDate)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8;
	InvokeHelper(0xa3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_dStartDate, p_dEndDate);
	return result;
}

BOOL CWRFuChart::ScrollToDataOfEnd(double p_dData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xa4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_dData);
	return result;
}

short CWRFuChart::ZoomToWithRightFix(short p_nZoomValue, BOOL p_bWithRightFix)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_BOOL;
	InvokeHelper(0xa5, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		p_nZoomValue, p_bWithRightFix);
	return result;
}

void CWRFuChart::ClearTimeMark()
{
	InvokeHelper(0xa6, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWRFuChart::ShowEnvironmentDlg()
{
	InvokeHelper(0xa7, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWRFuChart::SetTimeMark(LPCTSTR p_szMarkTime, BOOL p_bWithScroll)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL;
	InvokeHelper(0xa8, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 p_szMarkTime, p_bWithScroll);
}

short CWRFuChart::GetVertScalePosition(short p_nRowIndex, short p_nColumnIndex, short p_nVSGroupIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0xa9, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		p_nRowIndex, p_nColumnIndex, p_nVSGroupIndex);
	return result;
}

void CWRFuChart::EnableBoundMark(BOOL p_bEnable)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xaa, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 p_bEnable);
}

void CWRFuChart::EnableReceivingTimeShare(BOOL p_bEnable)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xab, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 p_bEnable);
}

BOOL CWRFuChart::ChangePacketType(LPCTSTR p_szPacketName, LPCTSTR p_szPacketType)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0xac, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szPacketName, p_szPacketType);
	return result;
}

BOOL CWRFuChart::ChangeGraphDrawingData(LPCTSTR p_szGraphName, BOOL p_bLowHigh, BOOL p_bLowCur, BOOL p_bHighCur, BOOL p_bPrevCur, short p_nCurData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL VTS_BOOL VTS_BOOL VTS_BOOL VTS_I2;
	InvokeHelper(0xad, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szGraphName, p_bLowHigh, p_bLowCur, p_bHighCur, p_bPrevCur, p_nCurData);
	return result;
}

BOOL CWRFuChart::ChangePriceGraphDrawingData(BOOL p_bLowHigh, BOOL p_bLowCur, BOOL p_bHighCur, BOOL p_bPrevCur, short p_nCurData, short p_nDefaultType)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL VTS_BOOL VTS_BOOL VTS_I2 VTS_I2;
	InvokeHelper(0xae, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_bLowHigh, p_bLowCur, p_bHighCur, p_bPrevCur, p_nCurData, p_nDefaultType);
	return result;
}

void CWRFuChart::ShowAnalysisToolText(BOOL p_bTimeLine, BOOL p_bPriceLineLeft, BOOL p_bPriceLineRight, BOOL p_bTrendLine, BOOL p_bTrisectionLine, BOOL p_bQuadrisectionLine, BOOL p_bFibonacciRetraceLine)
{
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL VTS_BOOL VTS_BOOL VTS_BOOL VTS_BOOL VTS_BOOL;
	InvokeHelper(0xaf, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 p_bTimeLine, p_bPriceLineLeft, p_bPriceLineRight, p_bTrendLine, p_bTrisectionLine, p_bQuadrisectionLine, p_bFibonacciRetraceLine);
}

BOOL CWRFuChart::HasGraphInSpecialBack(LPCTSTR p_szGraphName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xb0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szGraphName);
	return result;
}

BOOL CWRFuChart::LoadAddIn(LPCTSTR p_szAddInDllName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xb1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szAddInDllName);
	return result;
}

BOOL CWRFuChart::InvokeAddIn(LPCTSTR p_szAddInDllName, short p_nCommandType, long p_lData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I4;
	InvokeHelper(0xb2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szAddInDllName, p_nCommandType, p_lData);
	return result;
}

void CWRFuChart::SetDragModeType(short p_nDragModeType)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xb3, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 p_nDragModeType);
}

BOOL CWRFuChart::ResetRealListString(LPCTSTR p_szRealList, BOOL p_bAdviseNow)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL;
	InvokeHelper(0xb4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szRealList, p_bAdviseNow);
	return result;
}

BOOL CWRFuChart::AddOrRemoveChart(LPCTSTR strGraphName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xb5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strGraphName);
	return result;
}

void CWRFuChart::SetHtsPath(LPCTSTR pcszHtsPath)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xb6, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pcszHtsPath);
}

CString CWRFuChart::GetRealSettingInfo()
{
	CString result;
	InvokeHelper(0xb7, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CWRFuChart::SetAllLogScale(BOOL bLogScale)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xb8, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bLogScale);
}

void CWRFuChart::GetListViewerData(BSTR* bstrTitle, BSTR* bstrHorzScale, BSTR* bstrPacketNamesPerBlock, BSTR* bstrPacketNames, BSTR* bstrSaveFilePath, BOOL* bViewPacketSequence, long* lpPacketList)
{
	static BYTE parms[] =
		VTS_PBSTR VTS_PBSTR VTS_PBSTR VTS_PBSTR VTS_PBSTR VTS_PBOOL VTS_PI4;
	InvokeHelper(0xb9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bstrTitle, bstrHorzScale, bstrPacketNamesPerBlock, bstrPacketNames, bstrSaveFilePath, bViewPacketSequence, lpPacketList);
}

void CWRFuChart::SetDataIndexByDate(LPCTSTR pcszStartDate, LPCTSTR pcszEndDate)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0xba, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pcszStartDate, pcszEndDate);
}

void CWRFuChart::SetRunTimeMode(BOOL bRunTimeMode)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xbb, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bRunTimeMode);
}

CString CWRFuChart::GetPacketOption()
{
	CString result;
	InvokeHelper(0xbc, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CWRFuChart::SetPacketOption(LPCTSTR strPacketOption)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xbd, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 strPacketOption);
}

void CWRFuChart::SetOutsideCommonInterface(long lpOutsideCommonInterface)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbe, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lpOutsideCommonInterface);
}

BOOL CWRFuChart::RemoveGraph_Title(short nRowIndex, short nColumnIndex, LPCTSTR szGraphTitle, BOOL bIsOnlyNoTRData, BOOL bIsAutoHorzScalePosition)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_BSTR VTS_BOOL VTS_BOOL;
	InvokeHelper(0xbf, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nRowIndex, nColumnIndex, szGraphTitle, bIsOnlyNoTRData, bIsAutoHorzScalePosition);
	return result;
}

CString CWRFuChart::GetGraphPacketName(short nRowIndex, short nColumnIndex, LPCTSTR szGraphTitle)
{
	CString result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_BSTR;
	InvokeHelper(0xc0, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		nRowIndex, nColumnIndex, szGraphTitle);
	return result;
}

BOOL CWRFuChart::ChangeGraphTitle2(LPCTSTR szTargetTitle, LPCTSTR szSourceTitle)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0xc1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szTargetTitle, szSourceTitle);
	return result;
}

BOOL CWRFuChart::PartitionAllGraph()
{
	BOOL result;
	InvokeHelper(0xc2, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CWRFuChart::JoinAllGraph(BOOL bIsOneVertScaleGroup)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xc3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		bIsOneVertScaleGroup);
	return result;
}

BOOL CWRFuChart::ChangeAllFunctionName(LPCTSTR szTargetGraphName, LPCTSTR szSourceGraphName, BOOL bKeepOldGraphColor)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BOOL;
	InvokeHelper(0xc4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szTargetGraphName, szSourceGraphName, bKeepOldGraphColor);
	return result;
}

BOOL CWRFuChart::ChangeIndicatorPacketName(LPCTSTR strGraphName, short nSubGraphIndex, LPCTSTR strNewPacketName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_BSTR;
	InvokeHelper(0xc5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strGraphName, nSubGraphIndex, strNewPacketName);
	return result;
}

void CWRFuChart::RunEnvironmentDlg(short nOption)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xc6, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nOption);
}

BOOL CWRFuChart::SetIndicatorCondition(LPCTSTR strGraphName, short nConditionType, short nConditionIndex, double dConditionValue, BOOL bReCalculate)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I2 VTS_R8 VTS_BOOL;
	InvokeHelper(0xc7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strGraphName, nConditionType, nConditionIndex, dConditionValue, bReCalculate);
	return result;
}

BOOL CWRFuChart::SetPacketData2(LPCTSTR strPacketName, LPCTSTR strPacketType, LPCTSTR strPacketData, short nDataCount, BOOL bReCalculate)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_I2 VTS_BOOL;
	InvokeHelper(0xc8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strPacketName, strPacketType, strPacketData, nDataCount, bReCalculate);
	return result;
}

BOOL CWRFuChart::SetLogScale(LPCTSTR strGraphName, BOOL bLogScale)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL;
	InvokeHelper(0xc9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strGraphName, bLogScale);
	return result;
}

BOOL CWRFuChart::GetLogScale(LPCTSTR strGraphName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xca, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strGraphName);
	return result;
}

BOOL CWRFuChart::SetPacketHelpMessage(LPCTSTR strHelpMsg, BOOL bIsAllRemove)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL;
	InvokeHelper(0xcb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strHelpMsg, bIsAllRemove);
	return result;
}

BOOL CWRFuChart::InvokeAddInStr(LPCTSTR p_szAddInDllName, LPCTSTR p_szCommandName, LPCTSTR p_szData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szAddInDllName, p_szCommandName, p_szData);
	return result;
}

BOOL CWRFuChart::SetHelpMessageRealDataRate(LPCTSTR strHelpMessageData, BOOL bIsRemove)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL;
	InvokeHelper(0xcd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strHelpMessageData, bIsRemove);
	return result;
}

void CWRFuChart::SetBongCountMargin(short nBongCountMargin)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xce, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nBongCountMargin);
}

BOOL CWRFuChart::SetAllPropertiesFromFile(LPCTSTR strFilePath, LPCTSTR strFileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0xcf, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strFilePath, strFileName);
	return result;
}

BOOL CWRFuChart::SetGraphHide3(LPCTSTR strTitle, BOOL bIsHide)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL;
	InvokeHelper(0xd0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strTitle, bIsHide);
	return result;
}

BOOL CWRFuChart::GetBoundMarkFlag()
{
	BOOL result;
	InvokeHelper(0xd1, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CWRFuChart::UnloadAddIn(LPCTSTR p_szAddInDllName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xd2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szAddInDllName);
	return result;
}

void CWRFuChart::SetOnePageDataCount2(long nOnePageDataCount, BOOL bIncludeBongCountMargin)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nOnePageDataCount, bIncludeBongCountMargin);
}

BOOL CWRFuChart::ClearPacketData(LPCTSTR strPacketName, BOOL bIsAbsoluteClear)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL;
	InvokeHelper(0xd4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strPacketName, bIsAbsoluteClear);
	return result;
}

void CWRFuChart::SetAllGraphHide(short nRowIndex, short nColumnIndex, short bHide)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0xd5, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nRowIndex, nColumnIndex, bHide);
}

void CWRFuChart::InitStaticIndiCond(LPCTSTR p_szBasePath)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xd6, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 p_szBasePath);
}

void CWRFuChart::SetAllGraphsHide(short nRowIndex, short nColumnIndex, BOOL bHide)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_BOOL;
	InvokeHelper(0xd7, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nRowIndex, nColumnIndex, bHide);
}

CString CWRFuChart::GetPacketData2(LPCTSTR strPacketName, short nDataIndex, BOOL bIsFullDataSize)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_BOOL;
	InvokeHelper(0xd8, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		strPacketName, nDataIndex, bIsFullDataSize);
	return result;
}

CString CWRFuChart::GetSelectedSubGraphData(short nPoint_x, short nPoint_y)
{
	CString result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0xd9, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		nPoint_x, nPoint_y);
	return result;
}

short CWRFuChart::GetPacketIndex(LPCTSTR szPacketName, double dKeyValue)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_R8;
	InvokeHelper(0xda, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		szPacketName, dKeyValue);
	return result;
}

short CWRFuChart::GetCurrentPriceChartType()
{
	short result;
	InvokeHelper(0xdb, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

BOOL CWRFuChart::RemoveBlock(short nPoint_x, short nPoint_y)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0xdc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nPoint_x, nPoint_y);
	return result;
}

BOOL CWRFuChart::RemoveGraph(short nRowIndex, short nColumnIndex, LPCTSTR strGraphTitle)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_BSTR;
	InvokeHelper(0xdd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nRowIndex, nColumnIndex, strGraphTitle);
	return result;
}

BOOL CWRFuChart::SetGraphColor(short nRowIndex, short nColumnIndex, short nVertScaleGroupIndex, short nGraphIndex, short nSubGraphIndex, LPCTSTR strNewColor)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_BSTR;
	InvokeHelper(0xde, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nRowIndex, nColumnIndex, nVertScaleGroupIndex, nGraphIndex, nSubGraphIndex, strNewColor);
	return result;
}

BOOL CWRFuChart::SetPacketDataInIndex(LPCTSTR strPacketName, short nIndex, LPCTSTR strData, BOOL bIsRealData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_BSTR VTS_BOOL;
	InvokeHelper(0xdf, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strPacketName, nIndex, strData, bIsRealData);
	return result;
}

BOOL CWRFuChart::SetVertScaleLogType(short nRowIndex, short nColumnIndex, BOOL bIsLogType)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_BOOL;
	InvokeHelper(0xe0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nRowIndex, nColumnIndex, bIsLogType);
	return result;
}

BOOL CWRFuChart::OpenFileOfEnvAndIndi(LPCTSTR strFileName_Env, LPCTSTR strFileName_Indi, BOOL bIsCurrentSave)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BOOL;
	InvokeHelper(0xe1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strFileName_Env, strFileName_Indi, bIsCurrentSave);
	return result;
}

BOOL CWRFuChart::SetPacketDataInAdditionPacket(LPCTSTR szPacketName, long szData, long lLength, BOOL bReset)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0xe2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szPacketName, szData, lLength, bReset);
	return result;
}

void CWRFuChart::SetOnePageDataCountInTRCount(BOOL bIsTRCount, BOOL bIsNowChange)
{
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL;
	InvokeHelper(0xe3, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bIsTRCount, bIsNowChange);
}

void CWRFuChart::PrintChatImage()
{
	InvokeHelper(0xe4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWRFuChart::ExportToExcel()
{
	InvokeHelper(0xe5, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CWRFuChart::RunToolFunction(short nToolCommand, short nOption)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0xe6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nToolCommand, nOption);
	return result;
}

BOOL CWRFuChart::SetSubIndicatorCondition(LPCTSTR strGraphName, short nConditionType, short nSubGraphIndex, short nConditionIndex, double dConditionValue, BOOL bReCalculate)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I2 VTS_I2 VTS_R8 VTS_BOOL;
	InvokeHelper(0xe7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strGraphName, nConditionType, nSubGraphIndex, nConditionIndex, dConditionValue, bReCalculate);
	return result;
}

BOOL CWRFuChart::SetGraphHide4(LPCTSTR strGraphName, short nSubGraphIndex, BOOL bHide)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_BOOL;
	InvokeHelper(0xe8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strGraphName, nSubGraphIndex, bHide);
	return result;
}

BOOL CWRFuChart::SetMapDefaultInCurrent(BOOL bIsNewMapDefault)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xe9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		bIsNewMapDefault);
	return result;
}

BOOL CWRFuChart::ChangeFunctionName(LPCTSTR p_szTargetFName, LPCTSTR p_szNewFName, LPCTSTR p_szNewSGName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0xea, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szTargetFName, p_szNewFName, p_szNewSGName);
	return result;
}

BOOL CWRFuChart::GetHeadAndTailData(LPCTSTR strPacketName, double* pHeadData, double* pTailData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_PR8 VTS_PR8;
	InvokeHelper(0xeb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strPacketName, pHeadData, pTailData);
	return result;
}

LPUNKNOWN CWRFuChart::GetAddInCustomInterface(LPCTSTR p_szAddInName)
{
	LPUNKNOWN result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xec, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, parms,
		p_szAddInName);
	return result;
}

BOOL CWRFuChart::LoadAddInWithOverExclusive(LPCTSTR p_szAddInName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xed, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szAddInName);
	return result;
}

BOOL CWRFuChart::OpenFromFile(LPCTSTR p_szFileName, BOOL p_bAutoPrevSave)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL;
	InvokeHelper(0xee, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szFileName, p_bAutoPrevSave);
	return result;
}

BOOL CWRFuChart::SaveandOpenFromFileWithMSave(LPCTSTR strOpenFileName, LPCTSTR strSaveFileName, BOOL bOpenOption, BOOL bSaveOption)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BOOL VTS_BOOL;
	InvokeHelper(0xef, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strOpenFileName, strSaveFileName, bOpenOption, bSaveOption);
	return result;
}

BOOL CWRFuChart::AddRealItemWithSeparator(LPCTSTR szRealInfo, LPCTSTR szSeparatorChar)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0xf0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szRealInfo, szSeparatorChar);
	return result;
}

void CWRFuChart::RemoveRealItemWithSeparator(LPCTSTR szRealInfo, LPCTSTR szSeparatorChar)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0xf1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 szRealInfo, szSeparatorChar);
}

long CWRFuChart::GetAllProperties3(long p_lIPropertyMap)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xf2, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		p_lIPropertyMap);
	return result;
}

long CWRFuChart::SetAllProperties3(long p_lIPropertyMap)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xf3, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		p_lIPropertyMap);
	return result;
}

BOOL CWRFuChart::ShowIndicatorConfigDlgWithName(LPCTSTR p_szGraphName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xf4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szGraphName);
	return result;
}
*/
BOOL CWRFuChart::RemoveBlockWithIndex(short p_nRowIndex, short p_nColumnIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(m_pdID[IIx_RemoveBlockWithIndex], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_nRowIndex, p_nColumnIndex);
	return result;
}
/*
BOOL CWRFuChart::SetBinTrHelpMsg(LPCTSTR p_szHelpMessage)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xf6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szHelpMessage);
	return result;
}

BOOL CWRFuChart::SetBinTrDoubleData(LPCTSTR p_szPacketName, long p_nCount, double* p_pdData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_PR8;
	InvokeHelper(0xf7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szPacketName, p_nCount, p_pdData);
	return result;
}

BOOL CWRFuChart::SetBinTrStringData(LPCTSTR p_szPacketName, long p_nCount, long p_lData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I4;
	InvokeHelper(0xf8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szPacketName, p_nCount, p_lData);
	return result;
}

BOOL CWRFuChart::SetBinTrEnd()
{
	BOOL result;
	InvokeHelper(0xf9, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CWRFuChart::EmptyChart2(LPCTSTR p_szChartList, BOOL p_bIsDeleteAllPacket, BOOL p_bIsDefault)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL VTS_BOOL;
	InvokeHelper(0xfa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szChartList, p_bIsDeleteAllPacket, p_bIsDefault);
	return result;
}

short CWRFuChart::GetHorzScalePosition(short p_nRowIndex, short p_nColumnIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0xfb, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		p_nRowIndex, p_nColumnIndex);
	return result;
}

BOOL CWRFuChart::HasIndicator(LPCTSTR p_szIndicatorName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xfc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szIndicatorName);
	return result;
}

BOOL CWRFuChart::HasIndicatorInSpecialBack(LPCTSTR p_szIndicatorName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xfd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szIndicatorName);
	return result;
}

BOOL CWRFuChart::LockWindowUpdate()
{
	BOOL result;
	InvokeHelper(m_pdID[IIx_LockWindowUpdate], DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CWRFuChart::UnlockWindowUpdate()
{
	InvokeHelper(m_pdID[IIx_UnlockWindowUpdate], DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

CString CWRFuChart::AddChartItem(LPCTSTR lpszItemCode, LPCTSTR lpszItemName, BOOL bBuiltChart)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BOOL;
	InvokeHelper(0x100, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		lpszItemCode, lpszItemName, bBuiltChart);
	return result;
}

void CWRFuChart::SetRealDataCode(LPCTSTR strCode, LPCTSTR strPacketName, double dData, short nOption)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_R8 VTS_I2;
	InvokeHelper(0x101, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 strCode, strPacketName, dData, nOption);
}

void CWRFuChart::ShowIndicator(LPCTSTR p_szIndicatorName, BOOL p_bShow, BOOL p_bRecalculate)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL VTS_BOOL;
	InvokeHelper(0x102, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 p_szIndicatorName, p_bShow, p_bRecalculate);
}

void CWRFuChart::SetPacketAutoScaleType(LPCTSTR p_szPacketName, BOOL p_bAutoScaleType)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL;
	InvokeHelper(0x103, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 p_szPacketName, p_bAutoScaleType);
}

BOOL CWRFuChart::SetPacketTypeWithAutoScale(LPCTSTR p_szPacketName, LPCTSTR p_szPacketType, BOOL p_bAutoScale)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BOOL;
	InvokeHelper(0x104, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szPacketName, p_szPacketType, p_bAutoScale);
	return result;
}

void CWRFuChart::ShowBaseText(BOOL p_bShow)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x105, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 p_bShow);
}

BOOL CWRFuChart::ChangeGraphColor(LPCTSTR p_szGraphTitle, LPCTSTR p_szColors)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x106, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		p_szGraphTitle, p_szColors);
	return result;
}

void CWRFuChart::AddPacketRQ(LPCTSTR lpszRQ, LPCTSTR lpszPacketOption)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x107, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lpszRQ, lpszPacketOption);
}

BOOL CWRFuChart::SetPacketDataRQ(LPCTSTR lpszRQ, LPCTSTR lpszPacketName, long nData, long nLength, BOOL bReset)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x108, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lpszRQ, lpszPacketName, nData, nLength, bReset);
	return result;
}

BOOL CWRFuChart::AddChartItemRQ(LPCTSTR lpszRQ, LPCTSTR lpszItemCode, LPCTSTR lpszItemName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x109, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lpszRQ, lpszItemCode, lpszItemName);
	return result;
}

void CWRFuChart::SetCurrentRQ(LPCTSTR lpszRQ)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x10a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lpszRQ);
}

void CWRFuChart::SetResetTotalCountWhileDraw(BOOL bReset)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x10b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bReset);
}

void CWRFuChart::SetFutureScaleVisible(long nScaleVisible)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x10c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nScaleVisible);
}

void CWRFuChart::SetMultiItemMode(BOOL bMultiItem)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x10d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bMultiItem);
}

void CWRFuChart::SetVertScaleType(short nBlockRow, short nBlockCol, short nScaleGroup, short nScaleType, double dTypeValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_R8;
	InvokeHelper(0x10e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nBlockRow, nBlockCol, nScaleGroup, nScaleType, dTypeValue);
}

void CWRFuChart::OpenFromPage(LPCTSTR p_szPagePath, BOOL p_bIsVirtualPage, short p_nVirtualPageIndex, short p_nDuplicateIndex)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL VTS_I2 VTS_I2;
	InvokeHelper(0x10f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 p_szPagePath, p_bIsVirtualPage, p_nVirtualPageIndex, p_nDuplicateIndex);
}

void CWRFuChart::SaveToPage(LPCTSTR p_szPagePath, BOOL p_bIsVirtualPage, short p_nVirtualPageIndex, short p_nDuplicateIndex)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL VTS_I2 VTS_I2;
	InvokeHelper(0x110, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 p_szPagePath, p_bIsVirtualPage, p_nVirtualPageIndex, p_nDuplicateIndex);
}
*/