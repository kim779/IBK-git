// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "ntscodeinput.h"

/////////////////////////////////////////////////////////////////////////////
// CNtsCodeInput

IMPLEMENT_DYNCREATE(CNtsCodeInput, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CNtsCodeInput properties
CNtsCodeInput::~CNtsCodeInput()
{
	if( m_pdID)
	{
		delete m_pdID;
		m_pdID = NULL;
	}
}

unsigned long CNtsCodeInput::GetBackColor()
{
	unsigned long result;
	GetProperty(m_pdID[IIx_BackColor], VT_I4, (void*)&result);
	return result;
}

void CNtsCodeInput::SetBackColor(unsigned long propVal)
{
	SetProperty(m_pdID[IIx_BackColor], VT_I4, propVal);
}

CString CNtsCodeInput::GetCodeChoice()
{
	CString result;
	GetProperty(m_pdID[IIx_CodeChoice], VT_BSTR, (void*)&result);
	return result;
}

void CNtsCodeInput::SetCodeChoice(LPCTSTR propVal)
{
	SetProperty(m_pdID[IIx_CodeChoice], VT_BSTR, propVal);
}

CString CNtsCodeInput::GetCodeCtrlName()
{
	CString result;
	GetProperty(m_pdID[IIx_CodeCtrlName], VT_BSTR, (void*)&result);
	return result;
}

void CNtsCodeInput::SetCodeCtrlName(LPCTSTR propVal)
{
	SetProperty(m_pdID[IIx_CodeCtrlName], VT_BSTR, propVal);
}

BOOL CNtsCodeInput::GetCodeDrop()
{
	BOOL result;
	GetProperty(m_pdID[IIx_CodeDrop], VT_BOOL, (void*)&result);
	return result;
}

void CNtsCodeInput::SetCodeDrop(BOOL propVal)
{
	SetProperty(m_pdID[IIx_CodeDrop], VT_BOOL, propVal);
}

BOOL CNtsCodeInput::GetCodeHistory()
{
	BOOL result;
	GetProperty(m_pdID[IIx_CodeHistory], VT_BOOL, (void*)&result);
	return result;
}

void CNtsCodeInput::SetCodeHistory(BOOL propVal)
{
	SetProperty(m_pdID[IIx_CodeHistory], VT_BOOL, propVal);
}

BOOL CNtsCodeInput::GetCodeTable()
{
	BOOL result;
	GetProperty(m_pdID[IIx_CodeTable], VT_BOOL, (void*)&result);
	return result;
}

void CNtsCodeInput::SetCodeTable(BOOL propVal)
{
	SetProperty(m_pdID[IIx_CodeTable], VT_BOOL, propVal);
}

CString CNtsCodeInput::GetCustomFont()
{
	CString result;
	GetProperty(m_pdID[IIx_CustomFont], VT_BSTR, (void*)&result);
	return result;
}

void CNtsCodeInput::SetCustomFont(LPCTSTR propVal)
{
	SetProperty(m_pdID[IIx_CustomFont], VT_BSTR, propVal);
}

short CNtsCodeInput::GetFireOnCharAtPos()
{
	short result;
	GetProperty(m_pdID[IIx_FireOnCharAtPos], VT_I2, (void*)&result);
	return result;
}

void CNtsCodeInput::SetFireOnCharAtPos(short propVal)
{
	SetProperty(m_pdID[IIx_FireOnCharAtPos], VT_I2, propVal);
}

unsigned long CNtsCodeInput::GetForeColor()
{
	unsigned long result;
	GetProperty(m_pdID[IIx_ForeColor], VT_I4, (void*)&result);
	return result;
}

void CNtsCodeInput::SetForeColor(unsigned long propVal)
{
	SetProperty(m_pdID[IIx_ForeColor], VT_I4, propVal);
}

CString CNtsCodeInput::GetImgDropD()
{
	CString result;
	GetProperty(m_pdID[IIx_ImgDropD], VT_BSTR, (void*)&result);
	return result;
}

void CNtsCodeInput::SetImgDropD(LPCTSTR propVal)
{
	SetProperty(m_pdID[IIx_ImgDropD], VT_BSTR, propVal);
}

CString CNtsCodeInput::GetImgDropE()
{
	CString result;
	GetProperty(m_pdID[IIx_ImgDropE], VT_BSTR, (void*)&result);
	return result;
}

void CNtsCodeInput::SetImgDropE(LPCTSTR propVal)
{
	SetProperty(m_pdID[IIx_ImgDropE], VT_BSTR, propVal);
}

CString CNtsCodeInput::GetImgHelpD()
{
	CString result;
	GetProperty(m_pdID[IIx_ImgHelpD], VT_BSTR, (void*)&result);
	return result;
}

void CNtsCodeInput::SetImgHelpD(LPCTSTR propVal)
{
	SetProperty(m_pdID[IIx_ImgHelpD], VT_BSTR, propVal);
}

CString CNtsCodeInput::GetImgHelpE()
{
	CString result;
	GetProperty(m_pdID[IIx_ImgHelpE], VT_BSTR, (void*)&result);
	return result;
}

void CNtsCodeInput::SetImgHelpE(LPCTSTR propVal)
{
	SetProperty(m_pdID[IIx_ImgHelpE], VT_BSTR, propVal);
}

CString CNtsCodeInput::GetImgHistoryD()
{
	CString result;
	GetProperty(m_pdID[IIx_ImgHistoryD], VT_BSTR, (void*)&result);
	return result;
}

void CNtsCodeInput::SetImgHistoryD(LPCTSTR propVal)
{
	SetProperty(m_pdID[IIx_ImgHistoryD], VT_BSTR, propVal);
}

CString CNtsCodeInput::GetImgHistoryE()
{
	CString result;
	GetProperty(m_pdID[IIx_ImgHistoryE], VT_BSTR, (void*)&result);
	return result;
}

void CNtsCodeInput::SetImgHistoryE(LPCTSTR propVal)
{
	SetProperty(m_pdID[IIx_ImgHistoryE], VT_BSTR, propVal);
}

short CNtsCodeInput::GetMaxHistoryCount()
{
	short result;
	GetProperty(m_pdID[IIx_MaxHistoryCount], VT_I2, (void*)&result);
	return result;
}

void CNtsCodeInput::SetMaxHistoryCount(short propVal)
{
	SetProperty(m_pdID[IIx_MaxHistoryCount], VT_I2, propVal);
}

short CNtsCodeInput::GetMaxLength()
{
	short result;
	GetProperty(m_pdID[IIx_MaxLength], VT_I2, (void*)&result);
	return result;
}

void CNtsCodeInput::SetMaxLength(short propVal)
{
	SetProperty(m_pdID[IIx_MaxLength], VT_I2, propVal);
}

short CNtsCodeInput::GetMinLength()
{
	short result;
	GetProperty(m_pdID[IIx_MinLength], VT_I2, (void*)&result);
	return result;
}

void CNtsCodeInput::SetMinLength(short propVal)
{
	SetProperty(m_pdID[IIx_MinLength], VT_I2, propVal);
}

BOOL CNtsCodeInput::GetMoveTab()
{
	BOOL result;
	GetProperty(m_pdID[IIx_MoveTab], VT_BOOL, (void*)&result);
	return result;
}

void CNtsCodeInput::SetMoveTab(BOOL propVal)
{
	SetProperty(m_pdID[IIx_MoveTab], VT_BOOL, propVal);
}

CString CNtsCodeInput::GetOutCtrlName()
{
	CString result;
	GetProperty(m_pdID[IIx_OutCtrlName], VT_BSTR, (void*)&result);
	return result;
}

void CNtsCodeInput::SetOutCtrlName(LPCTSTR propVal)
{
	SetProperty(m_pdID[IIx_OutCtrlName], VT_BSTR, propVal);
}

CString CNtsCodeInput::GetRootPath()
{
	CString result;
	GetProperty(m_pdID[IIx_RootPath], VT_BSTR, (void*)&result);
	return result;
}

void CNtsCodeInput::SetRootPath(LPCTSTR propVal)
{
	SetProperty(m_pdID[IIx_RootPath], VT_BSTR, propVal);
}

CString CNtsCodeInput::GetTrCode()
{
	CString result;
	GetProperty(m_pdID[IIx_TrCode], VT_BSTR, (void*)&result);
	return result;
}

void CNtsCodeInput::SetTrCode(LPCTSTR propVal)
{
	SetProperty(m_pdID[IIx_TrCode], VT_BSTR, propVal);
}

short CNtsCodeInput::GetUpperCase()
{
	short result;
	GetProperty(m_pdID[IIx_UpperCase], VT_I2, (void*)&result);
	return result;
}

void CNtsCodeInput::SetUpperCase(short propVal)
{
	SetProperty(m_pdID[IIx_UpperCase], VT_I2, propVal);
}

BOOL CNtsCodeInput::GetWhenEqual()
{
	BOOL result;
	GetProperty(m_pdID[IIx_WhenEqual], VT_BOOL, (void*)&result);
	return result;
}

void CNtsCodeInput::SetWhenEqual(BOOL propVal)
{
	SetProperty(m_pdID[IIx_WhenEqual], VT_BOOL, propVal);
}

CString CNtsCodeInput::GetSGlobalSharedList()
{
	CString result;
	GetProperty(m_pdID[IIx_SGlobalSharedList], VT_BSTR, (void*)&result);
	return result;
}

void CNtsCodeInput::SetSGlobalSharedList(LPCTSTR propVal)
{
	SetProperty(m_pdID[IIx_SGlobalSharedList], VT_BSTR, propVal);
}

CString CNtsCodeInput::GetSLocalSharedList()
{
	CString result;
	GetProperty(m_pdID[IIx_SLocalSharedList], VT_BSTR, (void*)&result);
	return result;
}

void CNtsCodeInput::SetSLocalSharedList(LPCTSTR propVal)
{
	SetProperty(m_pdID[IIx_SLocalSharedList], VT_BSTR, propVal);
}

short CNtsCodeInput::GetUserBackColor()
{
	short result;
	GetProperty(m_pdID[IIx_UserBackColor], VT_I2, (void*)&result);
	return result;
}

void CNtsCodeInput::SetUserBackColor(short propVal)
{
	SetProperty(m_pdID[IIx_UserBackColor], VT_I2, propVal);
}

short CNtsCodeInput::GetUserForeColor()
{
	short result;
	GetProperty(m_pdID[IIx_UserForeColor], VT_I2, (void*)&result);
	return result;
}

void CNtsCodeInput::SetUserForeColor(short propVal)
{
	SetProperty(m_pdID[IIx_UserForeColor], VT_I2, propVal);
}

long CNtsCodeInput::GetCtlAddress()
{
	long result;
	GetProperty(m_pdID[IIx_CtlAddress], VT_I4, (void*)&result);
	return result;
}

void CNtsCodeInput::SetCtlAddress(long propVal)
{
	SetProperty(m_pdID[IIx_CtlAddress], VT_I4, propVal);
}

BOOL CNtsCodeInput::GetUseColorTable()
{
	BOOL result;
	GetProperty(m_pdID[IIx_UseColorTable], VT_BOOL, (void*)&result);
	return result;
}

void CNtsCodeInput::SetUseColorTable(BOOL propVal)
{
	SetProperty(m_pdID[IIx_UseColorTable], VT_BOOL, propVal);
}

BOOL CNtsCodeInput::GetInputRequire()
{
	BOOL result;
	GetProperty(m_pdID[IIx_InputRequire], VT_BOOL, (void*)&result);
	return result;
}

void CNtsCodeInput::SetInputRequire(BOOL propVal)
{
	SetProperty(m_pdID[IIx_InputRequire], VT_BOOL, propVal);
}

BOOL CNtsCodeInput::GetEnabled()
{
	BOOL result;
	GetProperty(m_pdID[IIx_Enabled], VT_BOOL, (void*)&result);
	return result;
}

void CNtsCodeInput::SetEnabled(BOOL propVal)
{
	SetProperty(m_pdID[IIx_Enabled], VT_BOOL, propVal);
}

BOOL CNtsCodeInput::GetHide()
{
	BOOL result;
	GetProperty(m_pdID[IIx_Hide], VT_BOOL, (void*)&result);
	return result;
}

void CNtsCodeInput::SetHide(BOOL propVal)
{
	SetProperty(m_pdID[IIx_Hide], VT_BOOL, propVal);
}

CString CNtsCodeInput::GetComment()
{
	CString result;
	GetProperty(m_pdID[IIx_Comment], VT_BSTR, (void*)&result);
	return result;
}

void CNtsCodeInput::SetComment(LPCTSTR propVal)
{
	SetProperty(m_pdID[IIx_Comment], VT_BSTR, propVal);
}

CString CNtsCodeInput::GetControlID()
{
	CString result;
	GetProperty(m_pdID[IIx_ControlID], VT_BSTR, (void*)&result);
	return result;
}

void CNtsCodeInput::SetControlID(LPCTSTR propVal)
{
	SetProperty(m_pdID[IIx_ControlID], VT_BSTR, propVal);
}

OLE_HANDLE CNtsCodeInput::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(m_pdID[IIx_HWnd], VT_I4, (void*)&result);
	return result;
}

void CNtsCodeInput::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(m_pdID[IIx_HWnd], VT_I4, propVal);
}

long CNtsCodeInput::GetTabKeyStop()
{
	long result;
	GetProperty(m_pdID[IIx_TabKeyStop], VT_I4, (void*)&result);
	return result;
}

void CNtsCodeInput::SetTabKeyStop(long propVal)
{
	SetProperty(m_pdID[IIx_TabKeyStop], VT_I4, propVal);
}

long CNtsCodeInput::GetUseDefaultFont()
{
	long result;
	GetProperty(m_pdID[IIx_UseDefaultFont], VT_I4, (void*)&result);
	return result;
}

void CNtsCodeInput::SetUseDefaultFont(long propVal)
{
	SetProperty(m_pdID[IIx_UseDefaultFont], VT_I4, propVal);
}

BOOL CNtsCodeInput::GetUseExtCode()
{
	BOOL result;
	GetProperty(m_pdID[IIx_UseExtCode], VT_BOOL, (void*)&result);
	return result;
}

void CNtsCodeInput::SetUseExtCode(BOOL propVal)
{
	SetProperty(m_pdID[IIx_UseExtCode], VT_BOOL, propVal);
}

CString CNtsCodeInput::GetExtCodeProp()
{
	CString result;
	GetProperty(m_pdID[IIx_ExtCodeProp], VT_BSTR, (void*)&result);
	return result;
}

void CNtsCodeInput::SetExtCodeProp(LPCTSTR propVal)
{
	SetProperty(m_pdID[IIx_ExtCodeProp], VT_BSTR, propVal);
}

CString CNtsCodeInput::GetExtCodeName()
{
	CString result;
	GetProperty(m_pdID[IIx_ExtCodeName], VT_BSTR, (void*)&result);
	return result;
}

void CNtsCodeInput::SetExtCodeName(LPCTSTR propVal)
{
	SetProperty(m_pdID[IIx_ExtCodeName], VT_BSTR, propVal);
}

long CNtsCodeInput::GetCtlPtr()
{
	long result;
	GetProperty(m_pdID[IIx_CtlPtr], VT_I4, (void*)&result);
	return result;
}

void CNtsCodeInput::SetCtlPtr(long propVal)
{
	SetProperty(m_pdID[IIx_CtlPtr], VT_I4, propVal);
}

CString CNtsCodeInput::GetColName1()
{
	CString result;
	GetProperty(m_pdID[IIx_ColName1], VT_BSTR, (void*)&result);
	return result;
}

void CNtsCodeInput::SetColName1(LPCTSTR propVal)
{
	SetProperty(m_pdID[IIx_ColName1], VT_BSTR, propVal);
}

CString CNtsCodeInput::GetColName2()
{
	CString result;
	GetProperty(m_pdID[IIx_ColName2], VT_BSTR, (void*)&result);
	return result;
}

void CNtsCodeInput::SetColName2(LPCTSTR propVal)
{
	SetProperty(m_pdID[IIx_ColName2], VT_BSTR, propVal);
}

BOOL CNtsCodeInput::GetUseExtOption()
{
	BOOL result;
	GetProperty(m_pdID[IIx_UseExtOption], VT_BOOL, (void*)&result);
	return result;
}

void CNtsCodeInput::SetUseExtOption(BOOL propVal)
{
	SetProperty(m_pdID[IIx_UseExtOption], VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CNtsCodeInput operations

CString CNtsCodeInput::GetDataText()
{
	CString result;
	InvokeHelper(m_pdID[IIx_GetDataText], DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CNtsCodeInput::SetDataText(LPCTSTR szText)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_SetDataText], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 szText);
}

BOOL CNtsCodeInput::SetAllProperties2(long dwData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(m_pdID[IIx_SetAllProperties2], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		dwData);
	return result;
}

void CNtsCodeInput::SetBaseDesk(long lKey)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(m_pdID[IIx_SetBaseDesk], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lKey);
}

long CNtsCodeInput::GetBase(LPCTSTR szKey)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_GetBase], DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szKey);
	return result;
}

void CNtsCodeInput::SetCodeKey(LPCTSTR szKey)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_SetCodeKey], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 szKey);
}

void CNtsCodeInput::SetCurSel(short index)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(m_pdID[IIx_SetCurSel], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 index);
}

CString CNtsCodeInput::GetMaxHangSaGa()
{
	CString result;
	InvokeHelper(m_pdID[IIx_GetMaxHangSaGa], DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

short CNtsCodeInput::GetGubunFromCode(LPCTSTR szCode)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_GetGubunFromCode], DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		szCode);
	return result;
}

BOOL CNtsCodeInput::GetHistoryInfo(short nIndex, BSTR* bstrName, BSTR* bstrCode)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_PBSTR VTS_PBSTR;
	InvokeHelper(m_pdID[IIx_GetHistoryInfo], DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nIndex, bstrName, bstrCode);
	return result;
}

CString CNtsCodeInput::GetDataTextRaw()
{
	CString result;
	InvokeHelper(m_pdID[IIx_GetDataTextRaw], DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CNtsCodeInput::MakeSaveShortKey(LPCTSTR szFileName, long nFlag)
{
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(m_pdID[IIx_MakeSaveShortKey], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 szFileName, nFlag);
}

CString CNtsCodeInput::GetDataFromPopupList(long nRow, long nColumn)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(m_pdID[IIx_GetDataFromPopupList], DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		nRow, nColumn);
	return result;
}

long CNtsCodeInput::OnReceiveFetchData(long pData)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(m_pdID[IIx_OnReceiveFetchData], DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pData);
	return result;
}

void CNtsCodeInput::SetRscMng(long lKey)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(m_pdID[IIx_SetRscMng], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lKey);
}

void CNtsCodeInput::SetDataText2(LPCTSTR szCode)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_SetDataText2], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 szCode);
}

void CNtsCodeInput::SetBasePath(LPCTSTR szPath)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(m_pdID[IIx_SetBasePath], DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 szPath);
}

long CNtsCodeInput::GetAllProperties2(long lpData)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(m_pdID[IIx_GetAllProperties2], DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lpData);
	return result;
}

long CNtsCodeInput::GetBasePropIf()
{
	long result;
	InvokeHelper(m_pdID[IIx_GetBasePropIf], DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

CString CNtsCodeInput::GetHistoryAll()
{
	CString result;
	InvokeHelper(m_pdID[IIx_GetHistoryAll], DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

OLECHAR *CNtsCodeInput::m_osInterfaceName[] = {
	L"BackColor",
	L"CodeChoice",
	L"CodeCtrlName",
	L"CodeDrop",
	L"CodeHistory",
	L"CodeTable",
	L"CustomFont",
	L"FireOnCharAtPos",
	L"ForeColor",
	L"ImgDropD",
	L"ImgDropE",
	L"ImgHelpD",
	L"ImgHelpE",
	L"ImgHistoryD",
	L"ImgHistoryE",
	L"MaxHistoryCount",
	L"MaxLength",
	L"MinLength",
	L"MoveTab",
	L"OutCtrlName",
	L"RootPath",
	L"TrCode",
	L"UpperCase",
	L"WhenEqual",
	L"SGlobalSharedList",
	L"SLocalSharedList",
	L"UserBackColor",
	L"UserForeColor",
	L"CtlAddress",
	L"UseColorTable",
	L"InputRequire",
	L"Enabled",
	L"Hide",
	L"Comment",
	L"ControlID",
	L"HWnd",
	L"TabKeyStop",
	L"UseDefaultFont",
	L"UseExtCode",
	L"ExtCodeProp",
	L"ExtCodeName",
	L"CtlPtr",
	L"ColName1",
	L"ColName2",
	L"UseExtOption",
	L"GetDataText",
	L"SetDataText",
	L"SetAllProperties2",
	L"SetBaseDesk",
	L"GetBase",
	L"SetCodeKey",
	L"SetCurSel",
	L"GetMaxHangSaGa",
	L"GetGubunFromCode",
	L"GetHistoryInfo",
	L"GetDataTextRaw",
	L"MakeSaveShortKey",
	L"GetDataFromPopupList",
	L"OnReceiveFetchData",
	L"SetRscMng",
	L"SetDataText2",
	L"SetBasePath",
	L"GetAllProperties2",
	L"GetBasePropIf",
	L"GetHistoryAll"
};

BOOL CNtsCodeInput::Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext)
{
	m_pdID = NULL;

	BOOL bResult = CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID);
	if( bResult)
	{
		IUnknown* pUnk = GetControlUnknown();
		if( pUnk)
		{
			IDispatch *pDisp = NULL;
			HRESULT hr = pUnk->QueryInterface( IID_IDispatch, (void**)&pDisp);
			if( !FAILED(hr))
			{
				pUnk->Release();				
				int i, nCount = sizeof( m_osInterfaceName) / sizeof( OLECHAR *);
				m_pdID = new DISPID[ nCount];
				for( i = 0; i < nCount; i++)
					pDisp->GetIDsOfNames( IID_NULL, &m_osInterfaceName[ i], 1, LOCALE_USER_DEFAULT, m_pdID + i);
			}
		}		
	}
	
	return bResult;
}


BOOL CNtsCodeInput::Create(LPCTSTR lpszWindowName, DWORD dwStyle,
	const RECT& rect, CWnd* pParentWnd, UINT nID,
	CFile* pPersist, BOOL bStorage,	BSTR bstrLicKey)
{
	m_pdID = NULL;

	BOOL bResult = CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
	pPersist, bStorage, bstrLicKey);

	if( bResult)
	{
		IUnknown* pUnk = GetControlUnknown();
		if( pUnk)
		{
			IDispatch *pDisp = NULL;
			HRESULT hr = pUnk->QueryInterface( IID_IDispatch, (void**)&pDisp);
			if( !FAILED(hr))
			{
				pUnk->Release();				
				int i, nCount = sizeof( m_osInterfaceName) / sizeof( OLECHAR *);
				m_pdID = new DISPID[ nCount];
				for( i = 0; i < nCount; i++)
					pDisp->GetIDsOfNames( IID_NULL, &m_osInterfaceName[ i], 1, LOCALE_USER_DEFAULT, m_pdID + i);
			}
		}		
	}

	return bResult;
}
