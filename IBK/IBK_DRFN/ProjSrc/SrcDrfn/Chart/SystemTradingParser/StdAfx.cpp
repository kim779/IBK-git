// stdafx.cpp : source file that includes just the standard includes
//	SystemTradingParser.pch will be the pre-compiled header
//	stdafx.obj will contain the pre-compiled type information

#include "stdafx.h"


// 언어편집기 main.cpp, userfunction.cpp 보안점검에서 삭제요청받아 소스 내부로 내용을 옮김 >>
BOOL ExtractLine(char * pszSrc, CStringArray & strLineArray)
{
	if(!pszSrc) 
		return FALSE;

	int nStartPos = 0, nFindPos;
	CString strSeparator= "\r\n";
	CString  strSrc = pszSrc;
	int nSeparatorLen = strSeparator.GetLength();
	while((nFindPos =strSrc.Find(strSeparator, nStartPos)) >= 0)
	{
		int nLen = nFindPos - nStartPos;
		CString strLine = strSrc.Mid(nStartPos, nLen);
		nStartPos= nFindPos + nSeparatorLen;
		strLineArray.Add(strLine);
	}

	return TRUE;
}

char * g_szMainCPPSrc = "#include \"stdafx.h\"\r\n"
"#include \"../../../../Contents/src/Include_ST/STOperatorApp.h\"\r\n"
"#include \"../../../../Contents/src/Include_ST/STActor.h\"\r\n"
"#include \"../../../../Contents/src/Include_ST/ScriptDef.h\"\r\n"
"#ifdef _DEBUG\r\n"
"#define new DEBUG_NEW\r\n"
"#undef THIS_FILE\r\n"
"static char THIS_FILE[] = __FILE__;\r\n"
"#endif\r\n"
"void STmain(CSTActor* pSTActor);\r\n"
"CSTOperatorApp theApp;\r\n"
"char* g_szSrc[] = {	\r\n"
"// INSERT_PARSED_HERE SOURCE_SCRIPT\r\n"
"	\"#\"};\r\n"
"char* g_szInputs[] = {	\r\n"
"// INSERT_PARSED_HERE SOURCE_INPUT\r\n"
"	\"#\"};\r\n"
"// INSERT_PARSED_HERE USER_INFOMATION\r\n"
"LPCTSTR WINAPI fnGetUserID()\r\n"
"{\r\n"
"	return g_szUserID;\r\n"
"}\r\n"
"LPCTSTR WINAPI fnGetPassword()\r\n"
"{\r\n"
"	return g_szPassword;\r\n"
"}\r\n"
"long WINAPI fnGetExpiredDate()\r\n"
"{\r\n"
"	return g_lExpiredDate;\r\n"
"}\r\n"
"long WINAPI fnGetSourceType()\r\n"
"{\r\n"
"	return g_lSourceType;\r\n"
"}\r\n"
"long WINAPI fnGetUseUserID()\r\n"
"{\r\n"
"	return g_bUseUserID;\r\n"
"}\r\n"
"long WINAPI fnGetUsePassword()\r\n"
"{\r\n"
"	return g_bUsePassword;\r\n"
"}\r\n"
"long WINAPI fnGetUseExpriedDate()\r\n"
"{\r\n"
"	return g_bUseExpiredDate;\r\n"
"}\r\n"
"long WINAPI fnLoadST(HWND hParent, HWND hSocket, CDBMgr* pDBMgr, long lKey, LPCTSTR lpSTName, int nSTPos, LPCTSTR lpAdditionalOption)\r\n"
"{\r\n"
"	AFX_MANAGE_STATE(AfxGetStaticModuleState());\r\n"
"	return theApp.LoadST(STmain\r\n"
"							, hParent\r\n"
"							, hSocket\r\n"
"							, pDBMgr\r\n"
"							, lKey\r\n"
"							, lpSTName\r\n"
"							, nSTPos\r\n"
"							, lpAdditionalOption\r\n"
"							, g_szInputs\r\n"
"							, g_szUserID\r\n"
"							, g_szPassword\r\n"
"							, g_lExpiredDate\r\n"
"							, g_lSourceType\r\n"
"							, g_bUseUserID\r\n"
"							, g_bUsePassword\r\n"
"							, g_bUseExpiredDate	);\r\n"
"}\r\n"
"long WINAPI fnUnloadST(long lSTActor)\r\n"
"{\r\n"
"	AFX_MANAGE_STATE(AfxGetStaticModuleState());\r\n"
"	return theApp.UnloadST(lSTActor);\r\n"
"}\r\n"
"BOOL WINAPI fnExecuteST(long lSTActor,LPCTSTR lpInputData)\r\n"
"{\r\n"
"	return theApp.ExecuteST(lSTActor,lpInputData);\r\n"
"}\r\n"
"BOOL WINAPI fnStopST(long lSTActor)\r\n"
"{\r\n"
"	return theApp.StopST(lSTActor);\r\n"
"}\r\n"
"BOOL WINAPI fnPauseST(long lSTActor)\r\n"
"{\r\n"
"	return theApp.PauseST(lSTActor);\r\n"
"}\r\n"
"BOOL WINAPI fnUpdateST(long lSTActor,long lPos, BOOL bIsUpdateData)\r\n"
"{\r\n"
"	return theApp.UpdateST(lSTActor,lPos,bIsUpdateData);\r\n"
"}\r\n"
"BOOL WINAPI fnCommandST(long lSTActor, LPCTSTR lpCommand, LPCTSTR lpOption)\r\n"
"{\r\n"
"	return theApp.CommandST(lSTActor,lpCommand,lpOption);\r\n"
"}\r\n"
"// Input From Outer\r\n"
"double WINAPI fnSubInFuncST(long lSTActor,long lIndex, BOOL bTemp0, BOOL bTemp1,BOOL bTemp2 , BOOL bTemp3 ,BOOL bTemp4 , BOOL bTemp5 ,BOOL bTemp6 , BOOL bTemp7 ,BOOL bTemp8 , BOOL bTemp9 )\r\n"
"{\r\n"
"	return 0;\r\n"
"}\r\n"
"\r\n"
"CString WINAPI fnGetSrc(long lIndex, LPCTSTR lpUserIDIn, LPCTSTR lpPasswordIn, long lTodayDateIn)\r\n"
"{\r\n"
"	CString strMyPassword;\r\n"
"	CString strUserID;\r\n"
"	if(g_szUserID)\r\n"
"	{\r\n"
"		strUserID = g_szUserID;\r\n"
"	}\r\n"
"	if(g_szPassword)\r\n"
"	{\r\n"
"		strMyPassword = g_szPassword;\r\n"
"	}\r\n"
"	if(	(strUserID.IsEmpty()||strUserID==lpUserIDIn)\r\n"
"		&&(strMyPassword.IsEmpty()||strMyPassword==lpPasswordIn)\r\n"
"		&&!g_lExpiredDate||lTodayDateIn<=g_lExpiredDate)\r\n"
"	{\r\n"
"		return g_szSrc[lIndex];\r\n"
"	}\r\n"
"	return \"\";	\r\n"
"}\r\n"
"CString WINAPI fnGetInputs(long lIndex)\r\n"
"{\r\n"
"	return g_szInputs[lIndex];\r\n"
"}\r\n"
"void STmain(CSTActor* pSTActor)\r\n"
"{\r\n"
"// INSERT_PARSED_HERE MAIN_FUNCTION_IMPLEMENT\r\n"
"}\r\n";


char * g_szUserFuncSrc = "#include \"stdafx.h\"\r\n"
"#include \"../../../../Contents/src/Include_ST/STOperatorApp.h\"\r\n"
"#include \"../../../../Contents/src/Include_ST/STActor.h\"\r\n"
"#include \"../../../../Contents/src/Include_ST/ScriptDef.h\"\r\n"
"#ifdef _DEBUG\r\n"
"#define new DEBUG_NEW\r\n"
"#undef THIS_FILE\r\n"
"static char THIS_FILE[] = __FILE__;\r\n"
"#endif\r\n"
"// INSERT_PARSED_HERE FUNCTION_DECLARE\r\n"
"CSTOperatorApp theApp;\r\n"
"char* g_szSrc[] = {	\r\n"
"// INSERT_PARSED_HERE SOURCE_SCRIPT\r\n"
"	\"#\"};\r\n"
"char* g_szInputs[] = {	\r\n"
"// INSERT_PARSED_HERE SOURCE_INPUT\r\n"
"	\"#\"};\r\n"
"// INSERT_PARSED_HERE USER_INFOMATION\r\n"
"LPCTSTR WINAPI fnGetUserID()\r\n"
"{\r\n"
"	return g_szUserID;\r\n"
"}\r\n"
"LPCTSTR WINAPI fnGetPassword()\r\n"
"{\r\n"
"	return g_szPassword;\r\n"
"}\r\n"
"\r\n"
"long WINAPI fnGetExpiredDate()\r\n"
"{\r\n"
"	return g_lExpiredDate;\r\n"
"}\r\n"
"long WINAPI fnGetSourceType()\r\n"
"{\r\n"
"	return g_lSourceType;\r\n"
"}\r\n"
"\r\n"
"long WINAPI fnGetUseUserID()\r\n"
"{\r\n"
"	return g_bUseUserID;\r\n"
"}\r\n"
"long WINAPI fnGetUsePassword()\r\n"
"{\r\n"
"	return g_bUsePassword;\r\n"
"}\r\n"
"\r\n"
"long WINAPI fnGetUseExpriedDate()\r\n"
"{\r\n"
"	return g_bUseExpiredDate;\r\n"
"}\r\n"
"\r\n"
"long WINAPI fnLoadST(HWND hParent, HWND hSocket, CDBMgr* pDBMgr, long lKey, LPCTSTR lpSTName, int nSTPos, LPCTSTR lpAdditionalOption)\r\n"
"{\r\n"
"	return 0;\r\n"
"}\r\n"
"\r\n"
"long WINAPI fnUnloadST(long lSTActor)\r\n"
"{\r\n"
"	return 0;\r\n"
"}\r\n"
"\r\n"
"BOOL WINAPI fnExecuteST(long lSTActor,LPCTSTR lpInputData)\r\n"
"{\r\n"
"	return 0;\r\n"
"}\r\n"
"\r\n"
"BOOL WINAPI fnStopST(long lSTActor)\r\n"
"{\r\n"
"	return 0;\r\n"
"}\r\n"
"\r\n"
"BOOL WINAPI fnPauseST(long lSTActor)\r\n"
"{\r\n"
"	return 0;\r\n"
"}\r\n"
"\r\n"
"BOOL WINAPI fnUpdateST(long lSTActor,long lPos, BOOL bIsUpdateData)\r\n"
"{\r\n"
"	return 0;\r\n"
"}\r\n"
"BOOL WINAPI fnCommandST(long lSTActor, LPCTSTR lpCommand, LPCTSTR lpOption)\r\n"
"{\r\n"
"	return 0;\r\n"
"}\r\n"
"// Input From Outer\r\n"
"double WINAPI fnSubInFuncST(long lSTActor,long lIndex, BOOL bTemp0, BOOL bTemp1,BOOL bTemp2 , BOOL bTemp3 ,BOOL bTemp4 , BOOL bTemp5 ,BOOL bTemp6 , BOOL bTemp7 ,BOOL bTemp8 , BOOL bTemp9 )\r\n"
"{\r\n"
"// INSERT_PARSED_HERE FUNCTION_INPUT\r\n"
"}\r\n"
"CString WINAPI fnGetSrc(long lIndex, LPCTSTR lpUserIDIn, LPCTSTR lpPasswordIn, long lTodayDateIn)\r\n"
"{\r\n"
"	CString strMyPassword;\r\n"
"	CString strUserID;\r\n"
"	if(g_szUserID)\r\n"
"	{\r\n"
"		strUserID = g_szUserID;\r\n"
"	}\r\n"
"	if(g_szPassword)\r\n"
"	{\r\n"
"		strMyPassword = g_szPassword;\r\n"
"	}\r\n"
"	if(	(strUserID.IsEmpty()||strUserID==lpUserIDIn)\r\n"
"		&&(strMyPassword.IsEmpty()||strMyPassword==lpPasswordIn)\r\n"
"		&&!g_lExpiredDate||lTodayDateIn<=g_lExpiredDate)\r\n"
"	{\r\n"
"		return g_szSrc[lIndex];\r\n"
"	}\r\n"
"	return \"\";	\r\n"
"}\r\n"
"CString WINAPI fnGetInputs(long lIndex)\r\n"
"{\r\n"
"	return g_szInputs[lIndex];\r\n"
"}\r\n"
"\r\n"
"// INSERT_PARSED_HERE USER_FUNCTION_IMPLEMENT\r\n";

// 언어편집기 main.cpp, userfunction.cpp 보안점검에서 삭제요청받아 소스 내부로 내용을 옮김 <<