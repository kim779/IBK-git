// misc.cpp: implementation of the CMapV class.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "Wizard.h"
#include "misc.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif


//////////////////////////////////////////////////////////////////////
// CComboN Class
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CComboN::CComboN()
{

}

CComboN::~CComboN()
{

}

//////////////////////////////////////////////////////////////////////
// CCaret Class
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CCaret::CCaret()
{

}

CCaret::~CCaret()
{

}


//////////////////////////////////////////////////////////////////////
// CCode Class
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CCode::CCode()
{
	m_self = true;
}

CCode::~CCode()
{
	m_codes.RemoveAll();
}


//////////////////////////////////////////////////////////////////////
// CdataSet Class
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////


CdataSet::CdataSet()
{
	m_on = false;
	for (int ii = 0; ii < maxSYM; ii++)
		m_data[ii] = NULL;
}

CdataSet::~CdataSet()
{
}

bool CdataSet::IsOn()
{
	return m_on;
}

void CdataSet::SetOn(bool on)
{
	m_on = on;
	if (!m_on)
	{
		for (int ii = 0; ii < maxSYM; ii++)
		{
			if (m_data[ii])
				m_data[ii] = NULL;
		}
	}
}

bool CdataSet::Lookup(int index, CString& data)
{
	if (index >= 0 && index < maxSYM && m_data[index] != NULL)
	{
		data = (char *)m_data[index];
		return true;
	}
	return false;
}

void CdataSet::SetAt(int index, char* data)
{
	if (index >= 0 && index < maxSYM && data)
		m_data[index] = (DWORD)data;
}

DWORD CdataSet::GetData()
{
	return (DWORD)m_data;
}
